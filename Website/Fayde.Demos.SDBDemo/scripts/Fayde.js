var Fayde;
(function (Fayde) {
    Fayde.IsCanvasEnabled = true;
})(Fayde || (Fayde = {}));

(function(w,D){"object"===typeof exports?module.exports=D(global):"function"===typeof define&&define.amd?define([],function(){return D(w)}):D(w)})(this,function(w){function D(a){return o=a}function G(){return o="undefined"!==typeof Float32Array?Float32Array:Array}var E={};(function(){if("undefined"!=typeof Float32Array){var a=new Float32Array(1),b=new Int32Array(a.buffer);E.invsqrt=function(c){a[0]=c;b[0]=1597463007-(b[0]>>1);var d=a[0];return d*(1.5-0.5*c*d*d)}}else E.invsqrt=function(a){return 1/
Math.sqrt(a)}})();var o=null;G();var r={create:function(a){var b=new o(3);a?(b[0]=a[0],b[1]=a[1],b[2]=a[2]):b[0]=b[1]=b[2]=0;return b},createFrom:function(a,b,c){var d=new o(3);d[0]=a;d[1]=b;d[2]=c;return d},set:function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];return b},equal:function(a,b){return a===b||1.0E-6>Math.abs(a[0]-b[0])&&1.0E-6>Math.abs(a[1]-b[1])&&1.0E-6>Math.abs(a[2]-b[2])},add:function(a,b,c){if(!c||a===c)return a[0]+=b[0],a[1]+=b[1],a[2]+=b[2],a;c[0]=a[0]+b[0];c[1]=a[1]+b[1];c[2]=a[2]+b[2];
return c},subtract:function(a,b,c){if(!c||a===c)return a[0]-=b[0],a[1]-=b[1],a[2]-=b[2],a;c[0]=a[0]-b[0];c[1]=a[1]-b[1];c[2]=a[2]-b[2];return c},multiply:function(a,b,c){if(!c||a===c)return a[0]*=b[0],a[1]*=b[1],a[2]*=b[2],a;c[0]=a[0]*b[0];c[1]=a[1]*b[1];c[2]=a[2]*b[2];return c},negate:function(a,b){b||(b=a);b[0]=-a[0];b[1]=-a[1];b[2]=-a[2];return b},scale:function(a,b,c){if(!c||a===c)return a[0]*=b,a[1]*=b,a[2]*=b,a;c[0]=a[0]*b;c[1]=a[1]*b;c[2]=a[2]*b;return c},normalize:function(a,b){b||(b=a);var c=
a[0],d=a[1],e=a[2],g=Math.sqrt(c*c+d*d+e*e);if(!g)return b[0]=0,b[1]=0,b[2]=0,b;if(1===g)return b[0]=c,b[1]=d,b[2]=e,b;g=1/g;b[0]=c*g;b[1]=d*g;b[2]=e*g;return b},cross:function(a,b,c){c||(c=a);var d=a[0],e=a[1],a=a[2],g=b[0],f=b[1],b=b[2];c[0]=e*b-a*f;c[1]=a*g-d*b;c[2]=d*f-e*g;return c},length:function(a){var b=a[0],c=a[1],a=a[2];return Math.sqrt(b*b+c*c+a*a)},squaredLength:function(a){var b=a[0],c=a[1],a=a[2];return b*b+c*c+a*a},dot:function(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]},direction:function(a,
b,c){c||(c=a);var d=a[0]-b[0],e=a[1]-b[1],a=a[2]-b[2],b=Math.sqrt(d*d+e*e+a*a);if(!b)return c[0]=0,c[1]=0,c[2]=0,c;b=1/b;c[0]=d*b;c[1]=e*b;c[2]=a*b;return c},lerp:function(a,b,c,d){d||(d=a);d[0]=a[0]+c*(b[0]-a[0]);d[1]=a[1]+c*(b[1]-a[1]);d[2]=a[2]+c*(b[2]-a[2]);return d},dist:function(a,b){var c=b[0]-a[0],d=b[1]-a[1],e=b[2]-a[2];return Math.sqrt(c*c+d*d+e*e)}},H=null,y=new o(4);r.unproject=function(a,b,c,d,e){e||(e=a);H||(H=x.create());var g=H;y[0]=2*(a[0]-d[0])/d[2]-1;y[1]=2*(a[1]-d[1])/d[3]-1;y[2]=
2*a[2]-1;y[3]=1;x.multiply(c,b,g);if(!x.inverse(g))return null;x.multiplyVec4(g,y);if(0===y[3])return null;e[0]=y[0]/y[3];e[1]=y[1]/y[3];e[2]=y[2]/y[3];return e};var L=r.createFrom(1,0,0),M=r.createFrom(0,1,0),N=r.createFrom(0,0,1),z=r.create();r.rotationTo=function(a,b,c){c||(c=k.create());var d=r.dot(a,b);if(1<=d)k.set(O,c);else if(-0.999999>d)r.cross(L,a,z),1.0E-6>r.length(z)&&r.cross(M,a,z),1.0E-6>r.length(z)&&r.cross(N,a,z),r.normalize(z),k.fromAngleAxis(Math.PI,z,c);else{var d=Math.sqrt(2*(1+
d)),e=1/d;r.cross(a,b,z);c[0]=z[0]*e;c[1]=z[1]*e;c[2]=z[2]*e;c[3]=0.5*d;k.normalize(c)}1<c[3]?c[3]=1:-1>c[3]&&(c[3]=-1);return c};r.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+"]"};var A={create:function(a){var b=new o(9);a?(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3],b[4]=a[4],b[5]=a[5],b[6]=a[6],b[7]=a[7],b[8]=a[8]):b[0]=b[1]=b[2]=b[3]=b[4]=b[5]=b[6]=b[7]=b[8]=0;return b},createFrom:function(a,b,c,d,e,g,f,h,j){var i=new o(9);i[0]=a;i[1]=b;i[2]=c;i[3]=d;i[4]=e;i[5]=g;i[6]=f;i[7]=h;i[8]=j;return i},
determinant:function(a){var b=a[3],c=a[4],d=a[5],e=a[6],g=a[7],f=a[8];return a[0]*(f*c-d*g)+a[1]*(-f*b+d*e)+a[2]*(g*b-c*e)},inverse:function(a,b){var c=a[0],d=a[1],e=a[2],g=a[3],f=a[4],h=a[5],j=a[6],i=a[7],m=a[8],l=m*f-h*i,C=-m*g+h*j,q=i*g-f*j,n=c*l+d*C+e*q;if(!n)return null;n=1/n;b||(b=A.create());b[0]=l*n;b[1]=(-m*d+e*i)*n;b[2]=(h*d-e*f)*n;b[3]=C*n;b[4]=(m*c-e*j)*n;b[5]=(-h*c+e*g)*n;b[6]=q*n;b[7]=(-i*c+d*j)*n;b[8]=(f*c-d*g)*n;return b},multiply:function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],
f=a[3],h=a[4],j=a[5],i=a[6],m=a[7],a=a[8],l=b[0],C=b[1],q=b[2],n=b[3],k=b[4],p=b[5],o=b[6],s=b[7],b=b[8];c[0]=l*d+C*f+q*i;c[1]=l*e+C*h+q*m;c[2]=l*g+C*j+q*a;c[3]=n*d+k*f+p*i;c[4]=n*e+k*h+p*m;c[5]=n*g+k*j+p*a;c[6]=o*d+s*f+b*i;c[7]=o*e+s*h+b*m;c[8]=o*g+s*j+b*a;return c},multiplyVec2:function(a,b,c){c||(c=b);var d=b[0],b=b[1];c[0]=d*a[0]+b*a[3]+a[6];c[1]=d*a[1]+b*a[4]+a[7];return c},multiplyVec3:function(a,b,c){c||(c=b);var d=b[0],e=b[1],b=b[2];c[0]=d*a[0]+e*a[3]+b*a[6];c[1]=d*a[1]+e*a[4]+b*a[7];c[2]=
d*a[2]+e*a[5]+b*a[8];return c},set:function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];return b},equal:function(a,b){return a===b||1.0E-6>Math.abs(a[0]-b[0])&&1.0E-6>Math.abs(a[1]-b[1])&&1.0E-6>Math.abs(a[2]-b[2])&&1.0E-6>Math.abs(a[3]-b[3])&&1.0E-6>Math.abs(a[4]-b[4])&&1.0E-6>Math.abs(a[5]-b[5])&&1.0E-6>Math.abs(a[6]-b[6])&&1.0E-6>Math.abs(a[7]-b[7])&&1.0E-6>Math.abs(a[8]-b[8])},identity:function(a){a||(a=A.create());a[0]=1;a[1]=0;a[2]=0;a[3]=0;
a[4]=1;a[5]=0;a[6]=0;a[7]=0;a[8]=1;return a},transpose:function(a,b){if(!b||a===b){var c=a[1],d=a[2],e=a[5];a[1]=a[3];a[2]=a[6];a[3]=c;a[5]=a[7];a[6]=d;a[7]=e;return a}b[0]=a[0];b[1]=a[3];b[2]=a[6];b[3]=a[1];b[4]=a[4];b[5]=a[7];b[6]=a[2];b[7]=a[5];b[8]=a[8];return b},toMat4:function(a,b){b||(b=x.create());b[15]=1;b[14]=0;b[13]=0;b[12]=0;b[11]=0;b[10]=a[8];b[9]=a[7];b[8]=a[6];b[7]=0;b[6]=a[5];b[5]=a[4];b[4]=a[3];b[3]=0;b[2]=a[2];b[1]=a[1];b[0]=a[0];return b},str:function(a){return"["+a[0]+", "+a[1]+
", "+a[2]+", "+a[3]+", "+a[4]+", "+a[5]+", "+a[6]+", "+a[7]+", "+a[8]+"]"}},x={create:function(a){var b=new o(16);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3],b[4]=a[4],b[5]=a[5],b[6]=a[6],b[7]=a[7],b[8]=a[8],b[9]=a[9],b[10]=a[10],b[11]=a[11],b[12]=a[12],b[13]=a[13],b[14]=a[14],b[15]=a[15]);return b},createFrom:function(a,b,c,d,e,g,f,h,j,i,m,l,C,q,n,k){var p=new o(16);p[0]=a;p[1]=b;p[2]=c;p[3]=d;p[4]=e;p[5]=g;p[6]=f;p[7]=h;p[8]=j;p[9]=i;p[10]=m;p[11]=l;p[12]=C;p[13]=q;p[14]=n;p[15]=k;return p},set:function(a,
b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=a[12];b[13]=a[13];b[14]=a[14];b[15]=a[15];return b},equal:function(a,b){return a===b||1.0E-6>Math.abs(a[0]-b[0])&&1.0E-6>Math.abs(a[1]-b[1])&&1.0E-6>Math.abs(a[2]-b[2])&&1.0E-6>Math.abs(a[3]-b[3])&&1.0E-6>Math.abs(a[4]-b[4])&&1.0E-6>Math.abs(a[5]-b[5])&&1.0E-6>Math.abs(a[6]-b[6])&&1.0E-6>Math.abs(a[7]-b[7])&&1.0E-6>Math.abs(a[8]-b[8])&&1.0E-6>Math.abs(a[9]-b[9])&&1.0E-6>
Math.abs(a[10]-b[10])&&1.0E-6>Math.abs(a[11]-b[11])&&1.0E-6>Math.abs(a[12]-b[12])&&1.0E-6>Math.abs(a[13]-b[13])&&1.0E-6>Math.abs(a[14]-b[14])&&1.0E-6>Math.abs(a[15]-b[15])},identity:function(a){a||(a=x.create());a[0]=1;a[1]=0;a[2]=0;a[3]=0;a[4]=0;a[5]=1;a[6]=0;a[7]=0;a[8]=0;a[9]=0;a[10]=1;a[11]=0;a[12]=0;a[13]=0;a[14]=0;a[15]=1;return a},transpose:function(a,b){if(!b||a===b){var c=a[1],d=a[2],e=a[3],g=a[6],f=a[7],h=a[11];a[1]=a[4];a[2]=a[8];a[3]=a[12];a[4]=c;a[6]=a[9];a[7]=a[13];a[8]=d;a[9]=g;a[11]=
a[14];a[12]=e;a[13]=f;a[14]=h;return a}b[0]=a[0];b[1]=a[4];b[2]=a[8];b[3]=a[12];b[4]=a[1];b[5]=a[5];b[6]=a[9];b[7]=a[13];b[8]=a[2];b[9]=a[6];b[10]=a[10];b[11]=a[14];b[12]=a[3];b[13]=a[7];b[14]=a[11];b[15]=a[15];return b},determinant:function(a){var b=a[0],c=a[1],d=a[2],e=a[3],g=a[4],f=a[5],h=a[6],j=a[7],i=a[8],m=a[9],l=a[10],C=a[11],q=a[12],n=a[13],k=a[14],a=a[15];return q*m*h*e-i*n*h*e-q*f*l*e+g*n*l*e+i*f*k*e-g*m*k*e-q*m*d*j+i*n*d*j+q*c*l*j-b*n*l*j-i*c*k*j+b*m*k*j+q*f*d*C-g*n*d*C-q*c*h*C+b*n*h*C+
g*c*k*C-b*f*k*C-i*f*d*a+g*m*d*a+i*c*h*a-b*m*h*a-g*c*l*a+b*f*l*a},inverse:function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=a[3],f=a[4],h=a[5],j=a[6],i=a[7],m=a[8],l=a[9],k=a[10],q=a[11],n=a[12],o=a[13],p=a[14],r=a[15],s=c*h-d*f,v=c*j-e*f,t=c*i-g*f,u=d*j-e*h,w=d*i-g*h,x=e*i-g*j,y=m*o-l*n,z=m*p-k*n,F=m*r-q*n,A=l*p-k*o,D=l*r-q*o,E=k*r-q*p,B=s*E-v*D+t*A+u*F-w*z+x*y;if(!B)return null;B=1/B;b[0]=(h*E-j*D+i*A)*B;b[1]=(-d*E+e*D-g*A)*B;b[2]=(o*x-p*w+r*u)*B;b[3]=(-l*x+k*w-q*u)*B;b[4]=(-f*E+j*F-i*z)*B;b[5]=
(c*E-e*F+g*z)*B;b[6]=(-n*x+p*t-r*v)*B;b[7]=(m*x-k*t+q*v)*B;b[8]=(f*D-h*F+i*y)*B;b[9]=(-c*D+d*F-g*y)*B;b[10]=(n*w-o*t+r*s)*B;b[11]=(-m*w+l*t-q*s)*B;b[12]=(-f*A+h*z-j*y)*B;b[13]=(c*A-d*z+e*y)*B;b[14]=(-n*u+o*v-p*s)*B;b[15]=(m*u-l*v+k*s)*B;return b},toRotationMat:function(a,b){b||(b=x.create());b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=0;b[13]=0;b[14]=0;b[15]=1;return b},toMat3:function(a,b){b||(b=A.create());b[0]=
a[0];b[1]=a[1];b[2]=a[2];b[3]=a[4];b[4]=a[5];b[5]=a[6];b[6]=a[8];b[7]=a[9];b[8]=a[10];return b},toInverseMat3:function(a,b){var c=a[0],d=a[1],e=a[2],g=a[4],f=a[5],h=a[6],j=a[8],i=a[9],m=a[10],l=m*f-h*i,k=-m*g+h*j,q=i*g-f*j,n=c*l+d*k+e*q;if(!n)return null;n=1/n;b||(b=A.create());b[0]=l*n;b[1]=(-m*d+e*i)*n;b[2]=(h*d-e*f)*n;b[3]=k*n;b[4]=(m*c-e*j)*n;b[5]=(-h*c+e*g)*n;b[6]=q*n;b[7]=(-i*c+d*j)*n;b[8]=(f*c-d*g)*n;return b},multiply:function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],f=a[3],h=a[4],j=a[5],
i=a[6],m=a[7],l=a[8],k=a[9],q=a[10],n=a[11],o=a[12],p=a[13],r=a[14],a=a[15],s=b[0],v=b[1],t=b[2],u=b[3];c[0]=s*d+v*h+t*l+u*o;c[1]=s*e+v*j+t*k+u*p;c[2]=s*g+v*i+t*q+u*r;c[3]=s*f+v*m+t*n+u*a;s=b[4];v=b[5];t=b[6];u=b[7];c[4]=s*d+v*h+t*l+u*o;c[5]=s*e+v*j+t*k+u*p;c[6]=s*g+v*i+t*q+u*r;c[7]=s*f+v*m+t*n+u*a;s=b[8];v=b[9];t=b[10];u=b[11];c[8]=s*d+v*h+t*l+u*o;c[9]=s*e+v*j+t*k+u*p;c[10]=s*g+v*i+t*q+u*r;c[11]=s*f+v*m+t*n+u*a;s=b[12];v=b[13];t=b[14];u=b[15];c[12]=s*d+v*h+t*l+u*o;c[13]=s*e+v*j+t*k+u*p;c[14]=s*g+
v*i+t*q+u*r;c[15]=s*f+v*m+t*n+u*a;return c},multiplyVec3:function(a,b,c){c||(c=b);var d=b[0],e=b[1],b=b[2];c[0]=a[0]*d+a[4]*e+a[8]*b+a[12];c[1]=a[1]*d+a[5]*e+a[9]*b+a[13];c[2]=a[2]*d+a[6]*e+a[10]*b+a[14];return c},multiplyVec4:function(a,b,c){c||(c=b);var d=b[0],e=b[1],g=b[2],b=b[3];c[0]=a[0]*d+a[4]*e+a[8]*g+a[12]*b;c[1]=a[1]*d+a[5]*e+a[9]*g+a[13]*b;c[2]=a[2]*d+a[6]*e+a[10]*g+a[14]*b;c[3]=a[3]*d+a[7]*e+a[11]*g+a[15]*b;return c},translate:function(a,b,c){var d=b[0],e=b[1],b=b[2],g,f,h,j,i,m,l,k,q,
n,o,p;if(!c||a===c)return a[12]=a[0]*d+a[4]*e+a[8]*b+a[12],a[13]=a[1]*d+a[5]*e+a[9]*b+a[13],a[14]=a[2]*d+a[6]*e+a[10]*b+a[14],a[15]=a[3]*d+a[7]*e+a[11]*b+a[15],a;g=a[0];f=a[1];h=a[2];j=a[3];i=a[4];m=a[5];l=a[6];k=a[7];q=a[8];n=a[9];o=a[10];p=a[11];c[0]=g;c[1]=f;c[2]=h;c[3]=j;c[4]=i;c[5]=m;c[6]=l;c[7]=k;c[8]=q;c[9]=n;c[10]=o;c[11]=p;c[12]=g*d+i*e+q*b+a[12];c[13]=f*d+m*e+n*b+a[13];c[14]=h*d+l*e+o*b+a[14];c[15]=j*d+k*e+p*b+a[15];return c},scale:function(a,b,c){var d=b[0],e=b[1],b=b[2];if(!c||a===c)return a[0]*=
d,a[1]*=d,a[2]*=d,a[3]*=d,a[4]*=e,a[5]*=e,a[6]*=e,a[7]*=e,a[8]*=b,a[9]*=b,a[10]*=b,a[11]*=b,a;c[0]=a[0]*d;c[1]=a[1]*d;c[2]=a[2]*d;c[3]=a[3]*d;c[4]=a[4]*e;c[5]=a[5]*e;c[6]=a[6]*e;c[7]=a[7]*e;c[8]=a[8]*b;c[9]=a[9]*b;c[10]=a[10]*b;c[11]=a[11]*b;c[12]=a[12];c[13]=a[13];c[14]=a[14];c[15]=a[15];return c},rotate:function(a,b,c,d){var e=c[0],g=c[1],c=c[2],f=Math.sqrt(e*e+g*g+c*c),h,j,i,m,l,k,q,n,o,p,r,s,v,t,u,w,x,y,z,A;if(!f)return null;1!==f&&(f=1/f,e*=f,g*=f,c*=f);h=Math.sin(b);j=Math.cos(b);i=1-j;b=a[0];
f=a[1];m=a[2];l=a[3];k=a[4];q=a[5];n=a[6];o=a[7];p=a[8];r=a[9];s=a[10];v=a[11];t=e*e*i+j;u=g*e*i+c*h;w=c*e*i-g*h;x=e*g*i-c*h;y=g*g*i+j;z=c*g*i+e*h;A=e*c*i+g*h;e=g*c*i-e*h;g=c*c*i+j;d?a!==d&&(d[12]=a[12],d[13]=a[13],d[14]=a[14],d[15]=a[15]):d=a;d[0]=b*t+k*u+p*w;d[1]=f*t+q*u+r*w;d[2]=m*t+n*u+s*w;d[3]=l*t+o*u+v*w;d[4]=b*x+k*y+p*z;d[5]=f*x+q*y+r*z;d[6]=m*x+n*y+s*z;d[7]=l*x+o*y+v*z;d[8]=b*A+k*e+p*g;d[9]=f*A+q*e+r*g;d[10]=m*A+n*e+s*g;d[11]=l*A+o*e+v*g;return d},rotateX:function(a,b,c){var d=Math.sin(b),
b=Math.cos(b),e=a[4],g=a[5],f=a[6],h=a[7],j=a[8],i=a[9],m=a[10],l=a[11];c?a!==c&&(c[0]=a[0],c[1]=a[1],c[2]=a[2],c[3]=a[3],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[4]=e*b+j*d;c[5]=g*b+i*d;c[6]=f*b+m*d;c[7]=h*b+l*d;c[8]=e*-d+j*b;c[9]=g*-d+i*b;c[10]=f*-d+m*b;c[11]=h*-d+l*b;return c},rotateY:function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[0],g=a[1],f=a[2],h=a[3],j=a[8],i=a[9],m=a[10],l=a[11];c?a!==c&&(c[4]=a[4],c[5]=a[5],c[6]=a[6],c[7]=a[7],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=
a[15]):c=a;c[0]=e*b+j*-d;c[1]=g*b+i*-d;c[2]=f*b+m*-d;c[3]=h*b+l*-d;c[8]=e*d+j*b;c[9]=g*d+i*b;c[10]=f*d+m*b;c[11]=h*d+l*b;return c},rotateZ:function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[0],g=a[1],f=a[2],h=a[3],j=a[4],i=a[5],m=a[6],l=a[7];c?a!==c&&(c[8]=a[8],c[9]=a[9],c[10]=a[10],c[11]=a[11],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[0]=e*b+j*d;c[1]=g*b+i*d;c[2]=f*b+m*d;c[3]=h*b+l*d;c[4]=e*-d+j*b;c[5]=g*-d+i*b;c[6]=f*-d+m*b;c[7]=h*-d+l*b;return c},frustum:function(a,b,c,d,e,g,f){f||
(f=x.create());var h=b-a,j=d-c,i=g-e;f[0]=2*e/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=2*e/j;f[6]=0;f[7]=0;f[8]=(b+a)/h;f[9]=(d+c)/j;f[10]=-(g+e)/i;f[11]=-1;f[12]=0;f[13]=0;f[14]=-(2*g*e)/i;f[15]=0;return f},perspective:function(a,b,c,d,e){a=c*Math.tan(a*Math.PI/360);b*=a;return x.frustum(-b,b,-a,a,c,d,e)},ortho:function(a,b,c,d,e,g,f){f||(f=x.create());var h=b-a,j=d-c,i=g-e;f[0]=2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=2/j;f[6]=0;f[7]=0;f[8]=0;f[9]=0;f[10]=-2/i;f[11]=0;f[12]=-(a+b)/h;f[13]=-(d+c)/j;f[14]=
-(g+e)/i;f[15]=1;return f},lookAt:function(a,b,c,d){d||(d=x.create());var e,g,f,h,j,i,m,l,k=a[0],o=a[1],a=a[2];f=c[0];h=c[1];g=c[2];m=b[0];c=b[1];e=b[2];if(k===m&&o===c&&a===e)return x.identity(d);b=k-m;c=o-c;m=a-e;l=1/Math.sqrt(b*b+c*c+m*m);b*=l;c*=l;m*=l;e=h*m-g*c;g=g*b-f*m;f=f*c-h*b;(l=Math.sqrt(e*e+g*g+f*f))?(l=1/l,e*=l,g*=l,f*=l):f=g=e=0;h=c*f-m*g;j=m*e-b*f;i=b*g-c*e;(l=Math.sqrt(h*h+j*j+i*i))?(l=1/l,h*=l,j*=l,i*=l):i=j=h=0;d[0]=e;d[1]=h;d[2]=b;d[3]=0;d[4]=g;d[5]=j;d[6]=c;d[7]=0;d[8]=f;d[9]=
i;d[10]=m;d[11]=0;d[12]=-(e*k+g*o+f*a);d[13]=-(h*k+j*o+i*a);d[14]=-(b*k+c*o+m*a);d[15]=1;return d},fromRotationTranslation:function(a,b,c){c||(c=x.create());var d=a[0],e=a[1],g=a[2],f=a[3],h=d+d,j=e+e,i=g+g,a=d*h,m=d*j,d=d*i,k=e*j,e=e*i,g=g*i,h=f*h,j=f*j,f=f*i;c[0]=1-(k+g);c[1]=m+f;c[2]=d-j;c[3]=0;c[4]=m-f;c[5]=1-(a+g);c[6]=e+h;c[7]=0;c[8]=d+j;c[9]=e-h;c[10]=1-(a+k);c[11]=0;c[12]=b[0];c[13]=b[1];c[14]=b[2];c[15]=1;return c},str:function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+", "+a[4]+", "+
a[5]+", "+a[6]+", "+a[7]+", "+a[8]+", "+a[9]+", "+a[10]+", "+a[11]+", "+a[12]+", "+a[13]+", "+a[14]+", "+a[15]+"]"}},k={create:function(a){var b=new o(4);a?(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3]):b[0]=b[1]=b[2]=b[3]=0;return b},createFrom:function(a,b,c,d){var e=new o(4);e[0]=a;e[1]=b;e[2]=c;e[3]=d;return e},set:function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];return b},equal:function(a,b){return a===b||1.0E-6>Math.abs(a[0]-b[0])&&1.0E-6>Math.abs(a[1]-b[1])&&1.0E-6>Math.abs(a[2]-b[2])&&1.0E-6>
Math.abs(a[3]-b[3])},identity:function(a){a||(a=k.create());a[0]=0;a[1]=0;a[2]=0;a[3]=1;return a}},O=k.identity();k.calculateW=function(a,b){var c=a[0],d=a[1],e=a[2];if(!b||a===b)return a[3]=-Math.sqrt(Math.abs(1-c*c-d*d-e*e)),a;b[0]=c;b[1]=d;b[2]=e;b[3]=-Math.sqrt(Math.abs(1-c*c-d*d-e*e));return b};k.dot=function(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3]};k.inverse=function(a,b){var c=a[0],d=a[1],e=a[2],g=a[3],c=(c=c*c+d*d+e*e+g*g)?1/c:0;if(!b||a===b)return a[0]*=-c,a[1]*=-c,a[2]*=-c,a[3]*=
c,a;b[0]=-a[0]*c;b[1]=-a[1]*c;b[2]=-a[2]*c;b[3]=a[3]*c;return b};k.conjugate=function(a,b){if(!b||a===b)return a[0]*=-1,a[1]*=-1,a[2]*=-1,a;b[0]=-a[0];b[1]=-a[1];b[2]=-a[2];b[3]=a[3];return b};k.length=function(a){var b=a[0],c=a[1],d=a[2],a=a[3];return Math.sqrt(b*b+c*c+d*d+a*a)};k.normalize=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=a[3],f=Math.sqrt(c*c+d*d+e*e+g*g);if(0===f)return b[0]=0,b[1]=0,b[2]=0,b[3]=0,b;f=1/f;b[0]=c*f;b[1]=d*f;b[2]=e*f;b[3]=g*f;return b};k.add=function(a,b,c){if(!c||
a===c)return a[0]+=b[0],a[1]+=b[1],a[2]+=b[2],a[3]+=b[3],a;c[0]=a[0]+b[0];c[1]=a[1]+b[1];c[2]=a[2]+b[2];c[3]=a[3]+b[3];return c};k.multiply=function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],a=a[3],f=b[0],h=b[1],j=b[2],b=b[3];c[0]=d*b+a*f+e*j-g*h;c[1]=e*b+a*h+g*f-d*j;c[2]=g*b+a*j+d*h-e*f;c[3]=a*b-d*f-e*h-g*j;return c};k.multiplyVec3=function(a,b,c){c||(c=b);var d=b[0],e=b[1],g=b[2],b=a[0],f=a[1],h=a[2],a=a[3],j=a*d+f*g-h*e,i=a*e+h*d-b*g,k=a*g+b*e-f*d,d=-b*d-f*e-h*g;c[0]=j*a+d*-b+i*-h-k*-f;c[1]=i*a+
d*-f+k*-b-j*-h;c[2]=k*a+d*-h+j*-f-i*-b;return c};k.scale=function(a,b,c){if(!c||a===c)return a[0]*=b,a[1]*=b,a[2]*=b,a[3]*=b,a;c[0]=a[0]*b;c[1]=a[1]*b;c[2]=a[2]*b;c[3]=a[3]*b;return c};k.toMat3=function(a,b){b||(b=A.create());var c=a[0],d=a[1],e=a[2],g=a[3],f=c+c,h=d+d,j=e+e,i=c*f,k=c*h,c=c*j,l=d*h,d=d*j,e=e*j,f=g*f,h=g*h,g=g*j;b[0]=1-(l+e);b[1]=k+g;b[2]=c-h;b[3]=k-g;b[4]=1-(i+e);b[5]=d+f;b[6]=c+h;b[7]=d-f;b[8]=1-(i+l);return b};k.toMat4=function(a,b){b||(b=x.create());var c=a[0],d=a[1],e=a[2],g=
a[3],f=c+c,h=d+d,j=e+e,i=c*f,k=c*h,c=c*j,l=d*h,d=d*j,e=e*j,f=g*f,h=g*h,g=g*j;b[0]=1-(l+e);b[1]=k+g;b[2]=c-h;b[3]=0;b[4]=k-g;b[5]=1-(i+e);b[6]=d+f;b[7]=0;b[8]=c+h;b[9]=d-f;b[10]=1-(i+l);b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return b};k.slerp=function(a,b,c,d){d||(d=a);var e=a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3],g,f;if(1<=Math.abs(e))return d!==a&&(d[0]=a[0],d[1]=a[1],d[2]=a[2],d[3]=a[3]),d;g=Math.acos(e);f=Math.sqrt(1-e*e);if(0.001>Math.abs(f))return d[0]=0.5*a[0]+0.5*b[0],d[1]=0.5*a[1]+0.5*b[1],
d[2]=0.5*a[2]+0.5*b[2],d[3]=0.5*a[3]+0.5*b[3],d;e=Math.sin((1-c)*g)/f;c=Math.sin(c*g)/f;d[0]=a[0]*e+b[0]*c;d[1]=a[1]*e+b[1]*c;d[2]=a[2]*e+b[2]*c;d[3]=a[3]*e+b[3]*c;return d};k.fromRotationMatrix=function(a,b){b||(b=k.create());var c=a[0]+a[4]+a[8],d;if(0<c)d=Math.sqrt(c+1),b[3]=0.5*d,d=0.5/d,b[0]=(a[7]-a[5])*d,b[1]=(a[2]-a[6])*d,b[2]=(a[3]-a[1])*d;else{d=k.fromRotationMatrix.s_iNext=k.fromRotationMatrix.s_iNext||[1,2,0];c=0;a[4]>a[0]&&(c=1);a[8]>a[3*c+c]&&(c=2);var e=d[c],g=d[e];d=Math.sqrt(a[3*c+
c]-a[3*e+e]-a[3*g+g]+1);b[c]=0.5*d;d=0.5/d;b[3]=(a[3*g+e]-a[3*e+g])*d;b[e]=(a[3*e+c]+a[3*c+e])*d;b[g]=(a[3*g+c]+a[3*c+g])*d}return b};A.toQuat4=k.fromRotationMatrix;(function(){var a=A.create();k.fromAxes=function(b,c,d,e){a[0]=c[0];a[3]=c[1];a[6]=c[2];a[1]=d[0];a[4]=d[1];a[7]=d[2];a[2]=b[0];a[5]=b[1];a[8]=b[2];return k.fromRotationMatrix(a,e)}})();k.identity=function(a){a||(a=k.create());a[0]=0;a[1]=0;a[2]=0;a[3]=1;return a};k.fromAngleAxis=function(a,b,c){c||(c=k.create());var a=0.5*a,d=Math.sin(a);
c[3]=Math.cos(a);c[0]=d*b[0];c[1]=d*b[1];c[2]=d*b[2];return c};k.toAngleAxis=function(a,b){b||(b=a);var c=a[0]*a[0]+a[1]*a[1]+a[2]*a[2];0<c?(b[3]=2*Math.acos(a[3]),c=E.invsqrt(c),b[0]=a[0]*c,b[1]=a[1]*c,b[2]=a[2]*c):(b[3]=0,b[0]=1,b[1]=0,b[2]=0);return b};k.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+"]"};var J={create:function(a){var b=new o(2);a?(b[0]=a[0],b[1]=a[1]):(b[0]=0,b[1]=0);return b},createFrom:function(a,b){var c=new o(2);c[0]=a;c[1]=b;return c},add:function(a,b,c){c||
(c=b);c[0]=a[0]+b[0];c[1]=a[1]+b[1];return c},subtract:function(a,b,c){c||(c=b);c[0]=a[0]-b[0];c[1]=a[1]-b[1];return c},multiply:function(a,b,c){c||(c=b);c[0]=a[0]*b[0];c[1]=a[1]*b[1];return c},divide:function(a,b,c){c||(c=b);c[0]=a[0]/b[0];c[1]=a[1]/b[1];return c},scale:function(a,b,c){c||(c=a);c[0]=a[0]*b;c[1]=a[1]*b;return c},dist:function(a,b){var c=b[0]-a[0],d=b[1]-a[1];return Math.sqrt(c*c+d*d)},set:function(a,b){b[0]=a[0];b[1]=a[1];return b},equal:function(a,b){return a===b||1.0E-6>Math.abs(a[0]-
b[0])&&1.0E-6>Math.abs(a[1]-b[1])},negate:function(a,b){b||(b=a);b[0]=-a[0];b[1]=-a[1];return b},normalize:function(a,b){b||(b=a);var c=a[0]*a[0]+a[1]*a[1];0<c?(c=Math.sqrt(c),b[0]=a[0]/c,b[1]=a[1]/c):b[0]=b[1]=0;return b},cross:function(a,b,c){a=a[0]*b[1]-a[1]*b[0];if(!c)return a;c[0]=c[1]=0;c[2]=a;return c},length:function(a){var b=a[0],a=a[1];return Math.sqrt(b*b+a*a)},squaredLength:function(a){var b=a[0],a=a[1];return b*b+a*a},dot:function(a,b){return a[0]*b[0]+a[1]*b[1]},direction:function(a,
b,c){c||(c=a);var d=a[0]-b[0],a=a[1]-b[1],b=d*d+a*a;if(!b)return c[0]=0,c[1]=0,c[2]=0,c;b=1/Math.sqrt(b);c[0]=d*b;c[1]=a*b;return c},lerp:function(a,b,c,d){d||(d=a);d[0]=a[0]+c*(b[0]-a[0]);d[1]=a[1]+c*(b[1]-a[1]);return d},str:function(a){return"["+a[0]+", "+a[1]+"]"}},I={create:function(a){var b=new o(4);a?(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3]):b[0]=b[1]=b[2]=b[3]=0;return b},createFrom:function(a,b,c,d){var e=new o(4);e[0]=a;e[1]=b;e[2]=c;e[3]=d;return e},set:function(a,b){b[0]=a[0];b[1]=a[1];
b[2]=a[2];b[3]=a[3];return b},equal:function(a,b){return a===b||1.0E-6>Math.abs(a[0]-b[0])&&1.0E-6>Math.abs(a[1]-b[1])&&1.0E-6>Math.abs(a[2]-b[2])&&1.0E-6>Math.abs(a[3]-b[3])},identity:function(a){a||(a=I.create());a[0]=1;a[1]=0;a[2]=0;a[3]=1;return a},transpose:function(a,b){if(!b||a===b){var c=a[1];a[1]=a[2];a[2]=c;return a}b[0]=a[0];b[1]=a[2];b[2]=a[1];b[3]=a[3];return b},determinant:function(a){return a[0]*a[3]-a[2]*a[1]},inverse:function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=a[3],f=c*g-e*
d;if(!f)return null;f=1/f;b[0]=g*f;b[1]=-d*f;b[2]=-e*f;b[3]=c*f;return b},multiply:function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],a=a[3];c[0]=d*b[0]+e*b[2];c[1]=d*b[1]+e*b[3];c[2]=g*b[0]+a*b[2];c[3]=g*b[1]+a*b[3];return c},rotate:function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],a=a[3],f=Math.sin(b),b=Math.cos(b);c[0]=d*b+e*f;c[1]=d*-f+e*b;c[2]=g*b+a*f;c[3]=g*-f+a*b;return c},multiplyVec2:function(a,b,c){c||(c=b);var d=b[0],b=b[1];c[0]=d*a[0]+b*a[1];c[1]=d*a[2]+b*a[3];return c},scale:function(a,
b,c){c||(c=a);var d=a[1],e=a[2],g=a[3],f=b[0],b=b[1];c[0]=a[0]*f;c[1]=d*b;c[2]=e*f;c[3]=g*b;return c},str:function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+"]"}},K={create:function(a){var b=new o(4);a?(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3]):(b[0]=0,b[1]=0,b[2]=0,b[3]=0);return b},createFrom:function(a,b,c,d){var e=new o(4);e[0]=a;e[1]=b;e[2]=c;e[3]=d;return e},add:function(a,b,c){c||(c=b);c[0]=a[0]+b[0];c[1]=a[1]+b[1];c[2]=a[2]+b[2];c[3]=a[3]+b[3];return c},subtract:function(a,b,c){c||(c=
b);c[0]=a[0]-b[0];c[1]=a[1]-b[1];c[2]=a[2]-b[2];c[3]=a[3]-b[3];return c},multiply:function(a,b,c){c||(c=b);c[0]=a[0]*b[0];c[1]=a[1]*b[1];c[2]=a[2]*b[2];c[3]=a[3]*b[3];return c},divide:function(a,b,c){c||(c=b);c[0]=a[0]/b[0];c[1]=a[1]/b[1];c[2]=a[2]/b[2];c[3]=a[3]/b[3];return c},scale:function(a,b,c){c||(c=a);c[0]=a[0]*b;c[1]=a[1]*b;c[2]=a[2]*b;c[3]=a[3]*b;return c},set:function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];return b},equal:function(a,b){return a===b||1.0E-6>Math.abs(a[0]-b[0])&&1.0E-6>
Math.abs(a[1]-b[1])&&1.0E-6>Math.abs(a[2]-b[2])&&1.0E-6>Math.abs(a[3]-b[3])},negate:function(a,b){b||(b=a);b[0]=-a[0];b[1]=-a[1];b[2]=-a[2];b[3]=-a[3];return b},length:function(a){var b=a[0],c=a[1],d=a[2],a=a[3];return Math.sqrt(b*b+c*c+d*d+a*a)},squaredLength:function(a){var b=a[0],c=a[1],d=a[2],a=a[3];return b*b+c*c+d*d+a*a},lerp:function(a,b,c,d){d||(d=a);d[0]=a[0]+c*(b[0]-a[0]);d[1]=a[1]+c*(b[1]-a[1]);d[2]=a[2]+c*(b[2]-a[2]);d[3]=a[3]+c*(b[3]-a[3]);return d},str:function(a){return"["+a[0]+", "+
a[1]+", "+a[2]+", "+a[3]+"]"}};w&&(w.glMatrixArrayType=o,w.MatrixArray=o,w.setMatrixArrayType=D,w.determineMatrixArrayType=G,w.glMath=E,w.vec2=J,w.vec3=r,w.vec4=K,w.mat2=I,w.mat3=A,w.mat4=x,w.quat4=k);return{glMatrixArrayType:o,MatrixArray:o,setMatrixArrayType:D,determineMatrixArrayType:G,glMath:E,vec2:J,vec3:r,vec4:K,mat2:I,mat3:A,mat4:x,quat4:k}});

(function (namespace) {
    namespace._PropertyPrecedence = {
        IsEnabled: 0,
        LocalValue: 1,
        DynamicValue: 2,
        LocalStyle: 3,
        ImplicitStyle: 4,
        Inherited: 5,
        InheritedDataContext: 6,
        DefaultValue: 7,
        AutoCreate: 8
    };
    _PropertyPrecedence.Highest = _PropertyPrecedence.IsEnabled;
    _PropertyPrecedence.Lowest = _PropertyPrecedence.AutoCreate;
    _PropertyPrecedence.Count = 9;
    namespace._StyleIndex = {
        VisualTree: 0,
        ApplicationResources: 1,
        GenericXaml: 2,
        Count: 3
    };
    namespace._StyleMask = {
        VisualTree: 1 << _StyleIndex.VisualTree,
        ApplicationResources: 1 << _StyleIndex.ApplicationResources,
        GenericXaml: 1 << _StyleIndex.GenericXaml
    };
    _StyleMask.All = _StyleMask.VisualTree | _StyleMask.ApplicationResources | _StyleMask.GenericXaml;
    _StyleMask.None = 0;
    namespace._Inheritable = {
        Foreground: 1 << 0,
        FontFamily: 1 << 1,
        FontStretch: 1 << 2,
        FontStyle: 1 << 3,
        FontWeight: 1 << 4,
        FontSize: 1 << 5,
        Language: 1 << 6,
        FlowDirection: 1 << 7,
        UseLayoutRounding: 1 << 8,
        TextDecorations: 1 << 9
    };
    _Inheritable.All = 0x7ff;
    _Inheritable.None = 0; //None must always be 0
})(window);

var DebugLevel = {
    Debug: 0,
    Info: 1,
    Warn: 2,
    Error: 3,
    Fatal: 4
};
HUD.prototype = new Object;
HUD.prototype.constructor = HUD;
function HUD(jSelector) {
    this._Selector = jSelector;
};
HUD.prototype.SetMessage = function (message) {
    $(this._Selector)[0].innerText = message;
};
var HUDs = [];
function AbstractMethod(method) {
    Warn("Abstract Method [" + method + "]");
}
function NotImplemented(method) {
    Warn("Not Implemented [" + method + "]");
}
function DirtyDebug(message) {
    if (true)
        return;
    if (window.console && console.log) {
        var tabs = "";
        for (var i = 0; i < DirtyDebug.Level; i++) {
            tabs += "\t";
        }
        console.log("DIRTY: " + tabs + message);
    }
}
DirtyDebug.Level = 0;
DirtyDebug.UpTiming = [];
DirtyDebug.DownTiming = [];
DirtyDebug.Dump = function () {
    return "Down" + DumpTiming(DirtyDebug.DownTiming) + " Up" + DumpTiming(DirtyDebug.UpTiming);
}
function DumpTiming(arr) {
    var min;
    var max;
    var total;
    for (var i = 0; i < arr.length; i++) {
        if (i === 0) {
            min = arr[i];
            max = arr[i];
            total = arr[i];
        } else {
            min = Math.min(arr[i], min);
            max = Math.max(arr[i], max);
            total += arr[i];
        }
    }
    var avg = total / arr.length;
    var stddev = 0;
    for (var i = 0; i < arr.length; i++) {
        stddev += (arr[i] - avg) * (arr[i] - avg);
    }
    stddev = Math.sqrt(stddev / arr.length);
    return "[Min: " + min + "; Max: " + max + "; Avg: " + avg + "; StdDev: " + stddev + "; Total: " + total + "; Count: " + arr.length + "]";;
}
function KeyboardDebug(message) {
    if (true)
        return;
    if (window.console && console.log)
        console.log("KEYBOARD: " + message);
}
function AnimationDebug(message) {
    if (true)
        return;
    if (window.console && console.log)
        console.log("ANIMATION: " + message);
}
function VsmDebug(message) {
    if (true)
        return;
    if (window.console && console.log)
        console.log("VSM: " + message);
}
function LayoutDebug(message) {
    if (true)
        return;
    if (window.console && console.log)
        console.log("LAYOUT: " + message);
}
function TransformDebug(message, matrix) {
    if (true)
        return;
    var last = TransformDebug.Last;
    if (last && mat3.equal(last, matrix))
        return;
    TransformDebug.Last = matrix;
    if (window.console && console.log)
        console.log("TRANSFORM: " + message + " --> " + matrix.toString());
}
function DrawDebug(message) {
    if (true)
        return;
    if (window.console && console.log)
        console.log("DRAW: " + message);
}
function RenderDebug(message) {
    if (true)
        return;
    if (window.console && console.log)
        console.log("RENDER: " + message);
}
function ParserDebug(message) {
    if (true)
        return;
    if (window.console && console.log)
        console.log("PARSER: " + message);
}
function FocusDebug(message) {
    if (true)
        return;
    if (window.console && console.log)
        console.log("FOCUS: " + message);
}
function TextDebug(message) {
    if (true)
        return;
    if (window.console && console.log)
        console.log("TEXT: " + message);
}
function Debug(message) {
    if (window.console && console.log)
        console.log(message);
}
function Info(message) {
    if (window.console && console.info)
        console.info(message);
}
function Warn(message) {
    if (window.console && console.warn)
        console.warn(message);
}
function Error(error) {
    if (window.console && console.error)
        console.error(error.toString());
}
function Fatal(error) {
    if (window.console && console.error)
        console.error("FATAL: " + error.toString());
    App.Instance._Stop();
}
function RegisterHUD(id, jSelector) {
    HUDs[id] = new HUD(jSelector);
};
function HUDUpdate(id, message) {
    var hud = HUDs[id];
    if (!hud)
        return;
    hud.SetMessage(message);
}

(function (namespace) {
    namespace.FontStyle = {
        Normal: "normal",
        Italic: "italic",
        Oblique: "oblique"
    };
    namespace.FontStretch = {
        UltraCondensed: "ultra-condensed",
        ExtraCondensed: "extra-condensed",
        Condensed: "condensed",
        SemiCondensed: "semi-condensed",
        Normal: "normal",
        SemiExpanded: "semi-expanded",
        Expanded: "expanded",
        ExtraExpanded: "extra-expanded",
        UltraExpanded: "ultra-expanded"
    };
    namespace.CursorType = {
        Default: "",
        Hand: "pointer",
        IBeam: "text",
        Wait: "wait",
        SizeNESW: "ne-resize",
        SizeNWSE: "nw-resize",
        SizeNS: "n-resize",
        SizeWE: "w-resize"
    };
    namespace.DurationType = {
        Automatic: 0,
        Forever: 1,
        TimeSpan: 2
    };
    namespace.RectOverlap = {
        Out: 0,
        In: 1,
        Part: 2
    };
    namespace.MatrixTypes = {
        Identity: 0,
        Unknown: 1,
        Translate: 2,
        Scale: 4,
        Rotate: 8,
        Shear: 16
    };
    namespace.HorizontalLayoutType = {
        Stretch: 0,
        Shrink: 1
    };
    namespace.VerticalLayoutType = {
        Stretch: 0,
        Shrink: 1
    };
})(window);

(function (namespace) {
    function AjaxJsonRequest(onSuccess, onError) {
        this.OnSuccess = onSuccess;
        this.OnError = onError;
    }
    AjaxJsonRequest.prototype.Get = function (url, query) {
        this._PrepareRequest();
        var fullUrl = url;
        if (query)
            fullUrl += "?" + query;
        this.xmlhttp.open("GET", fullUrl, true);
        this.xmlhttp.send();
    };
    AjaxJsonRequest.prototype.Post = function (url, query, data) {
        this._PrepareRequest();
        var fullUrl = url;
        if (query)
            fullUrl += "?" + query;
        this.xmlhttp.open("POST", fullUrl, true);
        this.xmlhttp.send(data);
    };
    AjaxJsonRequest.prototype.Cancel = function () {
        this.xmlhttp.abort();
    };
    AjaxJsonRequest.prototype._PrepareRequest = function () {
        var xmlhttp;
        if (window.XMLHttpRequest) {
            xmlhttp = new XMLHttpRequest();
        } else {
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
        var ajr = this;
        xmlhttp.onreadystatechange = function () { ajr._HandleStateChange(); };
        this.xmlhttp = xmlhttp;
    };
    AjaxJsonRequest.prototype._HandleStateChange = function () {
        if (this.xmlhttp.readyState === 4) {
            if (this.xmlhttp.status === 200) {
                var responseJson = {};
                var data = this.xmlhttp.responseText;
                try {
                    if (data) {
                        responseJson = (window.JSON && window.JSON.parse) ?
                            window.JSON.parse(data) :
                            new Function("return " + data)();
                    }
                } catch (err) {
                    try {
                        responseJson = new Function("return " + data)();
                    } catch (err) {
                        this.OnError("Could not create json from response.", err);
                        return;
                    }
                }
                this.OnSuccess(responseJson);
            } else {
                this.OnError("Unsuccessful request: " + this.xmlhttp.status);
            }
        }
    };
    namespace.AjaxJsonRequest = AjaxJsonRequest;
})(window);

function Enum(object) {
    this.Object = object;
}

Object.Clone = function (o) {
    return eval(uneval(o));
};
Function.prototype.Clone = function () {
    return eval(uneval(this));
};
String.prototype.indexOfAny = function (carr, start) {
    if (!(carr instanceof Array))
        return -1;
    if (start == null)
        start = 0;
    for (var cur = start; cur < this.length; cur++) {
        var c = this.charAt(c);
        for (var i = 0; i < carr.length; i++) {
            if (c === carr[i])
                return cur;
        }
    }
    return -1;
};
Array.indexOfNullstone = function (arr, ns) {
    for (var i = 0; i < arr.length; i++) {
        if (Nullstone.RefEquals(arr[i], ns))
            return i;
    }
    return -1;
};
Array.containsNullstone = function (arr, ns) {
    return Array.indexOfNullstone(arr, ns) > -1;
};
Array.addDistinctNullstone = function (arr, ns) {
    if (Array.containsNullstone(arr, ns))
        return false;
    arr.push(ns);
    return true;
};
Array.removeNullstone = function (arr, ns) {
    for (var i = 0; i < arr.length; i++) {
        if (Nullstone.RefEquals(arr[i], ns)) {
            arr.splice(i, 1);
            return;
        }
    }
};
Number.isNumber = function (o) {
    return typeof o == "number";
};
String.isString = function (o) {
    return typeof o == "string";
};
String.contains = function (str, match) {
    if (!str)
        return false;
    if (!match)
        return false;
    var j = 0;
    for (var i = 0; i < str.length && j < match.length; i++) {
        if (str.charAt(i) === match.charAt(j))
            j++;
        else
            j = 0;
    }
    return j >= match.length;
};
String.format = function (str) {
    var args = arguments;
    return str.replace(/{(\d+)}/g, function (match, number) {
        var i = parseInt(number);
        return typeof args[i + 1] != 'undefined'
          ? args[i + 1]
          : match;
    });
};
window.onerror = function (msg, url, line) {
    alert("Error (" + url + ") @ " + line + "\n" + msg);
};
window.requestAnimFrame = (function () {
    return window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.oRequestAnimationFrame ||
        window.msRequestAnimationFrame ||
        function (callback) {
            window.setTimeout(callback, 1000 / 200);
        };
    })();

(function (namespace) {
    var DoubleUtil = {};
    DoubleUtil.AreClose = function (val1, val2) {
        if (val1 === val2)
            return true;
        var num1 = (Math.abs(val1) + Math.abs(val2) + 10) * 1.11022302462516E-16;
        var num2 = val1 - val2;
        return -num1 < num2 && num1 > num2;
    };
    DoubleUtil.LessThan = function (val1, val2) {
        if (val1 >= val2)
            return false;
        return !DoubleUtil.AreClose(val1, val2);
    };
    DoubleUtil.GreaterThan = function (val1, val2) {
        if (val1 <= val2)
            return false;
        return !DoubleUtil.AreClose(val1, val2);
    };
    DoubleUtil.IsZero = function (val) {
        return Math.abs(val) < 1.11022302462516E-15;
    };
    namespace.DoubleUtil = DoubleUtil;
    var PointUtil = {};
    PointUtil.AreClose = function (p1, p2) {
        if (!DoubleUtil.AreClose(p1.X, p2.X))
            return false;
        return DoubleUtil.AreClose(p1.Y, p2.Y);
    };
    namespace.PointUtil = PointUtil;
})(window);

mat3.toAffineMat4 = function (mat, dest) {
    if (!dest) { dest = mat4.create(); }
    dest[0] = mat[0];
    dest[1] = mat[1];
    dest[2] = 0;
    dest[3] = mat[2];
    dest[4] = mat[3];
    dest[5] = mat[4];
    dest[6] = 0;
    dest[7] = mat[5];
    dest[8] = 0;
    dest[9] = 0;
    dest[10] = 1;
    dest[11] = 0;
    dest[12] = 0;
    dest[13] = 0;
    dest[14] = 0;
    dest[15] = 1;
    return dest;
};
mat3.createTranslate = function (x, y, dest) {
    if (!dest) { dest = mat3.create(); }
    dest[0] = 1;
    dest[1] = 0;
    dest[2] = x;
    dest[3] = 0;
    dest[4] = 1;
    dest[5] = y;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = 1;
    return dest;
};
mat3.translate = function (mat, x, y) {
    mat[2] += x;
    mat[5] += y;
};
mat3.createScale = function (x, y, dest) {
    if (!dest) { dest = mat3.create(); }
    dest[0] = x;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 0;
    dest[4] = y;
    dest[5] = 0;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = 1;
    return dest;
};
mat3.scale = function (mat, x, y) {
    mat[0] *= x;
    mat[1] *= x;
    mat[2] *= x;
    mat[3] *= y;
    mat[4] *= y;
    mat[5] *= y;
};
mat3.createSkew = function (angleRadX, angleRadY, dest) {
    if (!dest) { dest = mat3.create(); }
    dest[0] = 1;
    dest[1] = Math.tan(angleRadY);
    dest[2] = 0;
    dest[3] = Math.tan(angleRadX);
    dest[4] = 1;
    dest[5] = 0;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = 1;
    return dest;
};
mat3.createRotate = function (angleRad, dest) {
    if (!dest) { dest = mat3.create(); }
    var c = Math.cos(angleRad);
    var s = Math.sin(angleRad);
    dest[0] = c;
    dest[1] = -s;
    dest[2] = 0;
    dest[3] = s;
    dest[4] = c;
    dest[5] = 0;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = 1;
    return dest;
};
mat3.transformVec2 = function (mat, vec, dest) {
    if (!dest) dest = vec;
    var x = vec[0], y = vec[1];
    dest[0] = x * mat[0] + y * mat[3] + mat[2];
    dest[1] = x * mat[1] + y * mat[4] + mat[5];
    return dest;
};
mat4.toAffineMat3 = function (mat, dest) {
    if (!dest) { dest = mat3.create(); }
    dest[0] = mat[0];
    dest[1] = mat[1];
    dest[2] = mat[3];
    dest[3] = mat[4];
    dest[4] = mat[5];
    dest[5] = mat[7];
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = 1;
    return dest;
};
mat4.transformVec4 = function (mat, vec, dest) {
    if (!dest) { dest = vec; }
    var x = vec[0], y = vec[1], z = vec[2], w = vec[3];
    dest[0] = mat[0] * x + mat[1] * y + mat[2] * z + mat[3] * w;
    dest[1] = mat[4] * x + mat[5] * y + mat[6] * z + mat[7] * w;
    dest[2] = mat[8] * x + mat[9] * y + mat[10] * z + mat[11] * w;
    dest[3] = mat[12] * x + mat[13] * y + mat[14] * z + mat[15] * w;
    return dest;
};
mat4.createTranslate = function (x, y, z, dest) {
    if (!dest) { dest = mat4.create(); }
    dest[0] = 1;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 0;
    dest[4] = 0;
    dest[5] = 1;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = 0;
    dest[9] = 0;
    dest[10] = 1;
    dest[11] = 0;
    dest[12] = x;
    dest[13] = y;
    dest[14] = z;
    dest[15] = 1;
    return dest;
};

var Nullstone = {};
Nullstone._LastID = 0;
Nullstone._LastTypeID = 1;
Nullstone._RecordTypeCounts = true;
Nullstone.Create = function (typeName, parent, argCount, interfaces) {
    if (parent && parent._IsNullstone !== true) {
        throw new InvalidOperationException("Nullstones can only be inherited from other nullstones.");
    }
    var s;
    if (argCount) {
        s = "";
        for (var i = 0; i < argCount; i++) {
            if (s)
                s += ", arguments[" + i + "]";
            else
                s += "arguments[" + i + "]";
        }
    }
    else
        s = "arguments";
    var code = "var n = Nullstone; if (!n.IsReady) return;" +
        "n._LastID = this._ID = n._LastID + 1;" +
        "if (this.Init) this.Init(" + s + ");"
    if (Nullstone._RecordTypeCounts) {
        code += "n._TypeCount['" + typeName + "']++;";
        if (!Nullstone._TypeCount)
            Nullstone._TypeCount = [];
        Nullstone._TypeCount[typeName] = 0;
    }
    var f = new Function(code);
    f._IsNullstone = true;
    f._TypeName = typeName;
    Nullstone._LastTypeID = f._TypeID = Nullstone._LastTypeID + 1;
    f._BaseClass = parent;
    if (!parent) parent = Object;
    Nullstone.IsReady = false;
    f.prototype = new parent;
    f.prototype.constructor = f;
    Nullstone.IsReady = true;
    f.Instance = {};
    f.Properties = [];
    f.Interfaces = interfaces;
    return f;
}
Nullstone.FinishCreate = function (f) {
    var i;
    if (f.Interfaces) {
        for (i = 0; i < f.Interfaces.length; i++) {
            var it = f.Interfaces[i].Instance;
            for (var m in it) {
                if (!(m in f.prototype))
                    throw new InterfaceNotImplementedException(f, it, m);
            }
        }
    }
    for (var k in f.Instance) {
        if ((k in f.prototype) && f._BaseClass != null) {
            f.prototype[k + '$' + f._BaseClass._TypeName] = f.prototype[k];
        }
        f.prototype[k] = f.Instance[k];
    }
    Nullstone._PropagateBaseProperties(f, f._BaseClass);
    Nullstone._CreateProps(f);
    delete f['Instance'];
    return f;
};
Nullstone.RegisterType = function (f, typeName, baseClass, interfaces) {
    f._TypeID = Nullstone._LastTypeID = Nullstone._LastTypeID + 1;
    f._BaseClass = baseClass;
    f._TypeName = typeName;
    f.Interfaces = interfaces == null ? undefined : interfaces;
    f._IsNullstone = true;
    return f;
};
Nullstone.RegisterObject = function (o) {
    o._ID = Nullstone._LastID = Nullstone._LastID + 1;
};
Nullstone.RefEquals = function (obj1, obj2) {
    if (obj1 == null && obj2 == null)
        return true;
    if (obj1 == null || obj2 == null)
        return false;
    if (obj1.constructor._IsNullstone && obj2.constructor._IsNullstone)
        return obj1._ID === obj2._ID;
    return false;
};
Nullstone.Equals = function (val1, val2) {
    if (val1 == null && val2 == null)
        return true;
    if (val1 == null || val2 == null)
        return false;
    if (val1.constructor._IsNullstone && val2.constructor._IsNullstone)
        return val1._ID === val2._ID;
    if (!(val1 instanceof Object) && !(val2 instanceof Object))
        return val1 === val2;
    return false;
};
Nullstone.As = function (obj, type) {
    if (obj == null)
        return null;
    if (obj instanceof type)
        return obj;
    if (Nullstone.DoesImplement(obj, type))
        return obj;
    return null;
};
Nullstone.Is = function (obj, type) {
    if (obj == null)
        return false;
    if (obj instanceof type)
        return true;
    if (Nullstone.DoesImplement(obj, type))
        return true;
    return false;
};
Nullstone.DoesInheritFrom = function (t, type) {
    var temp = t;
    while (temp != null && temp._TypeName !== type._TypeName) {
        temp = temp._BaseClass;
    }
    return temp != null;
};
Nullstone.DoesImplement = function (obj, interfaceType) {
    var curType = obj.constructor;
    if (!curType._IsNullstone)
        return false;
    while (curType) {
        var interfaces = curType.Interfaces;
        if (interfaces) {
            var len = interfaces.length;
            for (var i = 0; i < len; i++) {
                if (interfaces[i]._TypeID === interfaceType._TypeID)
                    return true;
            }
        }
        curType = curType._BaseClass;
    }
    return false;
};
Nullstone.AutoProperties = function (type, arr) {
    for (var i = 0; i < arr.length; i++) {
        Nullstone.AutoProperty(type, arr[i]);
    }
};
Nullstone.AutoProperty = function (type, nameOrDp, converter, isOverride) {
    if (typeof nameOrDp === "string") {
        type.Properties.push({
            Auto: true,
            Name: nameOrDp,
            Converter: converter,
            Override: isOverride === true
        });
    } else if (nameOrDp instanceof DependencyProperty) {
        type.Properties.push({
            Auto: true,
            DP: nameOrDp,
            Converter: converter,
            Override: isOverride === true
        });
    }
};
Nullstone.AutoPropertiesReadOnly = function (type, arr) {
    for (var i = 0; i < arr.length; i++) {
        Nullstone.AutoPropertyReadOnly(type, arr[i]);
    }
};
Nullstone.AutoPropertyReadOnly = function (type, nameOrDp, isOverride) {
    if (typeof nameOrDp === "string") {
        type.Properties.push({
            Auto: true,
            Name: nameOrDp,
            IsReadOnly: true,
            Override: isOverride === true
        });
    } else if (nameOrDp instanceof DependencyProperty) {
        type.Properties.push({
            Auto: true,
            DP: nameOrDp,
            Override: isOverride === true
        });
    }
};
Nullstone.AbstractProperty = function (type, name, isReadOnly) {
    type.Properties.push({
        Name: name,
        IsAbstract: true,
        IsReadOnly: isReadOnly === true
    });
};
Nullstone.Property = function (type, name, data) {
    type.Properties.push({
        Custom: true,
        Name: name,
        Data: data
    });
};
Nullstone.AutoNotifyProperty = function (type, name) {
    var backingName = "z_" + name;
    if (type.Properties) {
        type.Properties.push({
            Custom: true,
            Name: name,
            Data: {
                get: function () { return this[backingName]; },
                set: function (value) {
                    this[backingName] = value;
                    this.OnPropertyChanged(name);
                }
            }
        });
    } else {
        Object.defineProperty(type.prototype, name, {
            get: function () { return this[backingName]; },
            set: function (value) {
                this[backingName] = value;
                this.OnPropertyChanged(name);
            }
        });
    }
};
Nullstone.GetPropertyDescriptor = function (obj, name) {
    if (obj == null)
        return;
    var type = obj.constructor;
    var propDesc = Object.getOwnPropertyDescriptor(type.prototype, name);
    if (propDesc)
        return propDesc
    return Object.getOwnPropertyDescriptor(obj, name);
};
Nullstone.HasProperty = function (obj, name) {
    if (obj == null)
        return false;
    if (obj.hasOwnProperty(name))
        return true;
    var type = obj.constructor;
    return type.prototype.hasOwnProperty(name);
};
Nullstone.Namespace = function (namespace) {
    var tokens = namespace.split(".");
    var len = tokens.length;
    var curNs = window[tokens[0]];
    if (!curNs)
        curNs = window[tokens[0]] = {};
    for (var i = 1; i < len; i++) {
        if (!curNs[tokens[i]])
            curNs[tokens[i]] = {};
        curNs = curNs[tokens[i]];
    }
    return curNs;
};
Nullstone.Namespaces = function (namespace, func) {
    var namespaces = [];
    var tokens = namespace.split(".");
    var len = tokens.length;
    var curNs = window[tokens[0]];
    if (!curNs)
        curNs = window[tokens[0]] = {};
    namespaces.push(curNs);
    for (var i = 1; i < len; i++) {
        if (!curNs[tokens[i]])
            curNs[tokens[i]] = {};
        curNs = curNs[tokens[i]];
        namespaces.push(curNs);
    }
    func.apply(this, namespaces);
}
Nullstone._CreateProps = function (ns) {
    var props = ns.Properties;
    var len = props.length;
    for (var i = 0; i < len; i++) {
        Nullstone._CreateProp(ns, props[i]);
    }
};
Nullstone._CreateProp = function (type, p) {
    if (p.IsAbstract)
        return;
    var name;
    var data;
    var dp = p.DP;
    if (dp) {
        name = dp.Name;
        data = {
            get: function () {
                var value = undefined;
                if (dp._ID in this._CachedValues) {
                    value = this._CachedValues[dp._ID];
                } else {
                    value = this.$GetValue(dp);
                    this._CachedValues[dp._ID] = value;
                }
                return value;
            }
        };
        if (!dp.IsReadOnly) {
            var converter = p.Converter;
            if (converter) {
                data.set = function (value) { value = converter(value); this.$SetValue(dp, value); };
                data.set.Converter = converter;
            } else {
                data.set = function (value) { this.$SetValue(dp, value); };
            }
        }
    } else if (p.Custom) {
        name = p.Name;
        data = p.Data;
    } else {
        name = p.Name;
        data = {
            value: null,
            writable: p.IsReadOnly !== true
        };
    }
    Object.defineProperty(type.prototype, name, data);
};
Nullstone._PropagateBaseProperties = function (targetNs, baseNs) {
    if (!baseNs)
        return;
    var props = baseNs.Properties;
    var count = props.length;
    for (i = 0; i < count; i++) {
        var p = props[i];
        var name = p.DP ? p.DP.Name : p.Name;
        var curNsProp = Nullstone._FindProperty(targetNs.Properties, name);
        if (p.IsAbstract) {
            if (!curNsProp)
                throw new PropertyNotImplementedException(baseNs, targetNs, name);
            continue;
        } else if (curNsProp) {
            if (!curNsProp.Override)
                throw new PropertyCollisionException(baseNs, targetNs, name);
            continue;
        }
        targetNs.Properties.push(p);
    }
};
Nullstone._FindProperty = function (props, name) {
    var count = props.length;
    for (var i = 0; i < count; i++) {
        var p = props[i];
        if (name === (p.DP ? p.DP.Name : p.Name))
            return p;
    }
    return null;
};
Nullstone._GetTypeCountsAbove = function (count) {
    var arr = [];
    for (var tn in Nullstone._TypeCount) {
        if (Nullstone._TypeCount[tn] > count)
            arr[tn] = Nullstone._TypeCount[tn];
    }
    return arr;
};
Nullstone.ImportJsFile = function (url, onComplete) {
    var scripts = document.getElementsByTagName("script");
    for (var i = 0; i < scripts.length; i++) {
        if (scripts[i].src === url) {
            if (onComplete) onComplete(scripts[i]);
            return;
        }
    }
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src = url;
    script.onreadystatechange = function (e) {
        if (this.readyState === "completed") {
            if (onComplete) onComplete(script);
            return;
        }
    };
    script.onload = function () { if (onComplete) onComplete(script); };
    var head = document.getElementsByTagName("head")[0];
    head.appendChild(script);
};

(function (Fayde) {
    var PerfTimer = Nullstone.Create("PerfTimer");
    PerfTimer.Instance.Init = function () {
        this.IsDisabled = false;
        this.ReportFunc = function () { };
    };
    PerfTimer.Instance.Start = function () {
        if (this.IsDisabled)
            return;
        this._StartTime = new Date().getTime();
    };
    PerfTimer.Instance.Stop = function () {
        if (this.IsDisabled)
            return;
        var endTime = new Date().getTime();
        var elapsed = endTime - this._StartTime;
        if (this.ReportFunc)
            this.ReportFunc(elapsed);
        return elapsed;
    };
    Fayde.PerfTimer = Nullstone.FinishCreate(PerfTimer);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var PropertyInfo = Nullstone.Create("PropertyInfo");
    PropertyInfo.Find = function (typeOrObj, name) {
        var o = typeOrObj;
        var isType = typeOrObj instanceof Function;
        if (isType)
            o = new typeOrObj();
        var nameClosure = name;
        var propDesc = Nullstone.GetPropertyDescriptor(o, name);
        if (propDesc) {
            var pi = new PropertyInfo();
            pi.GetFunc = propDesc.get;
            if (!pi.GetFunc)
                pi.GetFunc = function () { return this[nameClosure]; }
            pi.SetFunc = propDesc.set;
            if (!pi.SetFunc && propDesc.writable)
                pi.SetFunc = function (value) { this[nameClosure] = value; }
            return pi;
        }
        var type = isType ? typeOrObj : typeOrObj.constructor;
        var pi = new PropertyInfo();
        pi.GetFunc = type.prototype["Get" + name];
        pi.SetFunc = type.prototype["Set" + name];
        return pi;
    };
    PropertyInfo.Instance.GetValue = function (ro) {
        if (this.GetFunc)
            return this.GetFunc.call(ro);
    };
    PropertyInfo.Instance.SetValue = function (ro, value) {
        if (this.SetFunc)
            this.SetFunc.call(ro, value);
    };
    namespace.PropertyInfo = Nullstone.FinishCreate(PropertyInfo);
})(window);

(function (namespace) {
    var Timer = Nullstone.Create("Timer");
    Timer.Instance.Init = function () {
        this.Tick = new MulticastEvent();
        this.SetInterval(0);
    };
    Timer.Instance.GetInterval = function () {
        return this._Interval;
    };
    Timer.Instance.SetInterval = function (value) {
        var isChanged = this._Interval !== value;
        this._Interval = value;
        if (isChanged && this.IsEnabled) {
            this.Stop();
            this.Start();
        }
    };
    Timer.Instance.Start = function () {
        if (this.IsEnabled)
            return;
        this.IsEnabled = true;
        var timer = this;
        this._IntervalID = setInterval(function () { timer.Tick.Raise(this, new EventArgs()); }, this.GetInterval().GetJsDelay());
    };
    Timer.Instance.Stop = function () {
        if (!this.IsEnabled)
            return;
        this.IsEnabled = false;
        clearInterval(this._IntervalID);
    };
    namespace.Timer = Nullstone.FinishCreate(Timer);
})(window);

(function (namespace) {
    namespace.PathEntryType = {
        Move: 0,
        Line: 1,
        Rect: 2,
        Quadratic: 3,
        Bezier: 4,
        EllipticalArc: 5,
        Arc: 6,
        ArcTo: 7,
        Close: 8
    };
    namespace.ShapeFlags = {
        Empty: 1,
        Normal: 2,
        Degenerate: 4,
        Radii: 8
    };
    namespace.PenLineCap = {
        Flat: 0,
        Square: 1,
        Round: 2,
        Triangle: 3
    };
    namespace.PenLineJoin = {
        Miter: 0,
        Bevel: 1,
        Round: 2
    };
    namespace.FillRule = {
        EvenOdd: 0,
        NonZero: 1
    };
    namespace.SweepDirection = {
        Counterclockwise: 0,
        Clockwise: 1
    };
})(Nullstone.Namespace("Fayde.Shapes"));

(function (namespace) {
    var RawPath = Nullstone.Create("RawPath");
    RawPath.Instance.Init = function () {
        this._Path = [];
    };
    RawPath.Instance.Move = function (x, y) {
        this._Path.push({
            type: namespace.PathEntryType.Move,
            x: x,
            y: y
        });
    };
    RawPath.Instance.Line = function (x, y) {
        this._Path.push({
            type: namespace.PathEntryType.Line,
            x: x,
            y: y
        });
    };
    RawPath.Instance.Rect = function (x, y, width, height) {
        this._Path.push({
            type: namespace.PathEntryType.Rect,
            x: x,
            y: y,
            width: width,
            height: height
        });
    };
    RawPath.Instance.RoundedRectFull = function (left, top, width, height, topLeft, topRight, bottomRight, bottomLeft) {
        var right = left + width;
        var bottom = top + height;
        this.Move(left + topLeft, top);
        this.Line(right - topRight, top);
        if (topRight > 0)
            this.Quadratic(right, top, right, top + topRight);
        this.Line(right, bottom - bottomRight);
        if (bottomRight > 0)
            this.Quadratic(right, bottom, right - bottomRight, bottom);
        this.Line(left + bottomLeft, bottom);
        if (bottomLeft > 0)
            this.Quadratic(left, bottom, left, bottom - bottomLeft);
        this.Line(left, top + topLeft);
        if (topLeft > 0)
            this.Quadratic(left, top, left + topLeft, top);
        this.Close();
    };
    RawPath.Instance.RoundedRect = function (left, top, width, height, radiusX, radiusY) {
        if (radiusX === 0.0 && radiusY === 0.0) {
            this.Rect(left, top, width, height);
            return;
        }
        var right = left + width;
        var bottom = top + height;
        this.Move(left + radiusX, top);
        this.Line(right - radiusX, top);
        this.Quadratic(right, top, right, top + radiusY);
        this.Line(right, bottom - radiusY);
        this.Quadratic(right, bottom, right - radiusX, bottom);
        this.Line(left + radiusX, bottom);
        this.Quadratic(left, bottom, left, bottom - radiusY);
        this.Line(left, top + radiusY);
        this.Quadratic(left, top, left + radiusX, top);
        this.Close();
    };
    RawPath.Instance.Quadratic = function (cpx, cpy, x, y) {
        this._Path.push({
            type: namespace.PathEntryType.Quadratic,
            cpx: cpx,
            cpy: cpy,
            x: x,
            y: y
        });
    };
    RawPath.Instance.Bezier = function (cp1x, cp1y, cp2x, cp2y, x, y) {
        this._Path.push({
            type: namespace.PathEntryType.Bezier,
            cp1x: cp1x,
            cp1y: cp1y,
            cp2x: cp2x,
            cp2y: cp2y,
            x: x,
            y: y
        });
    };
    RawPath.Instance.Ellipse = function (x, y, width, height) {
        var radiusX = width / 2;
        var radiusY = height / 2;
        var right = x + width;
        var bottom = y + height;
        var centerX = x + radiusX;
        var centerY = y + radiusY;
        if (width === height) { //circle
            this.Arc(centerX, centerY, radiusX, 0, Math.PI * 2, false);
        } else { //oval
            var kappa = .5522848; // 4 * ((sqrt(2) - 1) / 3)
            var ox = radiusX * kappa;
            var oy = radiusY * kappa;
            this.Move(x, centerY);
            this.Bezier(x, centerY - oy, centerX - ox, y, centerX, y);
            this.Bezier(centerX + ox, y, right, centerY - oy, right, centerY);
            this.Bezier(right, centerY + oy, centerX + ox, bottom, centerX, bottom);
            this.Bezier(centerX - ox, bottom, x, centerY + oy, x, centerY);
            this.Close();
        }
    };
    RawPath.Instance.EllipticalArc = function (width, height, rotationAngle, isLargeArcFlag, sweepDirectionFlag, ex, ey) {
        this._Path.push({
            type: namespace.PathEntryType.EllipticalArc,
            width: width,
            height: height,
            rotationAngle: rotationAngle,
            isLargeArcFlag: isLargeArcFlag,
            sweepDirectionFlag: sweepDirectionFlag,
            ex: ex,
            ey: ey
        });
    };
    RawPath.Instance.Arc = function (x, y, r, sAngle, eAngle, aClockwise) {
        this._Path.push({
            type: namespace.PathEntryType.Arc,
            x: x,
            y: y,
            r: r,
            sAngle: sAngle,
            eAngle: eAngle,
            aClockwise: aClockwise
        });
    };
    RawPath.Instance.ArcTo = function (cpx, cpy, x, y, radius) {
        this._Path.push({
            type: namespace.PathEntryType.ArcTo,
            cpx: cpx,
            cpy: cpy,
            x: x,
            y: y,
            r: radius
        });
    };
    RawPath.Instance.Close = function () {
        this._Path.push({
            type: namespace.PathEntryType.Close
        });
    };
    RawPath.Instance.Draw = function (ctx) {
        var canvasCtx = ctx;
        if (ctx instanceof Fayde._RenderContext)
            canvasCtx = ctx.CanvasContext;
        canvasCtx.beginPath();
        var backing = this._Path;
        for (var i = 0; i < backing.length; i++) {
            var p = backing[i];
            switch (p.type) {
                case namespace.PathEntryType.Move:
                    canvasCtx.moveTo(p.x, p.y);
                    DrawDebug("\t\tMoveTo: [X = " + p.x + "; Y = " + p.y + "]");
                    break;
                case namespace.PathEntryType.Line:
                    canvasCtx.lineTo(p.x, p.y);
                    DrawDebug("\t\tLineTo: [X = " + p.x + "; Y = " + p.y + "]");
                    break;
                case namespace.PathEntryType.Rect:
                    canvasCtx.rect(p.x, p.y, p.width, p.height);
                    DrawDebug("\t\tRect: [X = " + p.x + "; Y = " + p.y + "; Width = " + p.width + "; Height = " + p.height + "]");
                    break;
                case namespace.PathEntryType.Quadratic:
                    canvasCtx.quadraticCurveTo(p.cpx, p.cpy, p.x, p.y);
                    DrawDebug("\t\tQuadratic: [CPX = " + p.cpx + "; CPY = " + p.cpy + "; X = " + p.x + "; Y = " + p.y + "]");
                    break;
                case namespace.PathEntryType.Bezier:
                    canvasCtx.bezierCurveTo(p.cp1x, p.cp1y, p.cp2x, p.cp2y, p.x, p.y);
                    break;
                case namespace.PathEntryType.Arc:
                    canvasCtx.arc(p.x, p.y, p.r, p.sAngle, p.eAngle, p.aClockwise);
                    break;
                case namespace.PathEntryType.ArcTo:
                    canvasCtx.arcTo(p.cpx, p.cpy, p.x, p.y, p.r);
                    break;
                case namespace.PathEntryType.Close:
                    canvasCtx.closePath();
                    break;
            }
        }
    };
    RawPath.Instance.CalculateBounds = function (thickness) {
        var backing = this._Path;
        var startX, startY;
        var xMin = xMax = yMin = yMax = null;
        var xRange, yRange;
        for (var i = 0; i < backing.length; i++) {
            var p = backing[i];
            switch (p.type) {
                case namespace.PathEntryType.Move:
                    if (xMin == null && yMin == null) {
                        xMin = xMax = p.x;
                        yMin = yMax = p.y;
                    } else {
                        xMin = Math.min(p.x, xMin);
                        yMin = Math.min(p.y, yMin);
                        xMax = Math.max(p.x, xMax);
                        yMax = Math.max(p.y, yMax);
                    }
                    startX = p.x;
                    startY = p.y;
                    break;
                case namespace.PathEntryType.Line:
                    xMin = Math.min(p.x, xMin);
                    yMin = Math.min(p.y, yMin);
                    xMax = Math.max(p.x, xMax);
                    yMax = Math.max(p.y, yMax);
                    startX = p.x;
                    startY = p.y;
                    break;
                case namespace.PathEntryType.Rect: //does not use current x,y
                    xMin = Math.min(p.x, xMin);
                    yMin = Math.min(p.y, yMin);
                    xMax = Math.max(p.x + p.width, xMax);
                    yMax = Math.max(p.y + p.height, yMax);
                    break;
                case namespace.PathEntryType.Quadratic:
                    xRange = RawPath._CalculateQuadraticBezierRange(startX, p.cpx, p.x);
                    xMin = Math.min(xMin, xRange.min);
                    xMax = Math.max(xMax, xRange.max);
                    yRange = RawPath._CalculateQuadraticBezierRange(startY, p.cpy, p.y);
                    yMin = Math.min(yMin, yRange.min);
                    yMax = Math.max(yMax, yRange.max);
                    startX = p.x;
                    startY = p.y;
                    break;
                case namespace.PathEntryType.Bezier:
                    xRange = RawPath._CalculateCubicBezierRange(startX, p.cp1x, p.cp2x, p.x);
                    xMin = Math.min(xMin, xRange.min);
                    xMax = Math.max(xMax, xRange.max);
                    yRange = RawPath._CalculateCubicBezierRange(startY, p.cp1y, p.cp2y, p.y);
                    yMin = Math.min(yMin, yRange.min);
                    yMax = Math.max(yMax, yRange.max);
                    startX = p.x;
                    startY = p.y;
                    break;
                case namespace.PathEntryType.Arc: //does not use current x,y
                    if (p.sAngle !== p.eAngle) {
                        var r = RawPath._CalculateArcRange(p.x, p.y, p.r, p.sAngle, p.eAngle, p.aClockwise);
                        xMin = Math.min(xMin, r.xMin);
                        xMax = Math.max(xMax, r.xMax);
                        yMin = Math.min(yMin, r.yMin);
                        yMax = Math.max(yMax, r.yMax);
                    }
                    break;
                case namespace.PathEntryType.ArcTo:
                    var r = RawPath._CalculateArcToRange(startX, startY, p.cpx, p.cpy, p.x, p.y, p.r);
                    xMin = Math.min(xMin, r.xMin);
                    xMax = Math.max(xMax, r.xMax);
                    yMin = Math.min(yMin, r.yMin);
                    yMax = Math.max(yMax, r.yMax);
                    startX = p.x;
                    startY = p.y;
                    break;
            }
        }
        return new Rect(xMin, yMin, xMax - xMin, yMax - yMin);
    };
    RawPath._CalculateQuadraticBezierRange = function (a, b, c) {
        var min = Math.min(a, c);
        var max = Math.max(a, c);
        if (min <= b && b <= max) {
            return {
                min: min,
                max: max
            };
        }
        var t = (a - b) / (a - 2 * b + c);
        var xt = (a * Math.pow(1 - t, 2)) + (2 * b * (1 - t) * t) + (c * Math.pow(t, 2));
        if (min > b) {
            min = Math.min(min, xt);
        } else {
            max = Math.max(max, xt);
        }
        return {
            min: min,
            max: max
        };
    };
    RawPath._CalculateCubicBezierRange = function (a, b, c, d) {
        var min = Math.min(a, d);
        var max = Math.max(a, d);
        if ((min <= b && b <= max) && (min <= c && c <= max)) {
            return {
                min: min,
                max: max
            };
        }
        var u = 2 * a - 4 * b + 2 * c;
        var v = b - a;
        var w = -a + 3 * b + d - 3 * c;
        var rt = Math.sqrt(u * u - 4 * v * w);
        if (!isNaN(rt)) {
            var t;
            t = (-u + rt) / (2 * w);
            if (t >= 0 && t <= 1) {
                var ot = 1 - t;
                var xt = (a * ot * ot * ot) + (3 * b * t * ot * ot) + (3 * c * ot * t * t) + (d * t * t * t);
                min = Math.min(min, xt);
                max = Math.max(max, xt);
            }
            t = (-u - rt) / (2 * w);
            if (t >= 0 && t <= 1) {
                var ot = 1 - t;
                var xt = (a * ot * ot * ot) + (3 * b * t * ot * ot) + (3 * c * ot * t * t) + (d * t * t * t);
                min = Math.min(min, xt);
                max = Math.max(max, xt);
            }
        }
        return {
            min: min,
            max: max
        };
    };
    RawPath._CalculateArcRange = function (cx, cy, r, sa, ea, cc) {
        var sx = cx + (r * Math.cos(sa));
        var sy = cy + (r * Math.sin(sa));
        var ex = cx + (r * Math.cos(ea));
        var ey = cy + (r * Math.sin(ea));
        return RawPath._CalculateArcPointsRange(cx, cy, sx, sy, ex, ey, r, cc);
    };
    RawPath._CalculateArcToRange = function (sx, sy, cpx, cpy, ex, ey, r) {
        NotImplemented("RawPath._CalculateArcToRange");
        return {
            xMin: sx,
            xMax: sx,
            yMin: sy,
            yMax: sy
        };
        var v1x = cpx - sx;
        var v1y = cpy - sy;
        var v2x = ex - cpx;
        var v2y = ey - cpy;
        var theta_outer1 = Math.atan2(Math.abs(v1y), Math.abs(v1x));
        var theta_outer2 = Math.atan2(Math.abs(v2y), Math.abs(v2x));
        var inner_theta = Math.PI - theta_outer1 - theta_outer2;
        var h = r / Math.sin(inner_theta / 2);
        var cx = cpx + h * Math.cos(inner_theta / 2 + theta_outer2);
        var cy = cpy + h * Math.sin(inner_theta / 2 + theta_outer2);
        var a = r / Math.tan(inner_theta / 2);
        var sx = cpx + a * Math.cos(theta_outer2 + inner_theta);
        var sy = cpy + a * Math.sin(theta_outer2 + inner_theta);
        var ex = cpx + a * Math.cos(theta_outer2);
        var ey = cpy + a * Math.sin(theta_outer2);
        var cc = true;
        var r = RawPath._CalculateArcPointsRange(cx, cy, sx, sy, ex, ey, r, cc);
        return {
            xMin: Math.min(sx, r.xMin),
            xMax: Math.max(sx, r.xMax),
            yMin: Math.min(sy, r.yMin),
            yMax: Math.max(sy, r.yMax)
        };
    };
    RawPath._CalculateArcPointsRange = function (cx, cy, sx, sy, ex, ey, r, cc) {
        var xMin = Math.min(sx, ex);
        var xMax = Math.max(sx, ex);
        var yMin = Math.min(sy, ey);
        var yMax = Math.max(sy, ey);
        var xLeft = cx - r;
        if (RawPath._ArcContainsPoint(sx, sy, ex, ey, xLeft, cy, cc)) {
            xMin = Math.min(xMin, xLeft);
        }
        var xRight = cx + r;
        if (RawPath._ArcContainsPoint(sx, sy, ex, ey, xRight, cy, cc)) {
            xMax = Math.max(xMax, xRight);
        }
        var yTop = cy - r;
        if (RawPath._ArcContainsPoint(sx, sy, ex, ey, cx, yTop, cc)) {
            yMin = Math.min(yMin, yTop);
        }
        var yBottom = cy + r;
        if (RawPath._ArcContainsPoint(sx, sy, ex, ey, cx, yBottom, cc)) {
            yMax = Math.max(yMax, yBottom);
        }
        return {
            xMin: xMin,
            xMax: xMax,
            yMin: yMin,
            yMax: yMax
        };
    };
    RawPath._ArcContainsPoint = function (sx, sy, ex, ey, cpx, cpy, cc) {
        var n = (ex - sx) * (cpy - sy) - (cpx - sx) * (ey - sy);
        if (n === 0)
            return true;
        if (n > 0 && cc)
            return true;
        if (n < 0 && !cc)
            return true;
        return false;
    };
    RawPath.Merge = function (path1, path2) {
        NotImplemented("RawPath.Merge");
    };
    RawPath.Instance.Serialize = function () {
        var s = "";
        var len = this._Path.length;
        var backing = this._Path;
        for (var i = 0; i < len; i++) {
            if (i > 0)
                s += " ";
            var p = backing[i];
            switch (p.type) {
                case namespace.PathEntryType.Move:
                    s += "M" + p.x.toString() + " " + p.y.toString();
                    break;
                case namespace.PathEntryType.Line:
                    s += "L" + p.x.toString() + " " + p.y.toString();
                    break;
                case namespace.PathEntryType.Rect:
                    break;
                case namespace.PathEntryType.Quadratic:
                    s += "Q" + p.cpx.toString() + " " + p.cpy.toString() + ", " + p.x.toString() + " " + p.y.toString();
                    break;
                case namespace.PathEntryType.Bezier:
                    s += "C" + p.cp1x.toString() + " " + p.cp1y.toString() + ", " + p.cp2x.toString() + " " + p.cp2y.toString() + ", " + p.x.toString() + " " + p.y.toString();
                    break;
                case namespace.PathEntryType.EllipticalArc:
                    s += "A" + p.width.toString() + " " + p.height.toString() + " " + p.rotationAngle.toString() + " " + p.isLargeArcFlag.toString() + " " + p.sweepDirectionFlag.toString() + " " + p.ex.toString() + " " + p.ey.toString();
                    break;
                case namespace.PathEntryType.ArcTo:
                    break;
                case namespace.PathEntryType.Close:
                    s += "Z";
                    break;
            }
        }
        return s;
    };
    namespace.RawPath = Nullstone.FinishCreate(RawPath);
})(Nullstone.Namespace("Fayde.Shapes"));

(function (Text) {
    Text._TextBoxModelChanged = {
        Nothing: 0,
        TextAlignment: 1,
        TextWrapping: 2,
        Selection: 3,
        Brush: 4,
        Font: 5,
        Text: 6
    };
    Text._TextBoxEmitChanged = {
        NOTHING: 0,
        SELECTION: 1 << 0,
        TEXT: 1 << 1
    };
})(Nullstone.Namespace("Fayde.Text"));

(function (Text) {
    var _TextBuffer = Nullstone.Create("_TextBuffer");
    _TextBuffer.Instance.Init = function () {
        this._Text = null;
    };
    _TextBuffer.Instance.GetLength = function () {
        if (this._Text == null)
            return 0;
        return this._Text.length;
    };
    _TextBuffer.Instance.Reset = function () {
        this._Text = null;
    };
    _TextBuffer.Instance.Prepend = function (str) {
        if (!this._Text)
            this._Text = str;
        else
            this._Text = str + this._Text;
    };
    _TextBuffer.Instance.Append = function (str) {
        if (!this._Text)
            this._Text = str;
        else
            this._Text += str;
    };
    _TextBuffer.Instance.Cut = function (start, len) {
        if (!this._Text) {
            this._Text = null;
            return;
        }
        this._Text = this._Text.slice(0, start) + this._Text.slice(start + len);
    };
    _TextBuffer.Instance.Insert = function (index, str) {
        if (!this._Text)
            this._Text = str;
        else
            this._Text = [this._Text.slice(0, index), str, this._Text.slice(index)].join('');
    };
    _TextBuffer.Instance.Replace = function (start, len, str) {
        if (!this._Text) {
            this._Text = str;
            return;
        }
        this._Text = [this._Text.slice(0, start), str, this._Text.slice(start + len)].join('');
    };
    Text._TextBuffer = Nullstone.FinishCreate(_TextBuffer);
})(Nullstone.Namespace("Fayde.Text"));

(function (Text) {
    var breakType = {
        Unknown: 0,
        Space: 1,
        OpenPunctuation: 2,
        ClosePunctuation: 3,
        InFixSeparator: 4,
        Numeric: 5,
        Alphabetic: 6,
        WordJoiner: 7,
        ZeroWidthSpace: 8,
        BeforeAndAfter: 9,
        NonBreakingGlue: 10,
        Inseparable: 11,
        Before: 12,
        Ideographic: 13,
        CombiningMark: 14,
        Contingent: 15,
        Ambiguous: 16,
        Quotation: 17,
        Prefix: 18
    };
    var layoutWordType = {
        Unknown: 0,
        Numeric: 1,
        Alphabetic: 2,
        Ideographic: 3,
        Inseparable: 4
    };
    var _LayoutWord = Nullstone.Create("_LayoutWord");
    _LayoutWord.Instance.Init = function () {
        this._Advance = 0.0;
        this._LineAdvance = 0.0;
        this._Length = 0;
        this._BreakOps = null;
        this._Font = new Font();
    };
    Nullstone.FinishCreate(_LayoutWord);
    var _WordBreakOp = Nullstone.Create("_WordBreakOp");
    _WordBreakOp.Instance.Init = function () {
        this._Advance = 0.0;
        this._Index = 0;
        this._Btype = 0;
        this._C = '';
    };
    _WordBreakOp.Instance.Copy = function () {
        var newOp = new _WordBreakOp();
        newOp._Advance = this._Advance;
        newOp._Btype = this._Btype;
        newOp._C = this._C;
        newOp._Index = this._Index;
    };
    _WordBreakOp.Instance.SetWordBasics = function (word) {
        word._Length = this._Index;
        word._Advance = this._Advance;
    };
    Nullstone.FinishCreate(_WordBreakOp);
    var _TextLayoutGlyphCluster = Nullstone.Create("_TextLayoutGlyphCluster", undefined, 3);
    _TextLayoutGlyphCluster.Instance.Init = function (text, font, selected) {
        this._Text = text;
        this._Selected = selected == true;
        this._Advance = Surface.MeasureText(text, font).Width;
    };
    _TextLayoutGlyphCluster.Instance._Render = function (ctx, origin, attrs, x, y) {
        if (this._Text.length == 0 || this._Advance == 0.0)
            return;
        var font = attrs.GetFont();
        var y0 = font._Ascender();
        ctx.Translate(x, y - y0);
        var brush;
        var fontHeight = font.GetActualHeight();
        var area = new Rect(origin.X, origin.Y, this._Advance, fontHeight);
        if (this._Selected && (brush = attrs.GetBackground(true))) {
            ctx.FillRect(brush, area); //selection background
        }
        if (!(brush = attrs.GetForeground(this._Selected)))
            return;
        var canvasCtx = ctx.CanvasContext;
        brush.SetupBrush(canvasCtx, area);
        var brushHtml5 = brush.ToHtml5Object();
        canvasCtx.fillStyle = brushHtml5;
        canvasCtx.font = font.ToHtml5Object();
        canvasCtx.textAlign = "left";
        canvasCtx.textBaseline = "top";
        canvasCtx.fillText(this._Text, 0, 0);
        DrawDebug("Text: " + this._Text + " [" + canvasCtx.fillStyle.toString() + "]");
        if (attrs.IsUnderlined()) {
            canvasCtx.beginPath();
            canvasCtx.moveTo(0, fontHeight);
            canvasCtx.lineTo(this._Advance, fontHeight);
            canvasCtx.lineWidth = 2;
            canvasCtx.strokeStyle = brushHtml5;
            canvasCtx.stroke();
        }
    };
    Nullstone.FinishCreate(_TextLayoutGlyphCluster);
    var _TextLayoutRun = Nullstone.Create("_TextLayoutRun", undefined, 3);
    _TextLayoutRun.Instance.Init = function (line, attrs, start) {
        this._Clusters = [];
        this._Attrs = attrs;
        this._Start = start;
        this._Line = line;
        this._Advance = 0.0; //after layout, will contain horizontal distance this run advances
        this._Length = 0;
    };
    _TextLayoutRun.Instance._GenerateCache = function () {
        var selectionLength = this._Line._Layout.GetSelectionLength();
        var selectionStart = this._Line._Layout.GetSelectionStart();
        var text = this._Line._Layout.GetText();
        var font = this._Attrs.GetFont();
        var len;
        var index = this._Start;
        var cluster1;
        var cluster2;
        if (selectionLength === 0 || this._Start < selectionStart) {
            len = selectionLength > 0 ? Math.min(selectionStart - this._Start, this._Length) : this._Length;
            cluster1 = new _TextLayoutGlyphCluster(text.substr(this._Start, len), font);
            this._Clusters.push(cluster1);
            index += len;
        }
        var selectionEnd = selectionStart + selectionLength;
        var runEnd = this._Start + this._Length;
        if (index < runEnd && index < selectionEnd) {
            len = Math.min(runEnd - index, selectionEnd - index);
            cluster2 = new _TextLayoutGlyphCluster(text.substr(index, len), font, true);
            this._Clusters.push(cluster2);
            index += len;
        }
        var cluster3;
        if (index < runEnd) {
            len = runEnd - index;
            cluster3 = new _TextLayoutGlyphCluster(text.substr(index, len), font);
            this._Clusters.push(cluster3);
            index += len;
        }
    };
    _TextLayoutRun.Instance._ClearCache = function () {
        this._Clusters = [];
    };
    _TextLayoutRun.Instance._Render = function (ctx, origin, x, y) {
        var x0 = x;
        if (this._Clusters.length === 0)
            this._GenerateCache();
        for (var i = 0; i < this._Clusters.length; i++) {
            var cluster = this._Clusters[i];
            ctx.Save();
            cluster._Render(ctx, origin, this._Attrs, x0, y);
            ctx.Restore();
            x0 += cluster._Advance;
        }
    };
    _TextLayoutRun.Instance.__Debug = function (allText) {
        return allText.substr(this._Start, this._Length);
    };
    Nullstone.FinishCreate(_TextLayoutRun);
    var _TextLayoutLine = Nullstone.Create("_TextLayoutLine", undefined, 3);
    _TextLayoutLine.Instance.Init = function (layout, start, offset) {
        this._Runs = [];
        this._Layout = layout;
        this._Start = start;
        this._Offset = offset;
        this._Advance = 0.0; //after layout, will contain horizontal distance this line advances
        this._Descend = 0.0;
        this._Height = 0.0;
        this._Width = 0.0;
        this._Length = 0;
    };
    _TextLayoutLine.Instance.GetCursorFromX = function (offset, x) {
        var run = null;
        var x0 = offset.X + this._Layout._HorizontalAlignment(this._Advance);
        var cursor = this._Offset;
        var text = this._Layout.GetText();
        var index = this._Start;
        var end;
        var c;
        var i;
        for (i = 0; i < this._Runs.length; i++) {
            run = this._Runs[i];
            if (x < (x0 + run._Advance))
                break; // x is somewhere inside this run
            cursor += run._Length;
            index += run._Length;
            x0 += run._Advance;
            run = null;
        }
        if (run != null) {
            index = run._Start;
            end = run._Start + run._Length;
            var font = run._Attrs.GetFont();
            var m;
            var ch;
            while (index < end) {
                ch = index;
                cursor++;
                c = text.charAt(index);
                index++;
                if (c === '\t')
                    c = ' ';
                m = Surface._MeasureWidth(c, font);
                if (x <= x0 + (m / 2.0)) {
                    index = ch;
                    cursor--;
                    break;
                }
                x0 += m;
            }
        } else if (i > 0) {
            run = this._Runs[i - 1];
            end = run._Start + run._Length;
            index = run._Start;
            c = end - 1 < 0 ? null : text.charAt(end - 1);
            if (c == '\n') {
                cursor--;
                end--;
                c = end - 1 < 0 ? null : text.charAt(end - 1);
                if (c == '\r') {
                    cursor--;
                    end--;
                }
            }
        }
        return cursor;
    };
    _TextLayoutLine.Instance._Render = function (ctx, origin, left, top) {
        var run;
        var x0 = left;
        var y0 = top;
        for (var i = 0; i < this._Runs.length; i++) {
            run = this._Runs[i];
            run._Render(ctx, origin, x0, y0);
            x0 += run._Advance;
        }
    };
    _TextLayoutLine.Instance.__Debug = function (allText) {
        var t = "";
        t += "\t\tRuns: " + this._Runs.length.toString() + "\n";
        for (var i = 0; i < this._Runs.length; i++) {
            t += "\t\t\tRun " + i.toString() + ": ";
            t += this._Runs[i].__Debug(allText);
            t += "\n";
        }
        return t;
    };
    Nullstone.FinishCreate(_TextLayoutLine);
    var TextLayout = Nullstone.Create("TextLayout");
    TextLayout.Instance.Init = function () {
        this._SelectionStart = 0;
        this._SelectionLength = 0;
        this._Strategy = Fayde.LineStackingStrategy.MaxHeight;
        this._Alignment = Fayde.TextAlignment.Left;
        this._Trimming = Fayde.Controls.TextTrimming.None;
        this._Wrapping = Fayde.Controls.TextWrapping.NoWrap;
        this._AvailableWidth = Number.POSITIVE_INFINITY;
        this._MaxHeight = Number.POSITIVE_INFINITY;
        this._MaxWidth = Number.POSITIVE_INFINITY;
        this._BaseDescent = 0.0;
        this._BaseHeight = 0.0;
        this._ActualHeight = NaN;
        this._ActualWidth = NaN;
        this._LineHeight = NaN;
        this._Attributes = null;
        this._Lines = [];
        this._IsWrapped = true;
        this._Text = null;
        this._Length = 0;
    };
    TextLayout.Instance.GetSelectionLength = function () {
        return this._SelectionLength;
    };
    TextLayout.Instance.GetSelectionStart = function () {
        return this._SelectionStart;
    };
    TextLayout.Instance.GetLineStackingStrategy = function () {
        return this._Strategy;
    };
    TextLayout.Instance.SetLineStackingStrategy = function (value) {
        if (this._Strategy == value)
            return false;
        this._Strategy = value;
        this._ResetState();
        return true;
    };
    TextLayout.Instance.GetTextAttributes = function () {
        return this._Attributes;
    };
    TextLayout.Instance.SetTextAttributes = function (value) {
        if (this._Attributes) {
            this._Attributes.Clear(true);
        }
        this._Attributes = value;
        this._ResetState();
        return true;
    };
    TextLayout.Instance.GetTextAlignment = function () {
        return this._Alignment;
    };
    TextLayout.Instance.SetTextAlignment = function (value) {
        if (this._Alignment == value)
            return false;
        this._Alignment = value;
        this._ResetState();
        return true;
    };
    TextLayout.Instance.GetTextTrimming = function () {
        return this._Trimming;
    };
    TextLayout.Instance.SetTextTrimming = function (value) {
        if (this._Trimming == value)
            return false;
        this._Trimming = value;
        this._ResetState();
        return true;
    };
    TextLayout.Instance.GetTextWrapping = function () {
        return this._Wrapping;
    };
    TextLayout.Instance.SetTextWrapping = function (value) {
        switch (value) {
            case Fayde.Controls.TextWrapping.NoWrap:
            case Fayde.Controls.TextWrapping.Wrap:
                break;
            default:
                value = Fayde.Controls.TextWrapping.Wrap;
                break;
        }
        if (this._Wrapping == value)
            return false;
        this._Wrapping = value;
        this._ResetState();
        return true;
    };
    TextLayout.Instance.GetLineHeight = function () {
        return this._LineHeight;
    };
    TextLayout.Instance.SetLineHeight = function (value) {
        if (this._LineHeight == value)
            return false;
        this._LineHeight = value;
        this._ResetState();
        return true;
    };
    TextLayout.Instance.GetMaxHeight = function () {
        return this._MaxHeight;
    };
    TextLayout.Instance.SetMaxHeight = function (value) {
        if (this._MaxHeight == value)
            return false;
        this._MaxHeight = value;
        this._ResetState();
        return true;
    };
    TextLayout.Instance.GetMaxWidth = function () {
        return this._MaxWidth;
    };
    TextLayout.Instance.SetMaxWidth = function (value) {
        if (value === 0.0)
            value = Number.POSITIVE_INFINITY;
        if (this._MaxWidth === value)
            return false;
        if (!this._IsWrapped && (!isFinite(value) || value > this._ActualWidth)) {
            this._MaxWidth = value;
            return false;
        }
        this._MaxWidth = value;
        this._ResetState();
        return true;
    };
    TextLayout.Instance.GetAvailableWidth = function () {
        return this._AvailableWidth;
    };
    TextLayout.Instance.SetAvailableWidth = function (value) {
        this._AvailableWidth = value;
        return false;
    };
    TextLayout.Instance.GetText = function () {
        return this._Text;
    };
    TextLayout.Instance.SetText = function (value, length) {
        if (value != null) {
            this._Text = value;
            this._Length = length == -1 ? value.length : length;
        } else {
            this._Text = null;
            this._Length = 0;
        }
        this._ResetState();
        return true;
    };
    TextLayout.Instance.GetBaselineOffset = function () {
        if (this._Lines.length === 0)
            return 0;
        var line = this._Lines[0];
        return line._Height + line._Descend;
    };
    TextLayout.Instance.OverrideLineHeight = function () {
        return this.GetLineStackingStrategy() === Fayde.LineStackingStrategy.BlockLineHeight && this.GetLineHeight() !== 0;
    };
    TextLayout.Instance.GetLineHeightOverride = function () {
        if (isNaN(this.GetLineHeight()))
            return this._BaseHeight;
        return this.GetLineHeight();
    };
    TextLayout.Instance.GetDescendOverride = function () {
        if (isNaN(this.GetLineHeight()))
            return this._BaseDescent;
        if (this._BaseHeight == 0.0)
            return 0.0;
        return this.GetLineHeight() * (this._BaseDescent / this._BaseHeight);
    }
    TextLayout.Instance.GetLineFromY = function (offset, y, refIndex) {
        var line = null;
        var y0 = offset.Y;
        var y1;
        for (var i = 0; i < this._Lines.length; i++) {
            line = this._Lines[i];
            y1 = y0 + line._Height; //set y1 to top of next line
            if (y < y1) {
                if (refIndex)
                    refIndex.Value = i;
                return line;
            }
            y0 = y1;
        }
        return null;
    };
    TextLayout.Instance.GetLineFromIndex = function (index) {
        if (index >= this._Lines.length || index < 0)
            return null;
        return this._Lines[index];
    };
    TextLayout.Instance.GetCursorFromXY = function (offset, x, y) {
        var line;
        if (y < offset.Y) {
            line = this._Lines[0];
        } else if (!(line = this.GetLineFromY(offset, y))) {
            line = this._Lines[this._Lines.length - 1];
        }
        return line.GetCursorFromX(offset, x);
    };
    TextLayout.Instance.GetSelectionCursor = function (offset, pos) {
        var x0 = offset.X;
        var y0 = offset.Y;
        var height = 0.0;
        var y1 = 0.0;
        var cursor = 0;
        for (var i = 0; i < this._Lines.length; i++) {
            var line = this._Lines[i];
            x0 = offset.X + this._HorizontalAlignment(line._Advance);
            y1 = y0 + line._Height + line._Descend;
            height = line._Height;
            if (pos >= cursor + line._Length) {
                if ((i + 1) === this._Lines.length) {
                    if (TextLayout._IsLineBreak(this._Text.substr(line._Start + line._Length - 1, 2))) {
                        x0 = offset.X + this._HorizontalAlignment(0.0);
                        y0 += line._Height;
                    } else {
                        x0 += line._Advance;
                    }
                    break;
                }
                cursor += line._Length;
                y0 += line._Height;
                continue;
            }
            for (var j = 0; j < line._Runs.length; j++) {
                var run = line._Runs[j];
                end = run._Start + run._Length;
                if (pos >= cursor + run._Length) {
                    cursor += run._Length;
                    x0 += run._Advance;
                    continue;
                }
                if (run._Start === pos)
                    break;
                var font = run._Attrs.GetFont();
                x0 += Surface._MeasureWidth(this._Text.slice(run._Start, pos), font);
                break;
            }
            break;
        }
        return new Rect(x0, y0, 1.0, height);
    };
    TextLayout.Instance._FindLineWithIndex = function (index) {
        var cursor = 0;
        for (var i = 0; i < this._Lines.length; i++) {
            var line = this._Lines[i];
            if (index < cursor + line._Length)
                return line;
            cursor += line._Length;
        }
        return null;
    };
    TextLayout.Instance.Select = function (start, length) {
        if (!this._Text) {
            this._SelectionLength = 0;
            this._SelectionStart = 0;
            return;
        }
        var newSelectionStart;
        var newSelectionLength;
        var index;
        var end;
        if (!false) {
            newSelectionStart = index = start;
            end = index + length;
            newSelectionLength = length;
        } else {
            newSelectionLength = length;
            newSelectionStart = start;
        }
        if (this._SelectionStart === newSelectionStart && this._SelectionLength === newSelectionLength)
            return;
        if (this._SelectionLength > 0 || newSelectionLength > 0)
            this._ClearCache();
        this._SelectionLength = newSelectionLength;
        this._SelectionStart = newSelectionStart;
    };
    TextLayout.Instance._ClearCache = function () {
        var line;
        for (var i = 0; i < this._Lines.length; i++) {
            line = this._Lines[i];
            for (var j = 0; j < line._Runs.length; j++) {
                line._Runs[i]._ClearCache();
            }
        }
    };
    TextLayout.Instance._ClearLines = function () {
        this._Lines = [];
    };
    TextLayout.Instance._ResetState = function () {
        this._ActualHeight = NaN;
        this._ActualWidth = NaN;
    };
    TextLayout.Instance.GetRenderExtents = function () {
        this.Layout();
        return new Rect(this._HorizontalAlignment(this._ActualWidth), 0.0, this._ActualWidth, this._ActualHeight);
    };
    TextLayout.Instance.GetActualExtents = function () {
        return new Size(this._ActualWidth, this._ActualHeight);
    };
    TextLayout.Instance.Layout = function () {
        if (!isNaN(this._ActualWidth))
            return;
        this._ActualHeight = 0.0;
        this._ActualWidth = 0.0;
        this._IsWrapped = false;
        this._ClearLines();
        if (this._Text == null || !TextLayout._ValidateAttrs(this._Attributes))
            return;
        var word = new _LayoutWord();
        if (this._Wrapping === Fayde.Controls.TextWrapping.Wrap)
            word._BreakOps = [];
        else
            word._BreakOps = null;
        var layoutWordFunc = this._Wrapping === Fayde.Controls.TextWrapping.NoWrap ? TextLayout._LayoutWordNoWrap : TextLayout._LayoutWordWrap;
        var line = new _TextLayoutLine(this, 0, 0);
        if (this.OverrideLineHeight()) {
            line._Descend = this.GetDescendOverride();
            line._Height = this.GetLineHeightOverride();
        }
        this._Lines.push(line);
        var index = 0;
        var attrs = this._Attributes.Head;
        var nattrs;
        var end;
        var run;
        var font;
        do {
            nattrs = attrs.Next;
            end = nattrs ? nattrs._Start : this._Length;
            run = new _TextLayoutRun(line, attrs, index);
            line._Runs.push(run);
            word._Font = font = attrs.GetFont();
            if (end - index <= 0) {
                if (!this.OverrideLineHeight()) {
                    line._Descend = Math.min(line._Descend, font._Descender());
                    line._Height = Math.max(line._Height, font.GetActualHeight());
                }
                this._ActualHeight += line._Height;
                break;
            }
            while (index < end) {
                var linebreak = false;
                var wrapped = false;
                while (index < end) {
                    var lineBreakLength = TextLayout._IsLineBreak(this._Text.slice(index, end));
                    if (lineBreakLength > 0) {
                        if (line._Length == 0 && !this.OverrideLineHeight()) {
                            line._Descend = font._Descender();
                            line._Height = font.GetActualHeight();
                        }
                        line._Length += lineBreakLength;
                        run._Length += lineBreakLength;
                        index += lineBreakLength;
                        linebreak = true;
                        break;
                    }
                    word._LineAdvance = line._Advance;
                    if (layoutWordFunc(word, this._Text.slice(index, end), this.GetMaxWidth())) {
                        this._IsWrapped = true;
                        wrapped = true;
                    }
                    if (word._Length > 0) {
                        if (!this.OverrideLineHeight()) {
                            line._Descend = Math.min(line._Descend, font._Descender());
                            line._Height = Math.max(line._Height, font.GetActualHeight());
                        }
                        line._Advance += word._Advance;
                        run._Advance += word._Advance;
                        line._Width = line._Advance;
                        line._Length += word._Length;
                        run._Length += word._Length;
                        index += word._Length;
                    }
                    if (wrapped)
                        break;
                    word._LineAdvance = line._Advance;
                    TextLayout._LayoutLwsp(word, this._Text.slice(index, end), font);
                    if (word._Length > 0) {
                        if (!this.OverrideLineHeight()) {
                            line._Descend = Math.min(line._Descend, font._Descender());
                            line._Height = Math.max(line._Height, font.GetActualHeight());
                        }
                        line._Advance += word._Advance;
                        run._Advance += word._Advance;
                        line._Width = line._Advance;
                        line._Length += word._Length;
                        run._Length += word._Length;
                        index += word._Length;
                    }
                }
                var atend = index >= end;
                if (linebreak || wrapped || atend) {
                    this._ActualWidth = Math.max(this._ActualWidth, atend ? line._Advance : line._Width);
                    this._ActualHeight += line._Height;
                    if (linebreak || wrapped) {
                        line = new _TextLayoutLine(this, index, index);
                        if (!this.OverrideLineHeight()) {
                            if (end - index < 1) {
                                line._Descend = font._Descender();
                                line._Height = font.GetActualHeight();
                            }
                        } else {
                            line._Descend = this.GetDescendOverride();
                            line._Height = this.GetLineHeightOverride();
                        }
                        if (linebreak && (end - index < 1))
                            this._ActualHeight += line._Height;
                        this._Lines.push(line);
                    }
                    if (index < end) {
                        run = new _TextLayoutRun(line, attrs, index);
                        line._Runs.push(run);
                    }
                }
            }
            attrs = nattrs;
        } while (end - index > 0);
    };
    TextLayout.Instance._HorizontalAlignment = function (lineWidth) {
        var deltax = 0.0;
        var width;
        switch (this._Alignment) {
            case Fayde.TextAlignment.Center:
                width = TextLayout._GetWidthConstraint(this._AvailableWidth, this._MaxWidth, this._ActualWidth);
                if (lineWidth < width)
                    deltax = (width - lineWidth) / 2.0;
                break;
            case Fayde.TextAlignment.Right:
                width = TextLayout._GetWidthConstraint(this._AvailableWidth, this._MaxWidth, this._ActualWidth);
                if (lineWidth < width)
                    deltax = width - lineWidth;
                break;
        }
        return deltax;
    };
    TextLayout.Instance._Render = function (ctx, origin, offset) {
        var line;
        var x;
        var y = offset.Y;
        this.Layout();
        for (var i = 0; i < this._Lines.length; i++) {
            line = this._Lines[i];
            x = offset.X + this._HorizontalAlignment(line._Advance);
            line._Render(ctx, origin, x, y);
            y += line._Height;
        }
    };
    TextLayout.Instance.__Debug = function () {
        var allText = this.GetText();
        var t = "";
        t += "Lines: " + this._Lines.length.toString() + "\n";
        for (var i = 0; i < this._Lines.length; i++) {
            t += "\tLine " + i.toString() + ":\n";
            t += this._Lines[i].__Debug(allText);
        }
        return t;
    };
    TextLayout._ValidateAttrs = function (attributes) {
        var attrs;
        if (!(attrs = attributes.Head) || attrs._Start != 0)
            return false;
        while (attrs != null) {
            if (!attrs.GetFont()) //WTF: This whole method may not be valid in our case
                return false;
            attrs = attrs.Next;
        }
        return true;
    };
    TextLayout._IsLineBreak = function (text) {
        var c0 = text.charAt(0);
        if (c0 === '\n')
            return 1;
        var c1 = text.charAt(1);
        if (c0 === '\r' && c1 === '\n')
            return 2;
        return 0;
    };
    TextLayout._GetWidthConstraint = function (availWidth, maxWidth, actualWidth) {
        if (!isFinite(availWidth)) {
            if (!isFinite(maxWidth))
                return actualWidth;
            else
                return Math.min(actualWidth, maxWidth);
        }
        return availWidth;
    };
    TextLayout._LayoutWordWrap = function (word, text, maxWidth) {
        word._Length = 0;
        word._Advance = 0.0;
        var measuredIndex = 0;
        var measuredText = "";
        if (text.indexOf(" ", measuredIndex) === -1) {
            var advance = Surface._MeasureWidth(text, word._Font);
            if (isFinite(maxWidth) && (word._LineAdvance + advance) > maxWidth) {
                return true;
            }
            word._Advance = advance;
            word._LineAdvance = advance;
            word._Length = text.length;
            return false;
        }
        var tempText = text;
        while (true) {
            var index = tempText.indexOf(" ", measuredIndex);
            if (index === -1)
                break;
            index += 1; //include " "
            tempText = tempText.slice(measuredIndex, index);
            var advance = Surface._MeasureWidth(tempText, word._Font);
            if (isFinite(maxWidth) && (word._LineAdvance + advance) > maxWidth) {
                return true;
            }
            measuredIndex = index;
            measuredText = tempText;
            word._Advance += advance;
            word._LineAdvance += advance;
            word._Length += measuredText.length;
        }
        return false;
    };
    TextLayout._LayoutWordWrapMoon = function (word, text, maxWidth) {
        return false;
        var lineStart = word._LineAdvance == 0.0;
        if (!word._BreakOps)
            word._BreakOps = [];
        word._BreakOps.splice(0, word._BreakOps.length);
        word._Type = layoutWordType.Unknown;
        word._Advance = 0.0;
        var op = new _WordBreakOp();
        var ctype;
        var btype = breakType.Unknown;
        var fixed = false;
        var newGlyph = false;
        var glyphs = 0;
        var wrap = false;
        var index = 0;
        var end = text.length;
        var start;
        var c;
        while (index < end) {
            start = index;
            c = text.charAt(index);
            index++;
            if (TextLayout._IsLineBreak(text)) {
                index = start;
                break;
            }
            if (btype === breakType.ClosePunctuation) {
                btype = TextLayout._GetBreakType(c);
                if (btype !== breakType.InFixSeparator) {
                    index = start;
                    break;
                }
            } else if (btype === breakType.InFixSeparator) {
                btype = TextLayout._GetBreakType(c);
                if (word._Type === layoutWordType.Numeric) {
                    if (btype !== breakType.Numeric) {
                        index = start;
                        break;
                    }
                } else if (word._Type === layoutWordType.Unknown) {
                    if (btype !== breakType.Alphabetic && btype !== breakType.Numeric) {
                        index = start;
                        break;
                    }
                    fixed = true;
                }
            } else if (btype === breakType.WordJoiner) {
                btype = TextLayout._GetBreakType(c);
                fixed = true;
            } else {
                btype = TextLayout._GetBreakType(c);
            }
            if (TextLayout._BreakSpace(c, btype)) {
                index = start;
                break;
            }
            ctype = TextLayout._GetCharType(c);
            if (word._Type === layoutWordType.Unknown) {
                word._Type = TextLayout._GetWordType(ctype, btype);
            } else if (btype === breakType.OpenPunctuation) {
                index = start;
                break;
            } else if (TextLayout._WordTypeChanged(word._Type, c, ctype, btype)) {
                index = start;
                break;
            }
            var newGlyph = true;
            glyphs++;
            var advance = Surface.MeasureText(c, word._Font).Width;
            word._LineAdvance += advance;
            word._Advance += advance;
            if (newGlyph) {
                op.advance = word._Advance;
                op.index = index;
                op.btype = btype;
                op.c = c;
            }
            word._BreakOps.push(op);
            op = op.Copy();
            if (Number.isFinite(maxWidth) && word._LineAdvance > maxWidth) {
                wrap = true;
                break;
            }
        }
        if (!wrap) {
            word._Length = index;
            return false;
        }
        if (index === end)
            btype = breakType.Space;
        while (index < end) {
            start = index;
            c = text.charAt(index);
            index++;
            if (TextLayout._IsLineBreak(text)) {
                btype = breakType.Space;
                index = start;
                break;
            }
            btype = TextLayout._GetBreakType(c);
            if (TextLayout._BreakSpace(c, btype)) {
                index = start;
                break;
            }
            var advance = Surface.MeasureText(c, word._Font).Width;
            word._LineAdvance += advance;
            word._Advance += advance;
            word._BreakOps.pop();
            op.advance += advance;
            op.index = index;
            op.count++;
            word._BreakOps.push(op);
            op = op.Copy();
        }
        if (lineStart && glyphs === 1) {
            word._Length = index;
            return true;
        }
        var data = {
            index: index,
            lineStart: lineStart,
            fixed: fixed,
            btype: btype,
            force: false
        };
        while (true) {
            for (var i = word._BreakOps.Length; i > 0; i--) {
                data.op = word._BreakOps[i - 1];
                data.i = i;
                if (TextLayout._LayoutWordWrapSearch(word, data) == true)
                    return true;
                btype = data.op._Btype;
                c = data.op._C;
                i = data.i;
                index = data.index;
            }
            if (lineStart && !data.force) {
                data.force = true;
                continue;
            }
            break;
        }
        word._Advance = 0.0;
        word._Length = 0;
        return true;
    };
    TextLayout._LayoutWordWrapSearch = function (word, data) {
        switch (data.op.btype) {
            case breakType.BeforeAndAfter:
                if (i > 1 && i === word._BreakOps.length) {
                    data.op = word._BreakOps[data.i - 2];
                    data.op.SetWordBasics(word);
                    return true;
                } else if (i < word._BreakOps.length) {
                    data.op.SetWordBasics(word);
                    return true;
                }
            case breakType.NonBreakingGlue:
            case breakType.WordJoiner:
                if (data.force && data.i < word._BreakOps.length) {
                    data.op.SetWordBasics(word);
                    return true;
                }
                if (data.i > 1) {
                    data.op = this._BreakOps[data.i - 2];
                    data.i--;
                }
                break;
            case breakType.Inseparable:
                if (data.lineStart && data.i < word._BreakOps.length) {
                    data.op.SetWordBasics(word);
                    return true;
                }
                break;
            case breakType.Before:
                if (data.i > 1) {
                    data.op = word._BreakOps[data.i - 2];
                    data.op.SetWordBasics(word);
                    return true;
                }
                break;
            case breakType.ClosePunctuation:
                if (data.i < word._BreakOps.length && (data.force || data.btype !== breakType.InFixSeparator)) {
                    data.op.SetWordBasics(word);
                    return true;
                }
                if (data.i > 1 && !data.force) {
                    data.op = word._BreakOps[data.i - 2];
                    i--;
                }
                break;
            case breakType.InFixSeparator:
                if (data.i < word._BreakOps.length && (data.force || data.btype !== breakType.Numeric)) {
                    data.op.SetWordBasics(word);
                    return true;
                }
                if (data.i > 1 && !data.force) {
                    data.op = word._BreakOps[data.i - 2];
                    if (data.op._Btype === breakType.InFixSeparator ||
                        data.op._Btype === breakType.ClosePunctuation) {
                        data.op = word._BreakOps[data.i - 1];
                    } else {
                        i--;
                    }
                }
                break;
            case breakType.Alphabetic:
                if ((data.lineStart || data.fixed || data.force) && data.i < word._BreakOps.length) {
                    data.op.SetWordBasics(word);
                    return true;
                }
                break;
            case breakType.Ideographic:
                if (data.i < word._BreakOps.length && data.btype !== breakType.NonStarter) {
                    data.op.SetWordBasics(word);
                    return true;
                }
                break;
            case breakType.Numeric:
                if (data.lineStart && data.i < word._BreakOps.length && (data.force || data.btype !== breakType.InFixSeparator)) {
                    data.op.SetWordBasics(word);
                    return true;
                }
                break;
            case breakType.OpenPunctuation:
            case breakType.CombiningMark:
            case breakType.Contingent:
            case breakType.Ambiguous:
            case breakType.Quotation:
            case breakType.Prefix:
                if (data.force && data.i < word._BreakOps.length) {
                    data.op.SetWordBasics(word);
                    return true;
                }
                break;
            default:
                if (data.i < word._BreakOps.length) {
                    data.op.SetWordBasics(word);
                    return true;
                }
                break;
        }
        return false;
    };
    TextLayout._LayoutWordNoWrap = function (word, text) {
        var advance = Surface.MeasureText(text, word._Font).Width;
        word._Advance = advance;
        word._LineAdvance += advance;
        word._Length = text.length;
        return false;
    };
    TextLayout._LayoutLwsp = function (word, text, font) {
        var advance = Surface.MeasureText(text, font).Width;
        word._Advance = advance;
        word._LineAdvance += advance;
        word._Length = text.length;
    };
    TextLayout._GetBreakType = function (c) {
        NotImplemented("TextLayout._GetBreakType");
    };
    TextLayout._GetCharType = function (c) {
        NotImplemented("TextLayout._GetCharType");
    };
    TextLayout._GetWordType = function (ctype, btype) {
        NotImplemented("TextLayout._GetWordType");
    };
    TextLayout._BreakSpace = function (c, btype) {
        NotImplemented("TextLayout._BreakSpace");
    };
    TextLayout._UpdateSelection = function (lines, pre, post) {
    };
    Text.TextLayout = Nullstone.FinishCreate(TextLayout);
})(Nullstone.Namespace("Fayde.Text"));

(function (Collections) {
    var INotifyCollectionChanged = Nullstone.Create("INotifyCollectionChanged");
    INotifyCollectionChanged.Instance.Init = function () {
        this.CollectionChanged = new MulticastEvent();
    };
    Collections.INotifyCollectionChanged = Nullstone.FinishCreate(INotifyCollectionChanged);
})(Nullstone.Namespace("Fayde.Collections"));

(function (namespace) {
    namespace.ClickMode = {
        Release: 0,
        Press: 1,
        Hover: 2
    };
    namespace.TextTrimming = {
        None: 0
    };
    namespace.TextWrapping = {
        NoWrap: 0,
        Wrap: 1,
        WrapWithOverflow: 2
    };
    namespace.GridUnitType = {
        Auto: 0,
        Pixel: 1,
        Star: 2
    };
    namespace.MediaElementState = {
        Closed: 0,
        Opening: 1,
        Buffering: 4,
        Playing: 5,
        Paused: 6,
        Stopped: 7
    };
    namespace.PlacementMode = {
        Bottom: 0,
        Right: 1,
        Mouse: 2,
        Left: 3,
        Top: 4
    };
    namespace.ScrollBarVisibility = {
        Disabled: 0,
        Auto: 1,
        Hidden: 2,
        Visible: 3
    };
    namespace.SelectionMode = {
        Single: 0,
        Multiple: 1,
        Extended: 2
    };
    namespace.VirtualizationMode = {
        Standard: 0,
        Recycling: 1
    };
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var GridLength = Nullstone.Create("GridLength", undefined, 2);
    GridLength.Instance.Init = function (value, unitType) {
        this.Value = value == null ? 0 : value;
        this.Type = unitType == null ? namespace.GridUnitType.Auto : unitType;
    };
    GridLength.Equals = function (gl1, gl2) {
        return Math.abs(gl1.Value - gl2.Value) < 0.001 && gl1.Type == gl2.Type;
    };
    namespace.GridLength = Nullstone.FinishCreate(GridLength);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var _TextBoxModelChangedEventArgs = Nullstone.Create("_TextBoxModelChangedEventArgs", undefined, 2);
    _TextBoxModelChangedEventArgs.Instance.Init = function (changed, propArgs) {
        this.Changed = changed;
        this.PropArgs = propArgs;
    };
    namespace._TextBoxModelChangedEventArgs = Nullstone.FinishCreate(_TextBoxModelChangedEventArgs);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    namespace.ScrollEventType = {
        SmallDecrement: 0,
        SmallIncrement: 1,
        LargeDecrement: 2,
        LargeIncrement: 3,
        ThumbPosition: 4,
        ThumbTrack: 5,
        First: 6,
        Last: 7,
        EndScroll: 8
    };
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (Primitives) {
    var IScrollInfo = Nullstone.Create("IScrollInfo");
    Nullstone.AutoProperties(IScrollInfo, [
        "CanHorizontallyScroll",
        "CanVerticallyScroll",
        "HorizontalOffset",
        "VerticalOffset",
        "ScrollOwner",
    ]);
    Nullstone.AutoPropertiesReadOnly(IScrollInfo, [
        "ExtentWidth",
        "ExtentHeight",
        "ViewportWidth",
        "ViewportHeight"
    ]);
    IScrollInfo.Instance.LineUp = function () { };
    IScrollInfo.Instance.LineDown = function () { };
    IScrollInfo.Instance.LineLeft = function () { };
    IScrollInfo.Instance.LineRight = function () { };
    IScrollInfo.Instance.MouseWheelUp = function () { };
    IScrollInfo.Instance.MouseWheelDown = function () { };
    IScrollInfo.Instance.MouseWheelLeft = function () { };
    IScrollInfo.Instance.MouseWheelRight = function () { };
    IScrollInfo.Instance.PageUp = function () { };
    IScrollInfo.Instance.PageDown = function () { };
    IScrollInfo.Instance.PageLeft = function () { };
    IScrollInfo.Instance.PageRight = function () { };
    IScrollInfo.Instance.MakeVisible = function (uie, rectangle) { return new Rect(); };
    Primitives.IScrollInfo = Nullstone.FinishCreate(IScrollInfo);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var ScrollData = Nullstone.Create("ScrollData");
    ScrollData.Instance.Init = function () {
        this._ClearLayout();
    };
    ScrollData.Instance._ClearLayout = function () {
        this.CanHorizontallyScroll = false;
        this.CanVerticallyScroll = false;
        this.ScrollOwner = null;
        this.Offset = new Point();
        this.CachedOffset = new Point();
        this.Viewport = new Size();
        this.Extent = new Size();
        this.MaxDesiredSize = new Size();
    };
    namespace.ScrollData = Nullstone.FinishCreate(ScrollData);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var SelectorSelection = Nullstone.Create("SelectorSelection", undefined, 1);
    SelectorSelection.Instance.Init = function (owner) {
        this._Owner = owner;
        this._Owner.SelectedItems.CollectionChanged.Subscribe(this._HandleOwnerSelectionChanged, this);
        this._SelectedItems = new Fayde.InternalCollection();
        this.Mode = Fayde.Controls.SelectionMode.Single;
    };
    SelectorSelection.Instance._HandleOwnerSelectionChanged = function (sender, e) {
        if (this._Updating)
            return;
        if (this.Mode === Fayde.Controls.SelectionMode.Single)
            throw new InvalidOperationException("SelectedItems cannot be modified directly when in Single select mode");
        try {
            this._Updating = true;
            switch (e.Action) {
                case Fayde.Collections.NotifyCollectionChangedAction.Add:
                    if (!this._SelectedItems.Contains(e.NewItems[0]))
                        this.AddToSelected(e.NewItems[0]);
                    break;
                case Fayde.Collections.NotifyCollectionChangedAction.Remove:
                    if (this._SelectedItems.Contains(e.OldItems[0]))
                        this.RemoveFromSelected(e.OldItems[0]);
                    break;
                case Fayde.Collections.NotifyCollectionChangedAction.Replace:
                    if (this._SelectedItems.Contains(e.OldItems[0]))
                        this.RemoveFromSelected(e.OldItems[0]);
                    if (!this._SelectedItems.Contains(e.NewItems[0]))
                        this.AddToSelected(e.NewItems[0]);
                    break;
                case Fayde.Collections.NotifyCollectionChangedAction.Reset:
                    var items = this._SelectedItems;
                    var ownerItems = this._Owner._SelectedItems;
                    var count = items.GetCount();
                    var item;
                    for (var i = 0; i < count; i++) {
                        item = items.GetValueAt(i);
                        if (ownerItems.Contains(item))
                            continue;
                        if (items.Contains(item))
                            this.RemoveFromSelected(item);
                    }
                    count = ownerItems.GetCount();
                    for (var i = 0; i < count; i++) {
                        item = ownerItems.GetValueAt(i);
                        if (!items.Contains(item))
                            this.AddToSelected(item);
                    }
                    break;
            }
            this._Owner._SelectedItemsIsInvalid = true;
        } finally {
            this._Updating = false;
        }
    };
    SelectorSelection.Instance.RepopulateSelectedItems = function () {
        if (!this._Updating) {
            try {
                this._Updating = true;
                this._Owner._SelectedItems.Clear();
                this._Owner._SelectedItems.AddRange(this._SelectedItems);
            } finally {
                this._Updating = false;
            }
        }
    };
    SelectorSelection.Instance.ClearSelection = function (ignoreSelectedValue) {
        if (ignoreSelectedValue === undefined) ignoreSelectedValue = false;
        if (this._SelectedItems.GetCount() === 0) {
            this.UpdateSelectorProperties(null, -1, ignoreSelectedValue ? this._Owner.SelectedValue : null);
            return;
        }
        try {
            this._Updating = true
            var oldSelection = this._SelectedItems.ToArray();
            this._SelectedItems.Clear();
            this._SelectedItem = null;
            this.UpdateSelectorProperties(null, -1, ignoreSelectedValue ? this._Owner.SelectedValue : null);
            this._Owner._SelectedItemsIsInvalid = true;
            this._Owner._RaiseSelectionChanged(oldSelection, []);
        } finally {
            this._Updating = false;
        }
    };
    SelectorSelection.Instance.Select = function (item, ignoreSelectedValue) {
        if (ignoreSelectedValue === undefined) ignoreSelectedValue = false;
        var ownerItems = this._Owner.Items;
        if (!ownerItems.Contains(item))
            return;
        var ownerSelectedValue = this._Owner.SelectedValue;
        var selected = this._SelectedItems.Contains(item);
        try {
            this._Updating = true;
            switch (this.Mode) {
                case Fayde.Controls.SelectionMode.Single:
                    if (selected) {
                        if (Fayde.Input.Keyboard.HasControl())
                            this.ClearSelection(ignoreSelectedValue);
                        else
                            this.UpdateSelectorProperties(this._SelectedItem, ownerItems.IndexOf(this._SelectedItem), ownerSelectedValue);
                    } else {
                        this.ReplaceSelection(item);
                    }
                    break;
                case Fayde.Controls.SelectionMode.Extended:
                    if (Fayde.Input.Keyboard.HasShift()) {
                        var sIndex = ownerItems.IndexOf(this._SelectedItem);
                        if (this._SelectedItems.GetCount() === 0)
                            this.SelectRange(0, ownerItems.IndexOf(item));
                        else
                            this.SelectRange(sIndex, ownerItems.IndexOf(item));
                    } else if (Fayde.Input.Keyboard.HasControl()) {
                        if (!selected)
                            this.AddToSelected(item);
                    } else {
                        if (selected)
                            this.RemoveFromSelected(item);
                        else
                            this.AddToSelected(item);
                    }
                    break;
                case Fayde.Controls.SelectionMode.Multiple:
                    if (this._SelectedItems.Contains(item))
                        this.UpdateSelectorProperties(this._SelectedItem, ownerItems.IndexOf(this._SelectedItem), ownerSelectedValue);
                    else
                        this.AddToSelected(item);
                    break;
                default:
                    throw new NotSupportedException("SelectionMode " + this.Mode + " is not support");
            }
        } finally {
            this._Updating = false;
        }
    };
    SelectorSelection.Instance.SelectRange = function (startIndex, endIndex) {
        var ownerItems = this._Owner.Items;
        var selectedItems = this._SelectedItems;
        var select = new Fayde.InternalCollection();
        for (var i = startIndex; i <= endIndex; i++) {
            select.Add(ownerItems.GetValueAt(i));
        }
        var unselect = [];
        var count = selectedItems.GetCount();
        var item;
        for (var i = 0; i < count; i++) {
            item = selectedItems.GetValueAt(i);
            if (!select.Contains(item))
                unselect.push(item);
            else
                select.Remove(item);
        }
        count = unselect.length;
        for (var i = 0; i < count; i++) {
            selectedItems.Remove(unselect[i]);
        }
        count = select.GetCount();
        for (var i = 0; i < count; i++) {
            selectedItems.Add(select[i]);
        }
        if (!selectedItems.Contains(this._SelectedItem)) {
            this._SelectedItem = selectedItems.GetCount() === 0 ? null : selectedItems.GetValueAt(0);
            this.UpdateSelectorProperties(this._SelectedItem, this._SelectedItem == null ? -1 : ownerItems.IndexOf(this._SelectedItem), this._Owner._GetValueFromItem(this._SelectedItem));
        }
        this._Owner._SelectedItemsIsInvalid = true;
        this._Owner._RaiseSelectionChanged(unselect, select.ToArray());
    };
    SelectorSelection.Instance.SelectAll = function (items) {
        try {
            this._Updating = true;
            if (this.Mode === Fayde.Controls.SelectionMode.Single)
                throw new NotSupportedException("Cannot call SelectAll when in Single select mode");
            var selectedItems = this._SelectedItems;
            var select = [];
            var count = items.GetCount();
            var item;
            for (var i = 0; i < count; i++) {
                item = items.GetValueAt(i);
                if (!selectedItems.Contains(item))
                    select.push(item);
            }
            if (select.length === 0)
                return;
            var owner = this._Owner;
            selectedItems.AddRange(select);
            if (this._SelectedItem == null) {
                this._SelectedItem = select[0];
                this.UpdateSelectorProperties(this._SelectedItem, owner.Items.IndexOf(this._SelectedItem), owner._GetValueFromItem(this._SelectedItem));
            }
            owner._SelectedItemsIsInvalid = true;
            owner._RaiseSelectionChanged([], select);
        } finally {
            this._Updating = false;
        }
    };
    SelectorSelection.Instance.SelectOnly = function (item) {
        if (Nullstone.Equals(this._SelectedItem, item) && this._SelectedItems.GetCount() === 1)
            return;
        try {
            this._Updating = true;
            this.ReplaceSelection(item);
        } finally {
            this._Updating = false;
        }
    };
    SelectorSelection.Instance.Unselect = function (item) {
        if (!this._SelectedItems.Contains(item))
            return;
        try {
            this._Updating = true;
            this.RemoveFromSelected(item);
        } finally {
            this._Updating = false;
        }
    };
    SelectorSelection.Instance.AddToSelected = function (item) {
        this._SelectedItems.Add(item);
        var owner = this._Owner;
        if (this._SelectedItems.GetCount() === 1) {
            this._SelectedItem = item;
            this.UpdateSelectorProperties(item, owner.Items.IndexOf(item), owner._GetValueFromItem(item));
        }
        owner._SelectedItemsIsInvalid = true;
        owner._RaiseSelectionChanged([], [item]);
    };
    SelectorSelection.Instance.RemoveFromSelected = function (item) {
        this._SelectedItems.Remove(item);
        var owner = this._Owner;
        if (Nullstone.Equals(this._SelectedItem, item)) {
            var newItem = this._SelectedItems.GetCount() === 0 ? null : this._SelectedItems.GetValueAt(0);
            this._SelectedItem = newItem;
            this.UpdateSelectorProperties(newItem, newItem == null ? -1 : owner.Items.IndexOf(newItem), owner._GetValueFromItem(item));
        }
        owner._SelectedItemsIsInvalid = true;
        owner._RaiseSelectionChanged([item], []);
    };
    SelectorSelection.Instance.ReplaceSelection = function (item) {
        var owner = this._Owner;
        if (!this.UpdateCollectionView(item)) {
            this.UpdateSelectorProperties(this._SelectedItem, owner.Items.IndexOf(this._SelectedItem), owner._GetValueFromItem(this._SelectedItem));
            return;
        }
        var added = [];
        var oldItems = [];
        var selectedItems = this._SelectedItems;
        var count = selectedItems.GetCount();
        var cur;
        for (var i = 0; i < count; i++) {
            cur = selectedItems.GetValueAt(i);
            if (!Nullstone.Equals(cur, item))
                oldItems.push(cur);
        }
        count = oldItems.length;
        for (var i = 0; i < count; i++) {
            selectedItems.Remove(oldItems[i]);
        }
        if (selectedItems.GetCount() === 0) {
            added = [item];
            selectedItems.Add(item);
        }
        this._SelectedItem = item;
        this.UpdateSelectorProperties(item, owner.Items.IndexOf(item), owner._GetValueFromItem(item));
        if (added.length !== 0 || oldItems.length !== 0) {
            owner._SelectedItemsIsInvalid = true;
            owner._RaiseSelectionChanged(oldItems, added);
        }
    };
    SelectorSelection.Instance.UpdateSelectorProperties = function (item, index, value) {
        var owner = this._Owner;
        if (!Nullstone.Equals(owner.SelectedItem, item))
            owner.SelectedItem = item;
        if (owner.SelectedIndex !== index)
            owner.SelectedIndex = index;
        if (!Nullstone.Equals(owner.SelectedValue, value))
            owner.SelectedValue = value;
        this.UpdateCollectionView(item);
    };
    SelectorSelection.Instance.UpdateCollectionView = function (item) {
        var icv = Nullstone.As(this._Owner.ItemsSource, Fayde.Data.ICollectionView);
        if (icv != null) {
            icv.MoveCurrentTo(item);
            return Nullstone.Equals(item, icv.CurrentItem);
        }
        return true;
    };
    namespace.SelectorSelection = Nullstone.FinishCreate(SelectorSelection);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    namespace.BindingOperations = {
        SetBinding: function (target, dp, binding) {
            if (!target)
                throw new ArgumentNullException("target");
            if (!dp)
                throw new ArgumentNullException("dp");
            if (!binding)
                throw new ArgumentNullException("binding");
            var e = new Fayde.Data.BindingExpression(binding, target, dp);
            target.$SetValue(dp, e);
            return e;
        }
    };
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    Fayde.Run = function () { };
    Fayde.Initialize = function () {
        Fayde.Run();
    };
    Fayde.Start = function (appType, rjson, json, canvas) {
        App.Instance = new appType();
        App.Instance.LoadResources(rjson);
        App.Instance.LoadInitial(canvas, json);
    };
    Fayde.TypeConverters = {
        Thickness: function (str) {
            if (!str)
                return new Thickness();
            var tokens = str.split(",");
            var left, top, right, bottom;
            if (tokens.length === 1) {
                left = top = right = bottom = parseFloat(tokens[0]);
            } else if (tokens.length === 2) {
                left = right = parseFloat(tokens[0]);
                top = bottom = parseFloat(tokens[1]);
            } else if (tokens.length === 4) {
                left = parseFloat(tokens[0]);
                top = parseFloat(tokens[1]);
                right = parseFloat(tokens[2]);
                bottom = parseFloat(tokens[3]);
            } else {
                throw new ParseException("Cannot parse Thickness value '" + str + "'");
            }
            return new Thickness(left, top, right, bottom);
        },
        CornerRadius: function (str) {
            if (!str)
                return new Thickness();
            var tokens = str.split(",");
            var topLeft, topRight, bottomRight, bottomLeft;
            if (tokens.length === 1) {
                topLeft = topRight = bottomRight = bottomLeft = parseFloat(tokens[0]);
            } else if (tokens.length === 4) {
                topLeft = parseFloat(tokens[0]);
                topRight = parseFloat(tokens[1]);
                bottomLeft = parseFloat(tokens[2]);
                bottomRight = parseFloat(tokens[3]);
            } else {
                throw new ParseException("Cannot parse CornerRadius value '" + str + "'");
            }
        },
        Brush: function (str) {
            return new Fayde.Media.SolidColorBrush(Fayde.TypeConverters.Color(str));
        },
        Color: function (str) {
            if (!str)
                return new Color(0, 0, 0, 1.0);
            if (str.substr(0, 1) !== "#") {
                var color = Color.KnownColors[str];
                if (!color)
                    throw new NotSupportedException("Unknown Color: " + str);
                return color;
            }
            return Color.FromHex(str);
        }
    };
    Fayde.TypeConverter = {
        ConvertObject: function (propd, val, objectType, doStringConversion) {
            if (val == null)
                return val;
            var targetType = propd.GetTargetType();
            if (typeof targetType === "function" && targetType._IsNullstone) {
                if (val instanceof targetType)
                    return val;
                var converter = Fayde.TypeConverters[targetType._TypeName];
                if (converter)
                    return converter(val);
            } else if (targetType instanceof Enum) {
                if (typeof val === "string") {
                    var ret = targetType.Object[val];
                    if (ret !== undefined)
                        return ret;
                    return val;
                }
            } else if (typeof targetType === "number" || targetType === Number) {
                if (typeof val === "number")
                    return val;
                if (!val)
                    return 0;
                if (val instanceof Thickness)
                    return val.Left;
                return parseFloat(val.toString());
            }
            if (typeof targetType === "string" || targetType === String)
                return doStringConversion ? val.toString() : "";
            var tc;
            if (propd._IsAttached) {
            } else {
            }
            return val;
        },
        GeometryFromString: function (val) {
            return Fayde._MediaParser.ParseGeometry(val);
        },
        PointCollectionFromString: function (val) {
            return Fayde._MediaParser.ParsePointCollection(val);
        }
    };
    Fayde.Validators = {
        StyleValidator: function (instance, propd, value, error) {
            var parentType = instance.constructor;
            var errorMessage;
            if (value) {
                var root;
                var style = Nullstone.As(value, Fayde.Style);
                if (style.IsSealed) {
                    if (!Nullstone.DoesInheritFrom(parentType, style.TargetType)) {
                        error.SetErrored(BError.XamlParseException, "Style.TargetType (" + style.TargetType._TypeName + ") is not a subclass of (" + parentType._TypeName + ")");
                        return false;
                    }
                    return true;
                }
                var cycles = [];
                root = style;
                while (root) {
                    if (cycles[root._ID]) {
                        error.SetErrored(BError.InvalidOperation, "Circular reference in Style.BasedOn");
                        return false;
                    }
                    cycles[root._ID] = true;
                    root = root.BasedOn;
                }
                cycles = null;
                root = style;
                while (root) {
                    var targetType = root.TargetType;
                    if (Nullstone.RefEquals(root, style)) {
                        if (!targetType) {
                            error.SetErrored(BError.InvalidOperation, "TargetType cannot be null");
                            return false;
                        } else if (!Nullstone.DoesInheritFrom(parentType, targetType)) {
                            error.SetErrored(BError.XamlParseException, "Style.TargetType (" + targetType._TypeName + ") is not a subclass of (" + parentType._TypeName + ")");
                            return false;
                        }
                    } else if (!targetType || !Nullstone.DoesInheritFrom(parentType, targetType)) {
                        error.SetErrored(BError.InvalidOperation, "Style.TargetType (" + (targetType ? targetType._TypeName : "<Not Specified>") + ") is not a subclass of (" + parentType._TypeName + ")");
                        return false;
                    }
                    parentType = targetType;
                    root = root.BasedOn;
                }
                style._Seal();
            }
            return true;
        }
    };
    Fayde.Clone = function (value) {
        if (value instanceof Fayde.DependencyObject)
            return value.Clone();
        if (typeof value === "number")
            return value;
        var typeName = value.constructor._TypeName;
        switch (typeName) {
            case "FontFamily":
                return new FontFamily(value.FamilyNames);
            case "PropertyPath":
                return new Fayde.Data.PropertyPath(value._Path, value._ExpandedPath);
            case "Color":
                return new Color(value.R, value.G, value.B, value.A);
            case "Point":
                return new Point(value.X, value.Y);
            case "Rect":
                return new Rect(value.X, value.Y, value.Width, value.Height);
            case "Size":
                return new Size(value.Width, value.Height);
            case "Uri":
                return new Uri(value._OriginalString);
            case "RepeatBehavior":
                var rb = new Fayde.Media.Animation.RepeatBehavior();
                rb._Duration = value._Duration;
                rb._Count = value._Count;
                rb.IsForever = value.IsForever;
                return rb;
            case "Duration":
                var dur = new Duration();
                dur._Type = value._Type;
                dur._TimeSpan = value._TimeSpan;
                return dur;
            case "KeyTime":
                var kt = new KeyTime();
                kt._TimeSpan = value._TimeSpan;
                kt._IsPaced = value._IsPaced;
                kt._IsUniform = value._IsUniform;
                kt._Percent = value._Percent;
                return kt;
            case "GridLength":
                return new Fayde.Controls.GridLength(value.Value, value.Type);
            case "Thickness":
                return new Thickness(value.Left, value.Top, value.Right, value.Bottom);
            case "CornerRadius":
                return new CornerRadius(value.TopLeft, value.TopRight, value.BottomRight, value.BottomLeft);
        }
        return new value.constructor();
    };
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var DependencyProperty = Nullstone.Create("DependencyProperty", undefined, 13);
    DependencyProperty._LastID = 0;
    DependencyProperty._Inherited = {};
    DependencyProperty.Instance.Init = function (name, getTargetType, ownerType, defaultValue, autoCreator, coercer, alwaysChange, validator, isCustom, changedCallback, isReadOnly, isAttached, inheritable) {
        this.Name = name;
        this.GetTargetType = getTargetType;
        this.OwnerType = ownerType;
        this.DefaultValue = defaultValue;
        this._HasDefaultValue = defaultValue !== undefined;
        this._AutoCreator = autoCreator;
        this._IsAutoCreated = autoCreator != null;
        this._Coercer = coercer;
        this._AlwaysChange = alwaysChange;
        this._Validator = validator;
        this._IsCustom = isCustom;
        this._ChangedCallback = changedCallback;
        this.IsReadOnly = isReadOnly === true;
        this._IsAttached = isAttached;
        DependencyProperty._LastID = this._ID = DependencyProperty._LastID + 1;
        var propPrecEnum = _PropertyPrecedence;
        var bitmask = (1 << propPrecEnum.Inherited) | (1 << propPrecEnum.DynamicValue);
        if (this._IsAutoCreated)
            bitmask |= (1 << propPrecEnum.AutoCreate);
        if (this._HasDefaultValue)
            bitmask |= (1 << propPrecEnum.DefaultValue);
        this._BitmaskCache = bitmask;
        this._Inheritable = inheritable;
        if (inheritable !== undefined) {
            var i = DependencyProperty._Inherited;
            if (!i[inheritable])
                i[inheritable] = [];
            i[inheritable].push(this);
        }
    };
    DependencyProperty.Instance.toString = function () {
        return this._ID;
    };
    DependencyProperty.Instance.GetDefaultValue = function (obj) {
        if (this._HasDefaultValue)
            return this.DefaultValue;
        return this._GetAutoCreatedValue(obj);
    };
    DependencyProperty.Instance._GetAutoCreatedValue = function (obj) {
        var ac = this._AutoCreator;
        if (ac && ac.GetValue)
            return ac.GetValue(this, obj);
    };
    DependencyProperty.Instance._HasCoercer = function () {
        return this._Coercer != null;
    };
    DependencyProperty.Instance._Coerce = function (instance, value, error) {
        if (!this._Coercer)
            return value;
        return this._Coercer.GetValue(instance, this, value, error);
    };
    DependencyProperty.Instance._Validate = function (instance, propd, value, error) {
        if (!this._Validator)
            return true;
        return this._Validator(instance, propd, value, error);
    };
    DependencyProperty.Register = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        return DependencyProperty.RegisterFull(name, getTargetType, ownerType, defaultValue, changedCallback, undefined, undefined, undefined, undefined, true);
    };
    DependencyProperty.RegisterReadOnly = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        return DependencyProperty.RegisterFull(name, getTargetType, ownerType, defaultValue, changedCallback, undefined, undefined, undefined, undefined, true, true);
    };
    DependencyProperty.RegisterAttached = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        return DependencyProperty.RegisterFull(name, getTargetType, ownerType, defaultValue, changedCallback, undefined, undefined, undefined, undefined, true, false, true);
    }
    DependencyProperty.RegisterCore = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        return DependencyProperty.RegisterFull(name, getTargetType, ownerType, defaultValue, changedCallback, undefined, undefined, undefined, undefined, false);
    };
    DependencyProperty.RegisterReadOnlyCore = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        return DependencyProperty.RegisterFull(name, getTargetType, ownerType, defaultValue, changedCallback, undefined, undefined, undefined, undefined, false, true);
    };
    DependencyProperty.RegisterAttachedCore = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        return DependencyProperty.RegisterFull(name, getTargetType, ownerType, defaultValue, changedCallback, undefined, undefined, undefined, undefined, false, false, true);
    };
    DependencyProperty.RegisterInheritable = function (name, getTargetType, ownerType, defaultValue, changedCallback, autocreator, inheritable) {
        return DependencyProperty.RegisterFull(name, getTargetType, ownerType, defaultValue, changedCallback, autocreator, undefined, undefined, undefined, false, undefined, true, inheritable);
    };
    DependencyProperty.RegisterFull = function (name, getTargetType, ownerType, defaultValue, changedCallback, autocreator, coercer, alwaysChange, validator, isCustom, isReadOnly, isAttached, inheritable) {
        if (!DependencyProperty._IDs)
            DependencyProperty._IDs = [];
        if (!DependencyProperty._Registered)
            DependencyProperty._Registered = [];
        if (!DependencyProperty._Registered[ownerType._TypeName])
            DependencyProperty._Registered[ownerType._TypeName] = [];
        var propd = new DependencyProperty(name, getTargetType, ownerType, defaultValue, autocreator, coercer, alwaysChange, validator, isCustom, changedCallback, isReadOnly, isAttached, inheritable);
        if (DependencyProperty._Registered[ownerType._TypeName][name] !== undefined)
            throw new InvalidOperationException("Dependency Property is already registered. [" + ownerType._TypeName + "." + name + "]");
        DependencyProperty._Registered[ownerType._TypeName][name] = propd;
        DependencyProperty._IDs[propd._ID] = propd;
        return propd;
    };
    DependencyProperty.GetDependencyProperty = function (ownerType, name) {
        var reg = DependencyProperty._Registered;
        if (!reg)
            return null;
        if (!ownerType)
            return null;
        var reg = reg[ownerType._TypeName];
        var propd;
        if (reg)
            propd = reg[name];
        if (!propd && ownerType && ownerType._IsNullstone) {
            propd = DependencyProperty.GetDependencyProperty(ownerType._BaseClass, name);
        }
        return propd;
    };
    DependencyProperty.ResolvePropertyPath = function (refobj, propertyPath, promotedValues) {
        if (propertyPath.HasDependencyProperty)
            return propertyPath.DependencyProperty;
        var path = propertyPath.Path;
        if (propertyPath.ExpandedPath != null)
            path = propertyPath.ExpandedPath;
        var data = {
            index: 0,
            end: path.length,
            path: path,
            parenOpen: false,
            tickOpen: false,
            start: path,
            prop: path,
            res: null,
            cloned: false,
            expressionFound: false,
            lu: refobj.Value,
            collection: null,
            promotedValues: promotedValues
        };
        var success;
        while (data.index < data.end) {
            success = true;
            var c = data.path.charAt(data.index);
            data.index++;
            if (c === '(') {
                data.parenOpen = true;
            } else if (c === ')') {
                data.parenOpen = false;
            } else if (c === '\'') {//Ticks only legal in expanded path
                if (propertyPath.ExpandedPath == null)
                    Warn("The ' character is not legal in property paths.");
                else
                    data.tickOpen = !data.tickOpen;
            } else if (c === '.') {
                success = DependencyProperty._HandlePeriod(data);
            } else if (c === '[') {
                success = DependencyProperty._HandleLeftBracket(data);
            } else {
                success = DependencyProperty._HandleDefault(data);
            }
            if (!success) {
                refobj.Value = null;
                return null;
            }
        }
        refobj.Value = data.lu;
        return data.res;
    };
    DependencyProperty._HandlePeriod = function (data) {
        if (data.tickOpen)
            return true;
        if (data.res != null) {
            var value = null;
            if ((value = data.lu._GetValue(data.res)) == null)
                return false;
            if (!(value instanceof Fayde.DependencyObject))
                return false;
            var newLu = value;
            if (data.promotedValues != null && data.promotedValues[value._ID] == null && !(value instanceof Fayde.UIElement)) {
                var clonedValue = Fayde.Clone(value);
                if (clonedValue instanceof Fayde.DependencyObject) {
                    newLu = clonedValue;
                    data.lu._SetValue(data.res, clonedValue);
                    clonedValue = data.lu._GetValue(data.res);
                    data.promotedValues[clonedValue._ID] = clonedValue;
                }
            }
            data.lu = newLu;
        }
        data.expressionFound = false;
        data.prop = data.path.substr(data.index);
        return true;
    };
    DependencyProperty._HandleLeftBracket = function (data) {
        if (data.index >= data.end)
            return;
        var hasLeadingZeroes = false;
        while (data.path.charAt(data.index) === '0') {
            hasLeadingZeroes = true;
            data.index++;
        }
        data.i = parseInt(data.path.substr(data.index), 10);
        if (!isNaN(data.i))
            data.index += data.i.toString().length;
        if (isNaN(data.i) && hasLeadingZeroes)
            data.i = 0;
        if (data.path.charAt(data.index) !== ']' || data.path.charAt(data.index + 1) !== '.')
            return true;
        data.prop = data.path = data.path.substr(data.index + 2);
        data.index = 0;
        data.end = data.path.length;
        var value = null;
        if (data.expressionFound) {
            data.expressionFound = false;
            if ((value = data.lu.$GetValue(data.res)) == null)
                return false;
        }
        if ((data.collection = Nullstone.As(value, Fayde.InternalCollection)) == null)
            return false;
        if ((value = data.collection.GetValueAt(data.i)) == null)
            return false;
        if ((data.lu = Nullstone.As(value, Fayde.DependencyObject)) == null)
            return false;
        return true;
    };
    DependencyProperty._HandleDefault = function (data) {
        var explicitType = false;
        data.expressionFound = true;
        var start = data.index - 1;
        var c;
        while (data.index < data.end) {
            c = data.path.charAt(data.index);
            if (!((c !== '.' || data.tickOpen) && (!data.parenOpen || c !== ')') && c !== '['))
                break;
            data.index++;
            if (c === '\'') {
                data.tickOpen = !data.tickOpen;
                if (!data.tickOpen)
                    break;
            }
        }
        if (data.index === data.end) {
            data.type = data.lu.constructor;
        } else {
            c = data.path.charAt(data.index);
            if (c === '.') {
                if ((data.index - start) === 11 && data.path.substr(start, 11).toLowerCase() === "textelement") { //bug workaround from Blend
                    data.type = Fayde.Controls.TextBlock;
                    data.explicitType = true;
                } else {
                    var s = data.index;
                    if (data.path.charAt(data.index - 1) === '\'' && !data.tickOpen) {
                        s = data.index - 1;
                    }
                    var name = data.path.slice(start, s);
                    data.type = DependencyProperty._LookupType(name);
                    data.explicitType = true;
                    if (data.type == null)
                        data.type = data.lu.constructor;
                }
                data.index++;
                start = data.index;
                while (data.index < data.end) {
                    c = data.path.charAt(data.index);
                    if (!((!data.parenOpen || c !== ')') && (c !== '.' || data.tickOpen)))
                        break;
                    data.index++;
                    if (c === '\'') {
                        data.tickOpen = !data.tickOpen;
                        if (!data.tickOpen)
                            break;
                    }
                }
                if (data.index === start)
                    return false;
            } else {
                data.type = data.lu.constructor;
                data.explicitType = false;
            }
            c = data.path.charAt(data.index);
            if ((c !== ')' && data.parenOpen) || data.type == null)
                return false;
        }
        name = data.path.slice(start, data.index);
        if ((data.res = DependencyProperty.GetDependencyProperty(data.type, name)) == null && data.lu)
            data.res = DependencyProperty.GetDependencyProperty(data.lu.constructor, name);
        if (data.res == null)
            return false;
        if (!data.res._IsAttached && !(data.lu instanceof data.type)) {
            if ((data.res = DependencyProperty.GetDependencyProperty(data.lu.constructor, name)) == null)
                return false;
        }
        if (data.res._IsAttached && data.explicitType && !data.parenOpen)
            return false;
        return true;
    };
    var lookupNamespaces = [];
    DependencyProperty._LookupType = function (name) {
        lookupNamespaces.push(Fayde);
        lookupNamespaces.push(Fayde.Controls);
        lookupNamespaces.push(Fayde.Media);
        lookupNamespaces.push(Fayde.Controls.Primitives);
        lookupNamespaces.push(window);
        var len = lookupNamespaces.length;
        for (var i = 0; i < len; i++) {
            var potentialType = lookupNamespaces[i][name];
            if (potentialType)
                return potentialType;
        }
        return eval(name);
    };
    Fayde.DependencyProperty = Nullstone.FinishCreate(DependencyProperty);
})(Nullstone.Namespace("Fayde"));
window.DependencyProperty = Fayde.DependencyProperty;

(function (namespace) {
    namespace.Orientation = {
        Horizontal: 0,
        Vertical: 1
    };
    namespace.Visibility = {
        Visible: 0,
        Collapsed: 1
    };
    namespace.HorizontalAlignment = {
        Left: 0,
        Center: 1,
        Right: 2,
        Stretch: 3
    };
    namespace.VerticalAlignment = {
        Top: 0,
        Center: 1,
        Bottom: 2,
        Stretch: 3
    };
    namespace.TextDecorations = {
        None: 0,
        Underline: 1
    };
    namespace.TextAlignment = {
        Left: 0,
        Center: 1,
        Right: 2
    };
    namespace.FontWeight = {
        Thin: 100,
        ExtraLight: 200,
        Light: 300,
        Normal: 400,
        Medium: 500,
        SemiBold: 600,
        Bold: 700,
        ExtraBold: 800,
        Black: 900,
        ExtraBlack: 950
    };
    namespace.FlowDirection = {
        LeftToRight: 0,
        RightToLeft: 1
    };
    namespace.LineStackingStrategy = {
        MaxHeight: 0,
        BlockLineHeight: 1
    };
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var Expression = Nullstone.Create("Expression");
    Nullstone.AutoProperties(Expression, [
        "Attached",
        "Updating"
    ]);
    Expression.Instance.GetValue = function (propd) {
        AbstractMethod("Expression.GetValue");
    };
    Expression.Instance._OnAttached = function (element) {
        this.Attached = true;
    };
    Expression.Instance._OnDetached = function (element) {
        this.Attached = false;
    };
    namespace.Expression = Nullstone.FinishCreate(Expression);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var FocusManager = {};
    FocusManager.GetFocusedElement = function () {
        return App.Instance.MainSurface._FocusedElement;
    };
    Fayde.FocusManager = FocusManager;
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var ISupportInitialize = Nullstone.Create("ISupportInitialize");
    ISupportInitialize.Instance.BeginInit = function () { };
    ISupportInitialize.Instance.EndInit = function () { };
    namespace.ISupportInitialize = Nullstone.FinishCreate(ISupportInitialize);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    function LayoutPass() {
        this.MeasureList = [];
        this.ArrangeList = [];
        this.SizeList = [];
        this.Count = 0;
        this.Updated = false;
        this.StartTime = new Date().getTime();
    }
    LayoutPass.MaxCount = 250;
    Fayde.LayoutPass = LayoutPass;
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var ResourceTarget = Nullstone.Create("ResourceTarget", undefined, 4);
    ResourceTarget.Instance.Init = function (json, namescope, templateBindingSource, resChain) {
        this._Json = json;
        this._Namescope = namescope;
        this._TemplateBindingSource = templateBindingSource;
        this._ResChain = resChain;
    };
    ResourceTarget.Instance.CreateResource = function () {
        return Fayde.JsonParser.Parse(this._Json, this._Namescope, this._TemplateBindingSource, this._ResChain);
    };
    Fayde.ResourceTarget = Nullstone.FinishCreate(ResourceTarget);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    function RoutedEvent() {
        this._Listeners = [];
    }
    RoutedEvent.prototype.Subscribe = function (callback, closure) {
        if (!(callback instanceof Function))
            throw new InvalidOperationException("Callback must be a function!");
        this._Listeners.push({ Callback: callback, Closure: closure });
    };
    RoutedEvent.prototype.SubscribeSpecific = function (callback, closure, matchFunc, matchClosure) {
        this._Listeners.push({ Callback: callback, Closure: closure, MatchFunc: matchFunc, MatchClosure: matchClosure });
    };
    RoutedEvent.prototype.Unsubscribe = function (callback, closure, matchClosure) {
        for (var i in this._Listeners) {
            var listener = this._Listeners[i];
            if (listener.Callback === callback) {
                if (listener.Closure && closure && !Nullstone.RefEquals(listener.Closure, closure))
                    continue;
                if (listener.MatchClosure && matchClosure && !Nullstone.RefEquals(listener.MatchClosure, matchClosure))
                    continue;
                this._Listeners.splice(i, 1);
                return;
            }
        }
    };
    RoutedEvent.prototype.Raise = function (sender, args) {
        var listeners = this._Listeners;
        for (var i in listeners) {
            var listener = listeners[i];
            if (listener.MatchFunc && !listener.MatchFunc.call(listener.MatchClosure, sender, args))
                continue;
            listener.Callback.call(listener.Closure, sender, args);
        }
    };
    RoutedEvent.prototype.RaiseAsync = function (sender, args) {
        var me = this;
        setTimeout(function () { me.Raise(sender, args); }, 1);
    };
    namespace.RoutedEvent = RoutedEvent;
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var StaticResourceExpression = Nullstone.Create("StaticResourceExpression", namespace.Expression, 5);
    StaticResourceExpression.Instance.Init = function (key, target, propd, propName, templateBindingSource) {
        this.Key = key;
        this.Target = target;
        this.Property = propd;
        this.PropertyName = propName;
    };
    StaticResourceExpression.Instance.GetValue = function (resChain) {
        var o;
        var key = this.Key;
        var len = resChain.length;
        for (var i = len - 1; i >= 0; i--) {
            o = resChain[i].Get(key);
            if (o)
                return o;
        }
        var cur = this.Target;
        while (cur) {
            if (cur instanceof Fayde.FrameworkElement) {
                o = cur.Resources.Get(key);
                if (o)
                    return o;
            }
            if (cur instanceof Fayde.ResourceDictionary) {
                o = cur.Get(key);
                if (o)
                    return o;
            }
            cur = cur._Parent;
        }
        return App.Instance.Resources.Get(key);
    };
    StaticResourceExpression.Instance.Resolve = function (parser) {
        var isAttached = false;
        var ownerType;
        var prop = this.Property;
        if (prop) {
            isAttached = prop._IsAttached;
            ownerType = prop.OwnerType;
        }
        var value = this.GetValue(parser._ResChain);
        if (value instanceof Fayde.ResourceTarget)
            value = value.CreateResource();
        if (!value)
            throw new XamlParseException("Could not resolve StaticResource: '" + this.Key.toString() + "'.");
        parser.TrySetPropertyValue(this.Target, prop, value, null, isAttached, ownerType, this.PropertyName);
    };
    namespace.StaticResourceExpression = Nullstone.FinishCreate(StaticResourceExpression);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var TemplateBindingExpression = Nullstone.Create("TemplateBindingExpression", namespace.Expression, 2);
    TemplateBindingExpression.Instance.Init = function (sourcePropd, targetPropd) {
        this.SourceProperty = sourcePropd;
        this.TargetProperty = targetPropd;
    };
    TemplateBindingExpression.Instance.GetValue = function (propd) {
        var source = this.Target.TemplateOwner;
        var value;
        if (source)
            value = source._GetValue(this.SourceProperty);
        value = Fayde.TypeConverter.ConvertObject(this.TargetProperty, value, this.Target.constructor, true);
        return value;
    };
    TemplateBindingExpression.Instance._OnAttached = function (element) {
        this._OnAttached$Expression(element);
        this.Target = element;
        var listener = this.GetListener();
        if (listener) {
            listener.Detach();
            listener = null;
            this.SetListener(listener);
        }
        var c = Nullstone.As(this.Target, Fayde.Controls.ContentControl);
        if (this.TargetProperty._ID === Fayde.Controls.ContentControl.ContentProperty._ID && c) {
            this.SetsParent = c._ContentSetsParent;
            c._ContentSetsParent = false;
        }
        var source = this.Target.TemplateOwner;
        if (source) {
            listener = new Fayde.Data.PropertyChangedListener(source, this.SourceProperty, this, this.OnPropertyChanged);
            this.SetListener(listener);
        }
    };
    TemplateBindingExpression.Instance._OnDetached = function (element) {
        this._OnDetached$Expression(element);
        var listener = this.GetListener();
        if (!listener)
            return;
        var c = Nullstone.As(this.Target, Fayde.Controls.ContentControl);
        if (c)
            c._ContentSetsParent = this.SetsParent;
        listener.Detach();
        listener = null;
        this.SetListener(listener);
        this.Target = null;
    };
    TemplateBindingExpression.Instance.OnPropertyChanged = function (sender, args) {
        try {
            this.Updating = true;
            try {
                this.Target._SetValue(this.TargetProperty, this.GetValue());
            } catch (err2) {
                this.Target._SetValue(this.TargetProperty, this.TargetProperty.GetDefaultValue(this.Target));
            }
        } catch (err) {
        } finally {
            this.Updating = false;
        }
    };
    TemplateBindingExpression.Instance.GetListener = function () {
        return this._Listener;
    };
    TemplateBindingExpression.Instance.SetListener = function (value) {
        this._Listener = value;
    };
    namespace.TemplateBindingExpression = Nullstone.FinishCreate(TemplateBindingExpression);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var UnsetValue = Nullstone.Create("UnsetValue");
    Fayde.UnsetValue = Nullstone.FinishCreate(UnsetValue);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var VisualTreeHelper = {};
    VisualTreeHelper.GetChild = function (d, childIndex) {
        if (!(d instanceof Fayde.FrameworkElement))
            throw new InvalidOperationException("Reference is not a valid visual DependencyObject");
        var subtree = d._SubtreeObject;
        if (subtree instanceof Fayde.UIElementCollection)
            return subtree.GetValueAt(childIndex);
        if ((subtree instanceof Fayde.UIElement) && childIndex === 0)
            return subtree;
        throw new ArgumentOutOfRangeException();
    };
    VisualTreeHelper.GetChildrenCount = function (d) {
        if (!(d instanceof Fayde.FrameworkElement))
            throw new InvalidOperationException("Reference is not a valid visual DependencyObject");
        var subtree = d._SubtreeObject;
        if (subtree instanceof Fayde.UIElementCollection)
            return subtree.GetCount();
        if (subtree instanceof Fayde.UIElement)
            return 1;
        return 0;
    };
    VisualTreeHelper.GetParent = function (d) {
        if (!(d instanceof Fayde.FrameworkElement))
            throw new InvalidOperationException("Reference is not a valid visual DependencyObject");
        return Nullstone.As(d.GetVisualParent(), Fayde.DependencyObject);
    };
    VisualTreeHelper.GetRoot = function (d) {
        var root = d;
        while (d != null) {
            root = d;
            d = VisualTreeHelper.GetParent(d);
        }
        return root;
    };
    VisualTreeHelper.__Debug = function (uie, func) {
        var topLevel = uie;
        if (topLevel) {
            while (true) {
                var temp = VisualTreeHelper.GetParent(topLevel);
                if (!temp)
                    break;
                topLevel = temp;
            }
        } else {
            topLevel = App.Instance.MainSurface._TopLevel;
        }
        if (!func)
            func = VisualTreeHelper.__DebugUIElement;
        return VisualTreeHelper.__DebugTree(topLevel, uie, 0, func);
    };
    VisualTreeHelper.__DebugTree = function (uie, uie2, tabIndex, func) {
        var str = "";
        for (var i = 0; i < tabIndex; i++) {
            str += "\t";
        }
        if (Nullstone.RefEquals(uie, uie2))
            str += "> ";
        str += uie.constructor._TypeName;
        var name = uie.Name;
        if (name)
            str += " [" + name + "]";
        if (func)
            str += func(uie, tabIndex);
        str += "\n";
        var count = VisualTreeHelper.GetChildrenCount(uie);
        var child;
        for (var i = 0; i < count; i++) {
            child = VisualTreeHelper.GetChild(uie, i);
            str += VisualTreeHelper.__DebugTree(child, uie2, tabIndex + 1, func);
        }
        return str;
    };
    VisualTreeHelper.__DebugUIElement = function (uie, tabIndex) {
        if (!uie)
            return "";
        var str = "(";
        if (uie.Visibility === Fayde.Visibility.Visible)
            str += "Visible";
        else
            str += "Collapsed";
        str += " ";
        var p = Fayde.LayoutInformation.GetVisualOffset(uie);
        if (p)
            str += p.toString();
        var size = new Size(uie.ActualWidth, uie.ActualHeight);
        str += " ";
        str += size.toString();
        str += ")";
        var gridStr = VisualTreeHelper.__DebugGrid(uie, tabIndex);
        if (gridStr)
            str += "\n" + gridStr;
        return str;
    };
    VisualTreeHelper.__DebugGrid = function (uie, tabIndex) {
        var grid = Nullstone.As(uie, Fayde.Controls.Grid);
        if (!grid)
            return "";
        var rds = grid.RowDefinitions;
        var rcount = rds.GetCount();
        var cds = grid.ColumnDefinitions;
        var ccount = cds.GetCount();
        var tabs = "";
        for (var i = 0; i < tabIndex; i++) {
            tabs += "\t";
        }
        var str = "";
        if (rcount > 0) {
            str += tabs;
            str += "  Rows (" + rcount + "):\n";
            for (var i = 0; i < rcount; i++) {
                str += tabs;
                str += "\t[" + i + "] -> " + rds.GetValueAt(i).ActualHeight + "\n";
            }
        }
        if (ccount > 0) {
            str += tabs;
            str += "  Columns (" + ccount + "):\n";
            for (var i = 0; i < ccount; i++) {
                str += tabs;
                str += "\t[" + i + "] -> " + cds.GetValueAt(i).ActualWidth + "\n";
            }
        }
        return str;
    };
    namespace.VisualTreeHelper = VisualTreeHelper;
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var _VisualTreeWalkerDirection = {
        Logical: 0,
        LogicalReverse: 1,
        ZForward: 2,
        ZReverse: 3
    };
    function _VisualTreeWalker(obj, direction) {
        if (!obj)
            return;
        this._Offset = 0;
        this._Collection = null;
        this._Content = obj._SubtreeObject;
        if (direction)
            this._Direction = direction;
        else
            this._Direction = _VisualTreeWalkerDirection.Logical;
        if (this._Content) {
            if (this._Content instanceof Fayde.InternalCollection) {
                this._Collection = this._Content;
                if (!(this._Content instanceof Fayde.UIElementCollection))
                    this._Direction = _VisualTreeWalkerDirection.Logical;
            }
        }
    }
    _VisualTreeWalker.prototype.Step = function () {
        var result;
        var coll = this._Collection;
        if (coll) {
            var dir = this._Direction;
            var count = this.GetCount();
            if (count < 0 || this._Offset >= count)
                return null;
            if (count === 1 && this._Offset === 0) {
                this._Offset++;
                return coll.GetValueAt(0);
            }
            if (dir === _VisualTreeWalkerDirection.ZForward || dir === _VisualTreeWalkerDirection.ZReverse) {
                if (coll.GetZSortedCount() !== count) {
                    coll.ResortByZIndex();
                }
            }
            switch (dir) {
                case _VisualTreeWalkerDirection.ZForward:
                    result = coll.GetValueAtZIndex(this._Offset);
                    break;
                case _VisualTreeWalkerDirection.ZReverse:
                    result = coll.GetValueAtZIndex(count - (this._Offset + 1));
                    break;
                case _VisualTreeWalkerDirection.Logical:
                    result = coll.GetValueAt(this._Offset);
                    break;
                case _VisualTreeWalkerDirection.LogicalReverse:
                    result = coll.GetValueAt(count - (this._Offset + 1));
                    break;
            }
            this._Offset++;
        } else {
            if (this._Offset == 0) {
                this._Offset++;
                result = this._Content;
            }
        }
        return result;
    };
    _VisualTreeWalker.prototype.GetCount = function () {
        if (!this._Content)
            return 0;
        if (!this._Collection)
            return 1;
        return this._Collection.GetCount();
    };
    _VisualTreeWalker.Logical = function (obj) { return new _VisualTreeWalker(obj, _VisualTreeWalkerDirection.Logical); };
    _VisualTreeWalker.LogicalReverse = function (obj) { return new _VisualTreeWalker(obj, _VisualTreeWalkerDirection.LogicalReverse); };
    _VisualTreeWalker.ZForward = function (obj) { return new _VisualTreeWalker(obj, _VisualTreeWalkerDirection.ZForward); };
    _VisualTreeWalker.ZReverse = function (obj) { return new _VisualTreeWalker(obj, _VisualTreeWalkerDirection.ZReverse); };
    Fayde._VisualTreeWalker = _VisualTreeWalker;
    function _DeepTreeWalker(top, direction) {
        if (!top)
            return;
        this._WalkList = new LinkedList();
        this._WalkList.Append(new Fayde.UIElementNode(top));
        this._Last = null;
        this._Direction = _VisualTreeWalkerDirection.Logical;
        if (direction)
            this._Direction = direction;
    }
    _DeepTreeWalker.prototype.Step = function () {
        if (this._Last) {
            var walker = new _VisualTreeWalker(this._Last, this._Direction);
            var prepend = this._WalkList.Head;
            var child;
            while (child = walker.Step()) {
                this._WalkList.InsertBefore(new Fayde.UIElementNode(child), prepend);
            }
        }
        var next = this._WalkList.Head;
        if (!next) {
            this._Last = null;
            return null;
        }
        var current = next.UIElement;
        this._WalkList.Remove(next);
        this._Last = current;
        return current;
    };
    _DeepTreeWalker.prototype.SkipBranch = function () {
        this._Last = null;
    };
    _DeepTreeWalker.Logical = function (obj) { return new _DeepTreeWalker(top, _VisualTreeWalkerDirection.Logical); };
    _DeepTreeWalker.LogicalReverse = function (obj) { return new _DeepTreeWalker(top, _VisualTreeWalkerDirection.LogicalReverse); };
    _DeepTreeWalker.ZForward = function (obj) { return new _DeepTreeWalker(top, _VisualTreeWalkerDirection.ZForward); };
    _DeepTreeWalker.ZReverse = function (obj) { return new _DeepTreeWalker(top, _VisualTreeWalkerDirection.ZReverse); };
    Fayde._DeepTreeWalker = _DeepTreeWalker;
    function setterSort (setter1, setter2) {
        var a = setter1._GetValue(Fayde.Setter.PropertyProperty);
        var b = setter2._GetValue(Fayde.Setter.PropertyProperty);
        return (a === b) ? 0 : ((a > b) ? 1 : -1);
    }
    function _DeepStyleWalker(styles) {
        this._Setters = [];
        this._Offset = 0;
        if (styles instanceof Fayde.Style)
            this._InitializeStyle(styles);
        else if (styles instanceof Array)
            this._InitializeStyles(styles);
    }
    _DeepStyleWalker.prototype.Step = function () {
        if (this._Offset < this._Setters.length) {
            var s = this._Setters[this._Offset];
            this._Offset++;
            return s;
        }
        return undefined;
    };
    _DeepStyleWalker.prototype._InitializeStyle = function (style) {
        var dps = [];
        var cur = style;
        while (cur) {
            var setters = cur.Setters;
            var count = setters.GetCount();
            for (var i = count - 1; i >= 0; i--) {
                var setter = Nullstone.As(setters.GetValueAt(i), Fayde.Setter);
                if (!setter)
                    continue;
                var propd = setter._GetValue(Fayde.Setter.PropertyProperty);
                if (!propd)
                    continue;
                if (dps[propd])
                    continue;
                dps[propd] = setter;
                this._Setters.push(setter);
            }
            cur = cur.BasedOn;
        }
        this._Setters.sort(setterSort);
    };
    _DeepStyleWalker.prototype._InitializeStyles = function (styles) {
        if (!styles)
            return;
        var dps = [];
        var stylesSeen = [];
        for (var i = 0; i < _StyleIndex.Count; i++) {
            var style = styles[i];
            while (style) {
                if (stylesSeen[style._ID])
                    continue;
                var setters = style.Setters;
                var count = setters ? setters.GetCount() : 0;
                for (var j = count - 1; j >= 0; j--) {
                    var setter = Nullstone.As(setters.GetValueAt(j), Fayde.Setter);
                    if (!setter)
                        continue;
                    var propd = setter._GetValue(Fayde.Setter.PropertyProperty);
                    if (!propd)
                        continue;
                    if (dps[propd])
                        continue;
                    dps[propd] = setter;
                    this._Setters.push(setter);
                }
                stylesSeen[style._ID] = true;
                style = style.BasedOn;
            }
        }
        this._Setters.sort(setterSort);
    };
    Fayde._DeepStyleWalker = _DeepStyleWalker;
    function compare(left, right) {
        if (!left)
            return !right ? 0 : -1;
        if (!right)
            return 1;
        var v1 = left.TabIndex;
        var v2 = right.TabIndex;
        if (v1 == null) {
            return v2 != null ? -1 : 0;
        } else if (v2 == null) {
            return 1;
        }
        if (v1 > v2)
            return 1;
        return v1 === v2 ? 0 : -1;
    }
    function getParentNavigationMode(uie) {
        while (uie) {
            if (uie instanceof Fayde.Controls.Control)
                return uie.TabNavigation;
            return Fayde.Input.KeyboardNavigationMode.Local;
        }
        return Fayde.Input.KeyboardNavigationMode.Local;
    }
    function getActiveNavigationMode(uie) {
        while (uie) {
            if (uie instanceof Fayde.Controls.Control)
                return uie.TabNavigation;
            uie = uie.GetVisualParent();
        }
        return Fayde.Input.KeyboardNavigationMode.Local;
    }
    function walkChildren (root, cur, forwards) {
        var walker = new TabNavigationWalker(root, cur, forwards);
        return walker.FocusChild();
    }
    function TabNavigationWalker(root, cur, forwards) {
        this._Root = root;
        this._Current = cur;
        this._Forwards = forwards;
        this._TabSorted = [];
    }
    TabNavigationWalker.prototype.FocusChild = function () {
        var child;
        var childIsControl;
        var curIndex = -1;
        var childWalker = new Fayde._DeepTreeWalker(this._Root);
        while (child = childWalker.Step()) {
            if (Nullstone.RefEquals(child, this._Root) || !(child instanceof Fayde.Controls.Control))
                continue;
            this._TabSorted.push(child);
            childWalker.SkipBranch();
        }
        if (this._TabSorted.length > 1) {
            this._TabSorted.sort(compare);
            if (!this._Forwards)
                this._TabSorted = this._TabSorted.reverse();
        }
        for (var i = 0; i < this._TabSorted.length; i++) {
            if (Nullstone.RefEquals(this._TabSorted[i], this._Current))
                curIndex = i;
        }
        if (curIndex !== -1 && getActiveNavigationMode(this._Root) === Fayde.Input.KeyboardNavigationMode.Once) {
            if (!this._Forwards && this._Root instanceof Fayde.Controls.Control)
                return this.TabTo(this._Root);
            return false;
        }
        var len = this._TabSorted.length;
        if (len > 0) {
            for (var j = 0; j < len; j++) {
                if ((j + curIndex + 1) === len && getActiveNavigationMode(this._Root) !== Fayde.Input.KeyboardNavigationMode.Cycle)
                    break;
                child = this._TabSorted[(j + curIndex + 1) % len];
                childIsControl = child instanceof Fayde.Controls.Control;
                if (childIsControl && !child.IsEnabled)
                    continue;
                if (!this._Forwards && walkChildren(child))
                    return true;
                if (childIsControl && this.TabTo(child))
                    return true;
                if (this._Forwards && walkChildren(child))
                    return true;
            }
        }
        if (curIndex !== -1 && !this._Forwards) {
            if (this._Root instanceof Fayde.Controls.Control)
                return this.TabTo(this._Root);
        }
        return false;
    };
    TabNavigationWalker.prototype.TabTo = function (control) {
        return control.IsEnabled && control.IsTabStop && control.Focus(false);
    };
    TabNavigationWalker.Focus = function (uie, forwards) {
        var focused = false;
        var cur = uie;
        var root = uie;
        if ((root.GetVisualParent() && getParentNavigationMode(root.GetVisualParent()) === Fayde.Input.KeyboardNavigationMode.Once)
            || (!forwards && root && root.GetVisualParent())) {
            while (root = root.GetVisualParent())
                if (root instanceof Fayde.Controls.Control || !root.GetVisualParent())
                    break;
        }
        do {
            focused |= walkChildren(root, cur, forwards);
            if (!focused && getActiveNavigationMode(root) === Fayde.Input.KeyboardNavigationMode.Cycle)
                return true;
            cur = root;
            root = root.GetVisualParent();
            while (root && !(root instanceof Fayde.Controls.Control) && root.GetVisualParent())
                root = root.GetVisualParent();
        } while (!focused && root);
        if (!focused)
            focused |= walkChildren(cur, null, forwards);
        return focused;
    };
    Fayde.TabNavigationWalker = TabNavigationWalker;
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    namespace.Key = {
        None: 0,
        Back: 1,
        Tab: 2,
        Enter: 3,
        Shift: 4,
        Ctrl: 5,
        Alt: 6,
        CapsLock: 7,
        Escape: 8,
        Space: 9,
        PageUp: 10,
        PageDown: 11,
        End: 12,
        Home: 13,
        Left: 14,
        Up: 15,
        Right: 16,
        Down: 17,
        Insert: 18,
        Delete: 19,
        D0: 20,
        D1: 21,
        D2: 22,
        D3: 23,
        D4: 24,
        D5: 25,
        D6: 26,
        D7: 27,
        D8: 28,
        D9: 29,
        A: 30,
        B: 31,
        C: 32,
        D: 33,
        E: 34,
        F: 35,
        G: 36,
        H: 37,
        I: 38,
        J: 39,
        K: 40,
        L: 41,
        M: 42,
        N: 43,
        O: 44,
        P: 45,
        Q: 46,
        R: 47,
        S: 48,
        T: 49,
        U: 50,
        V: 51,
        W: 52,
        X: 53,
        Y: 54,
        Z: 55,
        F1: 56,
        F2: 57,
        F3: 58,
        F4: 59,
        F5: 60,
        F6: 61,
        F7: 62,
        F8: 63,
        F9: 64,
        F10: 65,
        F11: 66,
        F12: 67,
        NumPad0: 68,
        NumPad1: 69,
        NumPad2: 70,
        NumPad3: 71,
        NumPad4: 72,
        NumPad5: 73,
        NumPad6: 74,
        NumPad7: 75,
        NumPad8: 76,
        NumPad9: 77,
        Multiply: 78,
        Add: 79,
        Subtract: 80,
        Decimal: 81,
        Divide: 82,
        Unknown: 255,
    };
})(window);
(function (namespace) {
    namespace.KeyboardNavigationMode = {
        Continue: 0,
        Once: 1,
        Cycle: 2,
        None: 3,
        Contained: 4,
        Local: 5
    };
})(Nullstone.Namespace("Fayde.Input"));

(function (namespace) {
    var ICommand = Nullstone.Create("ICommand");
    ICommand.Instance.Init = function () {
        this.CanExecuteChanged = new MulticastEvent();
    };
    ICommand.Instance.Execute = function (parameter) { };
    ICommand.Instance.CanExecute = function (parameter) { return true; };
    namespace.ICommand = Nullstone.FinishCreate(ICommand);
})(Nullstone.Namespace("Fayde.Input"));

(function (namespace) {
    var ModifierKeys = {
        None: 0,
        Alt: 1,
        Control: 2,
        Shift: 4,
        Windows: 8,
        Apple: 16
    };
    function Keyboard() { }
    Keyboard.RefreshModifiers = function (e) {
        if (e.Shift)
            Keyboard.Modifiers |= ModifierKeys.Shift;
        else
            Keyboard.Modifiers &= ~ModifierKeys.Shift;
        if (e.Ctrl)
            Keyboard.Modifiers |= ModifierKeys.Control;
        else
            Keyboard.Modifiers &= ~ModifierKeys.Control;
        if (e.Alt)
            Keyboard.Modifiers |= ModifierKeys.Alt;
        else
            Keyboard.Modifiers &= ~ModifierKeys.Alt;
    };
    Keyboard.HasControl = function () {
        return (Keyboard.Modifiers & ModifierKeys.Control) === ModifierKeys.Control;
    };
    Keyboard.HasAlt = function () {
        return (Keyboard.Modifiers & ModifierKeys.Alt) === ModifierKeys.Alt;
    };
    Keyboard.HasShift = function () {
        return (Keyboard.Modifiers & ModifierKeys.Shift) === ModifierKeys.Shift;
    };
    Keyboard.Modifiers = ModifierKeys.None;
    namespace.Keyboard = Keyboard;
})(Nullstone.Namespace("Fayde.Input"));

(function (namespace) {
    var KeyboardNavigation = Nullstone.Create("KeyboardNavigation");
    KeyboardNavigation.AcceptsReturnProperty = DependencyProperty.RegisterAttached("AcceptsReturn", function () { return Boolean; }, KeyboardNavigation);
    KeyboardNavigation.GetAcceptsReturn = function (d) {
        return d.GetValue(KeyboardNavigation.AcceptsReturnProperty);
    };
    KeyboardNavigation.SetAcceptsReturn = function (d, value) {
        d.SetValue(KeyboardNavigation.AcceptsReturnProperty, value);
    };
    KeyboardNavigation.ControlTabNavigationProperty = DependencyProperty.RegisterAttached("ControlTabNavigation", function () { return new Enum(KeyboardNavigationMode); }, KeyboardNavigation);
    KeyboardNavigation.GetControlTabNavigation = function (d) {
        return d.GetValue(KeyboardNavigation.ControlTabNavigationProperty);
    };
    KeyboardNavigation.SetControlTabNavigation = function (d, value) {
        d.SetValue(KeyboardNavigation.ControlTabNavigationProperty, value);
    };
    KeyboardNavigation.DirectionalNavigationProperty = DependencyProperty.RegisterAttached("DirectionalNavigation", function () { return new Enum(KeyboardNavigationMode); }, KeyboardNavigation);
    KeyboardNavigation.GetDirectionalNavigation = function (d) {
        return d.GetValue(KeyboardNavigation.DirectionalNavigationProperty);
    };
    KeyboardNavigation.SetDirectionalNavigation = function (d, value) {
        d.SetValue(KeyboardNavigation.DirectionalNavigationProperty, value);
    };
    KeyboardNavigation.IsTabStopProperty = DependencyProperty.RegisterAttached("IsTabStop", function () { return Boolean; }, KeyboardNavigation);
    KeyboardNavigation.GetIsTabStop = function (d) {
        return d.GetValue(KeyboardNavigation.IsTabStopProperty);
    };
    KeyboardNavigation.SetIsTabStop = function (d, value) {
        d.SetValue(KeyboardNavigation.IsTabStopProperty, value);
    };
    KeyboardNavigation.TabIndexProperty = DependencyProperty.RegisterAttached("TabIndex", function () { return Number; }, KeyboardNavigation);
    KeyboardNavigation.GetTabIndex = function (d) {
        return d.GetValue(KeyboardNavigation.TabIndexProperty);
    };
    KeyboardNavigation.SetTabIndex = function (d, value) {
        d.SetValue(KeyboardNavigation.TabIndexProperty, value);
    };
    KeyboardNavigation.TabNavigationProperty = DependencyProperty.RegisterAttached("TabNavigation", function () { return new Enum(KeyboardNavigationMode); }, KeyboardNavigation);
    KeyboardNavigation.GetTabNavigation = function (d) {
        return d.GetValue(KeyboardNavigation.TabNavigationProperty);
    };
    KeyboardNavigation.SetTabNavigation = function (d, value) {
        d.SetValue(KeyboardNavigation.TabNavigationProperty, value);
    };
    namespace.KeyboardNavigation = Nullstone.FinishCreate(KeyboardNavigation);
})(Nullstone.Namespace("Fayde.Input"));

(function (Fayde) {
    var _PropertyValueProvider = Nullstone.Create("_PropertyValueProvider", undefined, 2);
    _PropertyValueProvider.Instance.Init = function (obj, propPrecedence) {
        this._Object = obj;
        this._PropertyPrecedence = propPrecedence;
    };
    _PropertyValueProvider.Instance.GetPropertyValue = function (propd) {
        AbstractMethod("_PropertyValueProvider.GetPropertyValue(propd)");
    };
    _PropertyValueProvider.Instance.ForeachValue = function (func, data) {
        if (!func)
            return;
        for (var value in this._ht)
            func(DependencyProperty._IDs[value], this._ht[value], data);
    };
    Fayde._PropertyValueProvider = Nullstone.FinishCreate(_PropertyValueProvider);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var _StylePropertyValueProvider = Nullstone.Create("_StylePropertyValueProvider", Fayde._PropertyValueProvider, 1);
    _StylePropertyValueProvider.Instance.Init = function (obj) {
        this.Init$_PropertyValueProvider(obj, _PropertyPrecedence.LocalStyle);
        this._ht = [];
        this._RecomputesOnClear = true;
    };
    _StylePropertyValueProvider.Instance.GetPropertyValue = function (propd) {
        return this._ht[propd];
    };
    _StylePropertyValueProvider.Instance.RecomputePropertyValue = function (propd, lower, higher, clear, error) {
        if (!clear)
            return;
        var oldValue;
        var newValue;
        var walkPropd;
        var walker = new Fayde._DeepStyleWalker(this._Style);
        var setter;
        while (setter = walker.Step()) {
            walkPropd = setter._GetValue(Fayde.Setter.PropertyProperty);
            if (walkPropd._ID !== propd._ID)
                continue;
            newValue = setter._GetValue(Fayde.Setter.ConvertedValueProperty);
            oldValue = this._ht[propd];
            this._ht[propd] = newValue;
            this._Object._ProviderValueChanged(this._PropertyPrecedence, propd, oldValue, newValue, true, true, true, error);
            if (error.IsErrored())
                return;
        }
    };
    _StylePropertyValueProvider.Instance._UpdateStyle = function (style, error) {
        var oldValue = undefined;
        var newValue = undefined;
        var oldWalker = new Fayde._DeepStyleWalker(this._Style);
        var newWalker = new Fayde._DeepStyleWalker(style);
        style._Seal();
        var oldSetter = oldWalker.Step();
        var newSetter = newWalker.Step();
        var oldProp;
        var newProp;
        while (oldSetter || newSetter) {
            if (oldSetter)
                oldProp = oldSetter._GetValue(Fayde.Setter.PropertyProperty);
            if (newSetter)
                newProp = newSetter._GetValue(Fayde.Setter.PropertyProperty);
            if (oldProp && (oldProp < newProp || !newProp)) { //WTF: Less than?
                oldValue = oldSetter._GetValue(Fayde.Setter.ConvertedValueProperty);
                newValue = undefined;
                delete this._ht[oldProp];
                this._Object._ProviderValueChanged(this._PropertyPrecedence, oldProp, oldValue, newValue, true, true, false, error);
                oldSetter = oldWalker.Step();
            } else if (oldProp === newProp) {
                oldValue = oldSetter._GetValue(Fayde.Setter.ConvertedValueProperty);
                newValue = newSetter._GetValue(Fayde.Setter.ConvertedValueProperty);
                this._ht[oldProp] = newValue;
                this._Object._ProviderValueChanged(this._PropertyPrecedence, oldProp, oldValue, newValue, true, true, false, error);
                oldSetter = oldWalker.Step();
                newSetter = newWalker.Step();
            } else {
                oldValue = undefined;
                newValue = newSetter._GetValue(Fayde.Setter.ConvertedValueProperty);
                this._ht[newProp] = newValue;
                this._Object._ProviderValueChanged(this._PropertyPrecedence, newProp, oldValue, newValue, true, true, false, error);
                newSetter = newWalker.Step();
            }
        }
        this._Style = style;
    };
    Fayde._StylePropertyValueProvider = Nullstone.FinishCreate(_StylePropertyValueProvider);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var BindingBase = Nullstone.Create("BindingBase");
    Nullstone.AutoProperties(BindingBase, [
        "Sealed"
    ]);
    Nullstone.Property(BindingBase, "StringFormat", {
        get: function () { return this._StringFormat; },
        set: function (value) {
            this.CheckSealed();
            this._StringFormat = value;
        }
    });
    Nullstone.Property(BindingBase, "FallbackValue", {
        get: function () { return this._FallbackValue; },
        set: function (value) {
            this.CheckSealed();
            this._FallbackValue = value;
        }
    });
    Nullstone.Property(BindingBase, "TargetNullValue", {
        get: function () { return this._TargetNullValue; },
        set: function (value) {
            this.CheckSealed();
            this._TargetNullValue = value;
        }
    });
    BindingBase.Instance.CheckSealed = function () {
        if (this.Sealed)
            throw new InvalidOperationException("The Binding cannot be changed after it has been used.");
    };
    BindingBase.Instance.Seal = function () {
        this.Sealed = true;
    };
    namespace.BindingBase = Nullstone.FinishCreate(BindingBase);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var CurrentChangedListener = Nullstone.Create("CurrentChangedListener", null, 3);
    CurrentChangedListener.Instance.Init = function (source, closure, func) {
        this._Source = source;
        this._Closure = closure;
        this._Func = func;
        this._Source.CurrentChanged.Subscribe(this, this.OnCurrentChangedInternal);
    };
    CurrentChangedListener.Instance.Detach = function () {
        if (this._Source) {
            this._Source.CurrentChanged.Unsubscribe(this, this.OnCurrentChangedInternal);
            this._Source = null;
            this._Closure = null;
            this._Func = null;
        }
    };
    CurrentChangedListener.Instance.OnCurrentChangedInternal = function (s, e) {
        if (this._Closure && this._Func)
            this._Func.call(this._Closure, s, e);
    };
    namespace.CurrentChangedListener = Nullstone.FinishCreate(CurrentChangedListener);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    namespace.RelativeSourceMode = {
        TemplatedParent: 1,
        Self: 2,
        FindAncestor: 3
    };
    namespace.BindingMode = {
        TwoWay: 0,
        OneWay: 1,
        OneTime: 2,
        OneWayToSource: 3
    };
    namespace.UpdateSourceTrigger = {
        Default: 0,
        PropertyChanged: 1,
        Explicit: 3
    };
    namespace._PropertyNodeType = {
        AttachedProperty: 0,
        Property: 1,
        Indexed: 2,
        None: 3
    };
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var NPCListener = Nullstone.Create("NPCListener", null, 3);
    NPCListener.Instance.Init = function (source, closure, func) {
        this._Source = source;
        this._Closure = closure;
        this._Func = func;
        if (this._Source)
            this._Source.PropertyChanged.Subscribe(this._Func, this._Closure);
    };
    NPCListener.Instance.Detach = function () {
        this._Source.PropertyChanged.Unsubscribe(this._Closure, this._Func);
    };
    namespace.NPCListener = Nullstone.FinishCreate(NPCListener);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var PropertyChangedListener = Nullstone.Create("PropertyChangedListener", null, 4);
    PropertyChangedListener.Instance.Init = function (source, propd, closure, func) {
        this._Source = source;
        this._Property = propd;
        this._Closure = closure;
        this._Func = func;
        this._Source.PropertyChanged.Subscribe(this.OnPropertyChangedInternal, this);
    };
    PropertyChangedListener.Instance.Detach = function () {
        if (this._Source) {
            this._Source.PropertyChanged.Unsubscribe(this, this.OnPropertyChangedInternal);
            this._Source = null;
            this._Closure = null;
            this._Func = null;
        }
    };
    PropertyChangedListener.Instance.OnPropertyChangedInternal = function (s, e) {
        if (e.Property._ID !== this._Property._ID)
            return;
        if (this._Closure && this._Func)
            this._Func.call(this._Closure, s, e);
    };
    namespace.PropertyChangedListener = Nullstone.FinishCreate(PropertyChangedListener);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var PropertyPath = Nullstone.Create("PropertyPath", undefined, 2);
    PropertyPath.Instance.Init = function (path, expandedPath) {
        this._Path = path;
        this._ExpandedPath = expandedPath;
    };
    PropertyPath.CreateFromParameter = function (parameter) {
        var p = new PropertyPath();
        p._Propd = Nullstone.As(parameter, DependencyProperty);
        p._Path = null;
        if (parameter instanceof String)
            p._Path = parameter;
        return p;
    };
    PropertyPath.Instance.TryResolveDependencyProperty = function (dobj) {
        if (this.HasDependencyProperty)
            return;
        if (dobj)
            this._Propd = dobj.GetDependencyProperty(this.Path);
    };
    Nullstone.Property(PropertyPath, "Path", {
        get: function () { return !this._Propd ? this._Path : "(0)"; }
    });
    Nullstone.Property(PropertyPath, "ExpandedPath", {
        get: function () { return !this._Propd ? this._ExpandedPath : "(0)"; }
    });
    Nullstone.Property(PropertyPath, "ParsePath", {
        get: function () {
            if (this._Propd)
                return "(0)";
            if (this._ExpandedPath)
                return this._ExpandedPath;
            return this._Path;
        }
    });
    Nullstone.Property(PropertyPath, "HasDependencyProperty", {
        get: function () { return this._Propd != null; }
    });
    Nullstone.Property(PropertyPath, "DependencyProperty", {
        get: function () { return this._Propd; }
    });
    namespace.PropertyPath = Nullstone.FinishCreate(PropertyPath);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    function _PropertyPathParser(path) {
        this.Path = path;
    }
    _PropertyPathParser.prototype.Step = function (data) {
        var type = namespace._PropertyNodeType.None;
        var path = this.Path;
        if (path.length === 0) {
            data.typeName = null;
            data.propertyName = null;
            data.index = null;
            return type;
        }
        var end;
        if (path.charAt(0) === '(') {
            type = namespace._PropertyNodeType.AttachedProperty;
            end = path.indexOf(')');
            if (end === -1)
                throw new ArgumentException("Invalid property path. Attached property is missing the closing bracket");
            var splitIndex;
            var tickOpen = path.indexOf('\'');
            var tickClose = 0;
            var typeOpen;
            var typeClose;
            var propOpen;
            var propClose;
            typeOpen = path.indexOf('\'');
            if (typeOpen > 0) {
                typeOpen++;
                typeClose = path.indexOf('\'', typeOpen + 1);
                if (typeClose < 0)
                    throw new Exception("Invalid property path, Unclosed type name '" + path + "'.");
                propOpen = path.indexOf('.', typeClose);
                if (propOpen < 0)
                    throw new Exception("Invalid properth path, No property indexer found '" + path + "'.");
                propOpen++;
            } else {
                typeOpen = 1;
                typeClose = path.indexOf('.', typeOpen);
                if (typeClose < 0)
                    throw new Exception("Invalid property path, No property indexer found on '" + path + "'.");
                propOpen = typeClose + 1;
            }
            propClose = end;
            data.typeName = path.slice(typeOpen, typeClose);
            data.propertyName = path.slice(propOpen, propClose);
            data.index = null;
            if (path.length > (end + 1) && path.charAt(end + 1) === '.')
                end++;
            path = path.substr(end + 1);
        } else if (path.charAt(0) === '[') {
            type = namespace._PropertyNodeType.Indexed;
            end = path.indexOf(']');
            data.typeName = null;
            data.propertyName = null;
            data.index = path.substr(1, end - 1);
            path = path.substr(end + 1);
            if (path.charAt(0) === '.')
                path = path.substr(1);
        } else {
            type = namespace._PropertyNodeType.Property;
            end = path.indexOfAny(['.', '[']);
            if (end === -1) {
                data.propertyName = path;
                path = "";
            } else {
                data.propertyName = path.substr(0, end);
                if (path.charAt(end) === '.')
                    path = path.substr(end + 1);
                else
                    path = path.substr(end);
            }
            data.typeName = null;
            data.index = null;
        }
        this.Path = path;
        return type;
    };
    namespace._PropertyPathParser = _PropertyPathParser;
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var RelativeSource = Nullstone.Create("RelativeSource", undefined, 1);
    RelativeSource.Instance.Init = function (mode) {
        if (mode == null)
            mode = namespace.RelativeSourceMode.TemplatedParent;
        this.Mode = mode;
    };
    Nullstone.AutoProperties(RelativeSource, [
        "Mode"
    ]);
    namespace.RelativeSource = Nullstone.FinishCreate(RelativeSource);
})(Nullstone.Namespace("Fayde.Data"));

(function (Fayde) {
    var ClockTimer = Nullstone.Create("ClockTimer");
    ClockTimer.Instance.Init = function () {
        this._Timers = [];
    };
    ClockTimer.Instance.RegisterTimer = function (timer) {
        if (!Array.addDistinctNullstone(this._Timers, timer))
            return;
        if (this._Timers.length === 1)
            this.RequestAnimationTick();
    };
    ClockTimer.Instance.UnregisterTimer = function (timer) {
        Array.removeNullstone(this._Timers, timer);
    };
    ClockTimer.Instance.DoTick = function () {
        var nowTime = new Date().getTime();
        if (!this._RunTimers(this._LastTime, nowTime)) {
            return;
        }
        this._LastTime = nowTime;
        this.RequestAnimationTick();
    };
    ClockTimer.Instance._RunTimers = function (lastTime, nowTime) {
        if (this._Timers.length === 0)
            return false;
        for (var i = 0; i < this._Timers.length; i++) {
            var timer = this._Timers[i];
            timer._Tick(this._LastTime, nowTime);
        }
        return true;
    };
    ClockTimer.Instance.RequestAnimationTick = function () {
        var clockTimer = this;
        window.requestAnimFrame(function () { clockTimer.DoTick(); });
    };
    Fayde.ClockTimer = Nullstone.FinishCreate(ClockTimer);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var _RenderContext = Nullstone.Create("_RenderContext", undefined, 1);
    _RenderContext.Instance.Init = function (surface) {
        this.Surface = surface;
        this.CanvasContext = this.Surface._Ctx;
        this._Transforms = [];
        if (!this.CanvasContext.hasOwnProperty("currentTransform")) {
            Object.defineProperty(this.CanvasContext, "currentTransform", {
                get: function () { return this._CurrentTransform; },
                set: function (value) {
                    this.setTransform(value[0], value[1], value[3], value[4], value[2], value[5]);
                    this._CurrentTransform = value;
                }
            });
        }
    };
    Nullstone.AutoProperties(_RenderContext, [
        "CurrentTransform",
        "CanvasContext"
    ]);
    _RenderContext.Instance.Clip = function (clip) {
        this._DrawClip(clip);
        this.CanvasContext.clip();
    };
    _RenderContext.Instance.IsPointInPath = function (p) {
        return this.CanvasContext.isPointInPath(p.X, p.Y);
    };
    _RenderContext.Instance.IsPointInClipPath = function (clip, p) {
        this._DrawClip(clip);
        return this.CanvasContext.isPointInPath(p.X, p.Y);
    };
    _RenderContext.Instance._DrawClip = function (clip) {
        if (clip instanceof Rect) {
            this.CanvasContext.beginPath();
            this.CanvasContext.rect(clip.X, clip.Y, clip.Width, clip.Height);
            DrawDebug("DrawClip (Rect): " + clip.toString());
        } else if (clip instanceof Fayde.Media.Geometry) {
            clip.Draw(this);
            DrawDebug("DrawClip (Geometry): " + clip.toString());
        } else if (clip instanceof Fayde.Shapes.RawPath) {
            clip.Draw(this);
            DrawDebug("DrawClip (RawPath): " + clip.toString());
        }
    };
    _RenderContext.Instance.PreTransform = function (matrix) {
        if (matrix instanceof Fayde.Media.Transform) {
            matrix = matrix.Value.raw;
        }
        var ct = this.CurrentTransform;
        mat3.multiply(matrix, ct, ct); //ct = ct * matrix
        this.CanvasContext.currentTransform = ct;
        TransformDebug("PreTransform", ct);
    };
    _RenderContext.Instance.Transform = function (matrix) {
        if (matrix instanceof Fayde.Media.Transform) {
            matrix = matrix.Value.raw;
        }
        var ct = this.CurrentTransform;
        mat3.multiply(ct, matrix, ct); //ct = matrix * ct
        this.CanvasContext.currentTransform = ct;
        TransformDebug("Transform", ct);
    };
    _RenderContext.Instance.Translate = function (x, y) {
        var ct = this.CurrentTransform;
        mat3.translate(ct, x, y);
        this.CanvasContext.translate(x, y);
        TransformDebug("Translate", ct);
    };
    _RenderContext.Instance.Save = function () {
        this.CanvasContext.save();
        var ct = this.CurrentTransform;
        this._Transforms.push(ct);
        this.CurrentTransform = ct == null ? mat3.identity() : mat3.create(ct);
        if (this.CurrentTransform)
            TransformDebug("Save", this.CurrentTransform);
    };
    _RenderContext.Instance.Restore = function () {
        var curXform = this._Transforms.pop();
        this.CurrentTransform = curXform;
        this.CanvasContext.restore();
        if (this.CurrentTransform)
            TransformDebug("Restore", this.CurrentTransform);
    };
    _RenderContext.Instance.Rect = function (rect) {
        var ctx = this.CanvasContext;
        ctx.beginPath();
        ctx.rect(rect.X, rect.Y, rect.Width, rect.Height);
        DrawDebug("Rect: " + rect.toString());
    };
    _RenderContext.Instance.Fill = function (brush, region) {
        var ctx = this.CanvasContext;
        brush.SetupBrush(ctx, region);
        ctx.fillStyle = brush.ToHtml5Object();
        ctx.fill();
        DrawDebug("Fill: [" + ctx.fillStyle.toString() + "]");
    };
    _RenderContext.Instance.FillRect = function (brush, rect) {
        var ctx = this.CanvasContext;
        brush.SetupBrush(ctx, rect);
        ctx.beginPath();
        ctx.rect(rect.X, rect.Y, rect.Width, rect.Height);
        ctx.fillStyle = brush.ToHtml5Object();
        ctx.fill();
        DrawDebug("FillRect: [" + ctx.fillStyle.toString() + "] " + rect.toString());
    };
    _RenderContext.Instance.StrokeAndFillRect = function (strokeBrush, thickness, strokeRect, fillBrush, fillRect) {
        var ctx = this.CanvasContext;
        strokeBrush.SetupBrush(ctx, strokeRect);
        fillBrush.SetupBrush(ctx, fillRect);
        ctx.beginPath();
        ctx.rect(fillRect.X, fillRect.Y, fillRect.Width, fillRect.Height);
        ctx.fillStyle = fillBrush.ToHtml5Object();
        ctx.fill();
        ctx.lineWidth = thickness;
        ctx.strokeStyle = strokeBrush.ToHtml5Object();
        ctx.stroke();
        DrawDebug("StrokeAndFillRect: [" + ctx.strokeStyle.toString() + "] [" + ctx.fillStyle.toString() + "] " + fillRect.toString());
    };
    _RenderContext.Instance.Stroke = function (stroke, thickness, region) {
        var ctx = this.CanvasContext;
        stroke.SetupBrush(ctx, region);
        ctx.lineWidth = thickness;
        ctx.strokeStyle = stroke.ToHtml5Object();
        ctx.stroke();
        DrawDebug("Stroke: [" + ctx.strokeStyle.toString() + "] -> " + ctx.lineWidth.toString());
    };
    _RenderContext.Instance.Clear = function (rect) {
        this.CanvasContext.clearRect(rect.X, rect.Y, rect.Width, rect.Height);
        DrawDebug("Clear: " + rect.toString());
    };
    _RenderContext.ToArray = function (args) {
        var arr = [];
        for (var i in args)
            arr.push(args[i]);
        return arr;
    };
    Fayde._RenderContext = Nullstone.FinishCreate(_RenderContext);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var JsonParser = Nullstone.Create("JsonParser");
    JsonParser.Instance.Init = function () {
        this.$SRExpressions = [];
        this._ResChain = [];
    };
    JsonParser.Parse = function (json, templateBindingSource, namescope, resChain) {
        var parser = new JsonParser();
        if (resChain)
            parser._ResChain = resChain;
        parser._TemplateBindingSource = templateBindingSource;
        var shouldSetNS = false;
        if (!namescope) {
            namescope = new Fayde.NameScope();
            shouldSetNS = true;
        }
        var app = App.Instance;
        var perfTimer = new Fayde.PerfTimer();
        perfTimer.ReportFunc = function (elapsed) { app._NotifyDebugParserPass(json.Type, elapsed); };
        perfTimer.IsDisabled = app._DebugFunc[5] == null;
        perfTimer.Start();
        var obj = parser.CreateObject(json, namescope);
        if (shouldSetNS && obj instanceof Fayde.DependencyObject)
            Fayde.NameScope.SetNameScope(obj, namescope);
        perfTimer.Stop();
        return obj;
    };
    JsonParser.Instance.CreateObject = function (json, namescope, ignoreResolve) {
        if (json.Type == null) {
            return json;
        }
        if (json.Type === Number || json.Type === String || json.Type === Boolean) {
            return json.Value;
        }
        if (json.Type === Fayde.Controls.ControlTemplate) {
            var targetType = json.Props == null ? null : json.Props.TargetType;
            var template = new json.Type(targetType, json.Content);
            template._ResChain = this._ResChain;
            return template;
        }
        if (json.Type === Fayde.DataTemplate) {
            var template = new Fayde.DataTemplate(json.Content);
            template._ResChain = this._ResChain;
            return template;
        }
        var dobj = new json.Type();
        dobj.TemplateOwner = this._TemplateBindingSource;
        if (json.Name)
            dobj.SetNameOnScope(json.Name, namescope);
        var propd;
        var propValue;
        if (json.Props) {
            for (var propName in json.Props) {
                propValue = json.Props[propName];
                if (propValue == undefined)
                    continue;
                if (dobj instanceof Fayde.DependencyObject)
                    propd = dobj.GetDependencyProperty(propName);
                this.TrySetPropertyValue(dobj, propd, propValue, namescope, false, dobj.constructor, propName);
            }
        }
        if (json.AttachedProps) {
            if (!(json.AttachedProps instanceof Array))
                throw new Error("json.AttachedProps is not an array");
            for (var i in json.AttachedProps) {
                var attachedDef = json.AttachedProps[i];
                propd = DependencyProperty.GetDependencyProperty(attachedDef.Owner, attachedDef.Prop);
                propValue = attachedDef.Value;
                this.TrySetPropertyValue(dobj, propd, propValue, namescope, true, attachedDef.Owner, attachedDef.Prop);
            }
        }
        var contentPropd = this.GetAnnotationMember(json.Type, "ContentProperty");
        if (contentPropd instanceof DependencyProperty) {
            if (json.Children) {
                this.TrySetCollectionProperty(json.Children, dobj, contentPropd, namescope);
            } else if (json.Content) {
                var content = json.Content;
                if (content instanceof Fayde.Markup)
                    content = content.Transmute(dobj, contentPropd, "Content", this._TemplateBindingSource);
                else
                    content = this.CreateObject(json.Content, namescope, true);
                this.SetValue(dobj, contentPropd, content);
            }
        } else if (contentPropd != null && contentPropd.constructor === String) {
            var propDesc = Nullstone.GetPropertyDescriptor(dobj, contentPropd);
            if (propDesc.set || propDesc.writable) {
                dobj[contentPropd] = this.CreateObject(json.Content, namescope, true);
            } else if (propDesc.get) {
                var coll = dobj[contentPropd];
                for (var j in json.Children) {
                    var fobj = this.CreateObject(json.Children[j], namescope, true);
                    if (fobj instanceof Fayde.DependencyObject)
                        fobj._AddParent(coll, true);
                    coll.Add(fobj);
                }
            }
        } else if (dobj instanceof Fayde.InternalCollection) {
            this.TrySetCollectionProperty(json.Children, dobj, null, namescope);
        }
        if (!ignoreResolve) {
            this.ResolveStaticResourceExpressions();
        }
        if (json.Type === Fayde.ResourceDictionary) {
            delete this._ContextResourceDictionary;
        }
        return dobj;
    };
    JsonParser.Instance.TrySetPropertyValue = function (dobj, propd, propValue, namescope, isAttached, ownerType, propName) {
        if (!propValue.constructor._IsNullstone && propValue.Type) {
            propValue = this.CreateObject(propValue, namescope, true);
        }
        if (propValue instanceof Fayde.Markup)
            propValue = propValue.Transmute(dobj, propd, propName, this._TemplateBindingSource);
        if (propValue instanceof Fayde.StaticResourceExpression) {
            this.SetValue(dobj, propd, propValue);
            return;
        }
        if (propd) {
            if (this.TrySetCollectionProperty(propValue, dobj, propd, namescope))
                return;
            if (!(propValue instanceof Fayde.Expression)) {
                var targetType = propd.GetTargetType();
                if (targetType._IsNullstone && !(propValue instanceof targetType)) {
                    var propDesc = Nullstone.GetPropertyDescriptor(dobj, propName);
                    if (propDesc) {
                        var setFunc = propDesc.set;
                        if (setFunc && setFunc.Converter && setFunc.Converter instanceof Function)
                            propValue = setFunc.Converter(propValue);
                    }
                }
            }
            this.SetValue(dobj, propd, propValue);
        } else if (!isAttached) {
            if (Nullstone.HasProperty(dobj, propName)) {
                dobj[propName] = propValue;
            } else {
                var func = dobj["Set" + propName];
                if (func && func instanceof Function)
                    func.call(dobj, propValue);
            }
        } else {
            Warn("Could not find attached property: " + ownerType._TypeName + "." + propName);
        }
    };
    JsonParser.Instance.TrySetCollectionProperty = function (subJson, dobj, propd, namescope) {
        var targetType;
        if (propd == null) {
            if (dobj == null)
                return;
            targetType = dobj.constructor;
        } else {
            targetType = propd.GetTargetType();
        }
        if (!Nullstone.DoesInheritFrom(targetType, Fayde.InternalCollection))
            return false;
        if (!(subJson instanceof Array))
            return false;
        var coll;
        if (propd == null) {
            coll = dobj;
        } else {
            if (propd._IsAutoCreated) {
                coll = dobj.$GetValue(propd);
            } else {
                coll = new targetType();
                if (coll instanceof Fayde.DependencyObject)
                    coll._AddParent(dobj, true);
                dobj.$SetValue(propd, coll);
            }
        }
        var rd = Nullstone.As(coll, Fayde.ResourceDictionary);
        var oldChain = this._ResChain;
        if (rd) {
            this._ResChain = this._ResChain.slice(0);
            this._ResChain.push(rd);
        }
        for (var i in subJson) {
            var fobj;
            if (rd == null) {
                fobj = this.CreateObject(subJson[i], namescope, true);
                if (fobj instanceof Fayde.DependencyObject)
                    fobj._AddParent(coll, true);
                coll.Add(fobj);
            } else {
                var key = subJson[i].Key;
                if (subJson[i].Type !== Fayde.Style) {
                    fobj = new Fayde.ResourceTarget(subJson[i], namescope, this._TemplateBindingSource, this._ResChain);
                } else {
                    fobj = this.CreateObject(subJson[i], namescope, true);
                    if (!key)
                        key = fobj.TargetType;
                }
                if (key)
                    rd.Set(key, fobj);
            }
        }
        this._ResChain = oldChain;
        return true;
    };
    JsonParser.Instance.ResolveStaticResourceExpressions = function () {
        var srs = this.$SRExpressions;
        if (srs == null)
            return;
        if (srs.length > 0) {
            for (var i = 0; i < srs.length; i++) {
                srs[i].Resolve(this);
            }
        }
        this.$SRExpressions = [];
    };
    JsonParser.Instance.SetValue = function (dobj, propd, value) {
        if (value instanceof Fayde.StaticResourceExpression) {
            this.$SRExpressions.push(value);
            dobj.$SetValueInternal(propd, new Fayde.DeferredValueExpression());
        } else if (value instanceof Fayde.Expression) {
            dobj.$SetValueInternal(propd, value);
        } else {
            dobj._SetValue(propd, value);
        }
    };
    JsonParser.Instance.GetAnnotationMember = function (type, member) {
        if (type == null || !type._IsNullstone)
            return null;
        if (type.Annotations == null)
            return this.GetAnnotationMember(type._BaseClass, member);
        var annotation = type.Annotations[member];
        if (annotation == null)
            return this.GetAnnotationMember(type._BaseClass, member);
        return annotation;
    };
    JsonParser.CreateSetter = function (dobj, propName, value) {
        var setter = new Fayde.Setter();
        var propd = dobj.GetDependencyProperty(propName);
        setter.SetProperty(propd);
        setter.SetValue_Prop(value);
        return setter;
    };
    Fayde.JsonParser = Nullstone.FinishCreate(JsonParser);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var Markup = Nullstone.Create("Markup");
    Markup.Instance.Transmute = function (target, propd, propName, templateBindingSource) {
        AbstractMethod("Markup.Transmute");
    };
    Fayde.Markup = Nullstone.FinishCreate(Markup);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var StaticResourceMarkup = Nullstone.Create("StaticResourceMarkup", Fayde.Markup, 1);
    StaticResourceMarkup.Instance.Init = function (key) {
        this.Key = key;
    };
    StaticResourceMarkup.Instance.Transmute = function (target, propd, propName, templateBindingSource) {
        return new Fayde.StaticResourceExpression(this.Key, target, propd, propName, templateBindingSource);
    };
    Fayde.StaticResourceMarkup = Nullstone.FinishCreate(StaticResourceMarkup);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var TemplateBindingMarkup = Nullstone.Create("TemplateBindingMarkup", Fayde.Markup, 1);
    TemplateBindingMarkup.Instance.Init = function (path) {
        this.Path = path;
    };
    TemplateBindingMarkup.Instance.Transmute = function (target, propd, propName, templateBindingSource) {
        var sourcePropd = DependencyProperty.GetDependencyProperty(templateBindingSource.constructor, this.Path);
        return new Fayde.TemplateBindingExpression(sourcePropd, propd);
    };
    Fayde.TemplateBindingMarkup = Nullstone.FinishCreate(TemplateBindingMarkup);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    namespace.AlignmentX = {
        Left: 0,
        Center: 1,
        Right: 2
    };
    namespace.AlignmentY = {
        Top: 0,
        Center: 1,
        Bottom: 2
    };
    namespace.Stretch = {
        None: 0,
        Fill: 1,
        Uniform: 2,
        UniformToFill: 3
    };
    namespace.BrushMappingMode = {
        Absolute: 0,
        RelativeToBoundingBox: 1
    };
    namespace.GradientSpreadMethod = {
        Pad: 0,
        Reflect: 1,
        Repeat: 2
    };
    namespace.TextHintingMode = {
        Fixed: 0,
        Animated: 1
    };
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    function GradientMetrics() {
    }
    GradientMetrics.prototype.E = function (dir, first, last, bounds) {
        var maxX = bounds.X + bounds.Width;
        while (first.x >= bounds.X)
            first.x -= dir.x;
        while (last.x <= maxX)
            last.x += dir.x;
    };
    GradientMetrics.prototype.W = function (dir, first, last, bounds) {
        var maxX = bounds.X + bounds.Width;
        while (first.x <= maxX)
            first.x -= dir.x;
        while (last.x >= bounds.X)
            last.x += dir.x;
    };
    GradientMetrics.prototype.S = function (dir, first, last, bounds) {
        var maxY = bounds.Y + bounds.Height;
        while (first.y >= bounds.Y)
            first.y -= dir.y;
        while (last.y <= maxY)
            last.y += dir.y;
    };
    GradientMetrics.prototype.N = function (dir, first, last, bounds) {
        var maxY = bounds.Y + bounds.Height;
        while (first.y <= maxY)
            first.y -= dir.y;
        while (last.y >= bounds.Y)
            last.y += dir.y;
    };
    GradientMetrics.prototype.NW = function (dir, first, last, bounds) {
        var maxX = bounds.X + bounds.Width;
        var maxY = bounds.Y + bounds.Height;
        while (first.x <= maxX && first.y <= maxY) {
            first.x -= dir.x;
            first.y -= dir.y;
        }
        while (last.x >= bounds.X && last.y >= bounds.Y) {
            last.x += dir.x;
            last.y += dir.y;
        }
    };
    GradientMetrics.prototype.SW = function (dir, first, last, bounds) {
        var maxX = bounds.X + bounds.Width;
        var maxY = bounds.Y + bounds.Height;
        while (first.x <= maxX && first.y >= bounds.Y) {
            first.x -= dir.x;
            first.y -= dir.y;
        }
        while (last.x >= bounds.X && last.y <= maxY) {
            last.x += dir.x;
            last.y += dir.y;
        }
    };
    GradientMetrics.prototype.NE = function (dir, first, last, bounds) {
        var maxX = bounds.X + bounds.Width;
        var maxY = bounds.Y + bounds.Height;
        while (first.x >= bounds.X && first.y <= maxY) {
            first.x -= dir.x;
            first.y -= dir.y;
        }
        while (last.x <= maxX && last.y >= bounds.Y) {
            last.x += dir.x;
            last.y += dir.y;
        }
    };
    GradientMetrics.prototype.SE = function (dir, first, last, bounds) {
        var maxX = bounds.X + bounds.Width;
        var maxY = bounds.Y + bounds.Height;
        while (first.x >= bounds.X && first.y >= bounds.Y) {
            first.x -= dir.x;
            first.y -= dir.y;
        }
        while (last.x <= maxX && last.y <= maxY) {
            last.x += dir.x;
            last.y += dir.y;
        }
    };
    GradientMetrics.Calculate = function (dir, first, last, bounds) {
        var instance = GradientMetrics.Instance;
        if (dir.y === 0) {
            if (dir.x < 0)
                instance.W(dir, first, last, bounds);
            else
                instance.E(dir, first, last, bounds);
        } else if (dir.x === 0) {
            if (dir.y < 0)
                instance.N(dir, first, last, bounds);
            else
                instance.S(dir, first, last, bounds);
        } else if (dir.x < 0 && dir.y < 0) { // e\s
            instance.NW(dir, first, last, bounds);
        } else if (dir.x < 0 && dir.y > 0) { // e/s
            instance.SW(dir, first, last, bounds);
        } else if (dir.x > 0 && dir.y < 0) { // s/e
            instance.NE(dir, first, last, bounds);
        } else if (dir.x > 0 && dir.y > 0) { // s\e
            instance.SE(dir, first, last, bounds);
        }
    };
    GradientMetrics.Instance = new GradientMetrics();
    namespace.GradientMetrics = GradientMetrics;
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var _MediaParser = function(str) {
        this.str = str;
        this.len = str.length;
        this.index = 0;
    };
    _MediaParser.ParseGeometry = function (str) {
        return (new Fayde._MediaParser(str)).ParseGeometryImpl();
    };
    _MediaParser.ParsePointCollection = function (str) {
        return (new Fayde._MediaParser(str)).ParsePointCollectionImpl();
    };
    _MediaParser.prototype.ParseGeometryImpl = function () {
        var cp = new Point();
        var cp1, cp2, cp3;
        var start = new Point();
        var fillRule = namespace.Shapes.FillRule.EvenOdd;
        var cbz = false; // last figure is a cubic bezier curve
        var qbz = false; // last figure is a quadratic bezier curve
        var cbzp = new Point(); // points needed to create "smooth" beziers
        var qbzp = new Point(); // points needed to create "smooth" beziers
        var path = new Fayde.Shapes.RawPath();
        while (this.index < this.len) {
            var c;
            while (this.index < this.len && (c = this.str.charAt(this.index)) === ' ') {
                this.index++;
            }
            this.index++
            var relative = false;
            switch (c) {
                case 'f':
                case 'F':
                    c = this.str.charAt(this.index);
                    if (c === '0')
                        fillRule = namespace.Shapes.FillRule.EvenOdd;
                    else if (c === '1')
                        fillRule = namespace.Shapes.FillRule.NonZero;
                    else
                        return null;
                    this.index++
                    c = this.str.charAt(this.index);
                    break;
                case 'm':
                    relative = true;
                case 'M':
                    cp1 = this.ParsePoint(this);
                    if (cp1 == null)
                        break;
                    if (relative) {
                        cp1.X += cp.X;
                        cp1.Y += cp.Y;
                    }
                    path.Move(cp1.X, cp1.Y);
                    start.X = cp.X = cp1.X;
                    start.Y = cp.Y = cp1.Y;
                    this.Advance();
                    while (this.MorePointsAvailable()) {
                        if ((cp1 = this.ParsePoint()) == null)
                            break;
                        if (relative) {
                            cp1.X += cp.X;
                            cp1.Y += cp.Y;
                        }
                        path.Line(cp1.X, cp1.Y);
                    }
                    cp.X = cp1.X;
                    cp.Y = cp1.Y;
                    cbz = qbz = false;
                    break;
                case 'l':
                    relative = true;
                case 'L':
                    while (this.MorePointsAvailable()) {
                        if ((cp1 = this.ParsePoint()) == null)
                            break;
                        if (relative) {
                            cp1.X += cp.X;
                            cp1.Y += cp.Y;
                        }
                        path.Line(cp1.X, cp1.Y);
                        cp.X = cp1.X;
                        cp.Y = cp1.Y;
                        this.Advance();
                    }
                    cbz = qbz = false;
                    break;
                case 'h':
                    relative = true;
                case 'H':
                    var x = this.ParseDouble();
                    if (x == null)
                        break;
                    if (relative)
                        x += cp.X;
                    cp = new Point(x, cp.Y);
                    path.Line(cp.X, cp.Y);
                    cbz = qbz = false;
                    break;
                case 'v':
                    relative = true;
                case 'V':
                    var y = this.ParseDouble();
                    if (y == null)
                        break;
                    if (relative)
                        y += cp.Y;
                    cp = new Point(cp.X, y);
                    path.Line(cp.X, cp.Y);
                    cbz = qbz = false;
                    break;
                case 'c':
                    relative = true;
                case 'C':
                    while (this.MorePointsAvailable()) {
                        if ((cp1 = this.ParsePoint()) == null)
                            break;
                        if (relative) {
                            cp1.X += cp.X;
                            cp1.Y += cp.Y;
                        }
                        this.Advance();
                        if ((cp2 = this.ParsePoint()) == null)
                            break;
                        if (relative) {
                            cp2.X += cp.X;
                            cp2.Y += cp.Y;
                        }
                        this.Advance();
                        if ((cp3 = this.ParsePoint()) == null)
                            break;
                        if (relative) {
                            cp3.X += cp.X;
                            cp3.Y += cp.Y;
                        }
                        this.Advance();
                        path.Bezier(cp1.X, cp1.Y, cp2.X, cp2.Y, cp3.X, cp3.Y);
                        cp1.X = cp3.X;
                        cp1.Y = cp3.Y;
                    }
                    cp.X = cp3.X;
                    cp.Y = cp3.Y;
                    cbz = true;
                    cbzp.X = cp2.X;
                    cbzp.Y = cp2.Y;
                    qbz = false;
                    break;
                case 's':
                    relative = true;
                case 'S':
                    while (this.MorePointsAvailable()) {
                        if ((cp2 = this.ParsePoint()) == null)
                            break;
                        if (relative) {
                            cp2.X += cp.X;
                            cp2.Y += cp.Y;
                        }
                        this.Advance();
                        if ((cp3 = this.ParsePoint()) == null)
                            break;
                        if (relative) {
                            cp3.X += cp.X;
                            cp3.Y += cp.Y;
                        }
                        if (cbz) {
                            cp1.X = 2 * cp.X - cbzp.X;
                            cp1.Y = 2 * cp.Y - cbzp.Y;
                        } else
                            cp1 = cp;
                        path.Bezier(cp1.X, cp1.Y, cp2.X, cp2.Y, cp3.X, cp3.Y);
                        cbz = true;
                        cbzp.X = cp2.X;
                        cbzp.Y = cp2.Y;
                        cp.X = cp3.X;
                        cp.Y = cp3.Y;
                        this.Advance();
                    }
                    qbz = false;
                    break;
                case 'q':
                    relative = true;
                case 'Q':
                    while (this.MorePointsAvailable()) {
                        if ((cp1 = this.ParsePoint()) == null)
                            break;
                        if (relative) {
                            cp1.X += cp.X;
                            cp1.Y += cp.Y;
                        }
                        this.Advance();
                        if ((cp2 = this.ParsePoint()) == null)
                            break;
                        if (relative) {
                            cp2.X += cp.X;
                            cp2.Y += cp.Y;
                        }
                        this.Advance();
                        path.Quadratic(cp1.X, cp1.Y, cp2.X, cp2.Y);
                        cp.X = cp2.X;
                        cp.Y = cp2.Y;
                    }
                    qbz = true;
                    qbzp.X = cp1.X;
                    qbzp.Y = cp1.Y;
                    cbz = false;
                    break;
                case 't':
                    relative = true;
                case 'T':
                    while (this.MorePointsAvailable()) {
                        if ((cp2 = this.ParsePoint()) == null)
                            break;
                        if (relative) {
                            cp2.X += cp.X;
                            cp2.Y += cp.Y;
                        }
                        if (qbz) {
                            cp1.X = 2 * cp.X - qbzp.X;
                            cp1.Y = 2 * cp.Y - qbzp.Y;
                        } else
                            cp1 = cp;
                        path.Quadratic(cp1.X, cp1.Y, cp2.X, cp2.Y);
                        qbz = true;
                        qbzp.X = cp1.X;
                        qbzp.Y = cp1.Y;
                        cp.X = cp2.X;
                        cp.Y = cp2.Y;
                        this.Advance();
                    }
                    cbz = false;
                    break;
                case 'a':
                    relative = true;
                case 'A':
                    while (this.MorePointsAvailable()) {
                        if ((cp1 = this.ParsePoint()) == null)
                            break;
                        var angle = this.ParseDouble();
                        var is_large = this.ParseDouble() !== 0;
                        var sweep = this.ParseDouble() !== 0;
                        if ((cp2 = this.ParsePoint()) == null)
                            break;
                        if (relative) {
                            cp2.X += cp.X;
                            cp2.Y += cp.Y;
                        }
                        path.EllipticalArc(cp1.X, cp1.Y, angle, is_large, sweep, cp2.X, cp2.Y);
                        cp.X = cp2.X;
                        cp.Y = cp2.Y;
                        this.Advance();
                    }
                    cbz = qbz = false;
                    break;
                case 'z':
                case 'Z':
                    path.Close();
                    cp.X = start.X;
                    cp.Y = start.Y;
                    cbz = qbz = false;
                    break;
                default:
                    break;
            }
        }
        var pg = new Fayde.Media.PathGeometry();
        pg.$Path = path;
        pg.FillRule = fillRule;
        return pg;
    };
    _MediaParser.prototype.ParsePointCollectionImpl = function () {
        var p;
        var points = new Fayde.Shapes.PointCollection();
        while (this.MorePointsAvailable() && (p = this.ParsePoint()) != null) {
            points.Add(p);
        }
        return points;
    };
    _MediaParser.prototype.ParsePoint = function () {
        var x = this.ParseDouble();
        if (x == null)
            return null;
        var c;
        while (this.index < this.len && ((c = this.str.charAt(this.index)) === ' ' || c === ',')) {
            this.index++;
        }
        if (this.index >= this.len)
            return null;
        var y = this.ParseDouble();
        if (y == null)
            return null;
        return new Point(x, y);
    };
    _MediaParser.prototype.ParseDouble = function () {
        this.Advance();
        var isNegative = false;
        if (this.Match('-')) {
            isNegative = true;
            this.index++;
        } else if (this.Match('+')) {
            this.index++;
        }
        if (this.Match('Infinity')) {
            this.index += 8;
            return isNegative ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
        }
        if (this.Match('NaN'))
            return NaN;
        var temp = '';
        while (this.index < this.len) {
            var code = this.str.charCodeAt(this.index);
            var c = String.fromCharCode(code);
            if (code >= 48 && code <= 57)
                temp += c;
            else if (code === 46)
                temp += c;
            else if (c === 'E' || c === 'e')
                temp += c;
            else
                break;
            this.index++;
        }
        if (temp.length === 0)
            return null;
        var f = parseFloat(temp);
        return isNegative ? -f : f;
    };
    _MediaParser.prototype.Match = function (matchStr) {
        var c1;
        var c2;
        for (var i = 0; i < matchStr.length && (this.index + i) < this.len; i++) {
            c1 = matchStr.charAt(i);
            c2 = this.str.charAt(this.index + i);
            if (c1 !== c2)
                return false;
        }
        return true;
    };
    _MediaParser.prototype.Advance = function () {
        var code;
        while (this.index < this.len) {
            code = this.str.charCodeAt(this.index);
            if ((code >= 65 && code <= 90) || (code >= 97 && code <= 122) || (code >= 48 && code <= 57))
                break;
            c = String.fromCharCode(code);
            if (c === '.')
                break;
            if (c === '-')
                break;
            if (c === '+')
                break;
            this.index++;
        }
    };
    _MediaParser.prototype.MorePointsAvailable = function () {
        var c;
        while (this.index < this.len && ((c = this.str.charAt(this.index)) === ',' || c === ' ')) {
            this.index++;
        }
        if (this.index >= this.len)
            return false;
        if (c === '.' || c === '-' || c === '+')
            return true;
        var code = this.str.charCodeAt(this.index);
        return code >= 48 && code <= 57;
    };
    namespace._MediaParser = _MediaParser;
})(Fayde);

(function (namespace) {
    var TextOptions = Nullstone.Create("TextOptions");
    TextOptions.TextHintingModeProperty = DependencyProperty.RegisterAttached("TextHintingMode", function () { return new Enum(namespace.TextHintingMode); }, TextOptions);
    TextOptions.GetTextHintingMode = function (d) {
        return d.GetValue(TextOptions.TextHintingModeProperty);
    };
    TextOptions.SetTextHintingMode = function (d, value) {
        d.SetValue(TextOptions.TextHintingModeProperty, value);
    };
    namespace.TextOptions = Nullstone.FinishCreate(TextOptions);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var AnimationStorage = Nullstone.Create("AnimationStorage", undefined, 3);
    AnimationStorage.Instance.Init = function (timeline, targetobj, targetprop) {
        this._Timeline = timeline;
        this._TargetObj = targetobj;
        this._TargetProp = targetprop;
        var prevStorage = targetobj._AttachAnimationStorage(targetprop, this);
        this._BaseValue = this._TargetObj._GetValue(this._TargetProp);
        if (this._BaseValue === undefined) {
            var targetType = this._TargetProp.GetTargetType();
            if (targetType === Number)
                this._BaseValue = 0;
            else if (targetType === String)
                this._BaseValue = "";
            else
                this._BaseValue = new targetType();
        }
        if (prevStorage != null)
            this.StopValue = prevStorage.StopValue;
        else
            this.StopValue = targetobj._ReadLocalValue(targetprop);
    };
    AnimationStorage.Instance.SwitchTarget = function (target) {
        var wasDisabled = this._Disabled;
        if (!this._Disabled)
            this.Disable();
        this._TargetObj = target;
        this._Disabled = wasDisabled;
    };
    AnimationStorage.Instance.Enable = function () {
        this._Disabled = false;
        this.ApplyCurrentValue();
    };
    AnimationStorage.Instance.Disable = function () {
        this._Disabled = true;
    };
    AnimationStorage.Instance.Stop = function () {
        this.DetachFromObject();
        this.ResetPropertyValue();
    };
    AnimationStorage.Instance.DetachFromObject = function () {
        if (this._TargetObj == null || this._TargetProp == null)
            return;
        this._TargetObj._DetachAnimationStorage(this._TargetProp, this);
    };
    AnimationStorage.Instance.ResetPropertyValue = function () {
        if (this._TargetObj == null || this._TargetProp == null)
            return;
        this._TargetObj._SetValue(this._TargetProp, this.StopValue);
    };
    AnimationStorage.Instance.UpdateCurrentValueAndApply = function (clockData) {
        if (this._Disabled)
            return;
        if (this._TargetObj == null)
            return;
        var oldValue = this._CurrentValue;
        this._CurrentValue = this._Timeline.GetCurrentValue(this._BaseValue, this.StopValue !== undefined ? this.StopValue : this._BaseValue, clockData);
        if (Nullstone.Equals(oldValue, this._CurrentValue))
            return;
        this.ApplyCurrentValue();
    };
    AnimationStorage.Instance.ApplyCurrentValue = function () {
        if (this._CurrentValue == null)
            return;
        AnimationDebug("ApplyCurrentValue: [" + this._TargetObj.constructor._TypeName + "." + this._TargetProp.Name + "] --> " + this._CurrentValue.toString());
        this._TargetObj._SetValue(this._TargetProp, this._CurrentValue);
    };
    namespace.AnimationStorage = Nullstone.FinishCreate(AnimationStorage);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var Curves = {};
    Curves.QuadraticArrayYForX = function (arr, x, count) {
        for (var i = 0; i < count; i++) {
            if (x < arr[i].c2.x)
                return Curves.QuadraticYForX(x, arr[i]);
        }
        return 0.0;
    };
    Curves.QuadraticYForX = function (x, src) {
        var l = src.c2.x - src.c0.x;
        if (l <= 0)
            return 0.0;
        x = (x - src.c0.x) / l;
        return ((1 - x) * (1 - x)) * src.c0.y + ((2 * x) * (1 - x) * src.c1.y) + ((x * x) * src.c2.y);
    };
    Curves.SubdivideCubicAtLevel = function (b, lvl, src) {
        Curves.RecursiveSubdivide(b, lvl, 1, 0, src);
    };
    Curves.RecursiveSubdivide = function (b, lvl, currentlvl, pos, src) {
        var data = {};
        Curves.SubdivideCubic(data, src);
        var b1 = data.b1;
        var b2 = data.b2;
        if (currentlvl === lvl) {
            b[pos] = b1;
            b[pos + 1] = b2;
            return pos + 2;
        }
        pos = Curves.RecursiveSubdivide(b, lvl, currentlvl + 1, pos, b1);
        pos = Curves.RecursiveSubdivide(b, lvl, currentlvl + 1, pos, b2);
        return pos;
    };
    Curves.SubdivideCubic = function (data, src) {
        var p01 = {}, p012 = {}, p0123 = {};
        var p12 = {}, p123 = {};
        var p23 = {};
        Curves.HalfLerpPoint(p01, src.c0, src.c1);
        Curves.HalfLerpPoint(p12, src.c1, src.c2);
        Curves.HalfLerpPoint(p23, src.c2, src.c3);
        Curves.HalfLerpPoint(p012, p01, p12);
        Curves.HalfLerpPoint(p123, p12, p23);
        Curves.HalfLerpPoint(p0123, p012, p123);
        data.b1 = {
            c0: src.c0,
            c1: p01,
            c2: p012,
            c3: p0123
        };
        data.b2 = {
            c0: p0123,
            c1: p123,
            c2: p23,
            c3: src.c3
        };
    };
    Curves.HalfLerpPoint = function (p, p1, p2) {
        p.x = p1.x + (p2.x - p1.x) * 0.5;
        p.y = p1.y + (p2.y - p1.y) * 0.5;
    };
    Curves.ConvertCubicsToQuadratics = function (srcArray, count) {
        var destArray = [];
        for (var i = 0; i < count; i++) {
            destArray.push(Curves.QuadraticFromCubic(srcArray[i]));
        }
        return destArray;
    };
    Curves.QuadraticFromCubic = function (src) {
        return {
            c0: {
                x: src.c0.x,
                y: src.c0.y
            },
            c1: {
                x: (src.c1.x + src.c2.x) / 2.0,
                y: (src.c1.y + src.c2.y) / 2.0
            },
            c2: {
                x: src.c3.x,
                y: src.c3.y
            }
        };
    };
    namespace.Curves = Curves
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    namespace.EasingMode = {
        EaseOut: 0,
        EaseIn: 1,
        EaseInOut: 2
    };
    namespace.FillBehavior = {
        HoldEnd: 0,
        Stop: 1
    };
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var IEasingFunction = Nullstone.Create("IEasingFunction");
    IEasingFunction.Instance.Ease = function (normalizedTime) {
    };
    namespace.IEasingFunction = Nullstone.FinishCreate(IEasingFunction);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var RepeatBehavior = Nullstone.Create("RepeatBehavior");
    RepeatBehavior.Instance.Init = function () {
        this.IsForever = false;
    };
    RepeatBehavior.FromRepeatDuration = function (duration) {
        var rb = new RepeatBehavior();
        rb._Duration = duration;
        return rb;
    };
    RepeatBehavior.FromIterationCount = function (count) {
        var rb = new RepeatBehavior();
        rb._Count = count;
        return rb;
    };
    RepeatBehavior.FromForever = function () {
        var rb = new RepeatBehavior();
        rb.IsForever = true;
        return rb;
    };
    Nullstone.Property(RepeatBehavior, "HasCount", {
        get: function () {
            return this._Count != null;
        }
    });
    Nullstone.Property(RepeatBehavior, "Count", {
        get: function () {
            return this._Count;
        }
    });
    Nullstone.Property(RepeatBehavior, "HasDuration", {
        get: function () { return this._Duration != null; }
    });
    Nullstone.Property(RepeatBehavior, "Duration", {
        get: function () { return this._Duration; }
    });
    namespace.RepeatBehavior = Nullstone.FinishCreate(RepeatBehavior);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var VisualStateChangedEventArgs = Nullstone.Create("VisualStateChangedEventArgs");
    namespace.VisualStateChangedEventArgs = Nullstone.FinishCreate(VisualStateChangedEventArgs);
})(Nullstone.Namespace("Fayde.Media.VisualStateManager"));

(function (namespace) {
    var RelayCommand = Nullstone.Create("RelayCommand", undefined, 2, [Fayde.Input.ICommand]);
    RelayCommand.Instance.Init = function (execute, canExecute) {
        this.CanExecuteChanged = new MulticastEvent();
        if (execute)
            this.Execute = execute;
        if (canExecute)
            this.CanExecute = canExecute;
    };
    RelayCommand.Instance.Execute = function (parameter) { };
    RelayCommand.Instance.CanExecute = function (parameter) { return true; };
    Nullstone.FinishCreate(RelayCommand);
    namespace.RelayCommand = RelayCommand;
})(Nullstone.Namespace("Fayde.MVVM"));

(function (namespace) {
    var NavService = Nullstone.Create("NavService", undefined, 1);
    NavService.Instance.Init = function (app) {
        this.LocationChanged = new MulticastEvent();
        this.App = app;
        this.Href = window.location.href;
        this.Hash = window.location.hash;
        if (this.Hash) {
            this.Hash = this.Hash.substr(1);
            this.Href = this.Href.substring(0, this.Href.indexOf('#'));
        }
        var ns = this;
        window.onhashchange = function () { ns._HandleFragmentChange(); };
    };
    NavService.Instance._HandleFragmentChange = function () {
        this.App.Address = new Uri(document.URL);
        this.Hash = window.location.hash;
        if (this.Hash) {
            this.Hash = this.Hash.substr(1);
        }
        this.LocationChanged.Raise(this, new EventArgs());
    };
    namespace.NavService = Nullstone.FinishCreate(NavService);
})(Nullstone.Namespace("Fayde.Navigation"));

(function (namespace) {
    var UriMapper = Nullstone.Create("UriMapper");
    Nullstone.AutoProperty(UriMapper, "UriMappings");
    UriMapper.Instance.MapUri = function (uri) {
    };
    UriMapper.Annotations = {
        ContentProperty: "UriMappings"
    };
    namespace.UriMapper = Nullstone.FinishCreate(UriMapper);
})(Nullstone.Namespace("Fayde.Navigation"));

(function (namespace) {
    var CornerRadius = Nullstone.Create("CornerRadius", undefined, 4);
    CornerRadius.Instance.Init = function (topLeft, topRight, bottomRight, bottomLeft) {
        this.TopLeft = topLeft == null ? 0 : topLeft;
        this.TopRight = topRight == null ? 0 : topRight;
        this.BottomRight = bottomRight == null ? 0 : bottomRight;
        this.BottomLeft = bottomLeft == null ? 0 : bottomLeft;
    };
    CornerRadius.Instance.IsZero = function () {
        return this.TopLeft === 0
            && this.TopRight === 0
            && this.BottomRight === 0
            && this.BottomLeft === 0;
    };
    CornerRadius.Instance.toString = function () {
        return "(" + this.TopLeft + ", " + this.TopRight + ", " + this.BottomRight + ", " + this.BottomLeft + ")";
    };
    namespace.CornerRadius = Nullstone.FinishCreate(CornerRadius);
})(window);

(function (namespace) {
    var Duration = Nullstone.Create("Duration", undefined, 1);
    Duration.Instance.Init = function (value) {
        if (typeof value == "number") {
            this._Type = DurationType.TimeSpan;
            this._TimeSpan = new TimeSpan(value);
        } else if (value instanceof TimeSpan) {
            this._Type = DurationType.TimeSpan;
            this._TimeSpan = value;
        } else if (typeof value == "string") {
            if (value === "Automatic")
                this._Type = DurationType.Automatic;
            if (value === "Forever")
                this._Type = DurationType.Forever;
        }
    };
    Duration.CreateAutomatic = function () {
        var d = new Duration();
        d._Type = DurationType.Automatic;
        return d;
    };
    Duration.CreateForever = function () {
        var d = new Duration();
        d._Type = DurationType.Forever;
        return d;
    };
    Duration.CreateTimeSpan = function (timespan) {
        var d = new Duration();
        d._Type = DurationType.TimeSpan;
        d._TimeSpan = timespan;
        return d;
    };
    Nullstone.Property(Duration, "Type", {
        get: function () { return this._Type; }
    });
    Nullstone.Property(Duration, "TimeSpan", {
        get: function () {
            if (this._Type === DurationType.TimeSpan)
                return this._TimeSpan;
            throw new InvalidOperationException();
        }
    });
    Nullstone.Property(Duration, "HasTimeSpan", {
        get: function () {
            return this._Type === DurationType.TimeSpan;
        }
    });
    Nullstone.Property(Duration, "IsForever", {
        get: function () {
            return this._Type === DurationType.Forever;
        }
    });
    Nullstone.Property(Duration, "IsAutomatic", {
        get: function () {
            return this._Type === DurationType.Automatic;
        }
    });
    namespace.Duration = Nullstone.FinishCreate(Duration);
})(window);

(function (namespace) {
    var Font = Nullstone.Create("Font");
    Font.Instance.Init = function () {
        this._Family = Font.DEFAULT_FAMILY;
        this._Stretch = Font.DEFAULT_STRETCH;
        this._Style = Font.DEFAULT_STYLE;
        this._Weight = Font.DEFAULT_WEIGHT;
        this._Size = Font.DEFAULT_SIZE;
    };
    Nullstone.Property(Font, "Family", {
        get: function () { return this._Family; },
        set: function (value) {
            if (this._Family == value)
                return;
            this._Family = value;
            this._PurgeCache();
        }
    });
    Nullstone.Property(Font, "Stretch", {
        get: function () { return this._Stretch; },
        set: function (value) {
            if (this._Stretch == value)
                return;
            this._Stretch = value;
            this._PurgeCache();
        }
    });
    Nullstone.Property(Font, "Style", {
        get: function () { return this._Style; },
        set: function (value) {
            if (this._Style == value)
                return;
            this._Style = value;
            this._PurgeCache();
        }
    });
    Nullstone.Property(Font, "Weight", {
        get: function () { return this._Weight; },
        set: function (value) {
            if (this._Weight == value)
                return;
            this._Weight = value;
            this._PurgeCache();
        }
    });
    Nullstone.Property(Font, "Size", {
        get: function () { return this._Size; },
        set: function (value) {
            if (this._Size == value)
                return;
            this._Size = value;
            this._PurgeCache();
        }
    });
    Nullstone.Property(Font, "IsChanged", {
        get: function () {
            return this._CachedTranslation == null;
        }
    });
    Font.Instance.GetActualHeight = function () {
        return Surface._MeasureHeight(this);
    };
    Font.Instance._Descender = function () { return 0.0; }; //most likely removable
    Font.Instance._Ascender = function () { return 0.0; }; //most likely removable
    Font.Instance._PurgeCache = function () {
        delete this._CachedHeight;
        delete this._CachedTranslation;
    };
    Font.Instance.ToHtml5Object = function () {
        if (!this._CachedTranslation)
            this._CachedTranslation = this._BuildTranslation();
        return this._CachedTranslation;
    };
    Font.Instance._BuildTranslation = function () {
        var s = "";
        s += this.Style.toString() + " ";
        s += "normal ";
        s += this.Weight.toString() + " ";
        s += this.Size + "px ";
        s += this.Family.toString();
        return s;
    };
    Font.DEFAULT_FAMILY = "Segoe UI, Lucida Sans Unicode, Verdana";
    Font.DEFAULT_STRETCH = FontStretch.Normal;
    Font.DEFAULT_STYLE = FontStyle.Normal;
    Font.DEFAULT_WEIGHT = Fayde.FontWeight.Normal;
    Font.DEFAULT_SIZE = 14;
    namespace.Font = Nullstone.FinishCreate(Font);
})(window);

(function (namespace) {
    var FontFamily = Nullstone.Create("FontFamily");
    FontFamily.Instance.Init = function (familyNames) {
        this.FamilyNames = familyNames;
    };
    FontFamily.Instance.toString = function () {
        return this.FamilyNames;
    };
    namespace.FontFamily = Nullstone.FinishCreate(FontFamily);
})(window);

(function (namespace) {
    var KeyTime = Nullstone.Create("KeyTime");
    KeyTime.Instance.Init = function () {
        this.IsValid = true;
    };
    KeyTime.CreateUniform = function () {
        this._IsUniform = true;
    };
    KeyTime.CreateTimeSpan = function (ts) {
        var kt = new KeyTime();
        kt._TimeSpan = ts;
        return kt;
    };
    Nullstone.Property(KeyTime, "IsPaced", {
        get: function () { return this._IsPaced === true; }
    });
    Nullstone.Property(KeyTime, "IsUniform", {
        get: function () { return this._IsUniform === true; }
    });
    Nullstone.Property(KeyTime, "HasTimeSpan", {
        get: function () { return this._TimeSpan != null; }
    });
    Nullstone.Property(KeyTime, "TimeSpan", {
        get: function () { return this._TimeSpan; }
    });
    Nullstone.Property(KeyTime, "HasPercent", {
        get: function () { return this._Percent != null; }
    });
    Nullstone.Property(KeyTime, "Percent", {
        get: function () { return this._Percent; }
    });
    namespace.KeyTime = Nullstone.FinishCreate(KeyTime);
})(window);

(function (namespace) {
    function Matrix() {
        this.raw = mat3.identity();
    }
    Object.defineProperty(Matrix.prototype, "M11", {
        get: function () { return this.raw[0]; },
        set: function (value) {
            if (this.raw[0] !== value) {
                this.raw[0] = value;
                this._OnChanged();
            }
        }
    });
    Object.defineProperty(Matrix.prototype, "M12", {
        get: function () { return this.raw[1]; },
        set: function (value) {
            if (this.raw[1] !== value) {
                this.raw[1] = value;
                this._OnChanged();
            }
        }
    });
    Object.defineProperty(Matrix.prototype, "M21", {
        get: function () { return this.raw[3]; },
        set: function (value) {
            if (this.raw[3] !== value) {
                this.raw[3] = value;
                this._OnChanged();
            }
        }
    });
    Object.defineProperty(Matrix.prototype, "M22", {
        get: function () { return this.raw[4]; },
        set: function (value) {
            if (this.raw[4] !== value) {
                this.raw[4] = value;
                this._OnChanged();
            }
        }
    });
    Object.defineProperty(Matrix.prototype, "OffsetX", {
        get: function () { return this.raw[2]; },
        set: function (value) {
            if (this.raw[2] !== value) {
                this.raw[2] = value;
                this._OnChanged();
            }
        }
    });
    Object.defineProperty(Matrix.prototype, "OffsetY", {
        get: function () { return this.raw[5]; },
        set: function (value) {
            if (this.raw[5] !== value) {
                this.raw[5] = value;
                this._OnChanged();
            }
        }
    });
    Object.defineProperty(Matrix.prototype, "Inverse", {
        get: function () {
            var inverse = mat3.identity();
            mat3.inverse(this.raw, inverse);
            if (inverse) {
                var m = new Matrix();
                m.raw = inverse;
                return m;
            }
        }
    });
    Matrix.prototype.toString = function () {
        return mat3.str(this.raw);
    };
    Matrix.prototype._OnChanged = function () {
        if (this._ChangedCallback)
            this._ChangedCallback();
    };
    namespace.Matrix = Matrix;
})(window);

(function (namespace) {
    function Matrix3D() {
        this._Elements = [
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        ];
    }
    Object.defineProperty(Matrix3D.prototype, "Inverse", {
        get: function () {
            if (!this._InverseEls)
                this._InverseEls = Matrix3D._CalculateInverse(this);
            var m3 = new Matrix3D();
            m3._Elements = this._InverseEls;
            m3._InverseEls = this._Elements;
            return m3;
        }
    });
    Matrix3D.prototype.toString = function () {
        return this._Elements.toString();
    };
    /*
    Matrix3D.Init = function (A, B) {
        A._Elements = B._Elements.slice(0);
    };
    Matrix3D.CreateAffine = function (matrix) {
        var els = matrix._Elements;
        var m = new Matrix3D();
        m._Elements = [
            els[0], els[1], 0, els[2],
            els[3], els[4], 0, els[5],
            0, 0, 1, 0,
            0, 0, 0, 1
        ];
        return m;
    };
    Matrix3D.Multiply = function (C, A, B) {
        var c = C._Elements;
        var a = A._Elements;
        var b = B._Elements.slice(0);
        c[0] = a[0] * b[0] + a[4] * b[1] + a[8] * b[2] + a[12] * b[3];
        c[4] = a[0] * b[4] + a[4] * b[5] + a[8] * b[6] + a[12] * b[7];
        c[8] = a[0] * b[8] + a[4] * b[9] + a[8] * b[10] + a[12] * b[11];
        c[12] = a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12] * b[15];
        c[1] = a[1] * b[0] + a[5] * b[1] + a[9] * b[2] + a[13] * b[3];
        c[5] = a[1] * b[4] + a[5] * b[5] + a[9] * b[6] + a[13] * b[7];
        c[9] = a[1] * b[8] + a[5] * b[9] + a[9] * b[10] + a[13] * b[11];
        c[13] = a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13] * b[15];
        c[2] = a[2] * b[0] + a[6] * b[1] + a[10] * b[2] + a[14] * b[3];
        c[6] = a[2] * b[4] + a[6] * b[5] + a[10] * b[6] + a[14] * b[7];
        c[10] = a[2] * b[8] + a[6] * b[9] + a[10] * b[10] + a[14] * b[11];
        c[14] = a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14] * b[15];
        c[3] = a[3] * b[0] + a[7] * b[1] + a[11] * b[2] + a[15] * b[3];
        c[7] = a[3] * b[4] + a[7] * b[5] + a[11] * b[6] + a[15] * b[7];
        c[11] = a[3] * b[8] + a[7] * b[9] + a[11] * b[10] + a[15] * b[11];
        c[15] = a[3] * b[12] + a[7] * b[13] + a[11] * b[14] + a[15] * b[15];
    };
    Matrix3D.TransformPoint = function (c, A, b) {
        var e = A._Elements;
        var d = b.slice(0);
        c[0] = e[0] * d[0] + e[1] * d[1] + e[2] * d[2] + e[3];
        c[1] = e[4] * d[0] + e[5] * d[1] + e[6] * d[2] + e[7];
        c[2] = e[8] * d[0] + e[9] * d[1] + e[10] * d[2] + e[11];
        c[3] = e[12] * d[0] + e[13] * d[1] + e[14] * d[2] + e[15];
    };
    Matrix3D.TransformBounds = function (m3, bounds) {
        var idels = [
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        ];
        if (!(m3._Elements < idels) && !(m3._Elements > idels)) //identity matrix
            return new Rect(bounds.X, bounds.Y, bounds.Width, bounds.Height);
        var p1 = [bounds.X, bounds.Y, 0.0, 1.0];
        var p2 = [bounds.X + bounds.Width, bounds.Y, 0.0, 1.0];
        var p3 = [bounds.X + bounds.Width, bounds.Y + bounds.Height, 0.0, 1.0];
        var p4 = [bounds.X, bounds.Y + bounds.Height, 0.0, 1.0];
        var tp = Matrix3D.TransformPoint;
        tp(p1, m3, p1);
        tp(p2, m3, p2);
        tp(p3, m3, p3);
        tp(p4, m3, p4);
        var vs = 65536.0;
        var vsr = 1.0 / vs;
        p1[0] *= vsr;
        p1[1] *= vsr;
        p2[0] *= vsr;
        p2[1] *= vsr;
        p3[0] *= vsr;
        p3[1] *= vsr;
        p4[0] *= vsr;
        p4[1] *= vsr;
        var clipmask = Matrix3D._ClipMask;
        var cm1 = clipmask(p1);
        var cm2 = clipmask(p2);
        var cm3 = clipmask(p3);
        var cm4 = clipmask(p4);
        if ((cm1 | cm2 | cm3 | cm4) !== 0) {
            bounds = new Rect();
            if ((cm1 & cm2 & cm3 & cm4) === 0) {
                NotImplemented("Matrix3D.TransformBounds");
            }
        } else {
            var p1w = 1.0 / p1[3];
            var p2w = 1.0 / p2[3];
            var p3w = 1.0 / p3[3];
            var p4w = 1.0 / p4[3];
            p1[0] *= p1w * vs;
            p1[1] *= p1w * vs;
            p2[0] *= p2w * vs;
            p2[1] *= p2w * vs;
            p3[0] *= p3w * vs;
            p3[1] *= p3w * vs;
            p4[0] *= p4w * vs;
            p4[1] *= p4w * vs;
            bounds = new Rect(p1[0], p1[1], 0, 0);
            bounds.ExtendTo(p2[0], p2[1]);
            bounds.ExtendTo(p3[0], p3[1]);
            bounds.ExtendTo(p4[0], p4[1]);
        }
        return bounds;
    };
    Matrix3D.Equals = function (A, B) {
        var elsA = A._Elements;
        var elsB = B._Elements;
        if (elsA.length !== elsB.length)
            return false;
        return !(elsA < elsB) && !(elsA > elsB);
    };
    Matrix3D.Get2DAffine = function (A) {
        var els = A._Elements;
        if (els[2] === 0.0 && els[6] === 0.0
            && els[8] === 0.0 && els[9] === 0.0 && els[10] === 1.0 && els[11] === 0.0
            && els[12] === 0.0 && els[13] === 0.0 && els[14] === 0.0 && els[15] === 1.0) {
            var mt = new Matrix();
            mt._Elements = [els[0], els[1], els[3], els[4], els[5], els[7]];
            mt._Type = MatrixTypes.Unknown;
            return mt;
        }
    };
    Matrix3D._CalculateInverse = function (m) {
        var els = m._Elements;
        var tmp = [];
        tmp[0] = els[5] * els[10] * els[15] - els[5] * els[14] * els[11] - els[6] * els[9] * els[15] +
            els[6] * els[13] * els[11] + els[7] * els[9] * els[14] - els[7] * els[13] * els[10];
        tmp[1] = -els[1] * els[10] * els[15] + els[1] * els[14] * els[11] + els[2] * els[9] * els[15] -
            els[2] * els[13] * els[11] - els[3] * els[9] * els[14] + els[3] * els[13] * els[10];
        tmp[2] = els[1] * els[6] * els[15] - els[1] * els[14] * els[7] - els[2] * els[5] * els[15] +
            els[2] * els[13] * els[7] + els[3] * els[5] * els[14] - els[3] * els[13] * els[6];
        tmp[3] = -els[1] * els[6] * els[11] + els[1] * els[10] * els[7] + els[2] * els[5] * els[11] -
            els[2] * els[9] * els[7] - els[3] * els[5] * els[10] + els[3] * els[9] * els[6];
        tmp[4] = -els[4] * els[10] * els[15] + els[4] * els[14] * els[11] + els[6] * els[8] * els[15] -
            els[6] * els[12] * els[11] - els[7] * els[8] * els[14] + els[7] * els[12] * els[10];
        tmp[5] = els[0] * els[10] * els[15] - els[0] * els[14] * els[11] - els[2] * els[8] * els[15] +
            els[2] * els[12] * els[11] + els[3] * els[8] * els[14] - els[3] * els[12] * els[10];
        tmp[6] = -els[0] * els[6] * els[15] + els[0] * els[14] * els[7] + els[2] * els[4] * els[15] -
            els[2] * els[12] * els[7] - els[3] * els[4] * els[14] + els[3] * els[12] * els[6];
        tmp[7] = els[0] * els[6] * els[11] - els[0] * els[10] * els[7] - els[2] * els[4] * els[11] +
            els[2] * els[8] * els[7] + els[3] * els[4] * els[10] - els[3] * els[8] * els[6];
        tmp[8] = els[4] * els[9] * els[15] - els[4] * els[13] * els[11] - els[5] * els[8] * els[15] +
            els[5] * els[12] * els[11] + els[7] * els[8] * els[13] - els[7] * els[12] * els[9];
        tmp[9] = -els[0] * els[9] * els[15] + els[0] * els[13] * els[11] + els[1] * els[8] * els[15] -
            els[1] * els[12] * els[11] - els[3] * els[8] * els[13] + els[3] * els[12] * els[9];
        tmp[10] = els[0] * els[5] * els[15] - els[0] * els[13] * els[7] - els[1] * els[4] * els[15] +
            els[1] * els[12] * els[7] + els[3] * els[4] * els[13] - els[3] * els[12] * els[5];
        tmp[11] = -els[0] * els[5] * els[11] + els[0] * els[9] * els[7] + els[1] * els[4] * els[11] -
            els[1] * els[8] * els[7] - els[3] * els[4] * els[9] + els[3] * els[8] * els[5];
        tmp[12] = -els[4] * els[9] * els[14] + els[4] * els[13] * els[10] + els[5] * els[8] * els[14] -
            els[5] * els[12] * els[10] - els[6] * els[8] * els[13] + els[6] * els[12] * els[9];
        tmp[13] = els[0] * els[9] * els[14] - els[0] * els[13] * els[10] - els[1] * els[8] * els[14] +
            els[1] * els[12] * els[10] + els[2] * els[8] * els[13] - els[2] * els[12] * els[9];
        tmp[14] = -els[0] * els[5] * els[14] + els[0] * els[13] * els[6] + els[1] * els[4] * els[14] -
            els[1] * els[12] * els[6] - els[2] * els[4] * els[13] + els[2] * els[12] * els[5];
        tmp[15] = els[0] * els[5] * els[10] - els[0] * els[9] * els[6] - els[1] * els[4] * els[10] +
            els[1] * els[8] * els[6] + els[2] * els[4] * els[9] - els[2] * els[8] * els[5];
        var det = els[0] * tmp[0] + els[4] * tmp[1] + els[8] * tmp[2] + els[12] * tmp[3];
        if (det === 0)
            return;
        det = 1.0 / det;
        for (var i = 0; i < 16; i++) {
            tmp[i] *= det;
        }
        return tmp;
    };
    Matrix3D._ClipMask = function (clip) {
        var mask = 0;
        if (-clip[0] + clip[3] < 0) mask |= (1 << 0);
        if ( clip[0] + clip[3] < 0) mask |= (1 << 1);
        if (-clip[1] + clip[3] < 0) mask |= (1 << 2);
        if ( clip[1] + clip[3] < 0) mask |= (1 << 3);
        if ( clip[2] + clip[3] < 0) mask |= (1 << 4);
        if (-clip[2] + clip[3] < 0) mask |= (1 << 5);
        return mask;
    };
    */
    namespace.Matrix3D = Matrix3D;
})(window);

(function (namespace) {
    function Point(x, y) {
        this.X = x == null ? 0 : x;
        this.Y = y == null ? 0 : y;
    }
    Point.prototype.toString = function () {
        return "X=" + this.X.toString() + ";Y=" + this.Y.toString();
    };
    Point.Equals = function (p1, p2) {
        if (p1 == null)
            return p2 == null;
        if (p2 == null)
            return false;
        return p1.X === p2.X && p1.Y === p2.Y;
    };
    Point.LERP = function (start, end, p) {
        var x = start.X + (end.X - start.X) * clockData.Progress;
        var y = start.Y + (end.Y - start.Y) * clockData.Progress;
        return new Point(x, y);
    };
    namespace.Point = Point;
})(window);

(function (namespace) {
    function Rect(x, y, width, height) {
        this.X = x == null ? 0 : x;
        this.Y = y == null ? 0 : y;
        this.Width = width == null ? 0 : width;
        this.Height = height == null ? 0 : height;
    }
    Rect._TypeName = "Rect";
    Rect.Equals = function (rect1, rect2) {
        if (rect1 == null)
            return rect2 == null;
        if (rect2 == null)
            return false;
        return rect1.X == rect2.X && rect1.Y == rect2.Y && rect1.Width == rect2.Width && rect1.Height == rect2.Height;
    };
    Rect.prototype.GetRight = function () {
        return this.X + this.Width;
    };
    Rect.prototype.GetBottom = function () {
        return this.Y + this.Height;
    };
    Rect.prototype.IsEmpty = function () {
        return this.Width <= 0.0 || this.Height <= 0.0;
    };
    Rect.prototype.GrowBy = function (left, top, right, bottom) {
        var result = new Rect(this.X - left, this.Y - top, this.Width + left + right, this.Height + top + bottom);
        if (result.Width < 0)
            result.Width = 0;
        if (result.Height < 0)
            result.Height = 0;
        return result;
    };
    Rect.prototype.GrowByThickness = function (thickness) {
        var result = new Rect(this.X - thickness.Left, this.Y - thickness.Top, this.Width + thickness.Left + thickness.Right, this.Height + thickness.Top + thickness.Bottom);
        if (result.Width < 0)
            result.Width = 0;
        if (result.Height < 0)
            result.Height = 0;
        return result;
    };
    Rect.prototype.ShrinkBy = function (left, top, right, bottom) {
        var result = new Rect(this.X + left, this.Y + top, this.Width - left - right, this.Height - top - bottom);
        if (result.Width < 0)
            result.Width = 0;
        if (result.Height < 0)
            result.Height = 0;
        return result;
    };
    Rect.prototype.ShrinkByThickness = function (thickness) {
        var result = new Rect(this.X + thickness.Left, this.Y + thickness.Top, this.Width - thickness.Left - thickness.Right, this.Height - thickness.Top - thickness.Bottom);
        if (result.Width < 0)
            result.Width = 0;
        if (result.Height < 0)
            result.Height = 0;
        return result;
    };
    Rect.prototype.Union = function (rect2, logical) {
        if (this.IsEmpty())
            return new Rect(rect2.X, rect2.Y, rect2.Width, rect2.Height);
        if (rect2.IsEmpty())
            return new Rect(this.X, this.Y, this.Width, this.Height);
        if (logical) {
            if (rect2.Width <= 0 && rect2.Height <= 0)
                return new Rect(this.X, this.Y, this.Width, this.Height);
        } else {
            if (rect2.Width <= 0 || rect2.Height <= 0)
                return new Rect(this.X, this.Y, this.Width, this.Height);
        }
        var result = new Rect(0, 0, 0, 0);
        result.X = Math.min(this.X, rect2.X);
        result.Y = Math.min(this.Y, rect2.Y);
        result.Width = Math.max(this.X + this.Width, rect2.X + rect2.Width) - result.X;
        result.Height = Math.max(this.Y + this.Height, rect2.Y + rect2.Height) - result.Y;
        return result;
    };
    Rect.prototype.Intersection = function (rect2) {
        var result = new Rect(0, 0, 0, 0);
        result.X = Math.max(this.X, rect2.X);
        result.Y = Math.max(this.Y, rect2.Y);
        result.Width = Math.max(0, Math.min(this.X + this.Width, rect2.X + rect2.Width) - result.X);
        result.Height = Math.max(0, Math.min(this.Y + this.Height, rect2.Y + rect2.Height) - result.Y);
        return result;
    };
    Rect.prototype.RoundOut = function () {
        return new Rect(Math.floor(this.X), Math.floor(this.Y), Math.ceil(this.X + this.Width) - Math.floor(this.X), Math.ceil(this.Y + this.Height) - Math.floor(this.Y));
    }
    Rect.prototype.RoundIn = function () {
        return new Rect(Math.ceil(this.X), Math.ceil(this.Y), Math.floor(this.X + this.Width) - Math.ceil(this.X), Math.floor(this.Y + this.Height) - Math.ceil(this.Y));
    }
    Rect.prototype.Transform = function (transform) {
        if (!transform)
            return this;
        var x = this.X;
        var y = this.Y;
        var width = this.Width;
        var height = this.Height;
        var p1 = vec2.createFrom(x, y);
        var p2 = vec2.createFrom(x + width, y);
        var p3 = vec2.createFrom(x + width, y + height);
        var p4 = vec2.createFrom(x, y + height);
        mat3.transformVec2(transform, p1);
        mat3.transformVec2(transform, p2);
        mat3.transformVec2(transform, p3);
        mat3.transformVec2(transform, p4);
        var l = Math.min(p1[0], p2[0], p3[0], p4[0]);
        var t = Math.min(p1[1], p2[1], p3[1], p4[1]);
        var r = Math.max(p1[0], p2[0], p3[0], p4[0]);
        var b = Math.max(p1[1], p2[1], p3[1], p4[1]);
        return new Rect(l, t, r - l, b - t);
    };
    var clipmask = function (clip) {
        var mask = 0;
        if (-clip[0] + clip[3] < 0) mask |= (1 << 0);
        if (clip[0] + clip[3] < 0) mask |= (1 << 1);
        if (-clip[1] + clip[3] < 0) mask |= (1 << 2);
        if (clip[1] + clip[3] < 0) mask |= (1 << 3);
        if (clip[2] + clip[3] < 0) mask |= (1 << 4);
        if (-clip[2] + clip[3] < 0) mask |= (1 << 5);
        return mask;
    };
    Rect.prototype.Transform4 = function (transform) {
        if (!transform)
            return this;
        var x = this.X;
        var y = this.Y;
        var width = this.Width;
        var height = this.Height;
        var p1 = vec4.createFrom(x, y, 0.0, 1.0);
        var p2 = vec4.createFrom(x + width, y, 0.0, 1.0);
        var p3 = vec4.createFrom(x + width, y + height, 0.0, 1.0);
        var p4 = vec4.createFrom(x, y + height, 0.0, 1.0);
        mat4.transformVec4(transform, p1);
        mat4.transformVec4(transform, p2);
        mat4.transformVec4(transform, p3);
        mat4.transformVec4(transform, p4);
        var vs = 65536.0;
        var vsr = 1.0 / vs;
        p1[0] *= vsr;
        p1[1] *= vsr;
        p2[0] *= vsr;
        p2[1] *= vsr;
        p3[0] *= vsr;
        p3[1] *= vsr;
        p4[0] *= vsr;
        p4[1] *= vsr;
        var cm1 = clipmask(p1);
        var cm2 = clipmask(p2);
        var cm3 = clipmask(p3);
        var cm4 = clipmask(p4);
        var bounds;
        if ((cm1 | cm2 | cm3 | cm4) !== 0) {
            bounds = new Rect();
            if ((cm1 & cm2 & cm3 & cm4) === 0) {
                NotImplemented("Rect.Transform4");
            }
        } else {
            var p1w = 1.0 / p1[3];
            var p2w = 1.0 / p2[3];
            var p3w = 1.0 / p3[3];
            var p4w = 1.0 / p4[3];
            p1[0] *= p1w * vs;
            p1[1] *= p1w * vs;
            p2[0] *= p2w * vs;
            p2[1] *= p2w * vs;
            p3[0] *= p3w * vs;
            p3[1] *= p3w * vs;
            p4[0] *= p4w * vs;
            p4[1] *= p4w * vs;
            bounds = new Rect(p1[0], p1[1], 0, 0);
            bounds.ExtendTo(p2[0], p2[1]);
            bounds.ExtendTo(p3[0], p3[1]);
            bounds.ExtendTo(p4[0], p4[1]);
        }
        return bounds;
    };
    Rect.prototype.RectIn = function (rect2) {
        var inter = this.Intersection(rect2);
        if (inter.IsEmpty())
            return RectOverlap.Out;
        if (Rect.Equals(rect2, inter))
            return RectOverlap.In;
        return RectOverlap.Part;
    };
    Rect.prototype.ContainsPoint = function (p) {
        return this.X <= p.X
            && this.Y <= p.Y
            && (this.X + this.Width) >= p.X
            && (this.Y + this.Height) >= p.Y;
    };
    Rect.prototype.ContainsPointXY = function (x, y) {
        return this.X <= x
            && this.Y <= y
            && (this.X + this.Width) >= x
            && (this.Y + this.Height) >= y;
    };
    Rect.prototype.ExtendTo = function (x, y) {
        var rx = this.X;
        var ry = this.Y;
        var rw = this.Width;
        var rh = this.Height;
        if (x < rx || x > (rx + rw))
            rw = Math.max(Math.abs(x - rx), Math.abs(x - rx - rw));
        if (y < ry || y > (ry + rh))
            rh = Math.max(Math.abs(y - ry), Math.abs(y - ry - rh));
        this.X = Math.min(rx, x);
        this.Y = Math.min(ry, y);
        this.Width = rw;
        this.Height = rh;
    };
    Rect.prototype.toString = function () {
        return "[X = " + this.X + "; Y = " + this.Y + "; Width = " + this.Width + "; Height = " + this.Height + "]";
    };
    namespace.Rect = Rect;
})(window);

(function (namespace) {
    function Size(width, height) {
        this.Width = width == null ? 0 : width;
        this.Height = height == null ? 0 : height;
    }
    Size._TypeName = "Size";
    Size.Equals = function (size1, size2) {
        if (size1 == null)
            return size2 == null;
        if (size2 == null)
            return false;
        return size1.Width === size2.Width && size1.Height === size2.Height;
    };
    Size.prototype.Copy = function () {
        return new Size(this.Width, this.Height);
    };
    Size.prototype.GrowBy = function (width, height) {
        var h = this.Height;
        var w = this.Width;
        if (h != Number.POSITIVE_INFINITY)
            h += height;
        if (w != Number.POSITIVE_INFINITY)
            w += width;
        return new Size(w > 0 ? w : 0, h > 0 ? h : 0);
    };
    Size.prototype.GrowByThickness = function (thickness) {
        var width = thickness.Left + thickness.Right;
        var height = thickness.Top + thickness.Bottom;
        var h = this.Height;
        var w = this.Width;
        if (h != Number.POSITIVE_INFINITY)
            h += height;
        if (w != Number.POSITIVE_INFINITY)
            w += width;
        return new Size(w > 0 ? w : 0, h > 0 ? h : 0);
    };
    Size.prototype.ShrinkByThickness = function (thickness) {
        var width = thickness.Left + thickness.Right;
        var height = thickness.Top + thickness.Bottom;
        var h = this.Height;
        var w = this.Width;
        if (h != Number.POSITIVE_INFINITY)
            h -= height;
        if (w != Number.POSITIVE_INFINITY)
            w -= width;
        return new Size(w > 0 ? w : 0, h > 0 ? h : 0);
    };
    Size.prototype.Min = function (size2) {
        return new Size(Math.min(this.Width, size2.Width), Math.min(this.Height, size2.Height));
    };
    Size.prototype.Max = function (size2) {
        return new Size(Math.max(this.Width, size2.Width), Math.max(this.Height, size2.Height));
    };
    Size.prototype.toString = function () {
        return "[Width = " + this.Width + "; Height = " + this.Height + "]";
    };
    namespace.Size = Size;
})(window);

(function (namespace) {
    var Thickness = Nullstone.Create("Thickness", undefined, 4);
    Thickness.Instance.Init = function (left, top, right, bottom) {
        this.Left = left == null ? 0 : left;
        this.Top = top == null ? 0 : top;
        this.Right = right == null ? 0 : right;
        this.Bottom = bottom == null ? 0 : bottom;
    };
    Thickness.Instance.Plus = function (thickness2) {
        var t = new Thickness();
        t.Left = this.Left + thickness2.Left;
        t.Right = this.Right + thickness2.Right;
        t.Top = this.Top + thickness2.Top;
        t.Bottom = this.Bottom + thickness2.Bottom;
        return t;
    };
    Thickness.Instance.IsEmpty = function () {
        return this.Left == 0 && this.Top == 0 && this.Right == 0 && this.Bottom == 0;
    };
    Thickness.Instance.IsBalanced = function () {
        return this.Left === this.Top
            && this.Left === this.Right
            && this.Left === this.Bottom;
    };
    Thickness.Equals = function (thickness1, thickness2) {
        if (thickness1 == null && thickness2 == null)
            return true;
        if (thickness1 == null || thickness2 == null)
            return false;
        return thickness1.Left === thickness2.Left
            && thickness1.Top === thickness2.Top
            && thickness1.Right === thickness2.Right
            && thickness1.Bottom === thickness2.Bottom;
    };
    Thickness.Instance.toString = function () {
        return "(" + this.Left + ", " + this.Top + ", " + this.Right + ", " + this.Bottom + ")";
    };
    namespace.Thickness = Nullstone.FinishCreate(Thickness);
})(window);

(function (namespace) {
    var TimeSpan = Nullstone.Create("TimeSpan");
    TimeSpan.Instance.Init = function (args) {
        if (args.length === 0) {
            this._Ticks = 0;
            return;
        }
        if (args.length === 1) { //ticks
            this._Ticks = args[0];
            return;
        }
        var days = 0;
        var hours = 0;
        var minutes = 0;
        var seconds = 0;
        var milliseconds = 0;
        if (args.length === 3) { //hours, minutes, seconds
            hours = args[0];
            minutes = args[1];
            seconds = args[2];
        } else if (args.length === 4) { //days, hours, minutes, seconds
            days = args[0];
            hours = args[1];
            minutes = args[2];
            seconds = args[3];
        } else if (args.length === 5) { //days, hours, minutes, seconds, milliseconds
            days = args[0];
            hours = args[1];
            minutes = args[2];
            seconds = args[3];
            milliseconds = args[4];
        }
        this._Ticks = (days * TimeSpan._TicksPerDay) + (hours * TimeSpan._TicksPerHour) + (minutes * TimeSpan._TicksPerMinute)
            + (seconds * TimeSpan._TicksPerSecond) + (milliseconds * TimeSpan._TicksPerMillisecond);
    };
    TimeSpan.Instance.GetDays = function () {
        return Math.floor(this._Ticks / TimeSpan._TicksPerDay);
    };
    TimeSpan.Instance.GetHours = function () {
        var remTicks = this._Ticks % TimeSpan._TicksPerDay;
        return Math.floor(remTicks / TimeSpan._TicksPerHour);
    };
    TimeSpan.Instance.GetMinutes = function () {
        var remTicks = this._Ticks % TimeSpan._TicksPerDay;
        remTicks = remTicks % TimeSpan._TicksPerHour;
        return Math.floor(remTicks / TimeSpan._TicksPerMinute);
    };
    TimeSpan.Instance.GetSeconds = function () {
        var remTicks = this._Ticks % TimeSpan._TicksPerDay;
        remTicks = remTicks % TimeSpan._TicksPerHour;
        remTicks = remTicks % TimeSpan._TicksPerMinute;
        return Math.floor(remTicks / TimeSpan._TicksPerSecond);
    };
    TimeSpan.Instance.GetMilliseconds = function () {
        var remTicks = this._Ticks % TimeSpan._TicksPerDay;
        remTicks = remTicks % TimeSpan._TicksPerHour;
        remTicks = remTicks % TimeSpan._TicksPerMinute;
        remTicks = remTicks % TimeSpan._TicksPerSecond;
        return Math.floor(remTicks / TimeSpan._TicksPerMillisecond);
    };
    TimeSpan.Instance.GetTicks = function () {
        return this._Ticks;
    };
    TimeSpan.Instance.GetTotalDays = function () {
        return this._Ticks / TimeSpan._TicksPerDay;
    };
    TimeSpan.Instance.GetTotalHours = function () {
        return this._Ticks / TimeSpan._TicksPerHour;
    };
    TimeSpan.Instance.GetTotalMinutes = function () {
        return this._Ticks / TimeSpan._TicksPerMinute;
    };
    TimeSpan.Instance.GetTotalSeconds = function () {
        return this._Ticks / TimeSpan._TicksPerSecond;
    };
    TimeSpan.Instance.GetTotalMilliseconds = function () {
        return this._Ticks / TimeSpan._TicksPerMillisecond;
    };
    TimeSpan.Instance.AddTicks = function (ticks) {
        if (ticks == null)
            return;
        if (isNaN(ticks))
            return;
        this._Ticks += ticks;
    };
    TimeSpan.Instance.AddMilliseconds = function (milliseconds) {
        this.AddTicks(milliseconds * TimeSpan._TicksPerMillisecond);
    };
    TimeSpan.Instance.Add = function (ts2) {
        return new TimeSpan(this._Ticks + ts2._Ticks);
    };
    TimeSpan.Instance.Subtract = function (ts2) {
        return new TimeSpan(this._Ticks - ts2._Ticks);
    };
    TimeSpan.Instance.Multiply = function (v) {
        if (v instanceof TimeSpan) {
        } else if (typeof v == "number") {
            return new TimeSpan(Math.round(this._Ticks * v));
        }
    }
    TimeSpan.Instance.Divide = function (ts2) {
        return new TimeSpan(this._Ticks / ts2._Ticks);
    };
    TimeSpan.Instance.CompareTo = function (ts2) {
        if (this._Ticks === ts2._Ticks)
            return 0;
        return (this._Ticks > ts2._Ticks) ? 1 : -1;
    };
    TimeSpan.Instance.IsZero = function () {
        return this._Ticks === 0;
    };
    TimeSpan.Instance.GetJsDelay = function () {
        return this._Ticks * TimeSpan._TicksPerMillisecond;
    };
    TimeSpan._TicksPerMillisecond = 1;
    TimeSpan._TicksPerSecond = 1000;
    TimeSpan._TicksPerMinute = TimeSpan._TicksPerSecond * 60;
    TimeSpan._TicksPerHour = TimeSpan._TicksPerMinute * 60;
    TimeSpan._TicksPerDay = TimeSpan._TicksPerHour * 24;
    namespace.TimeSpan = Nullstone.FinishCreate(TimeSpan);
})(window);

(function (namespace) {
    var Uri = Nullstone.Create("Uri", null, 1);
    Uri.Instance.Init = function (os) {
        this._OriginalString = os;
    };
    Uri.Instance.GetFragment = function () {
    };
    Uri.Instance.toString = function () {
        return this._OriginalString;
    };
    Uri.IsNullOrEmpty = function (uri) {
        if (uri == null)
            return true;
        if (uri._OriginalString)
            return false;
        return true;
    };
    namespace.Uri = Nullstone.FinishCreate(Uri);
})(window);

(function (namespace) {
    function BError() {
        this._Number = 0;
        this.Code = 0;
        this.CharPosition = 0;
        this.LineNumber = 0;
        this.Message = "";
    }
    BError.prototype.SetErrored = function (number, message, code) {
        this._Number = number;
        this.Message = message;
        this.Code = code || 0;
    };
    BError.prototype.IsErrored = function () {
        return this._Number > 0;
    };
    BError.prototype.toString = function () {
        return "[" + this._Number + "] " + this.Message;
    };
    BError.prototype.CreateException = function () {
        switch (this._Number) {
            case BError.Argument:
                return new ArgumentException(this.Message, this.CharPosition, this.LineNumber);
            case BError.InvalidOperation:
                return new InvalidOperationException(this.Message, this.CharPosition, this.LineNumber);
            case BError.XamlParseException:
                return new XamlParseException(this.Message, this.CharPosition, this.LineNumber);
            default:
                return new Exception(this.Message, this.CharPosition, this.LineNumber);
        }
    };
    BError.UnauthorizedAccess = 1;
    BError.Argument = 2;
    BError.InvalidOperation = 3;
    BError.Exception = 4;
    BError.XamlParseException = 5;
    namespace.BError = BError;
})(window);

(function (namespace) {
    var Dictionary = Nullstone.Create("Dictionary", undefined, 2);
    Dictionary.Instance.Init = function (type1, type2) {
        this._ht = [];
        this._Type1 = type1;
        this._IsKeyNullstone = type1._IsNullstone === true;
        if (this._IsKeyNullstone)
            this._k = [];
        this._Type2 = type2;
        this._IsValueNullstone = type2._IsNullstone === true;
    };
    Dictionary.Instance.TryGetValue = function (key, data) {
        if (this._IsKeyNullstone)
            data.Value = this._ht[key._ID];
        else
            data.Value = this._ht[key];
        return data.Value != null;
    };
    Dictionary.Instance.GetValue = function (key) {
        if (this._IsKeyNullstone)
            return this._ht[key._ID];
        return this._ht[key];
    };
    Dictionary.Instance.GetKeyFromValue = function (value) {
        var len = this._ht.length;
        var func = this._IsValueNullstone ? Nullstone.RefEquals : Nullstone.Equals;
        if (this._IsValueNullstone) {
            for (var keyID in this._ht) {
                if (keyID === value._ID)
                    return this._k[keyID];
            }
        } else {
            for (var key in this._ht) {
                if (Nullstone.Equals(this._ht[key], value)) {
                    if (this._IsKeyNullstone)
                        return this._k[key];
                    return key;
                }
            }
        }
        return null;
    };
    Dictionary.Instance.Add = function (key, value) {
        if (this._IsKeyNullstone) {
            this._k[key._ID] = key;
            this._ht[key._ID] = value;
        } else {
            this._ht[key] = value;
        }
    };
    Dictionary.Instance.Remove = function (key) {
        if (this._IsKeyNullstone) {
            delete this._k[key._ID];
            delete this._ht[key._ID];
        } else {
            delete this._ht[key];
        }
    };
    Dictionary.Instance.Clear = function () {
        this._ht = [];
        delete this._k;
        if (this._IsKeyNullstone)
            this._k = [];
    };
    namespace.Dictionary = Nullstone.FinishCreate(Dictionary);
})(window);

(function (namespace) {
    var DoubleKeyedDictionary = Nullstone.Create("DoubleKeyedDictionary", undefined, 2);
    DoubleKeyedDictionary.Instance.Init = function (type1, type2) {
        this._forward = new Dictionary(type1, type2);
        this._backward = new Dictionary(type2, type1);
    };
    DoubleKeyedDictionary.Instance.GetValueFromKey1 = function (key1) {
        var result = {};
        if (this._forward.TryGetValue(key1, result))
            return result.Value;
        return null;
    };
    DoubleKeyedDictionary.Instance.GetValueFromKey2 = function (key2) {
        var result = {};
        if (this._backward.TryGetValue(key2, result))
            return result.Value;
        return null;
    };
    DoubleKeyedDictionary.Instance.Add = function (key1, key2, ignoreExisting) {
        var result = {};
        if (!ignoreExisting && (this._forward.TryGetValue(key1, result) || this._backward.TryGetValue(key2, result))) {
        }
        this._forward.Add(key1, key2);
        this._backward.Add(key2, key1);
    };
    DoubleKeyedDictionary.Instance.Clear = function () {
        this._forward.Clear();
        this._backward.Clear();
    };
    DoubleKeyedDictionary.Instance.Remove = function (key1, key2, ignoreExisting) {
        var result = {};
        if (!ignoreExisting && (!this._forward.TryGetValue(key1, result) || !this._backward.TryGetValue(key2, result))) {
            throw new InvalidOperationException("Dictionary does not contain this key pair");
        }
        this._forward.Remove(key1);
        this._backward.Remove(key2);
    };
    DoubleKeyedDictionary.Instance.MapFromKey1 = function (key1) {
        var data = {};
        if (this._forward.TryGetValue(key1, data))
            return data.Value;
        return null;
    };
    DoubleKeyedDictionary.Instance.MapFromKey2 = function (key2) {
        var data = {};
        if (this._backward.TryGetValue(key2, data))
            return data.Value;
        return null;
    };
    namespace.DoubleKeyedDictionary = Nullstone.FinishCreate(DoubleKeyedDictionary);
})(window);

(function (namespace) {
    var EventArgs = Nullstone.Create("EventArgs");
    namespace.EventArgs = Nullstone.FinishCreate(EventArgs);
})(window);

(function (namespace) {
    var Exception = Nullstone.Create("Exception", undefined, 3);
    Nullstone.Property(Exception, "message", {
        get: function () {
            return this.Message;
        }
    });
    Exception.Instance.Init = function (message, charPosition, lineNumber) {
        this.Message = message;
        this.CharPosition = charPosition;
        this.LineNumber = lineNumber;
        this.name = this.constructor._TypeName;
    };
    Exception.Instance.toString = function () {
        return this.constructor._TypeName + ": " + this.Message;
    };
    namespace.Exception = Nullstone.FinishCreate(Exception);
    var InvalidOperationException = Nullstone.Create("InvalidOperationException", Exception, 3);
    namespace.InvalidOperationException = Nullstone.FinishCreate(InvalidOperationException);
    var InterfaceNotImplementedException = Nullstone.Create("InterfaceNotImplementedException", Exception, 3);
    InterfaceNotImplementedException.Instance.Init = function (type, parentType, methodName) {
        var msg;
        if (methodName)
            msg = type._TypeName + " does not implement " + parentType._TypeName + "." + this.MethodName;
        else
            msg = type._TypeName + " does not implement " + parentType._TypeName;
        this.Init$Exception(msg);
        this.Type = type;
        this.ParentType = parentType;
        this.MethodName = methodName;
    };
    namespace.InterfaceNotImplementedException = Nullstone.FinishCreate(InterfaceNotImplementedException);
    var NotImplementedException = Nullstone.Create("NotImplementedException", Exception, 1);
    NotImplementedException.Instance.Init = function (methodName) {
        this.MethodName = methodName;
    };
    namespace.NotImplementedException = Nullstone.FinishCreate(NotImplementedException);
    var NotSupportedException = Nullstone.Create("NotSupportedException", Exception, 3);
    namespace.NotSupportedException = Nullstone.FinishCreate(NotSupportedException);
    var IndexOutOfRangeException = Nullstone.Create("IndexOutOfRangeException", Exception, 1);
    IndexOutOfRangeException.Instance.Init = function (index) {
        var msg = "Index is out of range: " + index;
        this.Init$Exception(msg);
    };
    namespace.IndexOutOfRangeException = Nullstone.FinishCreate(IndexOutOfRangeException);
    var XamlParseException = Nullstone.Create("XamlParseException", Exception, 3);
    namespace.XamlParseException = Nullstone.FinishCreate(XamlParseException);
    var PropertyNotImplementedException = Nullstone.Create("PropertyNotImplementedException", Exception, 3);
    PropertyNotImplementedException.Instance.Init = function (baseClass, targetClass, propertyName) {
        var msg = "An abstract property '" + baseClass._TypeName + "." + propertyName + "' is not implemented in '" + targetClass._TypeName + "'.";
        this.Init$Exception(msg);
        this.BaseClass = baseClass;
        this.TargetClass = targetClass;
        this.PropertyName = propertyName;
    };
    namespace.PropertyNotImplementedException = Nullstone.FinishCreate(PropertyNotImplementedException);
    var PropertyCollisionException = Nullstone.Create("PropertyCollisionException", Exception, 3);
    PropertyCollisionException.Instance.Init = function (baseClass, targetClass, propertyName) {
        var msg = "The requested property definition '" + targetClass._TypeName + "." + propertyName + "' is already defined on '" + baseClass._TypeName + "'. You must explicitly override this property.";
        this.Init$Exception(msg);
        this.BaseClass = baseClass;
        this.TargetClass = targetClass;
        this.PropertyName = propertyName;
    };
    namespace.PropertyCollisionException = Nullstone.FinishCreate(PropertyCollisionException);
    var ArgumentException = Nullstone.Create("ArgumentException", Exception, 3);
    namespace.ArgumentException = Nullstone.FinishCreate(ArgumentException);
})(window);

(function (namespace) {
    var KeyInterop = Nullstone.Create("KeyInterop");
    KeyInterop.Instance.RegisterEvents = function () {
        var interop = this;
        document.onkeypress = function (e) {
            var args = interop.CreateArgsPress(e);
            if (args) {
                KeyboardDebug("[Press] - " + e.keyCode + " - " + e.char);
                if (interop.Surface._HandleKeyDown(args)) {
                    return false;
                }
            }
        };
        document.onkeydown = function (e) {
            var args = interop.CreateArgsDown(e);
            if (args) {
                KeyboardDebug("[Down] - " + e.keyCode + " - " + e.char);
                if (interop.Surface._HandleKeyDown(args)) {
                    return false;
                }
            }
        };
    };
    namespace.KeyInterop = Nullstone.FinishCreate(KeyInterop);
    KeyInterop.CreateInterop = function (surface) {
        var interop;
        if (navigator.appName === "Microsoft Internet Explorer")
            interop = new IEKeyInterop();
        else if (navigator.appName === "Netscape")
            interop = new NetscapeKeyInterop();
        else
            interop = new KeyInterop();
        interop.Surface = surface;
        return interop;
    };
    KeyInterop.KeyFromKeyCode = (function () {
        var keyFromKeyCode = [];
        keyFromKeyCode[8] = Key.Back;
        keyFromKeyCode[9] = Key.Tab;
        keyFromKeyCode[13] = Key.Enter;
        keyFromKeyCode[16] = Key.Shift;
        keyFromKeyCode[17] = Key.Ctrl;
        keyFromKeyCode[18] = Key.Alt;
        keyFromKeyCode[20] = Key.CapsLock;
        keyFromKeyCode[27] = Key.Escape;
        keyFromKeyCode[32] = Key.Space;
        keyFromKeyCode[33] = Key.PageUp;
        keyFromKeyCode[34] = Key.PageDown;
        keyFromKeyCode[35] = Key.End;
        keyFromKeyCode[36] = Key.Home;
        keyFromKeyCode[37] = Key.Left;
        keyFromKeyCode[38] = Key.Up;
        keyFromKeyCode[39] = Key.Right;
        keyFromKeyCode[40] = Key.Down;
        keyFromKeyCode[45] = Key.Insert;
        keyFromKeyCode[46] = Key.Delete;
        keyFromKeyCode[48] = Key.D0;
        keyFromKeyCode[49] = Key.D1;
        keyFromKeyCode[50] = Key.D2;
        keyFromKeyCode[51] = Key.D3;
        keyFromKeyCode[52] = Key.D4;
        keyFromKeyCode[53] = Key.D5;
        keyFromKeyCode[54] = Key.D6;
        keyFromKeyCode[55] = Key.D7;
        keyFromKeyCode[56] = Key.D8;
        keyFromKeyCode[57] = Key.D9;
        keyFromKeyCode[65] = Key.A;
        keyFromKeyCode[66] = Key.B;
        keyFromKeyCode[67] = Key.C;
        keyFromKeyCode[68] = Key.D;
        keyFromKeyCode[69] = Key.E;
        keyFromKeyCode[70] = Key.F;
        keyFromKeyCode[71] = Key.G;
        keyFromKeyCode[72] = Key.H;
        keyFromKeyCode[73] = Key.I;
        keyFromKeyCode[74] = Key.J;
        keyFromKeyCode[75] = Key.K;
        keyFromKeyCode[76] = Key.L;
        keyFromKeyCode[77] = Key.M;
        keyFromKeyCode[78] = Key.N;
        keyFromKeyCode[79] = Key.O;
        keyFromKeyCode[80] = Key.P;
        keyFromKeyCode[81] = Key.Q;
        keyFromKeyCode[82] = Key.R;
        keyFromKeyCode[83] = Key.S;
        keyFromKeyCode[84] = Key.T;
        keyFromKeyCode[85] = Key.U;
        keyFromKeyCode[86] = Key.V;
        keyFromKeyCode[87] = Key.W;
        keyFromKeyCode[88] = Key.X;
        keyFromKeyCode[89] = Key.Y;
        keyFromKeyCode[90] = Key.Z;
        keyFromKeyCode[96] = Key.NumPad0;
        keyFromKeyCode[97] = Key.NumPad1;
        keyFromKeyCode[98] = Key.NumPad2;
        keyFromKeyCode[99] = Key.NumPad3;
        keyFromKeyCode[100] = Key.NumPad4;
        keyFromKeyCode[101] = Key.NumPad5;
        keyFromKeyCode[102] = Key.NumPad6;
        keyFromKeyCode[103] = Key.NumPad7;
        keyFromKeyCode[104] = Key.NumPad8;
        keyFromKeyCode[105] = Key.NumPad9;
        keyFromKeyCode[106] = Key.Multiply;
        keyFromKeyCode[107] = Key.Add;
        keyFromKeyCode[109] = Key.Subtract;
        keyFromKeyCode[110] = Key.Decimal;
        keyFromKeyCode[111] = Key.Divide;
        keyFromKeyCode[112] = Key.F1;
        keyFromKeyCode[113] = Key.F2;
        keyFromKeyCode[114] = Key.F3;
        keyFromKeyCode[115] = Key.F4;
        keyFromKeyCode[116] = Key.F5;
        keyFromKeyCode[117] = Key.F6;
        keyFromKeyCode[118] = Key.F7;
        keyFromKeyCode[119] = Key.F8;
        keyFromKeyCode[120] = Key.F9;
        keyFromKeyCode[121] = Key.F10;
        keyFromKeyCode[122] = Key.F11;
        keyFromKeyCode[123] = Key.F12;
        return keyFromKeyCode;
    })();
    var IEKeyInterop = Nullstone.Create("IEKeyInterop", KeyInterop);
    (function () {
        var keyFromKeyCode = KeyInterop.KeyFromKeyCode;
        var unshiftedDKeys = [];
        unshiftedDKeys[41] = 48;
        unshiftedDKeys[33] = 49;
        unshiftedDKeys[64] = 50;
        unshiftedDKeys[35] = 51;
        unshiftedDKeys[36] = 52;
        unshiftedDKeys[37] = 53;
        unshiftedDKeys[94] = 54;
        unshiftedDKeys[38] = 55;
        unshiftedDKeys[42] = 56;
        unshiftedDKeys[34] = Key.Unknown;
        IEKeyInterop.Instance.CreateArgsPress = (function (e) {
            if (e.char == null)
                return;
            var modifiers = {
                Shift: e.shiftKey,
                Ctrl: e.ctrlKey,
                Alt: e.altKey
            };
            var keyCode = e.keyCode;
            var unshifted = unshiftedDKeys[keyCode];
            if (unshifted)
                keyCode = unshifted;
            return new Fayde.Input.KeyEventArgs(modifiers, keyCode, keyFromKeyCode[keyCode], e.char);
        });
        IEKeyInterop.Instance.CreateArgsDown = (function (e) {
            if (e.char != null && e.keyCode !== 8)
                return;
            var modifiers = {
                Shift: e.shiftKey,
                Ctrl: e.ctrlKey,
                Alt: e.altKey
            };
            return new Fayde.Input.KeyEventArgs(modifiers, e.keyCode, keyFromKeyCode[e.keyCode]);
        });
    })();
    namespace.IEKeyInterop = Nullstone.FinishCreate(IEKeyInterop);
    var NetscapeKeyInterop = Nullstone.Create("NetscapeKeyInterop", KeyInterop);
    (function () {
        var keyFromKeyCode = KeyInterop.KeyFromKeyCode;
        var specialKeys = [];
        specialKeys[8] = Key.Back;
        specialKeys[9] = Key.Tab;
        specialKeys[20] = Key.CapsLock;
        specialKeys[27] = Key.Escape;
        specialKeys[33] = Key.PageUp;
        specialKeys[34] = Key.PageDown;
        specialKeys[35] = Key.End;
        specialKeys[36] = Key.Home;
        specialKeys[37] = Key.Left;
        specialKeys[38] = Key.Up;
        specialKeys[39] = Key.Right;
        specialKeys[40] = Key.Down;
        specialKeys[45] = Key.Insert;
        specialKeys[46] = Key.Delete;
        var unshiftedDKeys = [];
        unshiftedDKeys[41] = 48;
        unshiftedDKeys[33] = 49;
        unshiftedDKeys[64] = 50;
        unshiftedDKeys[35] = 51;
        unshiftedDKeys[36] = 52;
        unshiftedDKeys[37] = 53;
        unshiftedDKeys[94] = 54;
        unshiftedDKeys[38] = 55;
        unshiftedDKeys[42] = 56;
        unshiftedDKeys[34] = Key.Unknown;
        NetscapeKeyInterop.Instance.CreateArgsPress = (function (e) {
            var modifiers = {
                Shift: e.shiftKey,
                Ctrl: e.ctrlKey,
                Alt: e.altKey
            };
            var keyCode = e.keyCode;
            var unshifted = unshiftedDKeys[keyCode];
            if (unshifted)
                keyCode = unshifted;
            return new Fayde.Input.KeyEventArgs(modifiers, keyCode, keyFromKeyCode[keyCode], String.fromCharCode(e.which || e.keyCode));
        });
        NetscapeKeyInterop.Instance.CreateArgsDown = function (e) {
            if (specialKeys[e.keyCode] === undefined)
                return null;
            var modifiers = {
                Shift: e.shiftKey,
                Ctrl: e.ctrlKey,
                Alt: e.altKey
            };
            return new Fayde.Input.KeyEventArgs(modifiers, e.keyCode, keyFromKeyCode[e.keyCode]);
        };
    })();
    namespace.NetscapeKeyInterop = Nullstone.FinishCreate(NetscapeKeyInterop);
})(window);

(function (namespace) {
    var LinkedList = Nullstone.Create("LinkedList");
    LinkedList.Instance.Init = function () {
        this.Clear();
    };
    LinkedList.Instance.IsEmpty = function () {
        return !this.Head;
    };
    LinkedList.Instance.Prepend = function (node) {
        node.Next = this.Head;
        node.Previous = null;
        if (this.Head)
            this.Head.Previous = node;
        else
            this.Tail = node;
        this.Head = node;
        this._Count++;
        return node;
    };
    LinkedList.Instance.Append = function (node) {
        node.Previous = this.Tail;
        node.Next = null;
        if (this.Tail)
            this.Tail.Next = node;
        else
            this.Head = node;
        this.Tail = node;
        this._Count++;
        return node;
    };
    LinkedList.Instance.Remove = function (node) {
        if (node.Previous)
            node.Previous.Next = node.Next;
        else
            this.Head = node.Next;
        if (node.Next)
            node.Next.Previous = node.Previous;
        else
            this.Tail = node.Previous;
        node.Previous = null;
        node.Next = null;
        this._Count--;
    };
    LinkedList.Instance.InsertBefore = function (node, before) {
        if (before == null) {
            this.Append(node);
            return;
        }
        node.Next = before;
        node.Previous = before.Previous;
        if (before.Previous)
            before.Previous.Next = node;
        else
            this.Head = node;
        before.Previous = node;
        this._Count++;
    };
    LinkedList.Instance.InsertAfter = function (node, after) {
        if (after == null) {
            this.Append(node);
            return;
        }
        node.Next = after.Next;
        node.Previous = after;
        if (node.Next)
            node.Next.Previous = node;
        else
            this.Tail = node;
        after.Next = node;
        this._Count++;
    };
    LinkedList.Instance.Clear = function () {
        this._Count = 0;
        this.Head = null;
        this.Tail = null;
    };
    namespace.LinkedList = Nullstone.FinishCreate(LinkedList);
})(window);

(function (namespace) {
    var LinkedListNode = Nullstone.Create("LinkedListNode");
    LinkedListNode.Instance.Init = function () {
        this.Previous = null;
        this.Next = null;
    };
    namespace.LinkedListNode = Nullstone.FinishCreate(LinkedListNode);
})(window);

(function (namespace) {
    function MulticastEvent() {
        this._Listeners = [];
    }
    MulticastEvent.prototype.Subscribe = function (callback, closure) {
        if (!(callback instanceof Function))
            throw new InvalidOperationException("Callback must be a function!");
        this._Listeners.push({ Callback: callback, Closure: closure });
    };
    MulticastEvent.prototype.SubscribeSpecific = function (callback, closure, matchFunc, matchClosure) {
        this._Listeners.push({ Callback: callback, Closure: closure, MatchFunc: matchFunc, MatchClosure: matchClosure });
    };
    MulticastEvent.prototype.Unsubscribe = function (callback, closure, matchClosure) {
        for (var i in this._Listeners) {
            var listener = this._Listeners[i];
            if (listener.Callback === callback) {
                if (listener.Closure && closure && !Nullstone.RefEquals(listener.Closure, closure))
                    continue;
                if (listener.MatchClosure && matchClosure && !Nullstone.RefEquals(listener.MatchClosure, matchClosure))
                    continue;
                this._Listeners.splice(i, 1);
                return;
            }
        }
    };
    MulticastEvent.prototype.Raise = function (sender, args) {
        var listeners = this._Listeners;
        for (var i in listeners) {
            var listener = listeners[i];
            if (listener.MatchFunc && !listener.MatchFunc.call(listener.MatchClosure, sender, args))
                continue;
            listener.Callback.call(listener.Closure, sender, args);
        }
    };
    MulticastEvent.prototype.RaiseAsync = function (sender, args) {
        var me = this;
        setTimeout(function () { me.Raise(sender, args); }, 1);
    };
    namespace.MulticastEvent = MulticastEvent;
})(window);

(function (Text) {
    var _TextBoxUndoAction = Nullstone.Create("_TextBoxUndoAction", LinkedListNode);
    Text._TextBoxUndoAction = Nullstone.FinishCreate(_TextBoxUndoAction);
    var _TextBoxUndoActionDelete = Nullstone.Create("_TextBoxUndoActionDelete", _TextBoxUndoAction, 5);
    _TextBoxUndoActionDelete.Instance.Init = function (selectionAnchor, selectionCursor, buffer, start, length) {
        this._SelectionAnchor = selectionAnchor;
        this._SelectionCursor = selectionCursor;
        this._Start = start;
        this._Length = length;
        this._Text = buffer._Text.substr(start, length);
    };
    Text._TextBoxUndoActionDelete = Nullstone.FinishCreate(_TextBoxUndoActionDelete);
    var _TextBoxUndoActionInsert = Nullstone.Create("_TextBoxUndoActionInsert", _TextBoxUndoAction, 5);
    _TextBoxUndoActionInsert.Instance.Init = function (selectionAnchor, selectionCursor, start, inserted, isAtomic) {
        this._SelectionAnchor = selectionAnchor;
        this._SelectionCursor = selectionCursor;
        this._Start = start;
        this._Length = inserted.length;
        this._Buffer = new Fayde.Text._TextBuffer(inserted);
        this._Growable = isAtomic !== true;
    };
    _TextBoxUndoActionInsert.Instance.Insert = function (start, text) {
        if (!this._Growable || start !== (this._Start + this._Length))
            return false;
        this._Buffer.Append(text);
        this._Length += text.length;
        return true;
    };
    Text._TextBoxUndoActionInsert = Nullstone.FinishCreate(_TextBoxUndoActionInsert);
    var _TextBoxUndoActionReplace = Nullstone.Create("_TextBoxUndoActionReplace", _TextBoxUndoAction, 6);
    _TextBoxUndoActionReplace.Instance.Init = function (selectionAnchor, selectionCursor, buffer, start, length, inserted) {
        this._SelectionAnchor = selectionAnchor;
        this._SelectionCursor = selectionCursor;
        this._Start = start;
        this._Length = length;
        this._Deleted = buffer._Text.substr(start, length);
        this._Inserted = inserted;
    };
    Text._TextBoxUndoActionReplace = Nullstone.FinishCreate(_TextBoxUndoActionReplace);
    var _TextBoxUndoStack = Nullstone.Create("_TextBoxUndoStack", undefined, 1);
    _TextBoxUndoStack.Instance.Init = function (maxCount) {
        this._MaxCount = maxCount;
        this._ht = [];
    };
    _TextBoxUndoStack.Instance.IsEmpty = function () {
        return this._ht.length === 0;
    };
    _TextBoxUndoStack.Instance.Clear = function () {
        this._ht = [];
    };
    _TextBoxUndoStack.Instance.Push = function (action) {
        this._ht.push(action);
        if (this._ht.length > this._MaxCount)
            this._ht.shift();
    };
    _TextBoxUndoStack.Instance.Peek = function () {
        if (this._ht.length === 0)
            return null;
        return this._ht[this._ht.length - 1];
    };
    _TextBoxUndoStack.Instance.Pop = function () {
        if (this._ht.length === 0)
            return null;
        return this._ht.pop();
    };
    Text._TextBoxUndoStack = Nullstone.FinishCreate(_TextBoxUndoStack);
})(Nullstone.Namespace("Fayde.Text"));

(function (Text) {
    var _TextLayoutAttributes = Nullstone.Create("_TextLayoutAttributes", undefined, 2);
    _TextLayoutAttributes.Instance.Init = function (source, start) {
        this._Source = source;
        this._Start = start == null ? 0 : start;
    };
    _TextLayoutAttributes.Instance.GetBackground = function (selected) {
        if (selected)
            return this._Source.SelectionBackground;
        return null;
    };
    _TextLayoutAttributes.Instance.GetForeground = function (selected) {
        if (selected)
            return this._Source.SelectionForeground;
        return this._Source.Foreground;
    };
    _TextLayoutAttributes.Instance.GetFont = function () { return this._Source.GetFont(); };
    _TextLayoutAttributes.Instance.GetDirection = function () { return this._Source.GetDirection(); };
    _TextLayoutAttributes.Instance.IsUnderlined = function () { return this._Source.TextDecorations & Fayde.TextDecorations.Underline; };
    Text._TextLayoutAttributes = Nullstone.FinishCreate(_TextLayoutAttributes);
})(Nullstone.Namespace("Fayde.Text"));

(function (Collections) {
    var NotifyCollectionChangedAction = {
        Add: 1,
        Remove: 2,
        Replace: 3,
        Reset: 4
    };
    Collections.NotifyCollectionChangedAction = NotifyCollectionChangedAction;
    var NotifyCollectionChangedEventArgs = Nullstone.Create("NotifyCollectionChangedEventArgs", EventArgs);
    NotifyCollectionChangedEventArgs.Reset = function () {
        var args = new NotifyCollectionChangedEventArgs();
        args._Action = NotifyCollectionChangedAction.Reset;
        args._OldStartingIndex = -1;
        args._NewStartingIndex = -1;
        return args;
    };
    NotifyCollectionChangedEventArgs.Replace = function (newValue, oldValue, index) {
        var args = new NotifyCollectionChangedEventArgs();
        args._Action = NotifyCollectionChangedAction.Replace;
        args._NewItems = [];
        args._NewItems.push(newValue);
        args._OldItems = [];
        args._OldItems.push(oldValue);
        args._NewStartingIndex = index;
        args._OldStartingIndex = -1;
        return args;
    };
    NotifyCollectionChangedEventArgs.Add = function (newValue, index) {
        var args = new NotifyCollectionChangedEventArgs();
        args._Action = NotifyCollectionChangedAction.Add;
        args._NewItems = [];
        args._NewItems.push(newValue);
        args._NewStartingIndex = index;
        args._OldStartingIndex = -1;
        return args;
    };
    NotifyCollectionChangedEventArgs.Remove = function (oldValue, index) {
        var args = new NotifyCollectionChangedEventArgs();
        args._Action = NotifyCollectionChangedAction.Remove;
        args._OldItems = [];
        args._OldItems.push(oldValue);
        args._OldStartingIndex = index;
        args._NewStartingIndex = -1;
        return args;
    };
    Nullstone.Property(NotifyCollectionChangedEventArgs, "Action", {
        get: function () { return this._Action; }
    });
    Nullstone.Property(NotifyCollectionChangedEventArgs, "NewItems", {
        get: function () { return this._NewItems; }
    });
    Nullstone.Property(NotifyCollectionChangedEventArgs, "OldItems", {
        get: function () { return this._OldItems; }
    });
    Nullstone.Property(NotifyCollectionChangedEventArgs, "OldStartingIndex", {
        get: function () { return this._OldStartingIndex; }
    });
    Nullstone.Property(NotifyCollectionChangedEventArgs, "NewStartingIndex", {
        get: function () { return this._NewStartingIndex; }
    });
    Collections.NotifyCollectionChangedEventArgs = Nullstone.FinishCreate(NotifyCollectionChangedEventArgs);
})(Nullstone.Namespace("Fayde.Collections"));

(function (namespace) {
    var ItemsChangedEventArgs = Nullstone.Create("ItemsChangedEventArgs", EventArgs, 5);
    ItemsChangedEventArgs.Instance.Init = function (action, itemCount, itemUICount, oldPosition, position) {
        this.Action = action;
        this.ItemCount = itemCount;
        this.ItemUICount = itemUICount;
        this.OldPosition = oldPosition;
        this.Position = position;
    };
    namespace.ItemsChangedEventArgs = Nullstone.FinishCreate(ItemsChangedEventArgs);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var ScrollEventArgs = Nullstone.Create("ScrollEventArgs", EventArgs, 2);
    ScrollEventArgs.Instance.Init = function (scrollEventType, value) {
        this.ScrollEventType = scrollEventType;
        this.Value = value;
    };
    namespace.ScrollEventArgs = Nullstone.FinishCreate(ScrollEventArgs);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var SelectionChangedEventArgs = Nullstone.Create("SelectionChangedEventArgs", EventArgs, 2);
    SelectionChangedEventArgs.Instance.Init = function (oldVals, newVals) {
        this.OldValues = oldVals.slice(0);
        this.NewValues = newVals.slice(0);
    };
    namespace.SelectionChangedEventArgs = Nullstone.FinishCreate(SelectionChangedEventArgs);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var DeferredValueExpression = Nullstone.Create("DeferredValueExpression", namespace.Expression);
    DeferredValueExpression.Instance.GetValue = function (propd) {
        return undefined;
    };
    namespace.DeferredValueExpression = Nullstone.FinishCreate(DeferredValueExpression);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var LayoutInformation = Nullstone.Create("LayoutInformation");
    LayoutInformation.LayoutClipProperty = DependencyProperty.RegisterAttachedCore("LayoutClip", function () { return Fayde.Media.Geometry; }, LayoutInformation);
    LayoutInformation.GetLayoutClip = function (d) {
        return d.$GetValue(LayoutInformation.LayoutClipProperty);
    };
    LayoutInformation.SetLayoutClip = function (d, value) {
        d.$SetValue(LayoutInformation.LayoutClipProperty, value);
    };
    LayoutInformation.LayoutExceptionElementProperty = DependencyProperty.RegisterAttachedCore("LayoutExceptionElement", function () { return Fayde.UIElement; }, LayoutInformation);
    LayoutInformation.GetLayoutExceptionElement = function (d) {
        return d.$GetValue(LayoutInformation.LayoutExceptionElementProperty);
    };
    LayoutInformation.SetLayoutExceptionElement = function (d, value) {
        d.$SetValue(LayoutInformation.LayoutExceptionElementProperty, value);
    };
    LayoutInformation.LayoutSlotProperty = DependencyProperty.RegisterAttachedCore("LayoutSlot", function () { return Rect; }, LayoutInformation, new Rect());
    LayoutInformation.GetLayoutSlot = function (d) {
        return d.$GetValue(LayoutInformation.LayoutSlotProperty);
    };
    LayoutInformation.SetLayoutSlot = function (d, value) {
        d.$SetValue(LayoutInformation.LayoutSlotProperty, value);
    };
    LayoutInformation.PreviousConstraintProperty = DependencyProperty.RegisterAttachedCore("PreviousConstraint", function () { return Size; }, LayoutInformation);
    LayoutInformation.GetPreviousConstraint = function (d) {
        return d.$GetValue(LayoutInformation.PreviousConstraintProperty);
    };
    LayoutInformation.SetPreviousConstraint = function (d, value) {
        d.$SetValue(LayoutInformation.PreviousConstraintProperty, value);
    };
    LayoutInformation.FinalRectProperty = DependencyProperty.RegisterAttachedCore("FinalRect", function () { return Rect; }, LayoutInformation);
    LayoutInformation.GetFinalRect = function (d) {
        return d.$GetValue(LayoutInformation.FinalRectProperty);
    };
    LayoutInformation.SetFinalRect = function (d, value) {
        d.$SetValue(LayoutInformation.FinalRectProperty, value);
    };
    LayoutInformation.LastRenderSizeProperty = DependencyProperty.RegisterAttachedCore("LastRenderSize", function () { return Size; }, LayoutInformation);
    LayoutInformation.GetLastRenderSize = function (d) {
        return d.$GetValue(LayoutInformation.LastRenderSizeProperty);
    };
    LayoutInformation.SetLastRenderSize = function (d, value) {
        d.$SetValue(LayoutInformation.LastRenderSizeProperty, value);
    };
    LayoutInformation.VisualOffsetProperty = DependencyProperty.RegisterAttachedCore("VisualOffset", function () { return Point; }, LayoutInformation);
    LayoutInformation.GetVisualOffset = function (d) {
        return d.$GetValue(LayoutInformation.VisualOffsetProperty);
    };
    LayoutInformation.SetVisualOffset = function (d, value) {
        d.$SetValue(LayoutInformation.VisualOffsetProperty, value);
    };
    namespace.LayoutInformation = Nullstone.FinishCreate(LayoutInformation);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var RoutedEventArgs = Nullstone.Create("RoutedEventArgs", EventArgs);
    Nullstone.AutoProperties(RoutedEventArgs, [
        "Handled",
        "Source"
    ]);
    RoutedEventArgs.Instance.Init = function () {
        this.Handled = false;
    };
    namespace.RoutedEventArgs = Nullstone.FinishCreate(RoutedEventArgs);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var RoutedPropertyChangedEventArgs = Nullstone.Create("RoutedPropertyChangedEventArgs", Fayde.RoutedEventArgs, 2);
    RoutedPropertyChangedEventArgs.Instance.Init = function (oldValue, newValue) {
        this.Init$RoutedEventArgs();
        this.OldValue = oldValue;
        this.NewValue = newValue;
    };
    Fayde.RoutedPropertyChangedEventArgs = Nullstone.FinishCreate(RoutedPropertyChangedEventArgs);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var SizeChangedEventArgs = Nullstone.Create("SizeChangedEventArgs", Fayde.RoutedEventArgs, 2);
    SizeChangedEventArgs.Instance.Init = function (prevSize, newSize) {
        this.Init$RoutedEventArgs();
        this.PreviousSize = prevSize.Copy();
        this.NewSize = newSize.Copy();
    };
    Fayde.SizeChangedEventArgs = Nullstone.FinishCreate(SizeChangedEventArgs);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var UIElementNode = Nullstone.Create("UIElementNode", LinkedListNode, 1);
    UIElementNode.Instance.Init = function (element) {
        this.UIElement = element;
    };
    Fayde.UIElementNode = Nullstone.FinishCreate(UIElementNode);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var KeyboardEventArgs = Nullstone.Create("KeyboardEventArgs", Fayde.RoutedEventArgs);
    namespace.KeyboardEventArgs = Nullstone.FinishCreate(KeyboardEventArgs);
    var KeyEventArgs = Nullstone.Create("KeyEventArgs", KeyboardEventArgs, 4);
    KeyEventArgs.Instance.Init = function (modifiers, keyCode, key, char) {
        this.Init$KeyboardEventArgs();
        this.Modifiers = modifiers;
        this.PlatformKeyCode = keyCode;
        this.Key = key;
        if (this.Key == null)
            this.Key = Key.Unknown;
        this.Char = char;
    };
    namespace.KeyEventArgs = Nullstone.FinishCreate(KeyEventArgs);
})(Nullstone.Namespace("Fayde.Input"));

(function (namespace) {
    var MouseEventArgs = Nullstone.Create("MouseEventArgs", Fayde.RoutedEventArgs, 1);
    MouseEventArgs.Instance.Init = function (absolutePos) {
        this.Init$RoutedEventArgs();
        this._AbsolutePosition = absolutePos;
    };
    MouseEventArgs.Instance.GetPosition = function (relativeTo) {
        var p = new Point(this._AbsolutePosition.X, this._AbsolutePosition.Y);
        if (relativeTo == null)
            return p;
        if (!(relativeTo instanceof Fayde.UIElement))
            throw new ArgumentException("Specified relative object must be a UIElement.");
        if (relativeTo._IsAttached)
            "".toString(); //TODO: ProcessDirtyElements on surface
        relativeTo._TransformPoint(p);
        return p;
    };
    namespace.MouseEventArgs = Nullstone.FinishCreate(MouseEventArgs);
    var MouseButtonEventArgs = Nullstone.Create("MouseButtonEventArgs", MouseEventArgs, 1);
    MouseButtonEventArgs.Instance.Init = function (absolutePos) {
        this.Init$MouseEventArgs(absolutePos);
    };
    namespace.MouseButtonEventArgs = Nullstone.FinishCreate(MouseButtonEventArgs);
    var MouseWheelEventArgs = Nullstone.Create("MouseWheelEventArgs", MouseEventArgs, 2);
    MouseWheelEventArgs.Instance.Init = function (absolutePos, delta) {
        this.Init$MouseEventArgs(absolutePos);
        this.Delta = delta;
    };
    namespace.MouseWheelEventArgs = Nullstone.FinishCreate(MouseWheelEventArgs);
})(Nullstone.Namespace("Fayde.Input"));

(function (Fayde) {
    var _AutoCreatePropertyValueProvider = Nullstone.Create("_AutoCreatePropertyValueProvider", Fayde._PropertyValueProvider, 1);
    _AutoCreatePropertyValueProvider.Instance.Init = function (obj) {
        this.Init$_PropertyValueProvider(obj, _PropertyPrecedence.AutoCreate);
        this._ht = [];
    }
    _AutoCreatePropertyValueProvider.Instance.GetPropertyValue = function (propd) {
        var value = this.ReadLocalValue(propd);
        if (value !== undefined)
            return value;
        value = propd._IsAutoCreated ? propd._GetAutoCreatedValue(this._Object) : undefined;
        if (value === undefined)
            return undefined;
        this._ht[propd] = value;
        var error = new BError();
        this._Object._ProviderValueChanged(this._PropertyPrecedence, propd, undefined, value, false, true, false, error);
        return value;
    };
    _AutoCreatePropertyValueProvider.Instance.RecomputePropertyValueOnClear = function (propd, error) {
        delete this._ht[propd];
    };
    _AutoCreatePropertyValueProvider.Instance.ReadLocalValue = function (propd) {
        return this._ht[propd];
    };
    _AutoCreatePropertyValueProvider.Instance.ClearValue = function (propd) {
        delete this._ht[propd];
    };
    Fayde._AutoCreatePropertyValueProvider = Nullstone.FinishCreate(_AutoCreatePropertyValueProvider);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var _DefaultValuePropertyValueProvider = Nullstone.Create("_DefaultValuePropertyValueProvider", Fayde._PropertyValueProvider, 1);
    _DefaultValuePropertyValueProvider.Instance.Init = function (obj) {
        this.Init$_PropertyValueProvider(obj, _PropertyPrecedence.DefaultValue);
    }
    _DefaultValuePropertyValueProvider.Instance.GetPropertyValue = function (propd) {
        return propd.DefaultValue;
    };
    Fayde._DefaultValuePropertyValueProvider = Nullstone.FinishCreate(_DefaultValuePropertyValueProvider);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var FrameworkElementPropertyValueProvider = Nullstone.Create("FrameworkElementPropertyValueProvider", Fayde._PropertyValueProvider, 1);
    FrameworkElementPropertyValueProvider.Instance.Init = function (obj) {
        this.Init$_PropertyValueProvider(obj, _PropertyPrecedence.DynamicValue);
        this._ActualHeight = null;
        this._ActualWidth = null;
        this._Last = new Size(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
    };
    FrameworkElementPropertyValueProvider.Instance.GetPropertyValue = function (propd) {
        if (propd._ID !== Fayde.FrameworkElement.ActualHeightProperty._ID && propd._ID !== Fayde.FrameworkElement.ActualWidthProperty._ID)
            return undefined;
        var actual = this._Object._ComputeActualSize();
        if (!Size.Equals(this._Last, actual)) {
            this._Last = actual;
            this._ActualHeight = actual.Height;
            this._ActualWidth = actual.Width;
        }
        if (propd._ID === Fayde.FrameworkElement.ActualHeightProperty._ID) {
            return this._ActualHeight;
        } else {
            return this._ActualWidth;
        }
    };
    Fayde.FrameworkElementPropertyValueProvider = Nullstone.FinishCreate(FrameworkElementPropertyValueProvider);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var _ImplicitStylePropertyValueProvider = Nullstone.Create("_ImplicitStylePropertyValueProvider", Fayde._PropertyValueProvider, 1);
    _ImplicitStylePropertyValueProvider.Instance.Init = function (obj) {
        this.Init$_PropertyValueProvider(obj, _PropertyPrecedence.ImplicitStyle);
        this._Styles = null;
        this._StyleMask = _StyleMask.None;
        this._ht = [];
        this._RecomputesOnClear = true;
    }
    _ImplicitStylePropertyValueProvider.Instance.GetPropertyValue = function (propd) {
        return this._ht[propd._ID];
    };
    _ImplicitStylePropertyValueProvider.Instance.RecomputePropertyValue = function (propd, lower, higher, clear, error) {
        if (!clear)
            return;
        if (!this._Styles)
            return;
        var oldValue;
        var newValue;
        var prop;
        var walker = new Fayde._DeepStyleWalker(this._Styles);
        var setter;
        while (setter = walker.Step()) {
            prop = setter._GetValue(Fayde.Setter.PropertyProperty);
            if (prop._ID !== propd._ID)
                continue;
            newValue = setter._GetValue(Fayde.Setter.ConvertedValueProperty);
            oldValue = this._ht[propd._ID];
            this._ht[propd._ID] = newValue;
            this._Object._ProviderValueChanged(this._PropertyPrecedence, propd, oldValue, newValue, true, true, true, error);
            if (error.IsErrored())
                return;
        }
    };
    _ImplicitStylePropertyValueProvider.Instance._ApplyStyles = function (styleMask, styles, error) {
        var isChanged = !this._Styles || styleMask != this._StyleMask;
        if (!isChanged) {
            for (var i = 0; i < _StyleIndex.Count; i++) {
                if (!Nullstone.RefEquals(styles[i], this._Styles[i])) {
                    isChanged = true;
                    break;
                }
            }
        }
        if (!isChanged)
            return;
        var oldValue;
        var newValue;
        var oldWalker = new Fayde._DeepStyleWalker(this._Styles);
        var newWalker = new Fayde._DeepStyleWalker(styles);
        var oldSetter = oldWalker.Step();
        var newSetter = newWalker.Step();
        while (oldSetter || newSetter) {
            var oldProp;
            var newProp;
            if (oldSetter)
                oldProp = oldSetter._GetValue(Fayde.Setter.PropertyProperty);
            if (newSetter)
                newProp = newSetter._GetValue(Fayde.Setter.PropertyProperty);
            if (oldProp && (oldProp < newProp || !newProp)) { //WTF: Less than?
                oldValue = oldSetter._GetValue(Fayde.Setter.ConvertedValueProperty);
                newValue = undefined;
                delete this._ht[oldProp._ID];
                this._Object._ProviderValueChanged(this._PropertyPrecedence, oldProp, oldValue, newValue, true, true, false, error);
                oldSetter = oldWalker.Step();
            }
            else if (oldProp == newProp) {
                oldValue = oldSetter._GetValue(Fayde.Setter.ConvertedValueProperty);
                newValue = newSetter._GetValue(Fayde.Setter.ConvertedValueProperty);
                this._ht[oldProp._ID] = newValue;
                this._Object._ProviderValueChanged(this._PropertyPrecedence, oldProp, oldValue, newValue, true, true, false, error);
                oldSetter = oldWalker.Step();
                newSetter = newWalker.Step();
            } else {
                oldValue = undefined;
                newValue = newSetter._GetValue(Fayde.Setter.ConvertedValueProperty);
                this._ht[newProp._ID] = newValue;
                this._Object._ProviderValueChanged(this._PropertyPrecedence, newProp, oldValue, newValue, true, true, false, error);
                newSetter = newWalker.Step();
            }
        }
        this._Styles = styles;
        this._StyleMask = styleMask;
    };
    _ImplicitStylePropertyValueProvider.Instance.SetStyles = function (styleMask, styles, error) {
        if (!styles)
            return;
        var newStyles = [];
        if (this._Styles) {
            newStyles[_StyleIndex.GenericXaml] = this._Styles[_StyleIndex.GenericXaml];
            newStyles[_StyleIndex.ApplicationResources] = this._Styles[_StyleIndex.ApplicationResources];
            newStyles[_StyleIndex.VisualTree] = this._Styles[_StyleIndex.VisualTree];
        }
        if (styleMask & _StyleMask.GenericXaml)
            newStyles[_StyleIndex.GenericXaml] = styles[_StyleIndex.GenericXaml];
        if (styleMask & _StyleMask.ApplicationResources)
            newStyles[_StyleIndex.ApplicationResources] = styles[_StyleIndex.ApplicationResources];
        if (styleMask & _StyleMask.VisualTree)
            newStyles[_StyleIndex.VisualTree] = styles[_StyleIndex.VisualTree];
        this._ApplyStyles(this._StyleMask | styleMask, newStyles, error);
    };
    _ImplicitStylePropertyValueProvider.Instance.ClearStyles = function (styleMask, error) {
        if (!this._Styles)
            return;
        var newStyles = this._Styles.slice(0);
        if (styleMask & _StyleMask.GenericXaml)
            newStyles[_StyleIndex.GenericXaml] = null;
        if (styleMask & _StyleMask.ApplicationResources)
            newStyles[_StyleIndex.ApplicationResources] = null;
        if (styleMask & _StyleMask.VisualTree)
            newStyles[_StyleIndex.VisualTree] = null;
        this._ApplyStyles(this._StyleMask & ~styleMask, newStyles, error);
    };
    Fayde._ImplicitStylePropertyValueProvider = Nullstone.FinishCreate(_ImplicitStylePropertyValueProvider);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var _InheritedDataContextPropertyValueProvider = Nullstone.Create("_InheritedDataContextPropertyValueProvider", Fayde._PropertyValueProvider, 1);
    _InheritedDataContextPropertyValueProvider.Instance.Init = function (obj) {
        this.Init$_PropertyValueProvider(obj, _PropertyPrecedence.InheritedDataContext);
        this._Source = null;
    };
    _InheritedDataContextPropertyValueProvider.Instance.GetPropertyValue = function (propd) {
        if (!this._Source || propd._ID !== Fayde.FrameworkElement.DataContextProperty._ID)
            return undefined;
        return this._Source._GetValue(propd);
    };
    _InheritedDataContextPropertyValueProvider.Instance.SetDataSource = function (source) {
        if (Nullstone.RefEquals(this._Source, source))
            return;
        var oldValue = this._Source ? this._Source._GetValue(Fayde.FrameworkElement.DataContextProperty) : undefined;
        var newValue = source ? source._GetValue(Fayde.FrameworkElement.DataContextProperty) : undefined;
        this._DetachListener(this._Source);
        this._Source = source;
        this._AttachListener(this._Source);
        if (!Nullstone.Equals(oldValue, newValue)) {
            var error = new BError();
            this._Object._ProviderValueChanged(this._PropertyPrecedence, Fayde.FrameworkElement.DataContextProperty, oldValue, newValue, false, false, false, error);
        }
    };
    _InheritedDataContextPropertyValueProvider.Instance._AttachListener = function (source) {
        if (source) {
            this._DataContextListener = new Fayde.Data.PropertyChangedListener(source, Fayde.FrameworkElement.DataContextProperty, this, this._SourceDataContextChanged);
        }
    };
    _InheritedDataContextPropertyValueProvider.Instance._DetachListener = function (source) {
        if (this._DataContextListener) {
            this._DataContextListener.Detach();
            delete this._DataContextListener;
        }
        if (source) {
        }
    };
    _InheritedDataContextPropertyValueProvider.Instance._SourceDataContextChanged = function (sender, args) {
        var error = new BError();
        this._Object._ProviderValueChanged(this._PropertyPrecedence, args.Property, args.OldValue, args.NewValue, true, false, false, error);
    };
    _InheritedDataContextPropertyValueProvider.Instance.EmitChanged = function () {
        if (this._Source) {
            var error = new BError();
            this._Object._ProviderValueChanged(this._PropertyPrecedence, Fayde.FrameworkElement.DataContextProperty, undefined, this._Source._GetValue(Fayde.FrameworkElement.DataContextProperty), true, false, false, error);
        }
    };
    Fayde._InheritedDataContextPropertyValueProvider = Nullstone.FinishCreate(_InheritedDataContextPropertyValueProvider);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var _InheritedIsEnabledPropertyValueProvider = Nullstone.Create("_InheritedIsEnabledPropertyValueProvider", Fayde._PropertyValueProvider, 1);
    _InheritedIsEnabledPropertyValueProvider.Instance.Init = function (obj) {
        this.Init$_PropertyValueProvider(obj, _PropertyPrecedence.IsEnabled);
        this._Source = null;
        this._CurrentValue = this._Object._GetValue(Fayde.Controls.Control.IsEnabledProperty, _PropertyPrecedence.LocalValue);
    };
    _InheritedIsEnabledPropertyValueProvider.Instance.GetPropertyValue = function (propd) {
        if (propd._ID === Fayde.Controls.Control.IsEnabledProperty._ID)
            return this._CurrentValue;
        return undefined;
    };
    _InheritedIsEnabledPropertyValueProvider.Instance.SetDataSource = function (source) {
        if (source) {
            while (source) {
                if (source instanceof Fayde.Controls.Control)
                    break;
                else if (source instanceof Fayde.FrameworkElement)
                    source = source._GetLogicalParent();
                else
                    source = null;
            }
        }
        if (!Nullstone.RefEquals(this._Source, source)) {
            this._DetachListener(this._Source);
            this._Source = source;
            this._AttachListener(this._Source);
        }
        if (!source || this._Object._IsAttached)
            this.LocalValueChanged();
    };
    _InheritedIsEnabledPropertyValueProvider.Instance._AttachListener = function (source) {
        if (source) {
            var matchFunc = function (sender, args) {
                return this === args.Property; //Closure - Control.IsEnabledProperty
            };
            source.PropertyChanged.SubscribeSpecific(this._IsEnabledChanged, this, matchFunc, Fayde.Controls.Control.IsEnabledProperty);
        }
    };
    _InheritedIsEnabledPropertyValueProvider.Instance._DetachListener = function (source) {
        if (source) {
            source.PropertyChanged.Unsubscribe(this._IsEnabledChanged, this, Fayde.Controls.Control.IsEnabledProperty);
        }
    };
    _InheritedIsEnabledPropertyValueProvider.Instance._IsEnabledChanged = function (sender, args) {
        this.LocalValueChanged(args.Property);
    };
    _InheritedIsEnabledPropertyValueProvider.Instance.LocalValueChanged = function (propd) {
        if (propd && propd._ID !== Fayde.Controls.Control.IsEnabledProperty._ID)
            return false;
        var localEnabled = this._Object._GetValue(Fayde.Controls.Control.IsEnabledProperty, _PropertyPrecedence.LocalValue);
        var parentEnabled = this._Source && this._Object.GetVisualParent() ? this._Source._GetValue(Fayde.Controls.Control.IsEnabledProperty) : undefined;
        var newValue = localEnabled === true && (!parentEnabled || parentEnabled === true);
        if (newValue !== this._CurrentValue) {
            var oldValue = this._CurrentValue;
            this._CurrentValue = newValue;
            var error = new BError();
            this._Object._ProviderValueChanged(this._PropertyPrecedence, Fayde.Controls.Control.IsEnabledProperty, oldValue, newValue, true, false, false, error);
            return true;
        }
        return false;
    };
    Fayde._InheritedIsEnabledPropertyValueProvider = Nullstone.FinishCreate(_InheritedIsEnabledPropertyValueProvider);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    function getInheritable(obj, propd) {
        var inh = propd._Inheritable || 0;
        if (inh && propd.Name === "FlowDirection" && (obj instanceof Fayde.Controls.Image || obj instanceof Fayde.Controls.MediaElement))
            inh = 0;
        return inh;
    }
    function getProperty(inheritable, ancestor) {
        var list = DependencyProperty._Inherited[inheritable];
        if (!list)
            return;
        var len = list.length;
        if (len > 0 && list[0].Name === "FlowDirection") {
            if (ancestor instanceof Fayde.Controls.Image || ancestor instanceof Fayde.Controls.MediaElement)
                return;
        }
        for (var i = 0; i < len; i++) {
            var propd = list[i];
            if (ancestor instanceof propd.OwnerType)
                return propd;
        }
    }
    function propagateInheritedValue(inheritable, source, newValue) {
        var propPrecInherited = _PropertyPrecedence.Inherited;
        var provider = this._Providers[propPrecInherited];
        if (!provider)
            return true;
        provider._SetPropertySource(inheritable, source);
        var propd = getProperty(inheritable, this);
        if (!propd)
            return false;
        var error = new BError();
        this._ProviderValueChanged(propPrecInherited, propd, undefined, newValue, true, false, false, error);
    }
    function getInheritedValueSource (inheritable) {
        var provider = this._Providers[_PropertyPrecedence.Inherited];
        if (!provider)
            return undefined;
        return provider._GetPropertySource(inheritable);
    };
    var _InheritedContext = Nullstone.Create("_InheritedContext");
    _InheritedContext.FromSources = function (foregroundSource, fontFamilySource, fontStretchSource, fontStyleSource,
        fontWeightSource, fontSizeSource, languageSource, flowDirectionSource, useLayoutRoundingSource, textDecorationsSource) {
        var ic = new _InheritedContext();
        ic.ForegroundSource = foregroundSource;
        ic.FontFamilySource = fontFamilySource;
        ic.FontStretchSource = fontStretchSource;
        ic.FontStyleSource = fontStyleSource;
        ic.FontWeightSource = fontWeightSource;
        ic.FontSizeSource = fontSizeSource;
        ic.LanguageSource = languageSource;
        ic.FlowDirectionSource = flowDirectionSource;
        ic.UseLayoutRoundingSource = useLayoutRoundingSource;
        ic.TextDecorationsSource = textDecorationsSource;
        return ic;
    };
    _InheritedContext.FromObject = function (obj, parentContext) {
        var ic = new _InheritedContext();
        var inhEnum = _Inheritable;
        ic.ForegroundSource = ic.GetLocalSource(obj, inhEnum.Foreground);
        if (!ic.ForegroundSource && parentContext) ic.ForegroundSource = parentContext.ForegroundSource;
        ic.FontFamilySource = ic.GetLocalSource(obj, inhEnum.FontFamily);
        if (!ic.FontFamilySource && parentContext) ic.FontFamilySource = parentContext.FontFamilySource;
        ic.FontStretchSource = ic.GetLocalSource(obj, inhEnum.FontStretch);
        if (!ic.FontStretchSource && parentContext) ic.FontStretchSource = parentContext.FontStretchSource;
        ic.FontStyleSource = ic.GetLocalSource(obj, inhEnum.FontStyle);
        if (!ic.FontStretchSource && parentContext) ic.FontStretchSource = parentContext.FontStretchSource;
        ic.FontWeightSource = ic.GetLocalSource(obj, inhEnum.FontWeight);
        if (!ic.FontWeightSource && parentContext) ic.FontWeightSource = parentContext.FontWeightSource;
        ic.FontSizeSource = ic.GetLocalSource(obj, inhEnum.FontSize);
        if (!ic.FontSizeSource && parentContext) ic.FontSizeSource = parentContext.FontSizeSource;
        ic.LanguageSource = ic.GetLocalSource(obj, inhEnum.Language);
        if (!ic.LanguageSource && parentContext) ic.LanguageSource = parentContext.LanguageSource;
        ic.FlowDirectionSource = ic.GetLocalSource(obj, inhEnum.FlowDirection);
        if (!ic.FlowDirectionSource && parentContext) ic.FlowDirectionSource = parentContext.FlowDirectionSource;
        ic.UseLayoutRoundingSource = ic.GetLocalSource(obj, inhEnum.UseLayoutRounding);
        if (!ic.UseLayoutRoundingSource && parentContext) ic.UseLayoutRoundingSource = parentContext.UseLayoutRoundingSource;
        ic.TextDecorationsSource = ic.GetLocalSource(obj, inhEnum.TextDecorations);
        if (!ic.TextDecorationsSource && parentContext) ic.TextDecorationsSource = parentContext.TextDecorationsSource;
        return ic;
    };
    _InheritedContext.Instance.Compare = function (withContext, props) {
        var inhEnum = _Inheritable;
        var rv = inhEnum.None;
        if (props & inhEnum.Foreground && Nullstone.RefEquals(withContext.ForegroundSource, this.ForegroundSource))
            rv |= inhEnum.Foreground;
        if (props & inhEnum.FontFamily && Nullstone.RefEquals(withContext.FontFamilySource, this.FontFamilySource))
            rv |= inhEnum.FontFamily;
        if (props & inhEnum.FontStretch && Nullstone.RefEquals(withContext.FontStretchSource, this.FontStretchSource))
            rv |= inhEnum.FontStretch;
        if (props & inhEnum.FontStyle && Nullstone.RefEquals(withContext.FontStyleSource, this.FontStyleSource))
            rv |= inhEnum.FontStyle;
        if (props & inhEnum.FontWeight && Nullstone.RefEquals(withContext.FontWeightSource, this.FontWeightSource))
            rv |= inhEnum.FontWeight;
        if (props & inhEnum.FontSize && Nullstone.RefEquals(withContext.FontSizeSource, this.FontSizeSource))
            rv |= inhEnum.FontSize;
        if (props & inhEnum.Language && Nullstone.RefEquals(withContext.LanguageSource, this.LanguageSource))
            rv |= inhEnum.Language;
        if (props & inhEnum.FlowDirection && Nullstone.RefEquals(withContext.FlowDirectionSource, this.FlowDirectionSource))
            rv |= inhEnum.FlowDirection;
        if (props & inhEnum.UseLayoutRounding && Nullstone.RefEquals(withContext.UseLayoutRoundingSource, this.UseLayoutRoundingSource))
            rv |= inhEnum.UseLayoutRounding;
        if (props & inhEnum.TextDecorations && Nullstone.RefEquals(withContext.TextDecorationsSource, this.TextDecorationsSource))
            rv |= inhEnum.TextDecorations;
        return rv;
    };
    _InheritedContext.Instance.GetLocalSource = function (obj, prop) {
        var propd = getProperty(prop, obj);
        if (!propd)
            return;
        if ((obj._ProviderBitmasks[propd._ID] & ((1 << _PropertyPrecedence.Inherited) - 1)) !== 0)
            return obj;
    };
    Nullstone.FinishCreate(_InheritedContext);
    var _InheritedPropertyValueProvider = Nullstone.Create("_InheritedPropertyValueProvider", Fayde._PropertyValueProvider, 1);
    _InheritedPropertyValueProvider.Instance.Init = function (obj) {
        this.Init$_PropertyValueProvider(obj, _PropertyPrecedence.Inherited);
        this._ht = [];
    };
    _InheritedPropertyValueProvider.Instance.GetPropertyValue = function (propd) {
        if (!getInheritable(this._Object, propd))
            return undefined;
        var inheritable = getInheritable(this._Object, propd);
        var ancestor = this._GetPropertySource(inheritable);
        if (!ancestor)
            return undefined;
        var ancestorPropd = getProperty(inheritable, ancestor);
        if (!ancestorPropd)
            return undefined;
        var v = ancestor.$GetValue(ancestorPropd);
        if (v)
            return v;
        return undefined;
    };
    _InheritedPropertyValueProvider.Instance.WalkSubtree = function (rootParent, element, context, props, adding) {
        if (element instanceof Fayde.Documents.TextElement || element instanceof Fayde.Controls.TextBlock) {
            var childProp;
            if (element instanceof Fayde.Controls.TextBlock)
                childProp = Fayde.Controls.TextBlock.InlinesProperty;
            else if (element instanceof Fayde.Documents.Paragraph)
                childProp = Fayde.Documents.Paragraph.InlinesProperty;
            else if (element instanceof Fayde.Documents.Span)
                childProp = Fayde.Documents.Span.InlinesProperty;
            else if (element instanceof Fayde.Documents.Section)
                childProp = Fayde.Documents.Section.BlocksProperty;
            if (childProp) {
                var col = element._GetValueNoAutoCreate(childProp);
                if (col) {
                    var count = col.GetCount();
                    for (var i = 0; i < count; i++) {
                        this.WalkTree(rootParent, col.GetValueAt(i), context, props, adding);
                    }
                }
            }
        }
        if (element instanceof Fayde.Controls.Primitives.Popup) {
            var child = element.Child;
            if (child)
                this.WalkTree(rootParent, child, context, props, adding);
        }
        if (element instanceof Fayde.UIElement) {
            var walker = Fayde._VisualTreeWalker.Logical(element);
            var child2;
            while (child2 = walker.Step()) {
                this.WalkTree(rootParent, child2, context, props, adding);
            }
        }
    };
    _InheritedPropertyValueProvider.Instance.WalkTree = function (rootParent, element, context, props, adding) {
        var inhEnum = _Inheritable;
        if (props === inhEnum.None)
            return;
        if (adding) {
            this.MaybePropagateInheritedValue(context.ForegroundSource, inhEnum.Foreground, props, element);
            this.MaybePropagateInheritedValue(context.FontFamilySource, inhEnum.FontFamily, props, element);
            this.MaybePropagateInheritedValue(context.FontStretchSource, inhEnum.FontStretch, props, element);
            this.MaybePropagateInheritedValue(context.FontStyleSource, inhEnum.FontStyle, props, element);
            this.MaybePropagateInheritedValue(context.FontWeightSource, inhEnum.FontWeight, props, element);
            this.MaybePropagateInheritedValue(context.FontSizeSource, inhEnum.FontSize, props, element);
            this.MaybePropagateInheritedValue(context.LanguageSource, inhEnum.Language, props, element);
            this.MaybePropagateInheritedValue(context.FlowDirectionSource, inhEnum.FlowDirection, props, element);
            this.MaybePropagateInheritedValue(context.UseLayoutRoundingSource, inhEnum.UseLayoutRounding, props, element);
            this.MaybePropagateInheritedValue(context.TextDecorationsSource, inhEnum.TextDecorations, props, element);
            var eleContext = _InheritedContext.FromObject(element, context);
            props = eleContext.Compare(context, props);
            if (props === inhEnum.None)
                return;
            this.WalkSubtree(rootParent, element, eleContext, props, adding);
        } else {
            var eleContext2 = _InheritedContext.FromObject(element, context);
            this.MaybeRemoveInheritedValue(context.ForegroundSource, inhEnum.Foreground, props, element);
            this.MaybeRemoveInheritedValue(context.FontFamilySource, inhEnum.FontFamily, props, element);
            this.MaybeRemoveInheritedValue(context.FontStretchSource, inhEnum.FontStretch, props, element);
            this.MaybeRemoveInheritedValue(context.FontStyleSource, inhEnum.FontStyle, props, element);
            this.MaybeRemoveInheritedValue(context.FontWeightSource, inhEnum.FontWeight, props, element);
            this.MaybeRemoveInheritedValue(context.FontSizeSource, inhEnum.FontSize, props, element);
            this.MaybeRemoveInheritedValue(context.LanguageSource, inhEnum.Language, props, element);
            this.MaybeRemoveInheritedValue(context.FlowDirectionSource, inhEnum.FlowDirection, props, element);
            this.MaybeRemoveInheritedValue(context.UseLayoutRoundingSource, inhEnum.UseLayoutRounding, props, element);
            this.MaybeRemoveInheritedValue(context.TextDecorationsSource, inhEnum.TextDecorations, props, element);
            props = eleContext2.Compare(context, props);
            if (props === inhEnum.None)
                return;
            this.WalkSubtree(rootParent, element, context, props, adding);
        }
    };
    _InheritedPropertyValueProvider.Instance.MaybePropagateInheritedValue = function (source, prop, props, element) {
        if (!source) return;
        if ((props & prop) == 0) return;
        var sourceProperty = getProperty(prop, source);
        var value = source.$GetValue(sourceProperty);
        if (value)
            propagateInheritedValue.call(element, prop, source, value);
    };
    _InheritedPropertyValueProvider.Instance.MaybeRemoveInheritedValue = function (source, prop, props, element) {
        if (!source) return;
        if ((props & prop) == 0) return;
        if (Nullstone.RefEquals(source, getInheritedValueSource.call(element, prop)))
            propagateInheritedValue.call(element, prop, undefined, undefined);
    };
    _InheritedPropertyValueProvider.Instance.PropagateInheritedPropertiesOnAddingToTree = function (subtree) {
        var inhEnum = _Inheritable;
        var baseContext = _InheritedContext.FromSources(
                this._GetPropertySource(inhEnum.Foreground),
                this._GetPropertySource(inhEnum.FontFamily),
                this._GetPropertySource(inhEnum.FontStretch),
                this._GetPropertySource(inhEnum.FontStyle),
                this._GetPropertySource(inhEnum.FontWeight),
                this._GetPropertySource(inhEnum.FontSize),
                this._GetPropertySource(inhEnum.Language),
                this._GetPropertySource(inhEnum.FlowDirection),
                this._GetPropertySource(inhEnum.UseLayoutRounding),
                this._GetPropertySource(inhEnum.TextDecorations));
        var objContext = _InheritedContext.FromObject(this._Object, baseContext);
        this.WalkTree(this._Object, subtree, objContext, inhEnum.All, true);
    };
    _InheritedPropertyValueProvider.Instance.PropagateInheritedProperty = function (propd, source, subtree) {
        var inheritable = getInheritable(source, propd);
        if (inheritable === 0)
            return;
        var objContext = _InheritedContext.FromObject(this._Object, null);
        this.WalkSubtree(source, subtree, objContext, inheritable, true);
    };
    _InheritedPropertyValueProvider.Instance.ClearInheritedPropertiesOnRemovingFromTree = function (subtree) {
        var inhEnum = _Inheritable;
        var baseContext = _InheritedContext.FromSources(
                this._GetPropertySource(inhEnum.Foreground),
                this._GetPropertySource(inhEnum.FontFamily),
                this._GetPropertySource(inhEnum.FontStretch),
                this._GetPropertySource(inhEnum.FontStyle),
                this._GetPropertySource(inhEnum.FontWeight),
                this._GetPropertySource(inhEnum.FontSize),
                this._GetPropertySource(inhEnum.Language),
                this._GetPropertySource(inhEnum.FlowDirection),
                this._GetPropertySource(inhEnum.UseLayoutRounding),
                this._GetPropertySource(inhEnum.TextDecorations));
        var objContext = _InheritedContext.FromObject(this._Object, baseContext);
        this.WalkTree(this._Object, subtree, objContext, inhEnum.All, false);
    };
    _InheritedPropertyValueProvider.Instance._GetPropertySource = function (inheritable) {
        return this._ht[inheritable];
    };
    _InheritedPropertyValueProvider.Instance._SetPropertySource = function (inheritable, source) {
        if (source)
            this._ht[inheritable] = source;
        else
            delete this._ht[inheritable];
    };
    Fayde._InheritedPropertyValueProvider = Nullstone.FinishCreate(_InheritedPropertyValueProvider);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var _LocalValuePropertyValueProvider = Nullstone.Create("_LocalValuePropertyValueProvider", Fayde._PropertyValueProvider, 1);
    _LocalValuePropertyValueProvider.Instance.Init = function (obj) {
        this.Init$_PropertyValueProvider(obj, _PropertyPrecedence.LocalValue);
        this._ht = [];
    };
    _LocalValuePropertyValueProvider.Instance.GetPropertyValue = function (propd) {
        return this._ht[propd._ID];
    };
    _LocalValuePropertyValueProvider.Instance.SetValue = function (propd, value) {
        this._ht[propd._ID] = value;
    };
    _LocalValuePropertyValueProvider.Instance.ClearValue = function (propd) {
        delete this._ht[propd._ID];
    };
    Fayde._LocalValuePropertyValueProvider = Nullstone.FinishCreate(_LocalValuePropertyValueProvider);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var Binding = Nullstone.Create("Binding", namespace.BindingBase, 1);
    Binding.Instance.Init = function (path) {
        if (!path)
            path = "";
        this.Mode = namespace.BindingMode.OneWay;
        this.Path = new namespace.PropertyPath(path);
        this.ValidatesOnNotifyDataErrors = true;
        this.UpdateSourceTrigger = namespace.UpdateSourceTrigger.Default;
    };
    Nullstone.Property(Binding, "BindsDirectlyToSource", {
        get: function () { return this._BindsDirectlyToSource; },
        set: function (value) {
            this.CheckSealed();
            this._BindsDirectlyToSource = value;
        }
    });
    Nullstone.Property(Binding, "Converter", {
        get: function () { return this._Converter; },
        set: function (value) {
            this.CheckSealed();
            this._Converter = value;
        }
    });
    Nullstone.Property(Binding, "ConverterCulture", {
        get: function () { return this._ConverterCulture; },
        set: function (value) {
            this.CheckSealed();
            this._ConverterCulture = value;
        }
    });
    Nullstone.Property(Binding, "ConverterParameter", {
        get: function () { return this._ConverterParameter; },
        set: function (value) {
            this.CheckSealed();
            this._ConverterParameter = value;
        }
    });
    Nullstone.Property(Binding, "ElementName", {
        get: function () { return this._ElementName; },
        set: function (value) {
            this.CheckSealed();
            if (this.Source || this.RelativeSource)
                throw new InvalidOperationException("ElementName cannot be set if either RelativeSource or Source is set");
            this._ElementName = value;
        }
    });
    Nullstone.Property(Binding, "Mode", {
        get: function () { return this._Mode; },
        set: function (value) {
            this.CheckSealed();
            this._Mode = value;
        }
    });
    Nullstone.Property(Binding, "NotifyOnValidationError", {
        get: function () { return this._NotifyOnValidationError; },
        set: function (value) {
            this.CheckSealed();
            this._NotifyOnValidationError = value;
        }
    });
    Nullstone.Property(Binding, "RelativeSource", {
        get: function () { return this._RelativeSource; },
        set: function (value) {
            this.CheckSealed();
            if (this.Source || this.ElementName)
                throw new InvalidOperationException("RelativeSource cannot be set if either ElementName or Source is set");
            this._RelativeSource = value;
        }
    });
    Nullstone.Property(Binding, "Path", {
        get: function () { return this._Path; },
        set: function (value) {
            this.CheckSealed();
            if (value.HasDependencyProperty)
                throw new ArgumentException("PropertyPaths which are instantiated with a DependencyProperty are not supported");
            this._Path = value;
        }
    });
    Nullstone.Property(Binding, "Source", {
        get: function () { return this._Source; },
        set: function (value) {
            this.CheckSealed();
            if (this.ElementName || this.RelativeSource)
                throw new InvalidOperationException("Source cannot be set if either ElementName or RelativeSource is set");
            this._Source = value;
        }
    });
    Nullstone.Property(Binding, "UpdateSourceTrigger", {
        get: function () { return this._UpdateSourceTrigger; },
        set: function (value) {
            this.CheckSealed();
            this._UpdateSourceTrigger = value;
        }
    });
    Nullstone.Property(Binding, "ValidatesOnExceptions", {
        get: function () { return this._ValidatesOnExceptions; },
        set: function (value) {
            this.CheckSealed();
            this._ValidatesOnExceptions = value;
        }
    });
    Nullstone.Property(Binding, "ValidatesOnDataErrors", {
        get: function () { return this._ValidatesOnDataErrors; },
        set: function (value) {
            this.CheckSealed();
            this._ValidatesOnDataErrors = value;
        }
    });
    Nullstone.Property(Binding, "ValidatesOnNotifyDataErrors", {
        get: function () { return this._ValidatesOnNotifyDataErrors; },
        set: function (value) {
            this.CheckSealed();
            this._ValidatesOnNotifyDataErrors = value;
        }
    });
    namespace.Binding = Nullstone.FinishCreate(Binding);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var BindingExpressionBase = Nullstone.Create("BindingExpressionBase", Fayde.Expression, 3);
    BindingExpressionBase.Instance.Init = function (binding, target, propd) {
        if (!binding)
            return;
        this._Cached = false;
        this._CachedValue = null;
        this._Binding = binding;
        this.Target = target;
        this.Property = propd;
        var bindsToView = propd._ID === Fayde.FrameworkElement.DataContextProperty._ID; //TODO: || propd.GetTargetType() === IEnumerable || propd.GetTargetType() === Fayde.Data.ICollectionView
        var walker = this.PropertyPathWalker = new Fayde.Data._PropertyPathWalker(binding.Path.ParsePath, binding.BindsDirectlyToSource, bindsToView, this.IsBoundToAnyDataContext);
        if (binding.Mode !== namespace.BindingMode.OneTime) {
            walker.IsBrokenChanged.Subscribe(this._PropertyPathValueChanged, this);
            walker.ValueChanged.Subscribe(this._PropertyPathValueChanged, this);
        }
    };
    Nullstone.AutoProperties(BindingExpressionBase, [
        "Target",
        "PropertyPathWalker",
        "Property",
        "CurrentError",
        "CurrentNotifyError"
    ]);
    Nullstone.Property(BindingExpressionBase, "Binding", {
        get: function () { return this._Binding; }
    });
    Nullstone.Property(BindingExpressionBase, "DataSource", {
        get: function () { return this.PropertyPathWalker.Source; }
    });
    Nullstone.Property(BindingExpressionBase, "DataContextSource", {
        get: function () { return this._DataContextSource; }
    });
    Nullstone.Property(BindingExpressionBase, "IsBoundToAnyDataContext", {
        get: function () { return !this.Binding.ElementName && !this.Binding.Source; }
    });
    Nullstone.Property(BindingExpressionBase, "IsSelfDataContextBound", {
        get: function () {
            return this.IsBoundToAnyDataContext
                && (this.Target instanceof Fayde.FrameworkElement)
                && (this.Property._ID !== Fayde.FrameworkElement.DataContextProperty._ID);
        }
    });
    Nullstone.Property(BindingExpressionBase, "IsParentDataContextBound", {
        get: function () {
            return this.IsBoundToAnyDataContext
                && (this.Target instanceof Fayde.FrameworkElement)
                && (this.Property._ID === Fayde.FrameworkElement.DataContextProperty._ID || this.Property._ID === Fayde.Controls.ContentPresenter.ContentProperty._ID);
        }
    });
    Nullstone.Property(BindingExpressionBase, "IsMentorDataContextBound", {
        get: function () {
            return this.IsBoundToAnyDataContext
                && !(this.Target instanceof Fayde.FrameworkElement);
        }
    });
    Nullstone.Property(BindingExpressionBase, "IsTwoWayTextBoxText", {
        get: function () {
            return (this.Target instanceof Fayde.Controls.TextBox)
                && (this.Property._ID === Fayde.Controls.TextBox.TextProperty._ID)
                && (this.Binding.Mode === namespace.BindingMode.TwoWay);
        }
    });
    BindingExpressionBase.Instance.GetValue = function (propd) {
        if (this._Cached)
            return this._CachedValue;
        this._Cached = true;
        if (this.PropertyPathWalker.IsPathBroken) {
            this._CachedValue = null;
        } else {
            this._CachedValue = this.PropertyPathWalker.ValueInternal;
        }
        try {
            this._CachedValue = this._ConvertToType(propd, this._CachedValue);
        } catch (err) {
            this._CachedValue = propd.GetDefaultValue(this.Target);
        }
        return this._CachedValue;
    };
    BindingExpressionBase.Instance._OnAttached = function (element) {
        if (this.Attached)
            return;
        this._OnAttached$Expression(element);
        this._CalculateDataSource();
        if (this.IsTwoWayTextBoxText)
            this.Target.LostFocus.Subscribe(this._TextBoxLostFocus, this);
        var targetFE = Nullstone.As(element, Fayde.FrameworkElement);
        if (this.Binding.Mode === namespace.BindingMode.TwoWay && this.Property._IsCustom) {
            var updateDataSourceCallback = function () {
                try {
                    if (!this.Updating)
                        this._TryUpdateSourceObject(this.Target.$GetValue(this.Property));
                } catch (err) {
                }
            };
            this._PropertyListener = new namespace.PropertyChangedListener(this.Target, this.Property, this, updateDataSourceCallback);
        }
    };
    BindingExpressionBase.Instance._OnDetached = function (element) {
        if (!this.Attached)
            return;
        this._OnDetached$Expression(element);
        if (this.IsTwoWayTextBoxText)
            this.Target.LostFocus.Unsubscribe(this._TextBoxLostFocus, this);
        var targetFE = Nullstone.As(element, Fayde.FrameworkElement);
        if (this.IsMentorDataContextBound) {
            targetFE.MentorChanged.Unsubscribe(this._MentorChanged, this);
            this.SetDataContextSource(null);
        } else if (this.IsParentDataContextBound) {
            targetFE.VisualParentChanged.Subscribe(this._ParentChanged, this);
            this.SetDataContextSource(null);
        } else if (this.IsSelfDataContextBound) {
            this.SetDataContextSource(null);
        }
        if (!targetFE)
            targetFE = this.Target.GetMentor();
        if (targetFE && this.CurrentError != null) {
            this.CurrentError = null;
        }
        if (this._PropertyListener) {
            this._PropertyListener.Detach();
            this._PropertyListener = null;
        }
        this.PropertyPathWalker.Update(null);
    };
    BindingExpressionBase.Instance._TextBoxLostFocus = function () {
        this._UpdateSourceObject();
    };
    BindingExpressionBase.Instance._TryUpdateSourceObject = function (value) {
        if (!this.Updating && this.Binding.UpdateSourceTrigger === namespace.UpdateSourceTrigger.Default) {
            this._UpdateSourceObject(value, false);
        }
    };
    BindingExpressionBase.Instance._UpdateSourceObject = function (value, force) {
        if (value === undefined)
            value = this.Target.$GetValue(this.Property);
        if (force === undefined)
            force = false;
        var binding = this.Binding;
        if (binding.Mode !== namespace.BindingMode.TwoWay)
            return;
        var dataError;
        var exception;
        var oldUpdating = this.Updating;
        var node = this.PropertyPathWalker.FinalNode;
        try {
            if (!force && this.IsTwoWayTextBoxText && Nullstone.RefEquals(Fayde.FocusManager.GetFocusedElement(), this.Target))
                return;
            if (this.PropertyPathWalker.FinalNode.IsPathBroken)
                return;
            if (binding.TargetNullValue) {
                try {
                    if (Nullstone.RefEquals(binding.TargetNullValue, value))
                        value = null;
                } catch (err) {
                }
            }
            var converter = binding.Converter;
            if (converter) {
                value = converter.ConvertBack(value, node.GetValueType(), binding.ConverterParameter, binding.ConverterCulture);
            }
            if (value instanceof String) {
            }
            try {
                if (value)
                    value = this._ConvertFromTargetToSource(value);
            } catch (err) {
                return;
            }
            if (!this._CachedValue && !value)
                return;
            this.Updating = true;
            node.SetValue(value);
            this._CachedValue = value;
        } catch (err) {
            if (binding.ValidatesOnExceptions) {
                if (err instanceof TargetInvocationException)
                    exception = err.InnerException;
                exception = err;
            }
        } finally {
            this.Updating = oldUpdating;
        }
        this._MaybeEmitError(dataError, exception);
    };
    BindingExpressionBase.Instance._MaybeEmitError = function (message, exception) {
        var fe = Nullstone.As(this.Target, Fayde.FrameworkElement);
        if (!fe)
            fe = this.Target.GetMentor();
        if (!fe)
            return;
        if (String.isString(message) && message === "")
            message = null;
        var oldError = this.CurrentError;
        if (message != null)
            this.CurrentError = new ValidationError(message, null);
        else if (exception)
            this.CurrentError = new ValidationError(null, exception);
        else
            this.CurrentError = null;
        if (oldError && this.CurrentError) {
            Validation.AddError(fe, this.CurrentError);
            Validation.RemoveError(fe, oldError);
            if (this.Binding.NotifyOnValidationError) {
                fe.RaiseBindingValidationError(new ValidationErrorEventArgs(ValidationErrorEventAction.Removed, oldError));
                fe.RaiseBindingValidationError(new ValidationErrorEventArgs(ValidationErrorEventAction.Added, this.CurrentError));
            }
        } else if (oldError) {
            Validation.RemoveError(fe, oldError);
            if (this.Binding.NotifyOnValidationError)
                fe.RaiseBindingValidationError(new ValidationErrorEventArgs(ValidationErrorEventAction.Removed, oldError));
        } else if (this.CurrentError) {
            Validation.AddError(fe, this.CurrentError);
            if (this.Binding.NotifyOnValidationError)
                fe.RaiseBindingValidationError(new ValidationErrorEventArgs(ValidationErrorEventAction.Added, this.CurrentError));
        }
    };
    BindingExpressionBase.Instance._ConvertFromTargetToSource = function (value) {
        NotImplemented("BindingExpressionBase._ConvertFromTargetToSource");
        return value;
    };
    BindingExpressionBase.Instance._ConvertFromSourceToTarget = function (value) {
        NotImplemented("BindingExpressionBase._ConvertFromSourceToTarget");
        return value;
    };
    BindingExpressionBase.Instance._ConvertToType = function (propd, value) {
        try {
            var binding = this.Binding;
            if (!this.PropertyPathWalker.IsPathBroken && binding.Converter) {
                value = binding.Converter.Convert(value, this.Property.GetTargetType(), binding.ConverterParameter, binding.ConverterCulture);
            }
            if (value instanceof Fayde.UnsetValue || this.PropertyPathWalker.IsPathBroken) {
                value = binding.FallbackValue;
                if (value === undefined)
                    value = propd.GetDefaultValue(this.Target);
            } else if (value == null) {
                value = binding.TargetNullValue;
                if (value == null && this.IsBoundToAnyDataContext && !binding.Path.Path)
                    value = propd.GetDefaultValue(this.Target);
            } else {
                var format = binding.StringFormat;
                if (format) {
                    if (!String.contains(format, "{0"))
                        format = "{0:" + format + "}";
                    value = String.format(format, value);
                }
            }
        } catch (err) {
            return Fayde.TypeConverter.ConvertObject(propd, binding.FallbackValue, this.Target.constructor, true);
        }
        return value;
    };
    BindingExpressionBase.Instance._AttachToNotifyError = function (element) {
        NotImplemented("BindingExpressionBase._AttachToNotifyError");
    };
    BindingExpressionBase.Instance._NotifyErrorsChanged = function (o, e) {
        NotImplemented("BindingExpressionBase._NotifyErrorsChanged");
    };
    BindingExpressionBase.Instance._CalculateDataSource = function () {
        var source;
        if (this.Binding.Source) {
            this.PropertyPathWalker.Update(this.Binding.Source);
        } else if (this.Binding.ElementName != null) {
            source = this._FindSourceByElementName();
            var feTarget = Nullstone.As(this.Target, Fayde.FrameworkElement);
            if (!feTarget)
                feTarget = this.Target.GetMentor();
            if (!feTarget) {
                this.Target.MentorChanged.Subscribe(this._InvalidateAfterMentorChanged, this);
            } else {
                feTarget.Loaded.Subscribe(this._HandleFeTargetLoaded, this);
            }
            this.PropertyPathWalker.Update(source);
        } else if (this.Binding.RelativeSource && this.Binding.RelativeSource.Mode === namespace.RelativeSourceMode.Self) {
            this.PropertyPathWalker.Update(this.Target);
        } else {
            var fe = Nullstone.As(this.Target, Fayde.FrameworkElement);
            var propd = this.Property;
            if (fe && (propd._ID === Fayde.FrameworkElement.DataContextProperty._ID || propd._ID === Fayde.Controls.ContentPresenter.ContentProperty._ID)) {
                fe.VisualParentChanged.Subscribe(this._ParentChanged, this);
                fe = fe.GetVisualParent();
                this.SetDataContextSource(fe);
            } else {
                if (!fe) {
                    this.Target.MentorChanged.Subscribe(this._MentorChanged, this);
                    fe = this.Target.GetMentor();
                }
                if (fe && this.Binding.RelativeSource && this.Binding.RelativeSource.Mode === namespace.RelativeSourceMode.TemplatedParent) {
                    this.PropertyPathWalker.Update(fe.TemplateOwner);
                } else {
                    this.SetDataContextSource(fe);
                }
            }
        }
    };
    BindingExpressionBase.Instance.SetDataContextSource = function (value) {
        if (this._DataContextSource && this._DataContextPropertyListener) {
            this._DataContextPropertyListener.Detach();
            this._DataContextPropertyListener = null;
        }
        this._DataContextSource = value;
        if (this._DataContextSource) {
            this._DataContextPropertyListener = new namespace.PropertyChangedListener(this._DataContextSource, Fayde.FrameworkElement.DataContextProperty, this, this._DataContextChanged);
        }
        if (this._DataContextSource || this.IsMentorDataContextBound)
            this.PropertyPathWalker.Update(!this._DataContextSource ? null : this._DataContextSource.DataContext);
    };
    BindingExpressionBase.Instance._InvalidateAfterMentorChanged = function (sender, e) {
        this.Target.MentorChanged.Unsubscribe(this._InvalidateAfterMentorChanged, this);
        var source = this._FindSourceByElementName();
        if (!source) {
            this.Target.GetMentor().Loaded.Subscribe(this._HandleFeTargetLoaded, this);
        } else {
            this.PropertyPathWalker.Update(source);
        }
        this._Invalidate();
        this.Target.$SetValue(this.Property, this);
    };
    BindingExpressionBase.Instance._HandleFeTargetLoaded = function (sender, e) {
        var fe = sender;
        fe.Loaded.Unsubscribe(this._HandleFeTargetLoaded, this);
        var source = this._FindSourceByElementName();
        if (source)
            this.PropertyPathWalker.Update(source);
        this._Invalidate();
        this.Target.$SetValue(this.Property, this);
    };
    BindingExpressionBase.Instance._FindSourceByElementName = function () {
        var source;
        var fe = Nullstone.As(this.Target, Fayde.FrameworkElement);
        if (!fe)
            fe = this.Target.GetMentor();
        while (fe && !source) {
            source = fe.FindName(this.Binding.ElementName);
            if (!source && fe.TemplateOwner)
                fe = fe.GetTemplateOwner();
            else if (fe.GetMentor() && Fayde.Controls.ItemsControl.GetItemsOwner(fe.GetMentor()))
                fe = fe.GetMentor();
            else
                fe = null;
        }
        return source;
    };
    BindingExpressionBase.Instance._Invalidate = function () {
        this._Cached = false;
        this._CachedValue = null;
    };
    BindingExpressionBase.Instance._MentorChanged = function (sender, e) {
        try {
            var mentor = this.Target.GetMentor();
            if (this.Binding.RelativeSource && this.Binding.RelativeSource.Mode === namespace.RelativeSourceMode.TemplatedParent) {
                if (!mentor)
                    this.PropertyPathWalker.Update(null);
                else
                    this.PropertyPathWalker.Update(mentor.TemplateOwner);
                this.Refresh();
            } else {
                this.SetDataContextSource(mentor);
            }
        } catch (err) {
        }
    };
    BindingExpressionBase.Instance._ParentChanged = function (sender, e) {
        try {
            var targetFE = this.Target;
            this.SetDataContextSource(targetFE.GetVisualParent());
        } catch (err) {
        }
    };
    BindingExpressionBase.Instance._DataContextChanged = function (sender, e) {
        try {
            var fe = sender;
            this.PropertyPathWalker.Update(fe.DataContext);
            if (this.Binding.Mode === namespace.BindingMode.OneTime)
                this.Refresh();
        } catch (err) {
            Warn(err.message);
        }
    };
    BindingExpressionBase.Instance._PropertyPathValueChanged = function () {
        this.Refresh();
    };
    BindingExpressionBase.Instance.Refresh = function () {
        var dataError;
        var exception;
        if (!this.Attached)
            return;
        var oldUpdating = this.Updating;
        try {
            this.Updating = true;
            this._Invalidate();
            this.Target.$SetValue(this.Property, this);
        } catch (err) {
            if (this.Binding.ValidatesOnExceptions) {
                exception = err;
                if (exception instanceof TargetInvocationException)
                    exception = exception.InnerException;
            }
        } finally {
            this.Updating = oldUpdating;
        }
        this._MaybeEmitError(dataError, exception);
    };
    namespace.BindingExpressionBase = Nullstone.FinishCreate(BindingExpressionBase);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var ICollectionView = Nullstone.Create("ICollectionView");
    ICollectionView.Instance.Init = function () {
        this.CurrentChanged = new MulticastEvent();
    };
    namespace.ICollectionView = Nullstone.FinishCreate(ICollectionView);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var INotifyPropertyChanged = Nullstone.Create("INotifyPropertyChanged");
    INotifyPropertyChanged.Instance.Init = function () {
        this.PropertyChanged = new MulticastEvent();
    };
    INotifyPropertyChanged.Instance.RaisePropertyChanged = function (propertyName) {
        this.PropertyChanged.Raise(this, new namespace.PropertyChangedEventArgs(propertyName));
    };
    namespace.INotifyPropertyChanged = Nullstone.FinishCreate(INotifyPropertyChanged);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var PropertyChangedEventArgs = Nullstone.Create("PropertyChangedEventArgs", EventArgs, 1);
    Nullstone.Property(PropertyChangedEventArgs, "PropertyName", {
        get: function () { return this._PropertyName; }
    });
    PropertyChangedEventArgs.Instance.Init = function (propertyName) {
        this._PropertyName = propertyName;
    };
    namespace.PropertyChangedEventArgs = Nullstone.FinishCreate(PropertyChangedEventArgs);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var _PropertyPathNode = Nullstone.Create("_PropertyPathNode");
    _PropertyPathNode.Instance.Init = function () {
        this._IsBroken = true;
        this.IsBrokenChanged = new MulticastEvent();
        this.ValueChanged = new MulticastEvent();
    };
    Nullstone.AutoProperties(_PropertyPathNode, [
        "DependencyProperty",
        "Next",
        "PropertyInfo",
        "Listener",
        "ValueType"
    ]);
    Nullstone.Property(_PropertyPathNode, "IsBroken", {
        get: function () { return this._IsBroken; }
    });
    Nullstone.Property(_PropertyPathNode, "Source", {
        get: function () { return this._Source; }
    });
    Nullstone.Property(_PropertyPathNode, "Value", {
        get: function () { return this._Value; }
    });
    _PropertyPathNode.Instance.OnSourceChanged = function (oldSource, newSource) { };
    _PropertyPathNode.Instance.OnSourcePropertyChanged = function (o, e) { };
    _PropertyPathNode.Instance.UpdateValue = function () {
        AbstractMethod("_PropertyPathNode.UpdateValue");
    };
    _PropertyPathNode.Instance.SetValue = function (value) {
        AbstractMethod("_PropertyPathNode.SetValue");
    };
    _PropertyPathNode.Instance.SetSource = function (value) {
        if (value == null || !Nullstone.Equals(value, this._Source)) {
            var oldSource = this._Source;
            var listener = this.Listener;
            if (listener) {
                listener.Detach();
                listener = null;
                this.Listener = listener;
            }
            this._Source = value;
            if (this._Source && Nullstone.DoesImplement(this._Source, namespace.INotifyPropertyChanged)) {
                listener = new namespace.NPCListener(this._Source, this, this.OnSourcePropertyChanged);
                this.Listener = listener;
            }
            this.OnSourceChanged(oldSource, this._Source);
            this.UpdateValue();
            if (this.Next)
                this.Next.SetSource(this._Value);
        }
    };
    _PropertyPathNode.Instance.UpdateValueAndIsBroken = function (newValue, isBroken) {
        var emitBrokenChanged = this._IsBroken !== isBroken;
        var emitValueChanged = !Nullstone.Equals(this.Value, newValue);
        this._IsBroken = isBroken;
        this._Value = newValue;
        if (emitValueChanged) {
            this.ValueChanged.Raise(this, new EventArgs());
        } else if (emitBrokenChanged) {
            this.IsBrokenChanged.Raise(this, new EventArgs());
        }
    };
    _PropertyPathNode.Instance._CheckIsBroken = function () {
        return !this.Source || (!this.PropertyInfo && !this.DependencyProperty);
    };
    namespace._PropertyPathNode = Nullstone.FinishCreate(_PropertyPathNode);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var _PropertyPathWalker = Nullstone.Create("_PropertyPathWalker", undefined, 4);
    _PropertyPathWalker.Instance.Init = function (path, bindDirectlyToSource, bindsToView, isDataContextBound) {
        if (bindDirectlyToSource == null)
            bindDirectlyToSource = true;
        if (bindsToView == null)
            bindsToView = false;
        if (isDataContextBound == null)
            isDataContextBound = false;
        this.IsBrokenChanged = new MulticastEvent();
        this.ValueChanged = new MulticastEvent();
        this.Path = path;
        this.IsDataContextBound = isDataContextBound;
        var lastCVNode;
        if (!path || path === ".") {
            lastCVNode = new namespace._CollectionViewNode(bindDirectlyToSource, bindsToView);
            this.Node = lastCVNode;
            this.FinalNode = lastCVNode;
        } else {
            var data = {
                typeName: undefined,
                propertyName: undefined,
                index: undefined
            };
            var type;
            var parser = new namespace._PropertyPathParser(path);
            while ((type = parser.Step(data)) !== namespace._PropertyNodeType.None) {
                var isViewProperty = false;
                var node = new namespace._CollectionViewNode(bindDirectlyToSource, isViewProperty);
                lastCVNode = node;
                switch (type) {
                    case namespace._PropertyNodeType.AttachedProperty:
                    case namespace._PropertyNodeType.Property:
                        node.Next = new namespace._StandardPropertyPathNode(data.typeName, data.propertyName);
                        break;
                    case namespace._PropertyNodeType.Indexed:
                        node.Next = new namespace._IndexedPropertyPathNode(data.index);
                        break;
                    default:
                        break;
                }
                if (this.FinalNode)
                    this.FinalNode.Next = node;
                else
                    this.Node = node;
                this.FinalNode = node.Next;
            }
        }
        lastCVNode.BindToView = lastCVNode.BindToView || bindsToView;
        this.FinalNode.IsBrokenChanged.Subscribe(
            function (s, a) {
                this.ValueInternal = Nullstone.As(s, namespace._PropertyPathNode).Value;
                this.IsBrokenChanged.Raise(this, new EventArgs());
            }, this);
        this.FinalNode.ValueChanged.Subscribe(
            function (s, a) {
                this.ValueInternal = Nullstone.As(s, namespace._PropertyPathNode).Value;
                this.ValueChanged.Raise(this, new EventArgs());
            }, this);
    };
    Nullstone.AutoProperties(_PropertyPathWalker, [
        "Source",
        "Path",
        "Node",
        "FinalNode",
        "ValueInternal",
        "IsDataContextBound"
    ]);
    Nullstone.Property(_PropertyPathWalker, "Value", {
        get: function () { return this._Value; }
    });
    Nullstone.Property(_PropertyPathWalker, "IsPathBroken", {
        get: function () {
            var path = this.Path;
            if (this.IsDataContextBound && (!path || path.length < 1))
                return false;
            var node = this.Node;
            while (node) {
                if (node.IsBroken)
                    return true;
                node = node.Next;
            }
            return false;
        }
    });
    _PropertyPathWalker.Instance.GetValue = function (item) {
        this.Update(item);
        var o = this.FinalNode.GetValue();
        this.Update(null);
        return o;
    };
    _PropertyPathWalker.Instance.Update = function (source) {
        this.Source = source;
        this.Node.SetSource(source);
    };
    namespace._PropertyPathWalker = Nullstone.FinishCreate(_PropertyPathWalker);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var _StandardPropertyPathNode = Nullstone.Create("_StandardPropertyPathNode", namespace._PropertyPathNode, 2);
    _StandardPropertyPathNode.Instance.Init = function (typeName, propertyName) {
        this.Init$_PropertyPathNode();
        this._STypeName = typeName;
        this._PropertyName = propertyName;
    };
    Nullstone.Property(_StandardPropertyPathNode, "PropertyName", {
        get: function () { return this._PropertyName; }
    });
    Nullstone.Property(_StandardPropertyPathNode, "TypeName", {
        get: function () { return this._STypeName; }
    });
    _StandardPropertyPathNode.Instance.SetValue = function (value) {
        if (this.DependencyProperty)
            this.Source.$SetValue(this.DependencyProperty, value);
        else if (this.PropertyInfo)
            this.PropertyInfo.SetValue(this.Source, value, null);
    };
    _StandardPropertyPathNode.Instance.UpdateValue = function () {
        if (this.DependencyProperty) {
            this.ValueType = this.DependencyProperty.GetTargetType();
            this.UpdateValueAndIsBroken(this.Source.$GetValue(this.DependencyProperty), this._CheckIsBroken());
        } else if (this.PropertyInfo) {
            this.ValueType = null;
            try {
                this.UpdateValueAndIsBroken(this.PropertyInfo.GetValue(this.Source, null), this._CheckIsBroken());
            } catch (err) {
                this.UpdateValueAndIsBroken(null, this._CheckIsBroken());
            }
        } else {
            this.ValueType = null;
            this.UpdateValueAndIsBroken(null, this._CheckIsBroken());
        }
    };
    _StandardPropertyPathNode.Instance.OnSourceChanged = function (oldSource, newSource) {
        this.OnSourceChanged$_PropertyPathNode(oldSource, newSource);
        var oldDO = Nullstone.As(oldSource, Fayde.DependencyObject);
        var newDO = Nullstone.As(newSource, Fayde.DependencyObject);
        var listener = this.Listener;
        if (listener) {
            listener.Detach();
            this.Listener = listener;
        }
        this.DependencyProperty = null;
        this.PropertyInfo = null;
        if (!this.Source)
            return;
        if (newDO != null) {
            propd = DependencyProperty.GetDependencyProperty(this.Source.constructor, this.PropertyName);
            if (propd) {
                this.DependencyProperty = propd;
                listener = new namespace.PropertyChangedListener(newDO, propd, this, this.OnPropertyChanged);
                this.Listener = listener;
            }
        }
        if (!this.DependencyProperty || !this.DependencyProperty._IsAttached) {
            this.PropertyInfo = PropertyInfo.Find(this.Source, this.PropertyName);
        }
    };
    _StandardPropertyPathNode.Instance.OnPropertyChanged = function (s, e) {
        try {
            this.UpdateValue();
            if (this.Next)
                this.Next.SetSource(this.Value);
        } catch (err) {
        }
    };
    _StandardPropertyPathNode.Instance.OnSourcePropertyChanged = function (o, e) {
        if (e.PropertyName === this.PropertyName && this.PropertyInfo) {
            this.UpdateValue();
            var next = this.Next;
            if (next)
                next.SetSource(this.Value);
        }
    };
    namespace._StandardPropertyPathNode = Nullstone.FinishCreate(_StandardPropertyPathNode);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    namespace._Dirty = {
        Transform: 1 << 0,
        LocalTransform: 1 << 1,
        LocalProjection: 1 << 2,
        Clip: 1 << 3,
        LocalClip: 1 << 4,
        RenderVisibility: 1 << 5,
        HitTestVisibility: 1 << 6,
        Measure: 1 << 7,
        Arrange: 1 << 8,
        ChildrenZIndices: 1 << 9,
        Bounds: 1 << 20,
        NewBounds: 1 << 21,
        Invalidate: 1 << 22,
        InUpDirtyList: 1 << 30,
        InDownDirtyList: 1 << 31
    };
    _Dirty.DownDirtyState =
        _Dirty.Transform |
        _Dirty.LocalTransform |
        _Dirty.LocalProjection |
        _Dirty.Clip |
        _Dirty.LocalClip |
        _Dirty.RenderVisibility |
        _Dirty.HitTestVisibility |
        _Dirty.ChildrenZIndices;
    _Dirty.UpDirtyState = _Dirty.Bounds | _Dirty.Invalidate;
    _Dirty.State = _Dirty.DownDirtyState | _Dirty.UpDirtyState;
    _Dirty.__DebugToString = function (dirty) {
        switch (dirty) {
            case _Dirty.Measure:
                return "[Measure]";
            case _Dirty.Arrange:
                return "[Arrange]";
            case _Dirty.Bounds:
                return "[Bounds]";
            case _Dirty.NewBounds:
                return "[NewBounds]";
            case _Dirty.ChildrenZIndices:
                return "[ChildrenZIndices]";
            case _Dirty.Clip:
                return "[Clip]";
            case _Dirty.Invalidate:
                return "[Invalidate]";
            case _Dirty.Transform:
                return "[Transform]";
            case _Dirty.LocalTransform:
                return "[LocalTransform]";
            case _Dirty.LocalProjection:
                return "[LocalProjection]";
            case _Dirty.RenderVisibility:
                return "[RenderVisibility]";
            case _Dirty.HitTestVisibility:
                return "[HitTestVisibility]";
        }
        return dirty;
    };
    var _DirtyList = Nullstone.Create("_DirtyList", LinkedList, 1);
    _DirtyList.Instance.Init = function (type) {
        this.Init$LinkedList();
        this._Type = type;
    };
    _DirtyList.Instance.__DebugToString = function () {
        var s = "";
        var node = this.Head;
        while (node) {
            s += "[" + node.UIElement.__DebugToString() + "]";
            node = node.Next;
        }
        return s;
    };
    namespace._DirtyList = Nullstone.FinishCreate(_DirtyList);
})(window);

(function (namespace) {
    var FocusChangedNode = Nullstone.Create("FocusChangedNode", LinkedListNode, 2);
    FocusChangedNode.Instance.Init = function (lostFocus, gotFocus) {
        this.Init$LinkedListNode();
        this.LostFocus = lostFocus;
        this.GotFocus = gotFocus;
    };
    Nullstone.FinishCreate(FocusChangedNode);
    var Surface = Nullstone.Create("Surface", undefined, 1);
    Surface.Instance.Init = function (app) {
        this._App = app;
        this._InputList = new LinkedList();
        this._FocusChangedEvents = new LinkedList();
        this._FirstUserInitiatedEvent = false;
        this._UserInitiatedEvent = false;
        this._Cursor = CursorType.Default;
        if (Surface._Invalidations == null)
            Surface._Invalidations = [];
        this.LayoutUpdated = new MulticastEvent();
        this._KeyInterop = KeyInterop.CreateInterop(this);
        this.InitHtml();
    };
    Surface.Instance.Register = function (canvas, width, widthType, height, heightType) {
        Surface._TestCanvas = document.createElement('canvas');
        this._Layers = [];
        this._DownDirty = new _DirtyList("Down");
        this._UpDirty = new _DirtyList("Up");
        this._Canvas = canvas;
        if (!width) {
            width = 100;
            widthType = "Percentage";
        } else if (!widthType) {
            widthType = "Percentage";
        }
        if (!height) {
            height = 100;
            heightType = "Percentage";
        } else if (!heightType) {
            heightType = "Percentage";
        }
        this._InitializeCanvas(this._Canvas, width, widthType, height, heightType);
        this._Ctx = this._Canvas.getContext('2d');
        this._CalculateOffset();
        this.RegisterEvents();
    };
    Surface.Instance.RegisterEvents = function () {
        var surface = this;
        var canvas = this.GetCanvas();
        canvas.addEventListener("mousedown", function (e) { surface._HandleButtonPress(window.event ? window.event : e); });
        canvas.addEventListener("mouseup", function (e) { surface._HandleButtonRelease(window.event ? window.event : e); });
        canvas.addEventListener("mouseout", function (e) { surface._HandleOut(window.event ? window.event : e); });
        canvas.addEventListener("mousemove", function (e) { surface._HandleMove(window.event ? window.event : e); });
        canvas.addEventListener("mousewheel", function (e) { surface._HandleWheel(window.event ? window.event : e); });
        canvas.addEventListener("DOMMouseScroll", function (e) { surface._HandleWheel(window.event ? window.event : e); });
        this._KeyInterop.RegisterEvents();
    };
    Surface.Instance._Attach = function (element) {
        if (this._TopLevel) {
            this._DetachLayer(this._TopLevel);
        }
        if (!element) {
            this._Invalidate();
            return;
        }
        if (!(element instanceof Fayde.UIElement)) {
            _Console.WriteLine("Unsupported top level element.");
            return;
        }
        if (!Fayde.NameScope.GetNameScope(element)) {
            Fayde.NameScope.SetNameScope(element, new NameScope());
        }
        this._TopLevel = element;
        this._AttachLayer(this._TopLevel);
    };
    Surface.Instance._AttachLayer = function (layer) {
        if (Nullstone.RefEquals(layer, this._TopLevel))
            this._Layers.splice(0, 0, layer);
        else
            this._Layers.push(layer);
        DirtyDebug("AttachLayer");
        layer._FullInvalidate(true);
        layer._InvalidateMeasure();
        layer._SetIsAttached(true);
        layer._SetIsLoaded(true);
        this.FinishAttachLayer(layer);
        this._App._NotifyDebugLayer(true, layer);
    };
    Surface.Instance._DetachLayer = function (layer) {
        if (!this._InputList.IsEmpty() && Nullstone.RefEquals(this._InputList.Tail.UIElement, layer)) {
            this._InputList = new LinkedList();
        }
        if (this._FocusedElement != null) {
            var inThisLayer = false;
            var f = this._FocusedElement;
            while (f != null) {
                if (Nullstone.RefEquals(f, layer)) {
                    inThisLayer = true;
                    break;
                }
                f = f.GetVisualParent();
            }
            if (inThisLayer)
                this._FocusElement();
        }
        Array.removeNullstone(this._Layers, layer);
        layer._SetIsLoaded(false);
        layer._SetIsAttached(false);
        this._Invalidate(layer._GetSubtreeBounds());
        this._App._NotifyDebugLayer(false, layer);
    };
    Surface.Instance._InitializeCanvas = function (canvas, width, widthType, height, heightType) {
        var resizesWithWindow = false;
        if (widthType === "Percentage") {
            resizesWithWindow = true;
            this._PercentageWidth = width;
        } else {
            canvas.width = width;
        }
        if (heightType === "Percentage") {
            resizesWithWindow = true;
            this._PercentageHeight = height;
        } else {
            canvas.height = height;
        }
        if (resizesWithWindow) {
            this._ResizeCanvas();
            var surface = this;
            window.onresize = function (e) { surface._HandleResize(window.event ? window.event : e); };
        }
    };
    Surface.Instance._CalculateOffset = function () {
        var left = 0;
        var top = 0;
        var cur = this._Canvas;
        if (cur.offsetParent) {
            do {
                left += cur.offsetLeft;
                top += cur.offsetTop;
            } while (cur = cur.offsetParent);
        }
        this._CanvasOffset = { left: left, top: top };
    };
    Surface.Instance.GetCanvas = function () { return this._Canvas; };
    Surface.Instance.GetExtents = function () {
        if (!this._Extents)
            this._Extents = new Size(this.GetWidth(), this.GetHeight());
        return this._Extents;
    };
    Surface.Instance._InvalidateExtents = function () {
        delete this._Extents;
    };
    Surface.Instance.GetWidth = function () {
        return this._Canvas.offsetWidth;
    };
    Surface.Instance.GetHeight = function () {
        return this._Canvas.offsetHeight;
    };
    Nullstone.Property(Surface, "ActualWidth", {
        get: function () { return this._Canvas.offsetWidth; }
    });
    Nullstone.Property(Surface, "ActualHeight", {
        get: function () { return this._Canvas.offsetHeight; }
    });
    Nullstone.Property(Surface, "Root", {
        get: function () { return this._TopLevel; }
    });
    var staticRender = function () {
        var cur;
        var invalidations = Surface._Invalidations;
        while (cur = invalidations.pop()) {
            var rect2 = cur._InvalidatedRect;
            cur._InvalidatedRect = null;
            cur._IsRenderQueued = false;
            RenderDebug(" --> " + rect2.toString());
            cur.Render(rect2);
        }
    };
    Surface.Instance._Invalidate = function (rect) { };
    if (Fayde.IsCanvasEnabled) {
        Surface.Instance._Invalidate = function (rect) {
            RenderDebug("Invalidation: " + rect.toString());
            if (!rect) {
                var extents = this.GetExtents();
                rect = new Rect(0, 0, extents.Width, extents.Height);
            }
            var invalidated = this._InvalidatedRect;
            if (!invalidated)
                invalidated = rect;
            else
                invalidated = invalidated.Union(rect);
            this._InvalidatedRect = invalidated;
            if (this._IsRenderQueued)
                return;
            this._IsRenderQueued = true;
            Surface._Invalidations.push(this);
            setTimeout(staticRender, 1);
        };
        }
    Surface.Instance.Render = function (region) {
        var startRenderTime;
        var isRenderPassTimed;
        if (isRenderPassTimed = (this._App._DebugFunc[4] != null))
            startRenderTime = new Date().getTime();
        var layers = this._Layers;
        var layerCount = layers ? layers.length : 0;
        RenderDebug.Count = 0;
        var ctx = new Fayde._RenderContext(this);
        ctx.Clear(region);
        ctx.CanvasContext.save();
        ctx.Clip(region);
        for (var i = 0; i < layerCount; i++) {
            layers[i]._DoRender(ctx, region);
        }
        ctx.CanvasContext.restore();
        RenderDebug("UIElement Count: " + RenderDebug.Count);
        if (isRenderPassTimed)
            this._App._NotifyDebugRenderPass(new Date().getTime() - startRenderTime);
    };
    Surface.Instance.ProcessDirtyElements = function () {
        var error = new BError();
        var dirty = this._UpdateLayout(error);
        if (error.IsErrored())
            throw error.CreateException();
        if (!dirty)
            return false;
        this.LayoutUpdated.Raise(this, new EventArgs());
        return true;
    };
    Surface.Instance._UpdateLayout = function (error) {
        var UIElementFlags = Fayde.UIElementFlags;
        var startTime;
        var layers = this._Layers;
        if (!layers)
            return false;
        var pass = new Fayde.LayoutPass();
        var dirty = false;
        pass.Updated = true;
        var updatedLayout = false;
        while (pass.Count < Fayde.LayoutPass.MaxCount && pass.Updated) {
            pass.Updated = false;
            for (var i = 0; i < layers.length; i++) {
                var layer = layers[i];
                var element = layer;
                if (!element._HasFlag(UIElementFlags.DirtyMeasureHint) && !element._HasFlag(UIElementFlags.DirtyArrangeHint))
                    continue;
                var last = Fayde.LayoutInformation.GetPreviousConstraint(element);
                var available = new Size(this.GetWidth(), this.GetHeight());
                if (element.IsContainer() && (!last || (!Size.Equals(last, available)))) {
                    element._InvalidateMeasure();
                    Fayde.LayoutInformation.SetPreviousConstraint(element, available);
                }
                element._UpdateLayer(pass, error);
            }
            dirty = dirty || !this._DownDirty.IsEmpty() || !this._UpDirty.IsEmpty();
            this._ProcessDownDirtyElements();
            this._ProcessUpDirtyElements();
            if (pass.Updated || dirty)
                updatedLayout = true;
        }
        if (pass.Count >= Fayde.LayoutPass.MaxCount) {
            if (error)
                error.SetErrored(BError.Exception, "UpdateLayout has entered infinite loop and has been aborted.");
        }
        return updatedLayout;
    };
    Surface.Instance._ProcessDownDirtyElements = function () {
        var node;
        var dirtyEnum = _Dirty;
        while (node = this._DownDirty.Head) {
            var uie = node.UIElement;
            var visualParent = uie.GetVisualParent();
            if (visualParent && visualParent._DownDirtyNode != null) {
                this._DownDirty.Remove(node);
                this._DownDirty.InsertAfter(node, visualParent._DownDirtyNode);
                continue;
            }
            /*
            DirtyDebug.Level++;
            DirtyDebug("[" + uie.__DebugToString() + "]" + uie.__DebugDownDirtyFlags());
            */
            if (uie._DirtyFlags & dirtyEnum.RenderVisibility) {
                uie._DirtyFlags &= ~dirtyEnum.RenderVisibility;
                var ovisible = uie._GetRenderVisible();
                uie._UpdateBounds();
                if (visualParent)
                    visualParent._UpdateBounds();
                uie._ComputeTotalRenderVisibility();
                if (!uie._GetRenderVisible())
                    uie._CacheInvalidateHint();
                if (ovisible !== uie._GetRenderVisible())
                    this._AddDirtyElement(uie, dirtyEnum.NewBounds);
                this._PropagateDirtyFlagToChildren(uie, dirtyEnum.RenderVisibility);
            }
            if (uie._DirtyFlags & dirtyEnum.HitTestVisibility) {
                uie._DirtyFlags &= ~dirtyEnum.HitTestVisibility;
                uie._ComputeTotalHitTestVisibility();
                this._PropagateDirtyFlagToChildren(uie, dirtyEnum.HitTestVisibility);
            }
            if (uie._DirtyFlags & dirtyEnum.LocalTransform) {
                uie._DirtyFlags &= ~dirtyEnum.LocalTransform;
                uie._DirtyFlags |= dirtyEnum.Transform;
                uie._ComputeLocalTransform();
            }
            if (uie._DirtyFlags & dirtyEnum.LocalProjection) {
                uie._DirtyFlags &= ~dirtyEnum.LocalProjection;
                uie._DirtyFlags |= dirtyEnum.Transform;
                uie._ComputeLocalProjection();
            }
            if (uie._DirtyFlags & dirtyEnum.Transform) {
                uie._DirtyFlags &= ~dirtyEnum.Transform;
                uie._ComputeTransform();
                if (visualParent)
                    visualParent._UpdateBounds();
                this._PropagateDirtyFlagToChildren(uie, dirtyEnum.Transform);
            }
            if (uie._DirtyFlags & dirtyEnum.LocalClip) {
                uie._DirtyFlags &= ~dirtyEnum.LocalClip;
                uie._DirtyFlags |= dirtyEnum.Clip;
            }
            if (uie._DirtyFlags & dirtyEnum.Clip) {
                uie._DirtyFlags &= ~dirtyEnum.Clip;
                this._PropagateDirtyFlagToChildren(uie, dirtyEnum.Clip);
            }
            if (uie._DirtyFlags & dirtyEnum.ChildrenZIndices) {
                uie._DirtyFlags &= ~dirtyEnum.ChildrenZIndices;
                if (!(uie instanceof Fayde.Controls.Panel)) {
                    Warn("_Dirty.ChildrenZIndices only applies to Panel subclasses");
                } else {
                    uie.Children.ResortByZIndex();
                }
            }
            if (!(uie._DirtyFlags & dirtyEnum.DownDirtyState) && uie._DownDirtyNode != null) {
                this._DownDirty.Remove(uie._DownDirtyNode);
                delete uie._DownDirtyNode;
            }
        }
        if (!this._DownDirty.IsEmpty()) {
            Warn("Finished DownDirty pass, not empty.");
        }
    };
    Surface.Instance._ProcessUpDirtyElements = function () {
        var node;
        var dirtyEnum = _Dirty;
        while (node = this._UpDirty.Head) {
            var uie = node.UIElement;
            var visualParent = uie.GetVisualParent();
            var childNode = this._GetChildNodeInUpList(uie);
            if (childNode) {
                this._UpDirty.Remove(node);
                this._UpDirty.InsertAfter(node, childNode);
                continue;
            }
            if (uie._DirtyFlags & dirtyEnum.Bounds) {
                uie._DirtyFlags &= ~dirtyEnum.Bounds;
                var oextents = uie._GetSubtreeExtents();
                var oglobalbounds = uie._GetGlobalBounds();
                var osubtreebounds = uie._GetSubtreeBounds();
                uie._ComputeBounds();
                if (!Rect.Equals(oglobalbounds, uie._GetGlobalBounds())) {
                    if (visualParent) {
                        visualParent._UpdateBounds();
                        visualParent._Invalidate(osubtreebounds);
                        visualParent._Invalidate(uie._GetSubtreeBounds());
                    }
                }
                if (!Rect.Equals(oextents, uie._GetSubtreeExtents())) {
                    uie._Invalidate(uie._GetSubtreeBounds());
                }
                if (uie._ForceInvalidateOfNewBounds) {
                    uie._ForceInvalidateOfNewBounds = false;
                    uie._InvalidateSubtreePaint();
                }
            }
            if (uie._DirtyFlags & dirtyEnum.NewBounds) {
                if (visualParent)
                    visualParent._Invalidate(uie._GetSubtreeBounds());
                else if (this._IsTopLevel(uie))
                    uie._InvalidateSubtreePaint();
                uie._DirtyFlags &= ~dirtyEnum.NewBounds;
            }
            if (uie._DirtyFlags & dirtyEnum.Invalidate) {
                uie._DirtyFlags &= ~dirtyEnum.Invalidate;
                var dirty = uie._DirtyRegion;
                if (visualParent) {
                    visualParent._Invalidate(dirty);
                } else {
                    if (uie._IsAttached) {
                        this._Invalidate(dirty);
                        /*
                        OPTIMIZATION NOT IMPLEMENTED
                        var count = dirty.GetRectangleCount();
                        for (var i = count - 1; i >= 0; i--) {
                        this._Invalidate(dirty.GetRectangle(i));
                        }
                        */
                    }
                }
                uie._DirtyRegion = new Rect();
            }
            if (!(uie._DirtyFlags & dirtyEnum.UpDirtyState) && uie._UpDirtyNode != null) {
                this._UpDirty.Remove(uie._UpDirtyNode);
                delete uie._UpDirtyNode;
            }
        }
        if (!this._UpDirty.IsEmpty()) {
            Warn("Finished UpDirty pass, not empty.");
        }
    };
    Surface.Instance._PropagateDirtyFlagToChildren = function (element, dirt) {
        var walker = Fayde._VisualTreeWalker.Logical(element);
        var child;
        while (child = walker.Step()) {
            this._AddDirtyElement(child, dirt);
        }
    };
    Surface.Instance._AddDirtyElement = function (element, dirt) {
        if (element.GetVisualParent() == null && !this._IsTopLevel(element))
            return;
        /*
        DirtyDebug.Level++;
        if (dirt & _Dirty.DownDirtyState)
            DirtyDebug("AddDirtyElement(Down): [" + element.__DebugToString() + "]" + element.__DebugDownDirtyFlags() + " --> " + _Dirty.__DebugToString(dirt));
        if (dirt & _Dirty.UpDirtyState)
            DirtyDebug("AddDirtyElement(Up): [" + element.__DebugToString() + "]" + element.__DebugUpDirtyFlags() + " --> " + _Dirty.__DebugToString(dirt));
        DirtyDebug.Level--;
        */
        element._DirtyFlags |= dirt;
        if (dirt & _Dirty.DownDirtyState && element._DownDirtyNode == null)
            element._DownDirtyNode = this._DownDirty.Append({ UIElement: element });
        if (dirt & _Dirty.UpDirtyState && element._UpDirtyNode == null)
            element._UpDirtyNode = this._UpDirty.Append({ UIElement: element });
    };
    Surface.Instance._RemoveDirtyElement = function (uie) {
        if (uie._UpDirtyNode != null) {
            this._UpDirty.Remove(uie._UpDirtyNode);
            delete uie._UpDirtyNode;
        }
        if (uie._DownDirtyNode != null) {
            this._DownDirty.Remove(uie._DownDirtyNode);
            delete uie._DownDirtyNode;
        }
    };
    Surface.Instance._IsTopLevel = function (top) {
        if (!top || !this._Layers)
            return false;
        return Array.containsNullstone(this._Layers, top);
    };
    Surface.Instance._GetChildNodeInUpList = function (uie) {
        var subtree = uie._SubtreeObject;
        if (!subtree)
            return;
        if (subtree instanceof Fayde.UIElement)
            return subtree._UpDirtyNode;
        if (subtree instanceof Fayde.UIElementCollection) {
            var children = subtree._ht;
            var len = children.length;
            for (var i = 0; i < len; i++) {
                var child = children[i];
                if (child._UpDirtyNode != null)
                    return child._UpDirtyNode;
            }
        }
    };
    Surface.Instance._UpdateCursorFromInputList = function () {
        var newCursor = CursorType.Default;
        for (var node = this._InputList.Head; node; node = node.Next) {
            newCursor = node.UIElement.Cursor;
            if (newCursor !== CursorType.Default)
                break;
        }
        this._SetCursor(newCursor);
    };
    Surface.Instance._SetCursor = function (cursor) {
        this._Cursor = cursor;
        this._Canvas.style.cursor = cursor;
    };
    Surface.Instance._HandleButtonRelease = function (evt) {
        Fayde.Input.Keyboard.RefreshModifiers(evt);
        var button = evt.which ? evt.which : evt.button;
        var pos = this._GetMousePosition(evt);
        this._SetUserInitiatedEvent(true);
        this._HandleMouseEvent("up", button, pos);
        this._UpdateCursorFromInputList();
        this._SetUserInitiatedEvent(false);
        if (this._Captured)
            this._PerformReleaseCapture();
    };
    Surface.Instance._HandleButtonPress = function (evt) {
        Fayde.Input.Keyboard.RefreshModifiers(evt);
        var button = evt.which ? evt.which : evt.button;
        var pos = this._GetMousePosition(evt);
        this._SetUserInitiatedEvent(true);
        this._HandleMouseEvent("down", button, pos);
        this._UpdateCursorFromInputList();
        this._SetUserInitiatedEvent(false);
    };
    Surface.Instance._HandleWheel = function (evt) {
        Fayde.Input.Keyboard.RefreshModifiers(evt);
        var delta = 0;
        if (evt.wheelDelta)
            delta = evt.wheelDelta / 120;
        else if (evt.detail)
            delta = -evt.detail / 3;
        if (evt.preventDefault)
            evt.preventDefault();
        evt.returnValue = false;
        this._HandleMouseEvent("wheel", null, this._GetMousePosition(evt), delta);
        this._UpdateCursorFromInputList();
    };
    Surface.Instance._HandleMove = function (evt) {
        Fayde.Input.Keyboard.RefreshModifiers(evt);
        var pos = this._GetMousePosition(evt);
        this._HandleMouseEvent("move", null, pos);
        this._UpdateCursorFromInputList();
    };
    Surface.Instance._HandleOut = function (evt) {
        Fayde.Input.Keyboard.RefreshModifiers(evt);
        var pos = this._GetMousePosition(evt);
        this._HandleMouseEvent("out", null, pos);
    };
    Surface.Instance._HandleMouseEvent = function (type, button, pos, delta, emitLeave, emitEnter) {
        var app = this._App;
        app._NotifyDebugCoordinates(pos);
        this._CurrentPos = pos;
        if (this._EmittingMouseEvent)
            return false;
        if (this._TopLevel == null)
            return false;
        this._EmittingMouseEvent = true;
        if (this._Captured) {
            this._EmitMouseList(type, button, pos, delta, this._InputList);
        } else {
            this.ProcessDirtyElements();
            var ctx = new Fayde._RenderContext(this);
            var newInputList = new LinkedList();
            var layers = this._Layers;
            var layerCount = layers.length;
            var startTime = new Date().getTime();
            for (var i = layerCount - 1; i >= 0 && newInputList.IsEmpty() ; i--) {
                var layer = layers[i];
                layer._HitTestPoint(ctx, pos, newInputList);
            }
            var indices = {};
            this._FindFirstCommonElement(this._InputList, newInputList, indices);
            if (emitLeave === undefined || emitLeave === true)
                this._EmitMouseList("leave", button, pos, delta, this._InputList, indices.Index1);
            if (emitEnter === undefined || emitEnter === true)
                this._EmitMouseList("enter", button, pos, delta, newInputList, indices.Index2);
            if (type !== "noop")
                this._EmitMouseList(type, button, pos, delta, newInputList);
            app._NotifyDebugHitTest(newInputList, new Date().getTime() - startTime);
            this._InputList = newInputList;
        }
        if (this._PendingCapture)
            this._PerformCapture(this._PendingCapture);
        if (this._PendingReleaseCapture || (this._Captured && !this._Captured.CanCaptureMouse()))
            this._PerformReleaseCapture();
        this._EmittingMouseEvent = false;
    };
    Surface.Instance._GetMousePosition = function (evt) {
        return new Point(
            evt.clientX + window.pageXOffset + this._CanvasOffset.left,
            evt.clientY + window.pageYOffset + this._CanvasOffset.top);
    };
    Surface.Instance._FindFirstCommonElement = function (list1, list2, outObj) {
        var ui1 = list1.Tail;
        var i1 = list1._Count - 1;
        var ui2 = list2.Tail;
        var i2 = list2._Count - 1;
        outObj.Index1 = -1;
        outObj.Index2 = -1;
        while (ui1 != null && ui2 != null) {
            if (Nullstone.RefEquals(ui1.UIElement, ui2.UIElement)) {
                outObj.Index1 = i1;
                outObj.Index2 = i2;
            } else {
                return;
            }
            ui1 = ui1.Previous;
            ui2 = ui2.Previous;
            i1--;
            i2--;
        }
    };
    Surface.Instance._EmitMouseList = function (type, button, pos, delta, list, endIndex) {
        var handled = false;
        if (endIndex === 0)
            return handled;
        if (!endIndex || endIndex === -1)
            endIndex = list._Count;
        var i = 0;
        var args = this._CreateEventArgs(type, pos, delta);
        var node = list.Head;
        if (node && args instanceof Fayde.RoutedEventArgs)
            args.Source = node.UIElement;
        for (node = list.Head; node && i < endIndex; node = node.Next, i++) {
            if (type === "leave")
                args.Source = node.UIElement;
            if (node.UIElement._EmitEvent(type, button, args))
                handled = true;
            if (type === "leave") //MouseLeave gets new event args on each emit
                args = this._CreateEventArgs(type, pos, delta);
        }
        return handled;
    };
    Surface.Instance.SetMouseCapture = function (uie) {
        if (this._Captured || this._PendingCapture)
            return Nullstone.RefEquals(uie, this._Captured) || Nullstone.RefEquals(uie, this._PendingCapture);
        if (!this._EmittingMouseEvent)
            return false;
        this._PendingCapture = uie;
        return true;
    };
    Surface.Instance.ReleaseMouseCapture = function (uie) {
        if (!Nullstone.RefEquals(uie, this._Captured) && !Nullstone.RefEquals(uie, this._PendingCapture))
            return;
        if (this._EmittingMouseEvent)
            this._PendingReleaseCapture = true;
        else
            this._PerformReleaseCapture();
    };
    Surface.Instance._PerformCapture = function (uie) {
        this._Captured = uie;
        var newInputList = new LinkedList();
        while (uie != null) {
            newInputList.Append(new Fayde.UIElementNode(uie));
            uie = uie.GetVisualParent();
        }
        this._InputList = newInputList;
        this._PendingCapture = null;
    };
    Surface.Instance._PerformReleaseCapture = function () {
        var oldCaptured = this._Captured;
        this._Captured = null;
        this._PendingReleaseCapture = false;
        oldCaptured._EmitLostMouseCapture(this._CurrentPos);
        this._HandleMouseEvent("noop", null, this._CurrentPos, undefined, false, true);
    };
    Surface.Instance._HandleKeyDown = function (args) {
        this._SetUserInitiatedEvent(true);
        Fayde.Input.Keyboard.RefreshModifiers(args);
        var handled = false;
        if (this._FocusedElement != null) {
            var focusToRoot = Surface._ElementPathToRoot(this._FocusedElement);
            handled = this._EmitKeyDown(focusToRoot, args);
        }
        if (!handled && args.Key === Key.Tab) {
            if (this._FocusedElement != null)
                Fayde.TabNavigationWalker.Focus(this._FocusedElement, args.Shift);
            else
                this._EnsureElementFocused();
        }
        this._SetUserInitiatedEvent(false);
        return handled;
    };
    Surface.Instance._EmitKeyDown = function (list, args, endIndex) {
        if (endIndex === 0)
            return;
        if (!endIndex || endIndex === -1)
            endIndex = list._Count;
        var i = 0;
        for (var node = list.Head; node && i < endIndex; node = node.Next, i++) {
            node.UIElement._EmitKeyDown(args);
        }
        return args.Handled;
    };
    var resizeTimeout;
    Surface.Instance._HandleResize = function (evt) {
        var surface = this;
        if (resizeTimeout)
            clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(function () { surface._HandleResizeTimeout(evt); }, 50);
    };
    Surface.Instance._HandleResizeTimeout = function (evt) {
        this._InvalidateExtents();
        this._ResizeCanvas();
        var layers = this._Layers;
        var layersCount = layers.length;
        var layer;
        for (var i = 0; i < layersCount; i++) {
            layer = layers[i];
            layer._InvalidateMeasure();
        }
        resizeTimeout = null;
    };
    Surface.Instance._ResizeCanvas = function () {
        var width = this._PercentageWidth;
        var height = this._PercentageHeight;
        if (width != null)
            this._Canvas.width = window.innerWidth * width / 100.0;
        if (height != null)
            this._Canvas.height = window.innerHeight * height / 100.0;
    };
    Surface.Instance._FocusElement = function (uie) {
        if (uie)
            FocusDebug("Surface._FocusElement (" + uie.__DebugToString() + ")");
        if (Nullstone.RefEquals(uie, this._FocusedElement))
            return true;
        if (this._FocusedElement != null)
            this._FocusChangedEvents.Append(new FocusChangedNode(Surface._ElementPathToRoot(this._FocusedElement), null));
        this._FocusedElement = uie;
        if (uie)
            this._FocusChangedEvents.Append(new FocusChangedNode(null, Surface._ElementPathToRoot(uie)));
        if (this._FirstUserInitiatedEvent)
            this._EmitFocusChangeEventsAsync();
        return true;
    };
    Surface.Instance._RemoveFocus = function (uie) {
        if (Nullstone.RefEquals(this._FocusedElement, uie))
            this._FocusElement(null);
    };
    Surface.Instance._EnsureElementFocused = function () {
        if (!this._FocusedElement) {
            var last = this._Layers.length - 1;
            for (var i = last; i >= 0; i--) {
                if (Fayde.TabNavigationWalker.Focus(layers.GetValueAt(i)))
                    break;
            }
            if (!this._FocusedElement && last !== -1)
                this._FocusElement(layers.GetValueAt(last));
        }
        if (this._FirstUserInitiatedEvent)
            this._EmitFocusChangeEventsAsync();
    };
    Surface.Instance._EmitFocusChangeEventsAsync = function () {
        var surface = this;
        window.setTimeout(function () { surface._EmitFocusChangeEvents(); }, 1);
    };
    Surface.Instance._EmitFocusChangeEvents = function () {
        var node;
        while (node = this._FocusChangedEvents.Head) {
            this._FocusChangedEvents.Remove(node);
            this._EmitFocusList("lost", node.LostFocus);
            this._EmitFocusList("got", node.GotFocus);
        }
    };
    Surface.Instance._EmitFocusList = function (type, list) {
        if (list == null)
            return;
        for (var node = list.Head; node; node = node.Next) {
            node.UIElement._EmitFocusChange(type);
        }
    };
    Surface.Instance._CreateEventArgs = function (type, pos, delta) {
        if (type === "up") {
            return new Fayde.Input.MouseButtonEventArgs(pos);
        } else if (type === "down") {
            return new Fayde.Input.MouseButtonEventArgs(pos);
        } else if (type === "leave") {
            return new Fayde.Input.MouseEventArgs(pos);
        } else if (type === "enter") {
            return new Fayde.Input.MouseEventArgs(pos);
        } else if (type === "move") {
            return new Fayde.Input.MouseEventArgs(pos);
        } else if (type === "wheel") {
            return new Fayde.Input.MouseWheelEventArgs(pos, delta);
        }
    };
    Surface.Instance._SetUserInitiatedEvent = function (val) {
        this._EmitFocusChangeEvents();
        this._FirstUserInitiatedEvent = this._FirstUserInitiatedEvent || val;
        this._UserInitiatedEvent = val;
    };
    if (!Fayde.IsCanvasEnabled) {
        Surface.Instance.InitHtml = function () {
            if (Surface._SizingAdjustments == null)
                Surface._SizingAdjustments = [];
            var body = document.body;
            this._RootHtmlEl = body;
        };
        Surface.Instance.ProcessHtmlChanges = function () {
            Fayde.DependencyObject.ProcessHtmlChanges();
        };
        Surface.Instance.ProcessSizingAdjustments = function () {
            for (var key in Surface._SizingAdjustments) {
                var el = Surface._SizingAdjustments[key];
                var width = el.FindAndSetAdjustedWidth();
                var height = el.FindAndSetAdjustedHeight();
                var parent = el.GetVisualParent();
                if (parent) {
                    parent.UpdateAdjustedWidth(el, width);
                    parent.UpdateAdjustedHeight(el, height);
                }
            }
        };
        Surface.Instance.FinishAttachLayer = function (layer) {
            var rootEl = layer.GetRootHtmlElement();
            this._RootHtmlEl.style.overflow = "hidden";
            this._RootHtmlEl.appendChild(rootEl);
            layer.OnHtmlAttached();
        };
    }
    Surface.MeasureText = function (text, font) {
        return new Size(Surface._MeasureWidth(text, font), Surface._MeasureHeight(font));
    };
    Surface._MeasureWidth = function (text, font) {
        var test = Surface._EnsureTestCanvas();
        test.Context.font = font.ToHtml5Object();
        return test.Context.measureText(text).width;
    };
    Surface._MeasureHeight = function (font) {
        if (font._CachedHeight)
            return font._CachedHeight;
        var body = document.getElementsByTagName("body")[0];
        var dummy = document.createElement("div");
        var dummyText = document.createTextNode("M");
        dummy.appendChild(dummyText);
        dummy.setAttribute("style", "font: " + font.ToHtml5Object() + ";");
        body.appendChild(dummy);
        var result = dummy.offsetHeight;
        body.removeChild(dummy);
        font._CachedHeight = result;
        return result;
    };
    Surface.IsLeftButton = function (button) {
        return button === 1;
    };
    Surface.IsRightButton = function (button) {
        return button === 2;
    };
    Surface._ElementPathToRoot = function (source) {
        var list = new LinkedList();
        while (source) {
            list.Append(new Fayde.UIElementNode(source));
            source = source.GetVisualParent();
        }
        return list;
    };
    Surface._EnsureTestCanvas = function () {
        var canvas = Surface._TestCanvas;
        var ctx = Surface._TestCanvasContext;
        if (!ctx) {
            if (!canvas)
                canvas = Surface._TestCanvas = document.createElement('canvas');
            ctx = Surface._TestCanvasContext = canvas.getContext('2d');
        }
        return {
            Canvas: canvas,
            Context: ctx
        };
    };
    if (!Fayde.IsCanvasEnabled) {
        Surface.Instance._Invalidate = function () { };
        Surface.Instance.ProcessDirtyElements = function () { };
    } else {
        Surface.Instance.InitHtml = function () { };
        Surface.Instance.FinishAttachLayer = function (layer) { };
    }
    namespace.Surface = Nullstone.FinishCreate(Surface);
})(window);

(function (Fayde) {
    var BindingMarkup = Nullstone.Create("BindingMarkup", Fayde.Markup, 1);
    BindingMarkup.Instance.Init = function (data) {
        if (!data)
            data = {};
        this._Data = data;
    };
    BindingMarkup.Instance.Transmute = function (target, propd, propName, templateBindingSource) {
        return new Fayde.Data.BindingExpression(this._BuildBinding(), target, propd);
    };
    BindingMarkup.Instance._BuildBinding = function () {
        var b = new Fayde.Data.Binding(this._Data.Path);
        if (this._Data.FallbackValue !== undefined)
            b.FallbackValue = this._Data.FallbackValue;
        if (this._Data.Mode !== undefined)
            b.Mode = this._Data.Mode;
        if (this._Data.StringFormat !== undefined)
            b.StringFormat = this._Data.StringFormat;
        return b;
    };
    Fayde.BindingMarkup = Nullstone.FinishCreate(BindingMarkup);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var ObservableObject = Nullstone.Create("ObservableObject", undefined, 0, [Fayde.Data.INotifyPropertyChanged]);
    ObservableObject.Instance.Init = function () {
        this.PropertyChanged = new MulticastEvent();
    };
    ObservableObject.Instance.OnPropertyChanged = function (propertyName) {
        this.PropertyChanged.Raise(this, new Fayde.Data.PropertyChangedEventArgs(propertyName));
    };
    Nullstone.FinishCreate(ObservableObject);
    namespace.ObservableObject = ObservableObject;
})(Nullstone.Namespace("Fayde.MVVM"));

(function (namespace) {
    var ViewModelBase = Nullstone.Create("ViewModelBase", Fayde.MVVM.ObservableObject);
    Nullstone.FinishCreate(ViewModelBase);
    namespace.ViewModelBase = ViewModelBase;
})(Nullstone.Namespace("Fayde.MVVM"));

(function (namespace) {
    var Clip = Nullstone.Create("Clip", undefined, 1);
    Clip.Instance.Init = function (rect) {
        var rounded = rect.RoundOut();
        this.X = rounded.X;
        this.Y = rounded.Y;
        this.Width = rounded.Width;
        this.Height = rounded.Height;
    };
    namespace.Clip = Nullstone.FinishCreate(Clip);
})(window);

var GenerationState = Nullstone.Create("GenerationState", undefined, 5);
GenerationState.Instance.Init = function (allowStartAtRealizedItem, generatorDirection, positionIndex, positionOffset) {
    this._allowStartAtRealizedItem = allowStartAtRealizedItem;
    this._positionIndex = positionIndex;
    this._positionOffset = positionOffset;
    this._step = generatorDirection === 0 ? 1 : -1;
};
Nullstone.FinishCreate(GenerationState);
(function (namespace) {
    var Range = Nullstone.Create("Range", undefined, 2);
    Range.Instance.Init = function (start, end) {
        this.Start = start;
        this.End = end;
    };
    Range.Instance.Count = function () {
        return this.End - this.Start + 1;
    };
    Nullstone.FinishCreate(Range);
    var RangeCollection = Nullstone.Create("RangeCollection");
    RangeCollection.Instance.Init = function () {
        this._ranges = [];
        this._generation = 0;
        this.Count = 0;
    };
    Nullstone.Property(RangeCollection, "Ranges", {
        get: function () {
            return RangeCollection.CopyRangeArray(this._ranges, 0, this._ranges.length, 0);
        }
    });
    RangeCollection.CopyRangeArray = function (rangeArray, startIndex, length, destinationIndex) {
        var result = [];
        for (var i = startIndex; i < length; i++) {
            var r = rangeArray[i];
            result[destinationIndex] = new Range(r.Start, r.End);
            destinationIndex++;
        }
        return result;
    };
    RangeCollection.Instance.FindRangeIndexForValue = function (value) {
        var min = 0;
        var max = this._ranges.length - 1;
        while (min <= max) {
            var mid = Math.floor(min + ((max - min) / 2));
            var range = this._ranges[mid];
            if (value >= range.Start && value <= range.End)
                return mid;
            if (value < range.Start)
                max = mid - 1;
            else
                min = mid + 1;
        }
        return ~min;
    };
    RangeCollection.Instance.FindInsertionPosition = function (range) {
        var min = 0;
        var max = this._ranges.length - 1;
        while (min <= max) {
            var mid = Math.floor(min + ((max - min) / 2));
            var midRange = this._ranges[mid];
            if (midRange.End === range.End)
                return mid;
            if (midRange.End > range.End) {
                if (mid > 0 && (this._ranges[mid - 1].End < range.End))
                    return mid;
                max = mid - 1;
            } else {
                min = mid + 1;
            }
        }
        return min;
    };
    RangeCollection.Instance.IndexOf = function (value) {
        var offset = 0;
        for (var i = 0; i < this._ranges.length; i++) {
            var range = this._ranges[i];
            if (value >= range.Start && value <= range.End)
                return offset + (value - range.Start);
            offset = offset + (range.End - range.Start + 1);
        }
        return -1;
    };
    RangeCollection.Instance.Contains = function (value) {
        return this.FindRangeIndexForValue(value) >= 0;
    };
    RangeCollection.Instance.GetValueAt = function (index) {
        var i;
        var cuml_count;
        var rangeCount = this._ranges.length;
        for (i = 0, cuml_count = 0; i < rangeCount && index >= 0; i++) {
            cuml_count = cuml_count + this._ranges[i].Count();
            if (index < cuml_count)
                return this._ranges[i].End - (cuml_count - index) + 1;
        }
        throw new IndexOutOfRangeException(index);
    };
    RangeCollection.Instance.Add = function (value) {
        if (!this.Contains(value)) {
            this._generation++;
            this.InsertRange(new Range(value, value));
            this.Count++;
            return true;
        }
        return false;
    };
    RangeCollection.Instance.Insert = function (position, range) {
        this._ranges.splice(position, 0, range);
    };
    RangeCollection.Instance.InsertRange = function (range) {
        var position = this.FindInsertionPosition(range);
        var merged_left = this.MergeLeft(range, position);
        var merged_right = this.MergeRight(range, position);
        if (!merged_left && !merged_right) {
            this.Insert(position, range);
        } else if (merged_left && merged_right) {
            this._ranges[position - 1].End = this._ranges[position].End;
            this.RemoveAt(position);
        }
    };
    RangeCollection.Instance.Remove = function (value) {
        this._generation++;
        return this.RemoveIndexFromRange(value);
    };
    RangeCollection.Instance.RemoveAt = function (index) {
        this._ranges.splice(index, 1);
    };
    RangeCollection.Instance.RemoveIndexFromRange = function (index) {
        var range_index = this.FindRangeIndexForValue(index);
        if (range_index < 0)
            return false;
        var range = this._ranges[range_index];
        if (range.Start === index && range.End === index) {
            this.RemoveAt(range_index);
        } else if (range.Start === index) {
            range.Start++;
        } else if (range.End === index) {
            range.End--;
        } else {
            var split_range = new Range(index + 1, range.End);
            range.End = index - 1;
            this.Insert(range_index + 1, split_range);
        }
        this.Count--;
        return true;
    };
    RangeCollection.Instance.Clear = function () {
        this.Count = 0;
        this._ranges = [];
        this._generation++;
    };
    RangeCollection.Instance.MergeLeft = function (range, position) {
        var left = position - 1;
        if (left >= 0 && this._ranges[left].End + 1 == range.Start) {
            this._ranges[left].End = range.Start;
            return true;
        }
        return false;
    };
    RangeCollection.Instance.MergeRight = function (range, position) {
        if (position < this._ranges.length && this._ranges[position].Start - 1 == range.End) {
            this._ranges[position].Start = range.End;
            return true;
        }
        return false;
    };
    Nullstone.FinishCreate(RangeCollection);
    var ItemContainerGenerator = Nullstone.Create("ItemContainerGenerator", undefined, 1);
    ItemContainerGenerator.Instance.Init = function (owner) {
        this.ItemsChanged = new MulticastEvent();
        this.Cache = [];
        this.ContainerIndexMap = new DoubleKeyedDictionary(Fayde.DependencyObject, Number);
        this.ContainerItemMap = new Dictionary(Fayde.DependencyObject, Object);
        this.Owner = owner;
        this.RealizedElements = new RangeCollection();
    };
    ItemContainerGenerator.Instance.ContainerFromIndex = function (index) {
        return this.ContainerIndexMap.MapFromKey2(index);
    };
    ItemContainerGenerator.Instance.ContainerFromItem = function (item) {
        if (item == null)
            return;
        return this.ContainerItemMap.GetKeyFromValue(item);
    };
    ItemContainerGenerator.Instance.CheckOffsetAndRealized = function (positionIndex, positionOffset, count) {
        if (positionOffset != 0) {
            throw new ArgumentException("position.Offset must be zero as the position must refer to a realized element");
        }
        var index = this.IndexFromGeneratorPosition(positionIndex, positionOffset);
        var rangeIndex = this.RealizedElements.FindRangeIndexForValue(index);
        var range = this.RealizedElements.Ranges[rangeIndex];
        if (index < range.Start || (index + count) > range.Start + range.Count) {
            throw new InvalidOperationException("Only items which have been Realized can be removed");
        }
    };
    ItemContainerGenerator.Instance.GenerateNext = function (isNewlyRealized) {
        if (!this._GenerationState) {
            throw new InvalidOperationException("Cannot call GenerateNext before calling StartAt");
        }
        var index;
        var startAt = this._GenerationState._positionIndex;
        var startOffset = this._GenerationState._positionOffset;
        if (startAt == -1) {
            if (startOffset < 0)
                index = this.Owner.Items.GetCount() + startOffset;
            else if (startOffset == 0)
                index = 0;
            else
                index = startOffset - 1;
        } else if (startAt >= 0 && startAt < this.RealizedElements.Count) {
            index = this.RealizedElements.GetValueAt(startAt) + startOffset;
        } else {
            index = -1;
        }
        var alreadyRealized = this.RealizedElements.Contains(index);
        if (!this._GenerationState._allowStartAtRealizedItem && alreadyRealized && startOffset == 0) {
            index = index + this._GenerationState._step;
            alreadyRealized = this.RealizedElements.Contains(index);
        }
        if (index < 0 || index >= this.Owner.Items.GetCount()) {
            isNewlyRealized.Value = false;
            return null;
        }
        if (alreadyRealized) {
            this._GenerationState._positionIndex = this.RealizedElements.IndexOf(index);
            this._GenerationState._positionOffset = this._GenerationState._step;
            isNewlyRealized.Value = false;
            return this.ContainerIndexMap.GetValueFromKey2(index);
        }
        var container;
        var item = this.Owner.Items.GetValueAt(index);
        if (this.Owner.IsItemItsOwnContainer(item)) {
            container = Nullstone.As(item, Fayde.DependencyObject);
            isNewlyRealized.Value = true;
        }
        else {
            if (this.Cache.length == 0) {
                container = this.Owner.GetContainerForItem();
                isNewlyRealized.Value = true;
            }
            else {
                container = this.Cache.pop();
                isNewlyRealized.Value = false;
            }
            var c = Nullstone.As(container, namespace.ContentControl);
            if (c) {
                c.ContentSetsParent = false;
            }
        }
        var f = Nullstone.As(container, Fayde.FrameworkElement);
        if (f && !(item instanceof Fayde.UIElement)) {
            f.DataContext = item;
        }
        this.RealizedElements.Add(index);
        this.ContainerIndexMap.Add(container, index);
        this.ContainerItemMap.Add(container, item);
        this._GenerationState._positionIndex = this.RealizedElements.IndexOf(index);
        this._GenerationState._positionOffset = this._GenerationState._step;
        return container;
    };
    ItemContainerGenerator.Instance.GeneratorPositionFromIndex = function (itemIndex) {
        var realizedCount = this.RealizedElements.Count;
        if (itemIndex < 0) {
            return { index: -1, offset: 0 };
        }
        else if (this.RealizedElements.Contains(itemIndex)) {
            return { index: this.RealizedElements.IndexOf(itemIndex), offset: 0 };
        }
        else if (itemIndex > this.Owner.Items.GetCount()) {
            return { index: -1, offset: 0 };
        }
        if (realizedCount == 0) {
            return { index: -1, offset: itemIndex + 1 };
        }
        var index = -1;
        for (var i = 0; i < realizedCount; i++) {
            if (this.RealizedElements.GetValueAt(i) > itemIndex) {
                break;
            }
            index = i;
        }
        if (index == -1) {
            return { index: index, offset: itemIndex + 1 };
        }
        else {
            return { index: index, offset: itemIndex - this.RealizedElements.GetValueAt(index) };
        }
    };
    ItemContainerGenerator.Instance.GetItemContainerGeneratorForPanel = function (panel) {
        if (Nullstone.RefEquals(panel, this.Panel)) {
            return this;
        }
        else {
            return null;
        }
    };
    ItemContainerGenerator.Instance.IndexFromContainer = function (container) {
        var rv = this.ContainerIndexMap.MapFromKey1(container);
        if (rv == null)
            return -1;
        return rv;
    };
    ItemContainerGenerator.Instance.IndexFromGeneratorPosition = function (positionIndex, positionOffset) {
        if (positionIndex == -1) {
            if (positionOffset < 0) {
                return this.Owner.Items.GetCount() + positionOffset;
            }
            else {
                return positionOffset - 1;
            }
        }
        else {
            if (positionIndex > this.Owner.Items.GetCount()) {
                return -1;
            }
            if (positionIndex >= 0 && positionIndex < this.RealizedElements.Count) {
                return this.RealizedElements.GetValueAt(positionIndex) + positionOffset;
            }
            return positionIndex + positionOffset;
        }
    };
    ItemContainerGenerator.Instance.ItemFromContainer = function (container) {
        var data = {};
        if (this.ContainerItemMap.TryGetValue(container, data))
            return data.Value;
        return new Fayde.UnsetValue();
    };
    ItemContainerGenerator.Instance.OnOwnerItemsItemsChanged = function (sender, e) {
        var itemCount;
        var itemUICount;
        var oldPosition = { index: -1, offset: 0 };
        var position;
        switch (e.Action) {
            case Fayde.Collections.NotifyCollectionChangedAction.Add:
                if ((e.NewStartingIndex + 1) != this.Owner.Items.GetCount()) {
                    this.MoveExistingItems(e.NewStartingIndex, 1);
                }
                itemCount = 1;
                itemUICount = 0;
                position = this.GeneratorPositionFromIndex(e.NewStartingIndex);
                position.offset = 1;
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Remove:
                itemCount = 1;
                if (this.RealizedElements.Contains(e.OldStartingIndex)) {
                    itemUICount = 1;
                }
                else {
                    itemUICount = 0;
                }
                position = this.GeneratorPositionFromIndex(e.OldStartingIndex);
                if (itemUICount == 1) {
                    this.Remove(position.index, position.offset, 1);
                }
                this.MoveExistingItems(e.OldStartingIndex, -1);
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Replace:
                if (!this.RealizedElements.Contains(e.NewStartingIndex)) {
                    return;
                }
                itemCount = 1;
                itemUICount = 1;
                position = this.GeneratorPositionFromIndex(e.NewStartingIndex);
                this.Remove(position.index, position.offset, 1);
                var newPos = this.GeneratorPositionFromIndex(e.NewStartingIndex);
                this.StartAt(newPos.index, newPos.offset, 0, true);
                this.PrepareItemContainer(this.GenerateNext({}));
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Reset:
                var itemCount;
                if (!e.OldItems) {
                    itemCount = 0;
                }
                else {
                    itemCount = e.OldItems.GetCount();
                }
                itemUICount = this.RealizedElements.Count;
                position = { index: -1, offset: 0 };
                this.RemoveAll();
                break;
            default:
                Console.WriteLine("*** Critical error in ItemContainerGenerator.OnOwnerItemsItemsChanged. NotifyCollectionChangedAction.{0} is not supported", e.Action);
                break;
        }
        var args = new namespace.Primitives.ItemsChangedEventArgs(e.Action, itemCount, itemUICount, oldPosition, position);
        this.ItemsChanged.Raise(this, args);
    };
    ItemContainerGenerator.Instance.PrepareItemContainer = function (container) {
        var index = this.ContainerIndexMap.GetValueFromKey1(container);
        var item = this.Owner.Items.GetValueAt(index);
        this.Owner.PrepareContainerForItem(container, item);
    };
    ItemContainerGenerator.Instance.Remove = function (positionIndex, positionOffset, count) {
        this.CheckOffsetAndRealized(positionIndex, positionOffset, count);
        var index = this.IndexFromGeneratorPosition(positionIndex, positionOffset);
        for (var i = 0; i < count; i++) {
            var container = this.ContainerIndexMap.GetValueFromKey2(index + i);
            var oitem = { Value: null };
            this.ContainerItemMap.TryGetValue(container, oitem);
            var item = oitem.Value;
            this.ContainerIndexMap.Remove(container, index + i);
            this.ContainerItemMap.Remove(container);
            this.RealizedElements.Remove(index + i);
            this.Owner.ClearContainerForItem(container, item);
        }
    };
    ItemContainerGenerator.Instance.MoveExistingItems = function (index, offset) {
        var newRanges = new RangeCollection();
        var list = [];
        for (var i = 0; i < this.RealizedElements.Count; i++) {
            list.push(this.RealizedElements.GetValueAt(i));
        }
        if (offset > 0) {
            list = list.reverse();
        }
        for (var i = 0; i < list.length; i++) {
            var oldIndex = i;
            if (oldIndex < index) {
                newRanges.Add(oldIndex);
            }
            else {
                newRanges.Add(oldIndex + offset);
                var container = this.ContainerIndexMap.GetValueAt(oldIndex);
                this.ContainerIndexMap.Remove(container, oldIndex);
                this.ContainerIndexMap.Add(container, oldIndex + offset);
            }
        }
        this.RealizedElements = newRanges;
    };
    ItemContainerGenerator.Instance.RemoveAll = function () {
        for (var key in this.ContainerItemMap._ht) {
            this.Owner.ClearContainerForItem(key, this.ContainerItemMap._ht[key]);
        }
        this.RealizedElements.Clear();
        this.ContainerIndexMap.Clear();
        this.ContainerItemMap.Clear();
    };
    ItemContainerGenerator.Instance.StartAt = function (positionIndex, positionOffset, direction, allowStartAtRealizedItem) {
        if (this._GenerationState) {
            throw new InvalidOperationException("Cannot call StartAt while a generation operation is in progress");
        }
        this._GenerationState = new GenerationState(allowStartAtRealizedItem, direction, positionIndex, positionOffset);
        return this._GenerationState;
    };
    ItemContainerGenerator.Instance.Recycle = function (positionIndex, positionOffset, count) {
        this.CheckOffsetAndRealized(positionIndex, positionOffset, count);
        var index = this.IndexFromGeneratorPosition(positionIndex, positionOffset);
        for (var i = 0; i < count; i++) {
            this.Cache.push(this.ContainerIndexMap.GetValueFromKey2(index + i));
        }
        this.Remove(positionIndex, positionOffset, count);
    };
    ItemContainerGenerator.Instance.StopGeneration = function () {
        delete this._GenerationState;
    };
    namespace.ItemContainerGenerator = Nullstone.FinishCreate(ItemContainerGenerator);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var DragCompletedEventArgs = Nullstone.Create("DragCompletedEventArgs", Fayde.RoutedEventArgs, 3);
    DragCompletedEventArgs.Instance.Init = function (horizontal, vertical, canceled) {
        this.Init$RoutedEventArgs();
        this.HorizontalChange = horizontal;
        this.VerticalChange = vertical;
        this.Canceled = canceled;
    };
    namespace.DragCompletedEventArgs = Nullstone.FinishCreate(DragCompletedEventArgs);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var DragDeltaEventArgs = Nullstone.Create("DragDeltaEventArgs", Fayde.RoutedEventArgs, 2);
    DragDeltaEventArgs.Instance.Init = function (horizontal, vertical) {
        this.Init$RoutedEventArgs();
        this.HorizontalChange = horizontal;
        this.VerticalChange = vertical;
    };
    namespace.DragDeltaEventArgs = Nullstone.FinishCreate(DragDeltaEventArgs);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var DragStartedEventArgs = Nullstone.Create("DragStartedEventArgs", Fayde.RoutedEventArgs, 2);
    DragStartedEventArgs.Instance.Init = function (horizontal, vertical) {
        this.Init$RoutedEventArgs();
        this.HorizontalOffset = horizontal;
        this.VerticalOffset = vertical;
    };
    namespace.DragStartedEventArgs = Nullstone.FinishCreate(DragStartedEventArgs);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var _TextBlockDynamicPropertyValueProvider = Nullstone.Create("_TextBlockDynamicPropertyValueProvider", Fayde.FrameworkElementPropertyValueProvider, 2);
    _TextBlockDynamicPropertyValueProvider.Instance.Init = function (obj, propPrecedence) {
        this.Init$FrameworkElementPropertyValueProvider(obj, propPrecedence);
        this._BaselineOffsetValue = null;
        this._TextValue = null;
    };
    _TextBlockDynamicPropertyValueProvider.Instance.GetPropertyValue = function (propd) {
        /*
        if (propd._ID === TextBlock.BaselineOffsetProperty._ID) {
            var layout = this._Object._Layout;
            this._BaselineOffsetValue = (!layout) ? 0 : layout.GetBaselineOffset();
            return this._BaselineOffsetValue;
        }
        */
        return this.GetPropertyValue$FrameworkElementPropertyValueProvider(propd);
    };
    namespace._TextBlockDynamicPropertyValueProvider = Nullstone.FinishCreate(_TextBlockDynamicPropertyValueProvider);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var _TextBoxBaseDynamicPropertyValueProvider = Nullstone.Create("_TextBoxBaseDynamicPropertyValueProvider", Fayde.FrameworkElementPropertyValueProvider, 5);
    _TextBoxBaseDynamicPropertyValueProvider.Instance.Init = function (obj, propPrecedence, foregroundPropd, backgroundPropd, baselineOffsetPropd) {
        this.Init$FrameworkElementPropertyValueProvider(obj, propPrecedence);
        this._ForegroundPropd = foregroundPropd;
        this._BackgroundPropd = backgroundPropd;
        this._BaselineOffsetPropd = baselineOffsetPropd;
        this._SelectionBackground = undefined;
        this._SelectionForeground = undefined;
        this._BaselineOffset = undefined;
    };
    _TextBoxBaseDynamicPropertyValueProvider.Instance.RecomputePropertyValueOnClear = function (propd, error) {
        if (propd._ID === this._BackgroundPropd._ID)
            this._SelectionBackground = undefined;
        else if (propd._ID === this._ForegroundPropd._ID)
            this._SelectionForeground = undefined;
    };
    _TextBoxBaseDynamicPropertyValueProvider.Instance.RecomputePropertyValueOnLower = function (propd, error) {
        if (propd._ID === this._BackgroundPropd._ID)
            this._SelectionBackground = undefined;
        else if (propd._ID === this._ForegroundPropd._ID)
            this._SelectionForeground = undefined;
    };
    _TextBoxBaseDynamicPropertyValueProvider.Instance.GetPropertyValue = function (propd) {
        var v;
        if (propd._ID === this._BackgroundPropd._ID) {
            v = this._Object._GetValue(propd, this._PropertyPrecedence + 1);
            if (!v)
                v = this._SelectionBackground;
        } else if (propd._ID === this._ForegroundPropd._ID) {
            v = this._Object._GetValue(propd, this._PropertyPrecedence + 1);
            if (!v)
                v = this._SelectionForeground;
        } else if (propd._ID === this._BaselineOffsetPropd._ID) {
            var tbv = this._Object._View;
            this._BaselineOffset = (tbv == null) ? 0 : tbv.GetBaselineOffset();
            v = this._BaselineOffset;
        }
        if (v != undefined)
            return v;
        return this.GetPropertyValue$FrameworkElementPropertyValueProvider(propd);
    };
    _TextBoxBaseDynamicPropertyValueProvider.Instance._InitializeSelectionBrushes = function () {
        if (!this._SelectionBackground)
            this._SelectionBackground = new Fayde.Media.SolidColorBrush(Color.FromHex("#FF444444"));
        if (!this._SelectionForeground)
            this._SelectionForeground = new Fayde.Media.SolidColorBrush(Color.FromHex("#FFFFFFFF"));
    };
    namespace._TextBoxBaseDynamicPropertyValueProvider = Nullstone.FinishCreate(_TextBoxBaseDynamicPropertyValueProvider);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var _TextBoxDynamicPropertyValueProvider = Nullstone.Create("_TextBoxDynamicPropertyValueProvider", namespace._TextBoxBaseDynamicPropertyValueProvider, 2);
    _TextBoxDynamicPropertyValueProvider.Instance.Init = function (obj, propPrecedence) {
        this.Init$_TextBoxBaseDynamicPropertyValueProvider(obj, propPrecedence,
            namespace.TextBox.SelectionForegroundProperty, namespace.TextBox.SelectionBackgroundProperty, namespace.TextBox.BaselineOffsetProperty);
    };
    namespace._TextBoxDynamicPropertyValueProvider = Nullstone.FinishCreate(_TextBoxDynamicPropertyValueProvider);
})(Nullstone.Namespace("Fayde.Controls"));

(function (Fayde) {
    function SubPropertyListener(dobj, propd) {
        this._Dobj = dobj;
        this._Propd = propd;
    }
    SubPropertyListener.prototype.OnSubPropertyChanged = function (sender, args) {
        this._Dobj._OnSubPropertyChanged(this._Propd, sender, args);
    };
    var DependencyObject = Nullstone.Create("DependencyObject");
    DependencyObject.Instance.Init = function () {
        this._IsAttached = false;
        this._Providers = [];
        this.AddProvider(new Fayde._LocalValuePropertyValueProvider(this));
        this.AddProvider(new Fayde._DefaultValuePropertyValueProvider(this));
        this.AddProvider(new Fayde._AutoCreatePropertyValueProvider(this));
        this._ProviderBitmasks = [];
        this._SecondaryParents = [];
        this.PropertyChanged = new MulticastEvent();
        this._SubPropertyListeners = [];
        this._CachedValues = {};
    };
    DependencyObject.NameProperty = DependencyProperty.RegisterFull("Name", function () { return String; }, DependencyObject, "", undefined, undefined, undefined, false, DependencyObject._NameValidator);
    Nullstone.AutoProperties(DependencyObject, [
        DependencyObject.NameProperty,
        "TemplateOwner"
    ]);
    DependencyObject.Instance.GetMentor = function () {
        return this._Mentor;
    };
    DependencyObject.Instance.SetMentor = function (value) {
        if (this._Mentor == value)
            return;
        var oldMentor = this._Mentor;
        this._Mentor = value;
        this._OnMentorChanged(oldMentor, value);
    };
    DependencyObject.Instance._OnMentorChanged = function (oldValue, newValue) {
        if (!(this instanceof Fayde.FrameworkElement)) {
            var propPrecEnum = _PropertyPrecedence;
            this._Providers[propPrecEnum.AutoCreate].ForeachValue(DependencyObject._PropagateMentor, newValue);
            this._Providers[propPrecEnum.LocalValue].ForeachValue(DependencyObject._PropagateMentor, newValue);
            if (this._Providers[propPrecEnum.LocalStyle])
                this._Providers[propPrecEnum.LocalStyle].ForeachValue(DependencyObject._PropagateMentor, newValue);
            if (this._Providers[propPrecEnum.ImplicitStyle])
                this._Providers[propPrecEnum.ImplicitStyle].ForeachValue(DependencyObject._PropagateMentor, newValue);
        }
        if (this._MentorChangedCallback) {
            this._MentorChangedCallback(this, newValue);
        }
    };
    DependencyObject._PropagateMentor = function (propd, value, newMentor) {
        if (value instanceof DependencyObject) {
            value.SetMentor(newMentor);
        }
    };
    DependencyObject.Instance._SetIsAttached = function (value) {
        if (this._IsAttached === value)
            return;
        this._IsAttached = value;
        this._OnIsAttachedChanged(value);
    };
    DependencyObject.Instance._OnIsAttachedChanged = function (value) {
        this._Providers[_PropertyPrecedence.LocalValue].ForeachValue(DependencyObject._PropagateIsAttached, value);
        this._Providers[_PropertyPrecedence.AutoCreate].ForeachValue(DependencyObject._PropagateIsAttached, value);
    };
    DependencyObject._PropagateIsAttached = function (propd, value, newIsAttached) {
        if (propd._IsCustom)
            return;
        if (value && value instanceof DependencyObject) {
            value._SetIsAttached(newIsAttached);
        }
    };
    DependencyObject.Instance.Clone = function () {
        var newDO = new this.constructor();
        newDO.CloneCore(this);
        return newDO;
    };
    DependencyObject.Instance.CloneCore = function (source) {
        var data = {
            Old: source,
            New: this
        };
        source._Providers[_PropertyPrecedence.AutoCreate].ForeachValue(DependencyObject.CloneAutoCreatedValue, data);
        source._Providers[_PropertyPrecedence.LocalValue].ForeachValue(DependencyObject.CloneLocalValue, data);
        this._CloneAnimationStorage(source);
    };
    DependencyObject.CloneAutoCreatedValue = function (propd, value, data) {
        var oldValue = data.Old._GetValue(propd, _PropertyPrecedence.AutoCreate);
        var newValue = data.New._GetValue(propd, _PropertyPrecedence.AutoCreate);
        if ((oldValue instanceof DependencyObject) && (newValue instanceof DependencyObject))
            newValue.CloneCore(oldValue);
    };
    DependencyObject.CloneLocalValue = function (propd, value, data) {
        if (propd._ID === DependencyObject.NameProperty._ID)
            return;
        data.New._SetValue(propd, Fayde.Clone(value));
    };
    DependencyObject.Instance.GetDependencyProperty = function (propName) {
        return DependencyProperty.GetDependencyProperty(this.constructor, propName);
    };
    DependencyObject.Instance.AddProvider = function (provider) {
        this._Providers[provider._PropertyPrecedence] = provider;
    };
    DependencyObject.Instance.$SetValue = function (propd, value) {
        if (!propd)
            throw new ArgumentException("No property specified.");
        if (propd.IsReadOnly) {
            if (propd._IsCustom)
                throw new InvalidOperationException();
            else
                throw new ArgumentException();
        }
        this.$SetValueInternal(propd, value);
    };
    DependencyObject.Instance.$SetValueInternal = function (propd, value) {
        if (value instanceof Fayde.UnsetValue) {
            this.$ClearValue(propd);
            return;
        }
        var expression = Nullstone.As(value, Fayde.Expression);
        if (expression instanceof Fayde.Data.BindingExpressionBase) {
            var binding = expression.Binding;
            var path = binding.Path.Path;
            if ((!path || path === ".") && binding.Mode === Fayde.Data.BindingMode.TwoWay)
                throw new ArgumentException("TwoWay bindings require a non-empty Path.");
            binding.Seal();
        }
        var existing;
        var data = {};
        if (this._Expressions && this._Expressions.TryGetValue(propd, data))
            existing = data.Value;
        var updateTwoWay = false;
        var addingExpression = false;
        if (expression) {
            if (!Nullstone.RefEquals(expression, existing)) {
                if (expression.Attached)
                    throw new ArgumentException("Cannot attach the same Expression to multiple FrameworkElements");
                if (existing)
                    this.$RemoveExpression(propd);
                if (!this._Expressions)
                    this._Expressions = new Dictionary(DependencyProperty, Fayde.Expression);
                this._Expressions.Add(propd, expression);
                expression._OnAttached(this);
            }
            addingExpression = true;
            value = expression.GetValue(propd);
        } else if (existing) {
            if (existing instanceof Fayde.Data.BindingExpressionBase) {
                var binding = existing.Binding;
                if (binding.Mode === Fayde.Data.BindingMode.TwoWay) {
                    updateTwoWay = !existing.Updating && !propd._IsCustom;
                } else if (!existing.Updating || binding.Mode === Fayde.Data.BindingMode.OneTime) {
                    this.$RemoveExpression(propd);
                }
            } else if (!existing.Updating) {
                this.$RemoveExpression(propd);
            }
        }
        try {
            this._SetValue(propd, value);
            if (updateTwoWay)
                existing._TryUpdateSourceObject(value);
        } catch (err) {
            if (!addingExpression)
                throw err;
            this._SetValue(propd, propd.DefaultValue);
            if (updateTwoWay)
                existing._TryUpdateSourceObject(value);
        }
    };
    DependencyObject.Instance._SetValue = function (propd, value) {
        if (!propd)
            throw new ArgumentException("Null dependency property.");
        var error = new BError();
        if (value === null) {
            this._SetValueWithError(propd, null, error);
            if (error.IsErrored())
                throw error.CreateException();
            return;
        }
        if (value instanceof Fayde.UnsetValue) {
            this._ClearValue(propd, true);
            return;
        }
        if (propd.GetTargetType() === String) {
            if (value != null && typeof value !== "string")
                value = value.toString();
        }
        this._SetValueWithError(propd, value, error);
        if (error.IsErrored())
            throw error.CreateException();
    };
    DependencyObject.Instance._SetValueWithError = function (propd, value, error) {
        if (!error)
            error = new BError();
        var hasCoercer = propd._HasCoercer();
        var coerced = value;
        if ((hasCoercer && !(coerced = propd._Coerce(this, coerced, error)))
                || !this._IsValueValid(propd, coerced, error)
                || !propd._Validate(this, propd, coerced, error)) {
            if (error.IsErrored())
                throw error.CreateException();
            return false;
        }
        var retVal = this._SetValueWithErrorImpl(propd, coerced, error);
        if (error.IsErrored())
            throw error.CreateException();
        return retVal;
    };
    DependencyObject.Instance._SetValueWithErrorImpl = function (propd, value, error) {
        if (this._IsFrozen) {
            error.SetErrored(BError.UnauthorizedAccess, "Cannot set value for property " + propd.Name + " on frozen DependencyObject.");
            return false;
        }
        var currentValue;
        var equal = false;
        if ((currentValue = this._ReadLocalValue(propd)) === undefined)
            if (propd._IsAutoCreated)
                currentValue = this._Providers[_PropertyPrecedence.AutoCreate].ReadLocalValue(propd);
        if (currentValue !== undefined && value !== undefined)
            equal = !propd._AlwaysChange && Nullstone.Equals(currentValue, value);
        else
            equal = currentValue === undefined && value === undefined;
        if (!equal) {
            var propPrecEnum = _PropertyPrecedence;
            var newValue;
            this._Providers[propPrecEnum.LocalValue].ClearValue(propd);
            if (propd._IsAutoCreated)
                this._Providers[propPrecEnum.AutoCreate].ClearValue(propd);
            if (value !== undefined && (!propd._IsAutoCreated || !(value instanceof DependencyObject) || Nullstone.Is(value, DependencyObject)))
                newValue = value;
            else
                newValue = undefined;
            if (newValue !== undefined) {
                this._Providers[propPrecEnum.LocalValue].SetValue(propd, newValue);
            }
            this._ProviderValueChanged(propPrecEnum.LocalValue, propd, currentValue, newValue, true, true, true, error);
        }
        return true;
    };
    DependencyObject.Instance._IsValueValid = function (propd, coerced, error) {
        return true;
    };
    DependencyObject.Instance._HasDeferredValueExpression = function (propd) {
        var data = {};
        if (this._Expressions != null && this._Expressions.TryGetValue(propd, data)) {
            return data.Value instanceof Fayde.DeferredValueExpression;
        }
        return false;
    };
    DependencyObject.Instance.$GetValue = function (propd) {
        if (!propd)
            throw new ArgumentException("Null dependency property.");
        if (propd == null && !(propd._IsAttached || this instanceof propd.OwnerType))
            throw new InvalidOperationException("Cannot get the DependencyProperty " + propd.Name + " on an object of type " + propd.OwnerType._TypeName);
        return this._GetValue(propd);
    };
    DependencyObject.Instance._GetValue = function (propd, startingPrecedence, endingPrecedence) {
        var propPrecEnum = _PropertyPrecedence;
        if (startingPrecedence === undefined)
            startingPrecedence = propPrecEnum.Highest;
        if (endingPrecedence === undefined)
            endingPrecedence = propPrecEnum.Lowest;
        var bitmask = this._ProviderBitmasks[propd._ID] | propd._BitmaskCache;
        for (var i = startingPrecedence; i <= endingPrecedence; i++) {
            if (!(bitmask & (1 << i)))
                continue;
            var provider = this._Providers[i];
            if (!provider)
                continue;
            var val = provider.GetPropertyValue(propd);
            if (val === undefined)
                continue;
            return val;
        }
        return undefined;
    };
    DependencyObject.Instance._GetValueNoAutoCreate = function (propd) {
        var propPrecEnum = _PropertyPrecedence;
        var v = this._GetValue(propd, propPrecEnum.LocalValue, propPrecEnum.InheritedDataContext);
        if (v === undefined && propd._IsAutoCreated)
            v = this._Providers[propPrecEnum.AutoCreate].ReadLocalValue(propd);
        return v;
    };
    DependencyObject.Instance._GetValueNoDefault = function (propd) {
        var value;
        var propPrecDefaultValue = _PropertyPrecedence.DefaultValue;
        for (var i = 0; i < propPrecDefaultValue; i++) {
            var provider = this._Providers[i];
            if (!provider)
                continue;
            value = provider.GetPropertyValue(propd);
            if (value !== undefined)
                break;
        }
        return value;
    };
    DependencyObject.Instance.$ReadLocalValue = function (propd) {
        var data = {};
        if (this._Expressions != null && this._Expressions.TryGetValue(propd, data))
            return data.Value;
        return this.$ReadLocalValueInternal(propd);
    };
    DependencyObject.Instance.$ReadLocalValueInternal = function (propd) {
        if (propd == null)
            throw new ArgumentException("You must specify a dependency property.");
        var error = new BError();
        var value = this._ReadLocalValueWithError(propd, error);
        if (error.IsErrored())
            throw error.CreateException();
        if (value === undefined)
            return new Fayde.UnsetValue();
        return value;
    };
    DependencyObject.Instance._ReadLocalValueWithError = function (propd, error) {
        if (!this._HasProperty(propd)) {
            error.SetErrored(BError.Exception, "Cannot get the DependencyProperty " + propd.Name + " on an object of type " + propd.OwnerType);
            return undefined;
        }
        return this._ReadLocalValue(propd);
    };
    DependencyObject.Instance._ReadLocalValue = function (propd) {
        return this._Providers[_PropertyPrecedence.LocalValue].GetPropertyValue(propd);
    };
    DependencyObject.Instance.$ClearValue = function (propd) {
        if (!propd)
            throw new ArgumentException("Null dependency property.");
        if (propd.IsReadOnly && !propd._IsCustom)
            throw new ArgumentException("This property is readonly.");
        this.$ClearValueInternal(propd);
    };
    DependencyObject.Instance.$ClearValueInternal = function (propd) {
        this.$RemoveExpression(propd);
        this._ClearValue(propd, true);
    };
    DependencyObject.Instance._ClearValue = function (propd, notifyListeners) {
        var error = new BError();
        this._ClearValueWithError(propd, true, error);
        if (error.IsErrored())
            throw error.CreateException();
    };
    DependencyObject.Instance._ClearValueWithError = function (propd, notifyListeners, error) {
        if (notifyListeners === undefined)
            notifyListeners = true;
        if (!error)
            error = new BError();
        if (this._GetAnimationStorageFor(propd) != null) {
            return;
        }
        var propPrecEnum = _PropertyPrecedence;
        var oldLocalValue;
        if ((oldLocalValue = this._ReadLocalValue(propd)) === undefined) {
            if (propd._IsAutoCreated)
                oldLocalValue = this._Providers[propPrecEnum.AutoCreate].ReadLocalValue(propd);
        }
        if (oldLocalValue !== undefined) {
            var dob;
            if (oldLocalValue && (dob = Nullstone.As(oldLocalValue, DependencyObject)) != null) {
                if (!propd._IsCustom) {
                    dob._RemoveParent(this, null);
                    dob.RemovePropertyChangedListener(this, propd);
                    dob._SetIsAttached(false);
                    if (Nullstone.Is(dob, Fayde.InternalCollection)) {
                    }
                }
            }
            this._Providers[propPrecEnum.LocalValue].ClearValue(propd);
            if (propd._IsAutoCreated)
                this._Providers[propPrecEnum.AutoCreate].ClearValue(propd);
        }
        var count = propPrecEnum.Count;
        for (var i = propPrecEnum.LocalValue + 1; i < count; i++) {
            var provider = this._Providers[i];
            if (provider && provider.RecomputePropertyValueOnClear)
                provider.RecomputePropertyValueOnClear(propd, error);
        }
        if (oldLocalValue !== undefined) {
            this._ProviderValueChanged(propPrecEnum.LocalValue, propd, oldLocalValue, undefined, notifyListeners, true, false, error);
        }
    };
    DependencyObject.Instance.$RemoveExpression = function (propd) {
        var data = {};
        if (this._Expressions != null && this._Expressions.TryGetValue(propd, data)) {
            this._Expressions.Remove(propd);
            data.Value._OnDetached(this);
        }
    };
    DependencyObject.Instance._HasProperty = function (propd) {
        if (propd == null)
            return false;
        if (propd._IsAttached)
            return true;
        if (this instanceof propd.OwnerType)
            return true;
        return false;
    };
    DependencyObject.Instance._PropertyHasValueNoAutoCreate = function (propd, obj) {
        var v = this._GetValueNoAutoCreate(propd);
        return v === undefined ? obj === undefined : v == obj;
    };
    DependencyObject.Instance._ProviderValueChanged = function (providerPrecedence, propd, oldProviderValue, newProviderValue, notifyListeners, setParent, mergeNamesOnSetParent, error) {
        delete this._CachedValues[propd._ID];
        var propPrecEnum = _PropertyPrecedence;
        var bitmask = this._ProviderBitmasks[propd._ID] || 0;
        if (newProviderValue !== undefined)
            bitmask |= 1 << providerPrecedence;
        else
            bitmask &= ~(1 << providerPrecedence);
        this._ProviderBitmasks[propd._ID] = bitmask;
        var higher = (((1 << (providerPrecedence + 1)) - 2) & bitmask) | propd._BitmaskCache;
        var propPrecHighest = _PropertyPrecedence.Highest;
        for (var j = providerPrecedence - 1; j >= propPrecHighest; j--) {
            if (!(higher & (1 << j)))
                continue;
            var provider = this._Providers[j];
            if (!provider)
                continue;
            if (provider.GetPropertyValue(propd) !== undefined) {
                this._CallRecomputePropertyValueForProviders(propd, providerPrecedence, error);
                return;
            }
        }
        var oldValue;
        var newValue;
        if (oldProviderValue === undefined || newProviderValue === undefined) {
            var lowerPriorityValue = this._GetValue(propd, providerPrecedence + 1);
            if (newProviderValue === undefined) {
                oldValue = oldProviderValue;
                newValue = lowerPriorityValue;
            } else if (oldProviderValue === undefined) {
                oldValue = lowerPriorityValue;
                newValue = newProviderValue;
            }
        } else {
            oldValue = oldProviderValue;
            newValue = newProviderValue;
        }
        var equal = (oldValue === null && newValue === null) || (oldValue === undefined && newValue === undefined); //INTENTIONAL
        if (oldValue != null && newValue != null) {
            equal = !propd._AlwaysChange && Nullstone.Equals(oldValue, newValue);
        }
        if (equal)
            return;
        var propPrecIsEnabled = propPrecEnum.IsEnabled;
        if (providerPrecedence !== propPrecIsEnabled && this._Providers[propPrecIsEnabled] && this._Providers[propPrecIsEnabled].LocalValueChanged(propd))
            return;
        this._CallRecomputePropertyValueForProviders(propd, providerPrecedence, error);
        var oldDO;
        var newDO;
        var setsParent = setParent && !propd._IsCustom;
        if (oldValue && (oldValue instanceof DependencyObject))
            oldDO = oldValue;
        if (newValue && (newValue instanceof DependencyObject))
            newDO = newValue;
        if (oldDO) {
            if (setsParent) {
                oldDO._SetIsAttached(false);
                oldDO._RemoveParent(this, null);
                oldDO._RemoveTarget(this);
                oldDO.RemovePropertyChangedListener(this, propd);
                if (oldDO instanceof Fayde.InternalCollection) {
                    oldDO.Changed.Unsubscribe(this._OnCollectionChangedEH, this);
                    oldDO.ItemChanged.Unsubscribe(this._OnCollectionItemChangedEH, this);
                }
            } else {
                oldDO.SetMentor(null);
            }
        }
        if (newDO) {
            if (setsParent) {
                newDO._SetIsAttached(this._IsAttached);
                newDO._AddParent(this, mergeNamesOnSetParent, error);
                if (error.IsErrored())
                    return;
                newDO._SetResourceBase(this._GetResourceBase());
                if (newDO instanceof Fayde.InternalCollection) {
                    newDO.Changed.Subscribe(this._OnCollectionChangedEH, this);
                    newDO.ItemChanged.Subscribe(this._OnCollectionItemChangedEH, this);
                }
                newDO.AddPropertyChangedListener(this, propd);
                newDO._AddTarget(this);
            } else {
                var cur = this;
                while (cur && !(cur instanceof Fayde.FrameworkElement))
                    cur = cur.GetMentor();
                newDO.SetMentor(cur);
            }
        }
        if (notifyListeners) {
            var args = {
                Property: propd,
                OldValue: oldValue,
                NewValue: newValue
            };
            this._OnPropertyChanged(args, error);
            if (propd && propd._ChangedCallback)
                propd._ChangedCallback(this, args, error);
            if (propd._Inheritable > 0) {
                var propPrecInherited = _PropertyPrecedence.Inherited;
                if (providerPrecedence !== propPrecInherited) {
                    var inheritedProvider = this._Providers[propPrecInherited];
                    if (inheritedProvider && ((this._ProviderBitmasks[propd._ID] & ((1 << propPrecInherited) - 1)) !== 0))
                        inheritedProvider.PropagateInheritedProperty(propd, this, this);
                }
            }
        }
    };
    DependencyObject.Instance._CallRecomputePropertyValueForProviders = function (propd, providerPrecedence, error) {
        for (var i = 0; i < providerPrecedence; i++) {
            var provider = this._Providers[i];
            if (provider && provider.RecomputePropertyValueOnLowerr)
                provider.RecomputePropertyValueOnLower(propd, error);
        }
    };
    DependencyObject.Instance._AddTarget = function (obj) {
    };
    DependencyObject.Instance._RemoveTarget = function (obj) {
    };
    DependencyObject.Instance._GetResourceBase = function () {
        var rb = this._ResourceBase;
        if (rb)
            rb = rb.replace(/^\s+/, ''); //trim if not null
        if (rb && rb.length > 0)
            return this._ResourceBase;
        if (this._Parent)
            return this._Parent._GetResourceBase();
        return this._ResourceBase;
    };
    DependencyObject.Instance._SetResourceBase = function (value) {
        this._ResourceBase = value;
    };
    DependencyObject.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property._ID === DependencyObject.NameProperty._ID) {
            var scope = this.FindNameScope();
            if (scope && args.NewValue) {
                if (args.OldValue)
                    scope.UnregisterName(args.OldValue);
                scope.RegisterName(args.NewValue, this);
                if (/* TODO: this.IsHydratedFromXaml() && */this._Parent) {
                    scope = this._Parent.FindNameScope();
                    if (scope) {
                        if (args.OldValue)
                            scope.UnregisterName(args.OldValue);
                        scope.RegisterName(args.NewValue, this);
                    }
                }
            }
        }
        this.PropertyChanged.Raise(this, args);
    };
    DependencyObject.Instance.AddPropertyChangedListener = function (ldo, propd) {
        if (!(ldo instanceof Fayde.Setter)) {
            var listener = new SubPropertyListener(ldo, propd);
            this._SubPropertyListeners.push(listener);
            this.PropertyChanged.Subscribe(listener.OnSubPropertyChanged, listener);
        }
    };
    DependencyObject.Instance.RemovePropertyChangedListener = function (ldo, propd) {
        for (var i = 0; i < this._SubPropertyListeners.length; i++) {
            var listener = this._SubPropertyListeners[i];
            if (!Nullstone.Equals(listener._Dobj, ldo))
                continue;
            if (propd && listener._Propd._ID !== propd._ID)
                continue;
            this.PropertyChanged.Unsubscribe(listener.OnSubPropertyChanged, listener);
            this._SubPropertyListeners.slice(i, 1);
            break;
        }
    };
    DependencyObject.Instance._OnSubPropertyChanged = function (propd, sender, args) { };
    DependencyObject.Instance._OnCollectionChangedEH = function (sender, args) {
        this._OnCollectionChanged(sender, args);
    };
    DependencyObject.Instance._OnCollectionChanged = function (col, args) { };
    DependencyObject.Instance._OnCollectionItemChangedEH = function (sender, args) {
        this._OnCollectionItemChanged(sender, args.Item, args);
    };
    DependencyObject.Instance._OnCollectionItemChanged = function (col, obj, args) { };
    DependencyObject.Instance.FindName = function (name, isTemplateItem) {
        if (isTemplateItem === undefined)
            isTemplateItem = Fayde.Controls.Control.GetIsTemplateItem(this);
        var scope = Fayde.NameScope.GetNameScope(this);
        if (scope && (isTemplateItem === scope.GetIsLocked()))
            return scope.FindName(name);
        if (this._Parent)
            return this._Parent.FindName(name, isTemplateItem);
        return undefined;
    };
    DependencyObject.Instance.FindNameScope = function (templateNamescope) {
        if (templateNamescope === undefined)
            templateNamescope = Fayde.Controls.Control.GetIsTemplateItem(this);
        var scope = Fayde.NameScope.GetNameScope(this);
        if (scope && (templateNamescope === scope.GetIsLocked()))
            return scope;
        if (this._Parent) {
            return this._Parent.FindNameScope(templateNamescope);
        }
        return undefined;
    };
    DependencyObject.Instance.SetNameOnScope = function (name, scope) {
        if (scope.FindName(name))
            return false;
        this._SetValue(DependencyObject.NameProperty, name);
        scope.RegisterName(name, this);
        return true;
    };
    DependencyObject.Instance._RegisterAllNamesRootedAt = function (toNs, error) {
        if (error.IsErrored())
            return;
        if (this._RegisteringNames)
            return;
        if (this._PermitsMultipleParents() && this._HasSecondaryParents())
            return;
        this._RegisteringNames = true;
        var mergeNamescope = false;
        var registerName = false;
        var recurse = false;
        var thisNs = Fayde.NameScope.GetNameScope(this);
        if (thisNs && thisNs._GetTemporary()) {
            mergeNamescope = true;
        } else if (!thisNs) {
            recurse = true;
            registerName = true;
        } else if (true /* TODO: IsHydratedFromXaml */) {
            registerName = true;
        }
        if (mergeNamescope) {
            toNs._MergeTemporaryScope(thisNs, error);
            this._ClearValue(Fayde.NameScope.NameScopeProperty, false);
        }
        if (registerName) {
            var n = this.Name;
            if (n) {
                var o = toNs.FindName(n);
                if (o) {
                    if (!Nullstone.RefEquals(o, this)) {
                        error.SetErrored(BError.Argument, "The name already exists in the tree: " + n);
                        return;
                    }
                } else {
                    toNs.RegisterName(n, this);
                }
            }
        }
        if (recurse) {
            var data = {
                toNs: toNs,
                error: error
            };
            this._Providers[_PropertyPrecedence.AutoCreate].ForeachValue(DependencyObject._RegisterDONames, data);
            this._Providers[_PropertyPrecedence.LocalValue].ForeachValue(DependencyObject._RegisterDONames, data);
        }
        this._RegisteringNames = false;
    };
    DependencyObject.Instance._UnregisterAllNamesRootedAt = function (fromNs) {
        if (this._RegisteringNames)
            return;
        if (this._PermitsMultipleParents() && this._HasSecondaryParents())
            return;
        this._RegisteringNames = true;
        var thisNs = Fayde.NameScope.GetNameScope(this);
        if (/* TODO: this._IsHydratedFromXaml() || */!thisNs || thisNs._GetTemporary()) {
            var name = this.Name;
            if (name && name.length > 0)
                fromNs.UnregisterName(name);
        }
        if (thisNs && !thisNs._GetTemporary()) {
            this._RegisteringNames = false;
            return;
        }
        this._Providers[_PropertyPrecedence.AutoCreate].ForeachValue(DependencyObject._UnregisterDONames, fromNs);
        this._Providers[_PropertyPrecedence.LocalValue].ForeachValue(DependencyObject._UnregisterDONames, fromNs);
        this._RegisteringNames = false;
    }
    DependencyObject._RegisterDONames = function (propd, value, data) {
        if (data.error.IsErrored())
            return;
        if (value != null && value instanceof DependencyObject) {
            value._RegisterAllNamesRootedAt(data.toNs, data.error);
        }
    };
    DependencyObject._UnregisterDONames = function (propd, value, fromNs) {
        if (!propd._IsCustom && value && value instanceof DependencyObject) {
            value._UnregisterAllNamesRootedAt(fromNs);
        }
    };
    DependencyObject.Instance._PermitsMultipleParents = function () {
        return true;
    };
    DependencyObject.Instance._AddParent = function (parent, mergeNamesFromSubtree, error) {
        if (false/* TODO: IsShuttingDown */) {
            this._Parent = null;
            return;
        }
        var current = parent;
        while (current) {
            if (Nullstone.RefEquals(current, this)) {
                Warn("DependencyObject._AddParent - Cycle found.");
                return;
            }
            current = current._Parent;
        }
        if (this._Parent && !this._PermitsMultipleParents()) {
            if (parent instanceof Fayde.DependencyObjectCollection && (!parent._GetIsSecondaryParent() || this._HasSecondaryParents())) {
                error.SetErrored(BError.InvalidOperation, "Element is already a child of another element.");
                return;
            }
        }
        if (this._Parent || this._HasSecondaryParents()) {
            this._AddSecondaryParent(parent);
            if (this._Parent && !(this._Parent instanceof Fayde.ResourceDictionary))
                this.SetMentor(null);
            if (this._SecondaryParents.length > 1 || !(parent instanceof Fayde.DependencyObjectCollection) || !parent._GetIsSecondaryParent())
                return;
        }
        var thisScope = Fayde.NameScope.GetNameScope(this);
        var parentScope = parent.FindNameScope();
        if (thisScope) {
            if (thisScope._GetTemporary()) {
                if (parentScope) {
                    parentScope._MergeTemporaryScope(thisScope, error);
                    this._ClearValue(Fayde.NameScope.NameScopeProperty, false);
                }
            } else {
                if (true /* TODO: this._IsHydratedFromXaml()*/) {
                    var name = this.Name;
                    if (parentScope && name && name.length > 0) {
                        var existingObj = parentScope.FindName(name);
                        if (existingObj !== this) {
                            if (existingObj) {
                                error.SetErrored(BError.Argument, "Name is already registered in new parent namescope.");
                                return;
                            }
                            parentScope.RegisterName(name, this);
                        }
                    }
                }
            }
        } else {
            if (parentScope && mergeNamesFromSubtree) {
                var tempScope = new Fayde.NameScope();
                tempScope._SetTemporary(true);
                this._RegisterAllNamesRootedAt(tempScope, error);
                if (error.IsErrored())
                    return;
                parentScope._MergeTemporaryScope(tempScope, error);
            }
        }
        if (!error || !error.IsErrored()) {
            this._Parent = parent;
            var d = parent;
            while (d && !(d instanceof Fayde.FrameworkElement)) {
                d = d.GetMentor();
            }
            this.SetMentor(d);
        }
    };
    DependencyObject.Instance._RemoveParent = function (parent, error) {
        if (this._RemoveSecondaryParent(parent)) {
            if (this._HasSecondaryParents() || !(parent instanceof Fayde.DependencyObjectCollection) || !(parent._GetIsSecondaryParent()))
                return;
        } else {
            if (!Nullstone.RefEquals(this._Parent, parent))
                return;
        }
        if (false/* TODO:IsShuttingDown */) {
            this._Parent = null;
            return;
        }
        if (!this._HasSecondaryParents()) {
            var parentScope = parent.FindNameScope();
            if (parentScope)
                this._UnregisterAllNamesRootedAt(parentScope);
            this.SetMentor(null);
        }
        if (!error || !error.IsErrored()) {
            if (Nullstone.RefEquals(this._Parent, parent))
                this._Parent = null;
        }
    };
    DependencyObject.Instance._AddSecondaryParent = function (obj) {
        this._SecondaryParents.push(obj);
    };
    DependencyObject.Instance._RemoveSecondaryParent = function (obj) {
        var index = -1;
        for (var i = 0; i < this._SecondaryParents.length; i++) {
            if (Nullstone.RefEquals(this._SecondaryParents[i], obj)) {
                index = i;
                break;
            }
        }
        if (index < 0)
            return false;
        this._SecondaryParents.splice(index, 1);
        return true;
    };
    DependencyObject.Instance._GetSecondaryParents = function () {
        return this._SecondaryParents;
    };
    DependencyObject.Instance._HasSecondaryParents = function () {
        return this._SecondaryParents.length > 0;
    };
    DependencyObject.Instance._CloneAnimationStorage = function (source) {
        var srcStorageRepo = source._StorageRepo;
        if (!srcStorageRepo)
            return;
        var storageRepo = this._StorageRepo = [];
        for (var key in srcStorageRepo) {
            var newList = new LinkedList();
            var list = srcStorageRepo[key];
            var node = list.Head;
            while (node) {
                node.Storage.SwitchTarget(this);
                var newNode = new LinkedListNode();
                newNode.Storage = node.Storage;
                newList.Append(newNode);
                node = node.Next;
            }
            storageRepo[key] = newList;
        }
    };
    DependencyObject.Instance._GetAnimationStorageFor = function (propd) {
        if (!this._StorageRepo)
            return null;
        var list = this._StorageRepo[propd];
        if (!list || list.IsEmpty())
            return null;
        return list.Tail.Storage;
    };
    DependencyObject.Instance._AttachAnimationStorage = function (propd, storage) {
        var attachedStorage;
        if (!this._StorageRepo)
            this._StorageRepo = [];
        var list = this._StorageRepo[propd];
        if (!list) {
            list = new LinkedList();
            this._StorageRepo[propd] = list;
        } else if (!list.IsEmpty()) {
            attachedStorage = list.Tail.Storage;
            attachedStorage.Disable();
        }
        var node = new LinkedListNode();
        node.Storage = storage;
        list.Append(node);
        return attachedStorage;
    };
    DependencyObject.Instance._DetachAnimationStorage = function (propd, storage) {
        if (!this._StorageRepo)
            return;
        var list = this._StorageRepo[propd];
        if (!list || list.IsEmpty())
            return;
        var last = list.Tail;
        if (Nullstone.RefEquals(last.Storage, storage)) {
            list.Remove(last);
            if (!list.IsEmpty())
                list.Tail.Storage.Enable();
        } else {
            var node = list.Head;
            while (node) {
                if (Nullstone.RefEquals(node.Storage, storage)) {
                    var remove = node;
                    node = node.Next;
                    node.Storage.StopValue = storage.StopValue;
                    list.Remove(remove);
                    break;
                }
                node = node.Next;
            }
        }
    };
    if (!Fayde.IsCanvasEnabled) {
        DependencyObject.ProcessHtmlChanges = function () {
            var elsChanged = DependencyObject._ElsChanged;
            if (!elsChanged)
                return;
            delete DependencyObject._ElsChanged;
            var len = elsChanged.length;
            for (var i = 0; i < len; i++) {
                elsChanged[i].ProcessHtmlChanges();
            }
        };
        DependencyObject.Instance.ProcessHtmlChanges = function () {
            var invalidations = this._HtmlInvalidations;
            if (!invalidations)
                return;
            delete this._HtmlInvalidations;
            this.ApplyHtmlChanges(invalidations);
        };
        DependencyObject.Instance.ApplyHtmlChanges = function (invalidations) {
            for (var i in invalidations) {
                this.ApplyHtmlChange(invalidations[i]);
            }
        };
        DependencyObject.Instance.ApplyHtmlChange = function (change) {
        };
        DependencyObject.Instance.InvalidateProperty = function (propd, oldValue, newValue) {
            if (!this._HtmlInvalid) {
                this._HtmlInvalid = true;
                if (!DependencyObject._ElsChanged)
                    DependencyObject._ElsChanged = [];
                DependencyObject._ElsChanged.push(this);
            }
            if (!this._HtmlInvalidations)
                this._HtmlInvalidations = [];
            this._HtmlInvalidations[propd._ID] = { Property: propd, OldValue: oldValue, NewValue: newValue };
        };
    }
    Fayde.DependencyObject = Nullstone.FinishCreate(DependencyObject);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var FrameworkTemplate = Nullstone.Create("FrameworkTemplate", Fayde.DependencyObject);
    FrameworkTemplate.Instance.GetVisualTree = function (bindingSource) {
        var error = new BError();
        var vt = this._GetVisualTreeWithError(bindingSource, error);
        if (error.IsErrored())
            throw error.CreateException();
        return vt;
    };
    FrameworkTemplate.Instance._GetVisualTreeWithError = function (templateBindingSource, error) {
        NotImplemented("FrameworkTemplate._GetVisualTreeWithError");
    };
    namespace.FrameworkTemplate = Nullstone.FinishCreate(FrameworkTemplate);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var NameScope = Nullstone.Create("NameScope", Fayde.DependencyObject);
    NameScope.Instance.Init = function () {
        this.Init$DependencyObject();
        this._IsLocked = false;
        this._Names = null;
        this._Temporary = false;
    };
    NameScope.NameScopeProperty = DependencyProperty.RegisterAttachedCore("NameScope", function () { return NameScope; }, NameScope);
    NameScope.GetNameScope = function (d) {
        return d.$GetValue(NameScope.NameScopeProperty);
    };
    NameScope.SetNameScope = function (d, value) {
        d.$SetValue(NameScope.NameScopeProperty, value);
    };
    NameScope.Instance.GetIsLocked = function () {
        return this._IsLocked;
    };
    NameScope.Instance.Lock = function () {
        this._IsLocked = true;
    };
    NameScope.Instance.RegisterName = function (name, obj) {
        if (this.GetIsLocked())
            return;
        if (!this._Names)
            this._Names = [];
        var existingObj = this._Names[name];
        if (Nullstone.RefEquals(existingObj, obj))
            return;
        if (existingObj) {
        }
        this._Names[name] = obj;
    };
    NameScope.Instance.UnregisterName = function (name) {
        if (this.GetIsLocked())
            return;
        if (!this._Names)
            return;
        var objd = this._Names[name];
        if (objd instanceof Fayde.DependencyObject) {
            delete this._Names[name];
        }
    };
    NameScope.Instance.FindName = function (name) {
        if (!this._Names)
            return undefined;
        if (name == null) {
            Warn("(null) name specified in NameScope.FindName.");
            return undefined;
        }
        return this._Names[name];
    };
    NameScope.Instance._MergeTemporaryScope = function (temp, error) {
        if (!temp || !temp._Names)
            return;
        for (var name in temp._Names) {
            var value = temp._Names[name];
            var o = this.FindName(name);
            if (o && !Nullstone.RefEquals(o, value)) {
                error.SetErrored(BError.Argument, "The name already exists in the tree.");
                return;
            }
        }
        for (var name in temp._Names) {
            this.RegisterName(name, temp._Names[name]);
        }
    };
    NameScope.Instance._GetTemporary = function () {
        return this._Temporary;
    };
    NameScope.Instance._SetTemporary = function (value) {
        this._Temporary = value;
    };
    Fayde.NameScope = Nullstone.FinishCreate(NameScope);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var RequestBringIntoViewEventArgs = Nullstone.Create("RequestBringIntoViewEventArgs", Fayde.RoutedEventArgs, 2);
    RequestBringIntoViewEventArgs.Instance.Init = function (targetObject, targetRect) {
        this.Init$RoutedEventArgs();
        this.TargetObject = targetObject;
        this.TargetRect = targetRect;
    };
    Fayde.RequestBringIntoViewEventArgs = Nullstone.FinishCreate(RequestBringIntoViewEventArgs);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var SetterBase = Nullstone.Create("SetterBase", Fayde.DependencyObject);
    SetterBase.Instance.Init = function () {
        this.Init$DependencyObject();
        this._Attached = false;
    };
    SetterBase.IsSealedProperty = DependencyProperty.Register("IsSealed", function () { return Boolean; }, SetterBase, false);
    Nullstone.AutoProperties(SetterBase, [
        SetterBase.IsSealedProperty
    ]);
    SetterBase.Instance._Seal = function () {
        if (this.IsSealed)
            return;
        this.$SetValue(SetterBase.IsSealedProperty, true);
    };
    namespace.SetterBase = Nullstone.FinishCreate(SetterBase);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var Style = Nullstone.Create("Style", Fayde.DependencyObject);
    Style.SettersProperty = DependencyProperty.RegisterFull("Setters", function () { return Fayde.SetterBaseCollection; }, Style, undefined, undefined, { GetValue: function () { return new Fayde.SetterBaseCollection(); } });
    Style.IsSealedProperty = DependencyProperty.RegisterCore("IsSealed", function () { return Boolean; }, Style);
    Style.BasedOnProperty = DependencyProperty.RegisterCore("BasedOn", function () { return Function; }, Style);
    Style.TargetTypeProperty = DependencyProperty.RegisterCore("TargetType", function () { return Function; }, Style);
    Nullstone.AutoProperties(Style, [
        Style.SettersProperty,
        Style.IsSealedProperty,
        Style.BasedOnProperty,
        Style.TargetTypeProperty
    ]);
    Style.Annotations = {
        ContentProperty: Style.SettersProperty
    };
    Style.Instance._Seal = function () {
        if (this.IsSealed)
            return;
        this._ConvertSetterValues();
        this.$SetValueInternal(Style.IsSealedProperty, true);
        this.Setters._Seal();
        var base = this.BasedOn;
        if (base)
            base._Seal();
    };
    Style.Instance._ConvertSetterValues = function () {
        var setters = this.Setters;
        var count = setters.GetCount();
        for (var i = 0; i < count; i++) {
            this._ConvertSetterValue(setters.GetValueAt(i));
        }
    };
    Style.Instance._ConvertSetterValue = function (setter) {
        var propd = setter._GetValue(Fayde.Setter.PropertyProperty);
        var val = setter._GetValue(Fayde.Setter.ValueProperty);
        if (typeof propd.GetTargetType() === "string") {
            if (typeof val !== "string")
                throw new XamlParseException("Setter value does not match property type.");
        }
        try {
            setter._SetValue(Fayde.Setter.ConvertedValueProperty, Fayde.TypeConverter.ConvertObject(propd, val, this.TargetType, true));
        } catch (err) {
            throw new XamlParseException(err.message);
        }
    };
    Style.Instance._AddSetter = function (dobj, propName, value) {
        this.Setters.Add(Fayde.JsonParser.CreateSetter(dobj, propName, value));
    };
    Style.Instance._AddSetterJson = function (dobj, propName, json) {
        this._AddSetter(dobj, propName, Fayde.JsonParser.Parse(json));
    };
    namespace.Style = Nullstone.FinishCreate(Style);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var UIElementFlags = {
        None: 0,
        RenderVisible: 0x02,
        HitTestVisible: 0x04,
        TotalRenderVisible: 0x08,
        TotalHitTestVisible: 0x10,
        DirtyArrangeHint: 0x800,
        DirtyMeasureHint: 0x1000,
        DirtySizeHint: 0x2000,
        RenderProjection: 0x4000
    };
    Fayde.UIElementFlags = UIElementFlags;
    var UIElement = Nullstone.Create("UIElement", Fayde.DependencyObject);
    UIElement.Instance.Init = function () {
        this.Init$DependencyObject();
        this.Unloaded = new MulticastEvent();
        this.Loaded = new MulticastEvent();
        this.Invalidated = new MulticastEvent();
        this.AddProvider(new Fayde._InheritedPropertyValueProvider(this));
        this._Flags = UIElementFlags.RenderVisible | UIElementFlags.HitTestVisible;
        this._HiddenDesire = new Size(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
        this._Extents = new Rect();
        this._Bounds = new Rect();
        this._GlobalBounds = new Rect();
        this._SurfaceBounds = new Rect();
        this._DirtyFlags = _Dirty.Measure;
        this._PropagateFlagUp(UIElementFlags.DirtyMeasureHint);
        this._UpDirtyNode = this._DownDirtyNode = null;
        this._ForceInvalidateOfNewBounds = false;
        this._DirtyRegion = new Rect();
        this._DesiredSize = new Size();
        this._RenderSize = new Size();
        this._EffectPadding = new Thickness();
        this._AbsoluteXform = mat3.identity();
        this._LayoutXform = mat3.identity();
        this._LocalXform = mat3.identity();
        this._RenderXform = mat3.identity();
        this._CacheXform = mat3.identity();
        this._LocalProjection = mat4.identity();
        this._AbsoluteProjection = mat4.identity();
        this._RenderProjection = mat4.identity();
        this._ComputeLocalTransform();
        this._ComputeLocalProjection();
        this._ComputeTotalRenderVisibility();
        this._ComputeTotalHitTestVisibility();
        this.MouseMove = new MulticastEvent();
        this.MouseMove.Subscribe(this.OnMouseMove, this);
        this.MouseLeftButtonDown = new MulticastEvent();
        this.MouseLeftButtonDown.Subscribe(this.OnMouseLeftButtonDown, this);
        this.MouseLeftButtonUp = new MulticastEvent();
        this.MouseLeftButtonUp.Subscribe(this.OnMouseLeftButtonUp, this);
        this.MouseRightButtonDown = new MulticastEvent();
        this.MouseRightButtonDown.Subscribe(this.OnMouseRightButtonDown, this);
        this.MouseRightButtonUp = new MulticastEvent();
        this.MouseRightButtonUp.Subscribe(this.OnMouseRightButtonUp, this);
        this.MouseEnter = new MulticastEvent();
        this.MouseLeave = new MulticastEvent();
        this.MouseWheel = new MulticastEvent();
        this.MouseWheel.Subscribe(this.OnMouseWheel, this);
        this.LostMouseCapture = new MulticastEvent();
        this.LostMouseCapture.Subscribe(this.OnLostMouseCapture, this);
        this.GotFocus = new MulticastEvent();
        this.LostFocus = new MulticastEvent();
        this.KeyDown = new MulticastEvent();
        this.KeyUp = new MulticastEvent();
        this.RequestBringIntoView = new MulticastEvent();
        this.VisualParentChanged = new MulticastEvent();
        this.CreateHtmlObject();
    };
    UIElement.AllowDropProperty = DependencyProperty.Register("AllowDrop", function () { return Boolean; }, UIElement);
    UIElement.CacheModeProperty = DependencyProperty.Register("CacheMode", function () { return Fayde.Media.CacheMode; }, UIElement);
    UIElement.ClipProperty = DependencyProperty.RegisterCore("Clip", function () { return Fayde.Media.Geometry; }, UIElement);
    UIElement.EffectProperty = DependencyProperty.Register("Effect", function () { return Fayde.Media.Effects.Effect; }, UIElement);
    UIElement.IsHitTestVisibleProperty = DependencyProperty.RegisterCore("IsHitTestVisible", function () { return Boolean; }, UIElement, true);
    UIElement.OpacityMaskProperty = DependencyProperty.RegisterCore("OpacityMask", function () { return Fayde.Media.Brush; }, UIElement);
    UIElement.OpacityProperty = DependencyProperty.RegisterCore("Opacity", function () { return Number; }, UIElement, 1.0);
    UIElement.ProjectionProperty = DependencyProperty.Register("Projection", function () { return Fayde.Media.Projection; }, UIElement);
    UIElement.RenderTransformProperty = DependencyProperty.Register("RenderTransform", function () { return Fayde.Media.Transform; }, UIElement);
    UIElement.RenderTransformOriginProperty = DependencyProperty.Register("RenderTransformOrigin", function () { return Point; }, UIElement, new Point());
    UIElement.ResourcesProperty = DependencyProperty.RegisterFull("Resources", function () { return Fayde.ResourceDictionary; }, UIElement, undefined, undefined, { GetValue: function () { return new Fayde.ResourceDictionary(); } });
    UIElement.TriggersProperty = DependencyProperty.RegisterFull("Triggers", function () { return Fayde.TriggerCollection; }, UIElement, undefined, undefined, { GetValue: function () { return new Fayde.TriggerCollection(); } });
    UIElement.UseLayoutRoundingProperty = DependencyProperty.RegisterInheritable("UseLayoutRounding", function () { return Boolean; }, UIElement, true, undefined, undefined, _Inheritable.UseLayoutRounding);
    UIElement.VisibilityProperty = DependencyProperty.RegisterCore("Visibility", function () { return new Enum(Fayde.Visibility); }, UIElement, Fayde.Visibility.Visible);
    UIElement.TagProperty = DependencyProperty.Register("Tag", function () { return Object; }, UIElement);
    UIElement.IsFixedWidthProperty = DependencyProperty.Register("IsFixedWidth", function () { return Boolean; }, UIElement, false);
    UIElement.IsFixedHeightProperty = DependencyProperty.Register("IsFixedHeight", function () { return Boolean; }, UIElement, false);
    UIElement.IsMouseOverProperty = DependencyProperty.RegisterReadOnlyCore("IsMouseOver", function () { return Boolean; }, UIElement);
    Nullstone.AutoProperties(UIElement, [
        UIElement.AllowDropProperty,
        UIElement.CacheModeProperty,
        UIElement.ClipProperty,
        UIElement.EffectProperty,
        UIElement.IsHitTestVisibleProperty,
        UIElement.OpacityMaskProperty,
        UIElement.OpacityProperty,
        UIElement.ProjectionProperty,
        UIElement.RenderTransformProperty,
        UIElement.RenderTransformOriginProperty,
        UIElement.ResourcesProperty,
        UIElement.TriggersProperty,
        UIElement.UseLayoutRoundingProperty,
        UIElement.VisibilityProperty,
        UIElement.TagProperty,
        UIElement.IsFixedWidthProperty,
        UIElement.IsFixedHeightProperty
    ]);
    Nullstone.AutoPropertiesReadOnly(UIElement, [
        UIElement.IsMouseOverProperty
    ]);
    Nullstone.AutoProperties(UIElement, [
        "_SubtreeObject"
    ]);
    Nullstone.Property(UIElement, "RenderSize", {
        get: function () { return this._RenderSize; }
    });
    UIElement.Instance.BringIntoView = function (rect) {
        if (!rect) rect = new Rect();
        var args = new Fayde.RequestBringIntoViewEventArgs(this, rect);
        var cur = this;
        while (cur && !args.Handled) {
            cur.RequestBringIntoView.Raise(this, args);
            cur = Fayde.VisualTreeHelper.GetParent(cur);
        }
    };
    UIElement.Instance.SetVisualParent = function (value) {
        this._VisualParent = value;
        this.VisualParentChanged.Raise(this, new EventArgs());
    };
    UIElement.Instance.GetVisualParent = function () {
        return this._VisualParent;
    };
    UIElement.Instance.GetVisualRoot = function () {
        var visualParent = this.GetVisualParent();
        if (visualParent)
            return visualParent.GetVisualRoot();
        return visualParent;
    };
    UIElement.Instance.IsLayoutContainer = function () { return false; };
    UIElement.Instance.IsContainer = function () { return this.IsLayoutContainer(); };
    UIElement.Instance.IsAncestorOf = function (el) {
        var parent = el;
        while (parent && !Nullstone.RefEquals(parent, this))
            parent = Fayde.VisualTreeHelper.GetParent(parent);
        return Nullstone.RefEquals(parent, this);
    };
    UIElement.Instance.TransformToVisual = function (uie) {
        var visual = this;
        var ok = false;
        var surface = App.Instance.MainSurface;
        if (this._IsAttached) {
            while (visual) {
                if (surface._IsTopLevel(visual))
                    ok = true;
                visual = visual.GetVisualParent();
            }
        }
        if (!ok || (uie && !uie._IsAttached)) {
            throw new ArgumentException("UIElement not attached.");
        }
        if (uie && !surface._IsTopLevel(uie)) {
            ok = false;
            visual = uie.GetVisualParent();
            if (visual && uie._IsAttached) {
                while (visual) {
                    if (surface._IsTopLevel(visual))
                        ok = true;
                    visual = visual.GetVisualParent();
                }
            }
            if (!ok) {
                throw new ArgumentException("UIElement not attached.");
            }
        }
        var result = mat4.create();
        if (uie) {
            var inverse = mat4.create();
            mat4.inverse(uie._AbsoluteProjection, inverse);
            mat4.multiply(this._AbsoluteProjection, inverse, result); //result = inverse * abs
        } else {
            mat4.set(this._AbsoluteProjection, result); //result = absolute
        }
        var raw = mat4.toAffineMat3(result);
        if (raw) {
            var mt = new Fayde.Media.MatrixTransform();
            var m = new Matrix();
            m.raw = raw;
            mt._SetValue(Fayde.Media.MatrixTransform.MatrixProperty, m);
            return mt;
        }
        var it = new Fayde.Media.InternalTransform();
        it.raw = result;
        return it;
    };
    UIElement.Instance._CacheInvalidateHint = function () {
    };
    UIElement.Instance._FullInvalidate = function (renderTransform) {
        this._Invalidate();
        if (renderTransform) {
            this._UpdateTransform();
            this._UpdateProjection();
        }
        this._UpdateBounds(true);
    };
    UIElement.Instance._Invalidate = function (rect) {
        if (!rect)
            rect = this.GetBounds();
        if (!this._GetRenderVisible() || this._IsOpacityInvisible())
            return;
        if (this._IsAttached) {
            App.Instance.MainSurface._AddDirtyElement(this, _Dirty.Invalidate);
            this._InvalidateBitmapCache();
            if (false) {
                this._DirtyRegion = this._DirtyRegion.Union(this._GetSubtreeBounds());
            } else {
                this._DirtyRegion = this._DirtyRegion.Union(rect);
            }
            this._OnInvalidated();
        }
    };
    UIElement.Instance._InvalidateMeasure = function () {
        this._DirtyFlags |= _Dirty.Measure;
        this._PropagateFlagUp(UIElementFlags.DirtyMeasureHint);
    };
    UIElement.Instance._InvalidateArrange = function () {
        this._DirtyFlags |= _Dirty.Arrange;
        this._PropagateFlagUp(UIElementFlags.DirtyArrangeHint);
    };
    UIElement.Instance._InvalidateVisibility = function () {
        this._UpdateTotalRenderVisibility();
        this._InvalidateParent(this._GetSubtreeBounds());
    };
    UIElement.Instance._InvalidateSubtreePaint = function () {
        this._Invalidate(this._GetSubtreeBounds());
    };
    UIElement.Instance._InvalidateParent = function (r) {
        var visualParent = this.GetVisualParent();
        if (visualParent)
            visualParent._Invalidate(r);
        else if (this._IsAttached)
            App.Instance.MainSurface._Invalidate(r);
    };
    UIElement.Instance._InvalidateClip = function () {
        this._InvalidateParent(this._GetSubtreeBounds());
        this._UpdateBounds(true);
        this._ComputeComposite();
    };
    UIElement.Instance._InvalidateEffect = function () {
        var effect = this.Effect;
        var oldPadding = this._EffectPadding;
        if (effect)
            this._EffectPadding = effect.Padding();
        else
            this._EffectPadding = new Thickness();
        this._InvalidateParent(this._GetSubtreeBounds());
        if (!Thickness.Equals(oldPadding, this._EffectPadding))
            this._UpdateBounds();
        this._ComputeComposite();
    };
    UIElement.Instance._InvalidateBitmapCache = function () {
    };
    UIElement.Instance._ComputeComposite = function () {
    };
    UIElement.Instance._UpdateTransform = function () {
        if (this._IsAttached)
            App.Instance.MainSurface._AddDirtyElement(this, _Dirty.LocalTransform);
    };
    UIElement.Instance._UpdateProjection = function () {
        if (this._IsAttached)
            App.Instance.MainSurface._AddDirtyElement(this, _Dirty.LocalProjection);
    };
    UIElement.Instance._ComputeTransform = function () {
        var projection = this.Projection;
        var cacheMode = this.CacheMode;
        var oldProjection = mat4.create(this._LocalProjection);
        var old = this._AbsoluteXform;
        var oldCache = this._CacheXform;
        this._AbsoluteXform = mat3.identity();
        this._RenderXform = mat3.identity();
        this._CacheXform = mat3.identity();
        this._AbsoluteProjection = mat4.identity();
        this._LocalProjection = mat4.identity();
        var renderXform = this._RenderXform;
        var visualParent = this.GetVisualParent();
        if (visualParent != null) {
            mat3.set(visualParent._AbsoluteXform, this._AbsoluteXform);
            mat4.set(visualParent._AbsoluteProjection, this._AbsoluteProjection);
        } else if (this._Parent != null && this._Parent instanceof Fayde.Controls.Primitives.Popup) {
            var popup = this._Parent;
            var el = popup;
            while (el != null) {
                this._Flags |= (el._Flags & UIElementFlags.RenderProjection);
                el = el.GetVisualParent();
            }
            if (this._Flags & UIElementFlags.RenderProjection) {
                mat4.set(popup._AbsoluteProjection, this._LocalProjection);
                var m = mat4.createTranslate(popup.HorizontalOffset, popup.VerticalOffset, 0.0);
                mat4.multiply(m, this._LocalProjection, this._LocalProjection); //local = local * m
            } else {
                var pap = popup._AbsoluteProjection;
                renderXform[0] = pap[0];
                renderXform[1] = pap[1];
                renderXform[2] = pap[3];
                renderXform[3] = pap[4];
                renderXform[4] = pap[5];
                renderXform[5] = pap[7];
                mat3.translate(renderXform, popup.HorizontalOffset, popup.VerticalOffset);
            }
        }
        mat3.multiply(renderXform, this._LayoutXform, renderXform); //render = layout * render
        mat3.multiply(renderXform, this._LocalXform, renderXform); //render = local * render
        var m = mat3.toAffineMat4(renderXform);
        mat4.multiply(m, this._LocalProjection, this._LocalProjection); //local = local * m
        if (false) {
        } else {
            mat3.multiply(this._AbsoluteXform, this._RenderXform, this._AbsoluteXform); //abs = render * abs
        }
        if (projection) {
            m = projection.GetTransform();
            mat4.multiply(m, this._LocalProjection, this._LocalProjection); //local = local * m
            this._Flags |= UIElementFlags.RenderProjection;
        }
        mat4.multiply(this._LocalProjection, this._AbsoluteProjection, this._AbsoluteProjection); //abs = abs * local
        if (this instanceof Fayde.Controls.Primitives.Popup) {
            var popupChild = this.Child;
            if (popupChild)
                popupChild._UpdateTransform();
        }
        if (!mat4.equal(oldProjection, this._LocalProjection)) {
            if (visualParent)
                visualParent._Invalidate(this._GetSubtreeBounds());
            else if (App.Instance.MainSurface._IsTopLevel(this))
                this._InvalidateSubtreePaint();
            if (this._IsAttached)
                App.Instance.MainSurface._AddDirtyElement(this, _Dirty.NewBounds);
        }
        if (cacheMode) {
            if (!this.Effect)
                cacheMode.GetTransform(this._CacheXform);
            if (!mat3.equal(oldCache, this._CacheXform))
                this._InvalidateBitmapCache();
            var inverse = mat3.inverse(this._CacheXform);
            mat4.toAffineMat4(inverse, m);
            mat4.multiply(m, this._LocalProjection, this._RenderProjection); //render = local * m
        } else {
            mat4.set(this._LocalProjection, this._RenderProjection);
        }
        if (/* RUNTIME_INIT_USE_UPDATE_POSITION */false && !(this._DirtyFlags & _Dirty.Bounds)) {
            this._TransformBounds(old, this._AbsoluteXform);
        } else {
            this._UpdateBounds();
        }
        this._ComputeComposite();
    };
    UIElement.Instance._ComputeLocalTransform = function () {
        var transform = this.RenderTransform;
        if (!transform)
            return;
        var transformOrigin = this._GetTransformOrigin();
        this._LocalXform = mat3.identity();
        this._RenderXform = mat3.identity();
        mat3.set(transform.Value.raw, this._RenderXform);
        mat3.translate(this._LocalXform, transformOrigin.X, transformOrigin.Y);
        mat3.multiply(this._LocalXform, this._RenderXform, this._LocalXform); //local = render * local
        mat3.translate(this._LocalXform, -transformOrigin.X, -transformOrigin.Y);
    };
    UIElement.Instance._ComputeLocalProjection = function () {
        var projection = this.Projection;
        if (!projection) {
            Fayde.Controls.Panel.SetZ(this, NaN);
            return;
        }
        var size = this._GetSizeForBrush();
        projection._SetObjectSize(size.Width, size.Height);
        Fayde.Controls.Panel.SetZ(this, projection._GetDistanceFromXYPlane());
    };
    UIElement.Instance._TransformBounds = function (old, current) {
        var updated = new Rect();
        var tween = mat3.inverse(old);
        mat3.multiply(current, tween, tween); //tween = tween * current;
        var p0 = vec2.createFrom(0, 0);
        var p1 = vec2.createFrom(1, 0);
        var p2 = vec2.createFrom(1, 1);
        var p3 = vec2.createFrom(0, 1);
        var p0a = mat3.transformVec2(tween, p0, vec2.create());
        p0[0] = p0[0] - p0a[0];
        p0[1] = p0[1] - p0a[1];
        var p1a = mat3.transformVec2(tween, p1, vec2.create());
        p1[0] = p1[0] - p1a[0];
        p1[1] = p1[1] - p1a[1];
        var p2a = mat3.transformVec2(tween, p2, vec2.create());
        p2[0] = p2[0] - p2a[0];
        p2[1] = p2[1] - p2a[1];
        var p3a = mat3.transformVec2(tween, p3, vec2.create());
        p3[0] = p3[0] - p3a[0];
        p3[1] = p3[1] - p3a[1];
        if (vec2.equal(p0, p1) && vec2.equal(p1, p2) && vec2.equal(p2, p3)) {
            var bounds = vec2.createFrom(this._Bounds.X, this._Bounds.Y);
            mat3.transformVec2(tween, bounds);
            this._ShiftPosition(bounds);
            this._ComputeGlobalBounds();
            this._ComputeSurfaceBounds();
            return;
        }
        this._UpdateBounds();
    };
    UIElement.Instance._GetSizeForBrush = function () {
        AbstractMethod("UIElement._GetSizeForBrush");
    };
    UIElement.Instance._GetTransformOrigin = function () {
        return new Point(0, 0);
    };
    UIElement.Instance._ShiftPosition = function (point) {
        this._Bounds.X = point.X;
        this._Bounds.Y = point.Y;
    };
    UIElement.Instance._GetSubtreeExtents = function () {
        AbstractMethod("UIElement._GetSubtreeExtents()");
    };
    UIElement.Instance._GetOriginPoint = function () {
        return new Point(0.0, 0.0);
    };
    UIElement.Instance._UpdateBounds = function (forceRedraw) {
        if (this._IsAttached)
            App.Instance.MainSurface._AddDirtyElement(this, _Dirty.Bounds);
        this._ForceInvalidateOfNewBounds = this._ForceInvalidateOfNewBounds || forceRedraw;
    };
    UIElement.Instance._IntersectBoundsWithClipPath = function (unclipped, transform) {
        var clip = this.Clip;
        var layoutClip = transform ? undefined : Fayde.LayoutInformation.GetLayoutClip(this);
        var box;
        if (!clip && !layoutClip)
            return unclipped;
        if (clip)
            box = clip.GetBounds();
        else
            box = layoutClip.GetBounds();
        if (layoutClip)
            box = box.Intersection(layoutClip.GetBounds());
        if (!this._GetRenderVisible())
            box = new Rect(0, 0, 0, 0);
        if (transform)
            box = box.Transform(this._AbsoluteXform);
        return box.Intersection(unclipped);
    };
    UIElement.Instance.GetBounds = function () {
        return this._SurfaceBounds;
    };
    UIElement.Instance._ComputeBounds = function () {
        AbstractMethod("UIElement._ComputeBounds()");
    };
    UIElement.Instance._GetGlobalBounds = function () {
        return this._GlobalBounds;
    };
    UIElement.Instance._ComputeGlobalBounds = function () {
        this._GlobalBounds = this._IntersectBoundsWithClipPath(this._Extents.GrowByThickness(this._EffectPadding), false).Transform4(this._LocalProjection);
    };
    UIElement.Instance._GetSubtreeBounds = function () {
        return this._SurfaceBounds;
    };
    UIElement.Instance._ComputeSurfaceBounds = function () {
        this._SurfaceBounds = this._IntersectBoundsWithClipPath(this._Extents.GrowByThickness(this._EffectPadding), false).Transform4(this._AbsoluteProjection);
    };
    UIElement.Instance._ComputeTotalRenderVisibility = function () {
        if (this._GetActualTotalRenderVisibility())
            this._Flags |= UIElementFlags.TotalRenderVisible;
        else
            this._Flags &= ~UIElementFlags.TotalRenderVisible;
    };
    UIElement.Instance._UpdateTotalRenderVisibility = function () {
        if (this._IsAttached)
            App.Instance.MainSurface._AddDirtyElement(this, _Dirty.RenderVisibility);
    };
    UIElement.Instance._GetActualTotalRenderVisibility = function () {
        var visible = (this._Flags & UIElementFlags.RenderVisible) != 0;
        var parentVisible = true;
        this._TotalOpacity = this.Opacity;
        var visualParent = this.GetVisualParent();
        if (visualParent) {
            visualParent._ComputeTotalRenderVisibility();
            parentVisible = visible && visualParent._GetRenderVisible();
            this._TotalOpacity *= visualParent._TotalOpacity;
        }
        visible = visible && parentVisible;
        return visible;
    };
    UIElement.Instance._GetRenderVisible = function () {
        return (this._Flags & UIElementFlags.TotalRenderVisible) != 0;
    };
    UIElement.Instance._ComputeTotalHitTestVisibility = function () {
        if (this._GetActualTotalHitTestVisibility())
            this._Flags |= UIElementFlags.TotalHitTestVisible;
        else
            this._Flags &= ~UIElementFlags.TotalHitTestVisible;
    };
    UIElement.Instance._UpdateTotalHitTestVisibility = function () {
        if (this._IsAttached)
            App.Instance.MainSurface._AddDirtyElement(this, _Dirty.HitTestVisibility);
    };
    UIElement.Instance._GetActualTotalHitTestVisibility = function () {
        var visible = (this._Flags & UIElementFlags.HitTestVisible) != 0;
        var visualParent;
        if (visible && (visualParent = this.GetVisualParent())) {
            visualParent._ComputeTotalRenderVisibility();
            visible = visible && visualParent._GetIsHitTestVisible();
        }
        return visible;
    };
    UIElement.Instance._GetIsHitTestVisible = function () {
        return (this._Flags & UIElementFlags.TotalHitTestVisible) != 0;
    };
    UIElement.Instance._HitTestPoint = function (ctx, p, uielist) {
        uielist.Prepend(new Fayde.UIElementNode(this));
    };
    UIElement.Instance._InsideObject = function (ctx, x, y) {
        return this._InsideClip(ctx, x, y);
    };
    UIElement.Instance._InsideClip = function (ctx, x, y) {
        var clip = this.Clip;
        if (!clip)
            return true;
        var np = new Point(x, y);
        this._TransformPoint(np);
        if (!clip.GetBounds().ContainsPoint(np))
            return false;
        return ctx.IsPointInClipPath(clip, np);
    };
    UIElement.Instance._TransformPoint = function (p) {
        var inverse = mat4.inverse(this._AbsoluteProjection, mat4.create());
        if (inverse == null) {
            Warn("Could not get inverse of Absolute Projection for UIElement.");
            return;
        }
        var p4 = vec4.createFrom(p.X, p.Y, 0.0, 1.0);
        var m20 = inverse[2];
        var m21 = inverse[6];
        var m22 = inverse[10];
        var m23 = inverse[14];
        p4[2] = -(m20 * p4[0] + m21 * p4[1] + m23) / m22;
        mat4.transformVec4(inverse, p4);
        p.X = p4[0] / p4[3];
        p.Y = p4[1] / p4[3];
    };
    UIElement.Instance._CanFindElement = function () {
        return false;
    };
    UIElement.Instance._DoMeasureWithError = function (error) {
        var last = Fayde.LayoutInformation.GetPreviousConstraint(this);
        var parent = this.GetVisualParent();
        var infinite = new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
        if (!this._IsAttached && !last && !parent && this.IsLayoutContainer()) {
            last = infinite;
        }
        if (last) {
            var previousDesired = this._DesiredSize;
            this._MeasureWithError(last, error);
            if (Size.Equals(previousDesired, this._DesiredSize))
                return;
        }
        if (parent)
            parent._InvalidateMeasure();
        this._DirtyFlags &= ~_Dirty.Measure;
    };
    UIElement.Instance.Measure = function (availableSize) {
        var error = new BError();
        this._MeasureWithError(availableSize, error);
    };
    UIElement.Instance._MeasureWithError = function (availableSize, error) { };
    UIElement.Instance._DoArrangeWithError = function (error) {
        var last = this._ReadLocalValue(Fayde.LayoutInformation.LayoutSlotProperty);
        if (last === null)
            last = undefined;
        var parent = this.GetVisualParent();
        if (!parent) {
            var desired = new Size();
            var surface = App.Instance.MainSurface;
            if (this.IsLayoutContainer()) {
                desired = this._DesiredSize;
                if (this._IsAttached && surface._IsTopLevel(this) && !this._Parent) {
                    var measure = Fayde.LayoutInformation.GetPreviousConstraint(this);
                    if (measure)
                        desired = desired.Max(measure);
                    else
                        desired = new Size(surface.GetWidth(), surface.GetHeight());
                }
            } else {
                desired = new Size(this.ActualWidth, this.ActualHeight);
            }
            viewport = new Rect(Fayde.Controls.Canvas.GetLeft(this), Fayde.Controls.Canvas.GetTop(this), desired.Width, desired.Height)
            last = viewport;
        }
        if (last) {
            this._ArrangeWithError(last, error);
        } else {
            if (parent)
                parent._InvalidateArrange();
        }
    };
    UIElement.Instance.Arrange = function (finalRect) {
        var error = new BError();
        this._ArrangeWithError(finalRect, error);
    };
    UIElement.Instance._ArrangeWithError = function (finalRect, error) { };
    UIElement.Instance._DoRender = function (ctx, parentRegion) {
        if (!this._GetRenderVisible() || this._IsOpacityInvisible())
            return;
        var region;
        if (false) {
        } else {
            region = this._GetSubtreeExtents()
                .Transform(this._RenderXform)
                .Transform(ctx.CurrentTransform)
                .RoundOut()
                .Intersection(parentRegion);
        }
        if (region.IsEmpty())
            return;
        ctx.Save();
        ctx.Transform(this._RenderXform);
        ctx.CanvasContext.globalAlpha = this._TotalOpacity;
        var canvasCtx = ctx.CanvasContext;
        var clip = this.Clip;
        if (clip) {
            clip.Draw(ctx);
            canvasCtx.clip();
        }
        RenderDebug.Count++;
        RenderDebug(this.__DebugToString());
        var effect = this.Effect;
        if (effect) {
            canvasCtx.save();
            effect.PreRender(ctx);
        }
        this._Render(ctx, region);
        if (effect) {
            canvasCtx.restore();
        }
        var walker = Fayde._VisualTreeWalker.ZForward(this);
        var child;
        while (child = walker.Step()) {
            child._DoRender(ctx, region);
        }
        ctx.Restore();
    };
    UIElement.Instance._Render = function (ctx, region) { };
    UIElement.Instance._SetIsLoaded = function (value) {
        if (this._IsLoaded !== value) {
            this._IsLoaded = value;
            this._OnIsLoadedChanged(value);
        }
    };
    UIElement.Instance._OnIsLoadedChanged = function (loaded) {
        var iter;
        var v;
        if (!this._IsLoaded) {
            this.Unloaded.Raise(this, new EventArgs());
            iter = this.Resources.GetIterator();
            while (iter.Next()) {
                v = iter.GetCurrent();
                v = Nullstone.As(v, Fayde.FrameworkElement);
                if (v)
                    v._SetIsLoaded(loaded);
            }
        }
        var walker = new Fayde._VisualTreeWalker(this);
        var element;
        while (element = walker.Step()) {
            element._SetIsLoaded(loaded);
        }
        if (this._IsLoaded) {
            iter = this.Resources.GetIterator();
            while (iter.Next()) {
                v = iter.GetCurrent();
                v = Nullstone.As(v, Fayde.FrameworkElement);
                if (v)
                    v._SetIsLoaded(loaded);
            }
            this.Loaded.RaiseAsync(this, new EventArgs());
        }
    };
    UIElement.Instance._OnIsAttachedChanged = function (value) {
        this._UpdateTotalRenderVisibility();
        var subtree = this._SubtreeObject;
        if (subtree) {
            if (!Fayde.IsCanvasEnabled) {
                this.IsFixedWidth = this.CalculateIsFixedWidth();
                this.IsFixedHeight = this.CalculateIsFixedHeight();
            }
            subtree._SetIsAttached(value);
        }
        this._OnIsAttachedChanged$DependencyObject(value);
        if (!value) {
            this._CacheInvalidateHint();
            var surface = App.Instance.MainSurface;
            if (surface) {
                surface._RemoveDirtyElement(this);
                if (Nullstone.RefEquals(surface._FocusedElement, this))
                    surface._FocusElement(null);
            }
        } else {
        }
    };
    UIElement.Instance._OnInvalidated = function () {
        this.Invalidated.Raise(this, null);
    };
    UIElement.Instance._ElementRemoved = function (item) {
        this._Invalidate(item._GetSubtreeBounds());
        item.SetVisualParent(null);
        item._SetIsLoaded(false);
        item._SetIsAttached(false);
        item.SetMentor(null);
        var emptySlot = new Rect();
        Fayde.LayoutInformation.SetLayoutSlot(item, emptySlot);
        item._ClearValue(Fayde.LayoutInformation.LayoutClipProperty);
        this._InvalidateMeasure();
        this._Providers[_PropertyPrecedence.Inherited].ClearInheritedPropertiesOnRemovingFromTree(item);
    }
    UIElement.Instance._ElementAdded = function (item) {
        item.SetVisualParent(this);
        item._UpdateTotalRenderVisibility();
        item._UpdateTotalHitTestVisibility();
        item._Invalidate();
        this._Providers[_PropertyPrecedence.Inherited].PropagateInheritedPropertiesOnAddingToTree(item);
        item._SetIsAttached(this._IsAttached);
        item._SetIsLoaded(this._IsLoaded);
        var o = this;
        while (o && !(o instanceof Fayde.FrameworkElement))
            o = o.GetMentor();
        item.SetMentor(o);
        this._UpdateBounds(true);
        this._InvalidateMeasure();
        this._ClearValue(Fayde.LayoutInformation.LayoutClipProperty);
        this._ClearValue(Fayde.LayoutInformation.PreviousConstraintProperty);
        item._RenderSize = new Size(0, 0);
        item._UpdateTransform();
        item._UpdateProjection();
        item._InvalidateMeasure();
        item._InvalidateArrange();
        if (item._HasFlag(UIElementFlags.DirtySizeHint) || item._ReadLocalValue(Fayde.LayoutInformation.LastRenderSizeProperty) !== undefined)
            item._PropagateFlagUp(UIElementFlags.DirtySizeHint);
        if (!Fayde.IsCanvasEnabled) {
            if (this._IsAttached) {
                item.IsFixedWidth = item.CalculateIsFixedWidth();
                item.IsFixedHeight = item.CalculateIsFixedHeight();
            }
        }
    }
    UIElement.Instance._UpdateLayer = function (pass, error) {
    };
    UIElement.Instance._HasFlag = function (flag) { return (this._Flags & flag) == flag; };
    UIElement.Instance._ClearFlag = function (flag) { this._Flags &= ~flag; };
    UIElement.Instance._SetFlag = function (flag) { this._Flags |= flag; };
    UIElement.Instance._PropagateFlagUp = function (flag) {
        this._SetFlag(flag);
        var el = this.GetVisualParent();
        while (el && !el._HasFlag(flag)) {
            el._SetFlag(flag);
            el = el.GetVisualParent();
        }
    };
    UIElement.Instance.__DebugDownDirtyFlags = function () {
        var t = new String();
        if (this._DirtyFlags & _Dirty.ChildrenZIndices)
            t = t.concat("[ChildrenZIndices]");
        if (this._DirtyFlags & _Dirty.Clip)
            t = t.concat("[Clip]");
        if (this._DirtyFlags & _Dirty.Transform)
            t = t.concat("[Transform]");
        if (this._DirtyFlags & _Dirty.LocalTransform)
            t = t.concat("[LocalTransform]");
        if (this._DirtyFlags & _Dirty.LocalProjection)
            t = t.concat("[LocalProjection]");
        if (this._DirtyFlags & _Dirty.RenderVisibility)
            t = t.concat("[RenderVisibility]");
        if (this._DirtyFlags & _Dirty.HitTestVisibility)
            t = t.concat("[HitTestVisibility]");
        return t;
    };
    UIElement.Instance.__DebugUpDirtyFlags = function () {
        var t = new String();
        if (this._DirtyFlags & _Dirty.Bounds)
            t = t.concat("[Bounds]");
        if (this._DirtyFlags & _Dirty.NewBounds)
            t = t.concat("[NewBounds]");
        if (this._DirtyFlags & _Dirty.Invalidate)
            t = t.concat("[Invalidate]");
        return t;
    };
    if (!Fayde.IsCanvasEnabled) {
        UIElement.Instance._OnPropertyChanged = function (args, error) {
            var propd = args.Property;
            if (propd.OwnerType !== UIElement) {
                this._OnPropertyChanged$DependencyObject(args, error);
                return;
            }
            var ivprop = false;
            switch (propd._ID) {
                case UIElement.OpacityProperty._ID:
                case UIElement.VisibilityProperty._ID:
                    ivprop = true;
                    break;
                case UIElement.IsFixedHeightProperty._ID:
                    ivprop = true;
                    this.InvalidateChildrenFixedHeight();
                    break;
                case UIElement.IsFixedWidthProperty._ID:
                    ivprop = true;
                    this.InvalidateChildrenFixedWidth();
                    break;
                default:
                    break;
            }
            if (ivprop)
                this.InvalidateProperty(propd, args.OldValue, args.NewValue);
            this.PropertyChanged.Raise(this, args);
        };
    }
    if (Fayde.IsCanvasEnabled) {
        UIElement.Instance._OnPropertyChanged = function (args, error) {
            var propd = args.Property;
            if (propd.OwnerType !== UIElement) {
                this._OnPropertyChanged$DependencyObject(args, error);
                return;
            }
            if (propd._ID === UIElement.OpacityProperty._ID) {
                this._InvalidateVisibility();
            } else if (propd._ID === UIElement.VisibilityProperty._ID) {
                if (args.NewValue === Fayde.Visibility.Visible)
                    this._Flags |= UIElementFlags.RenderVisible;
                else
                    this._Flags &= ~UIElementFlags.RenderVisible;
                this._InvalidateVisibility();
                this._InvalidateMeasure();
                var parent = this.GetVisualParent();
                if (parent)
                    parent._InvalidateMeasure();
                App.Instance.MainSurface._RemoveFocus(this);
            } else if (propd._ID === UIElement.IsHitTestVisibleProperty._ID) {
                if (args.NewValue === true) {
                    this._Flags |= UIElementFlags.HitTestVisible;
                } else {
                    this._Flags &= ~UIElementFlags.HitTestVisible;
                }
                this._UpdateTotalHitTestVisibility();
            } else if (propd._ID === UIElement.ClipProperty._ID) {
                this._InvalidateClip();
            } else if (propd._ID === UIElement.OpacityMaskProperty._ID) {
            } else if (propd._ID === UIElement.RenderTransformProperty._ID
                || args.Property._ID === UIElement.RenderTransformOriginProperty._ID) {
                this._UpdateTransform();
            } else if (propd._ID === UIElement.TriggersProperty._ID) {
                var triggers = args.OldValue;
                if (triggers) {
                    var count = triggers.GetCount();
                    for (var i = 0; i < count; i++) {
                        triggers.GetValueAt(i)._RemoveTarget(this);
                    }
                }
                triggers = args.NewValue;
                if (triggers) {
                    var count = triggers.GetCount();
                    for (var i = 0; i < count; i++) {
                        triggers.GetValueAt(i)._SetTarget(this);
                    }
                }
            } else if (propd._ID === UIElement.UseLayoutRoundingProperty._ID) {
                this._InvalidateMeasure();
                this._InvalidateArrange();
            } else if (propd._ID === UIElement.EffectProperty._ID) {
                var oldEffect = args.OldValue != null;
                var newEffect = args.NewValue != null;
                this._InvalidateEffect();
                if (oldEffect !== newEffect && this._IsAttached)
                    App.Instance.MainSurface._AddDirtyElement(this, _Dirty.Transform);
            } else if (propd._ID === UIElement.ProjectionProperty._ID) {
                this._UpdateProjection();
            } else if (propd._ID === UIElement.CacheModeProperty._ID) {
            }
            this.PropertyChanged.Raise(this, args);
        };
        UIElement.Instance._OnSubPropertyChanged = function (propd, sender, args) {
            if (propd._ID === UIElement.ClipProperty._ID) {
                this._InvalidateClip();
            } else if (propd._ID === UIElement.EffectProperty._ID) {
                this._InvalidateEffect();
            }
            this._OnSubPropertyChanged$DependencyObject(propd, sender, args);
        };
        UIElement.Instance._OnCollectionChanged = function (col, args) {
            if (this._PropertyHasValueNoAutoCreate(UIElement.TriggersProperty, col)) {
                if (args.IsAdd) {
                    args.NewValue._SetTarget(this);
                } else if (args.IsReplace) {
                    args.OldValue._RemoveTarget(this);
                    args.NewValue._SetTarget(this);
                } else if (args.IsRemove) {
                    args.OldValue._RemoveTarget(this);
                } else if (args.IsClearing) {
                    var count = col.GetCount();
                    for (var i = 0; i < count; i++) {
                        col.GetValueAt(i)._RemoveTarget(this);
                    }
                }
            } else if (this._PropertyHasValueNoAutoCreate(UIElement.ResourcesProperty, col)) {
            } else {
                this._OnCollectionChanged$DependencyObject(col, args);
            }
        };
    }
    UIElement.Instance.CanCaptureMouse = function () { return true; };
    UIElement.Instance.CaptureMouse = function () {
        if (!this._IsAttached)
            return false;
        return App.Instance.MainSurface.SetMouseCapture(this);
    };
    UIElement.Instance.ReleaseMouseCapture = function () {
        if (!this._IsAttached)
            return;
        App.Instance.MainSurface.ReleaseMouseCapture(this);
    };
    UIElement.Instance._EmitEvent = function (type, button, args) {
        if (type === "up") {
            if (Surface.IsLeftButton(button)) {
                this.MouseLeftButtonUp.Raise(this, args);
            } else if (Surface.IsRightButton(button)) {
                this.MouseRightButtonUp.Raise(this, args);
            }
        } else if (type === "down") {
            if (Surface.IsLeftButton(button)) {
                this.MouseLeftButtonDown.Raise(this, args);
            } else if (Surface.IsRightButton(button)) {
                this.MouseRightButtonDown.Raise(this, args);
            }
        } else if (type === "leave") {
            this.$SetValueInternal(UIElement.IsMouseOverProperty, false);
            this.OnMouseLeave(args);
            this.MouseLeave.Raise(this, args);
        } else if (type === "enter") {
            this.$SetValueInternal(UIElement.IsMouseOverProperty, true);
            this.OnMouseEnter(args);
            this.MouseEnter.Raise(this, args);
        } else if (type === "move") {
            this.MouseMove.Raise(this, args);
        } else if (type === "wheel") {
            this.MouseWheel.Raise(this, args);
        } else {
            return false;
        }
        return args.Handled;
    };
    UIElement.Instance.OnMouseMove = function (sender, e) { };
    UIElement.Instance.OnMouseLeftButtonDown = function (sender, e) { };
    UIElement.Instance.OnMouseLeftButtonUp = function (sender, e) { };
    UIElement.Instance.OnMouseRightButtonDown = function (sender, e) { };
    UIElement.Instance.OnMouseRightButtonUp = function (sender, e) { };
    UIElement.Instance.OnMouseEnter = function (e) { };
    UIElement.Instance.OnMouseLeave = function (e) { };
    UIElement.Instance.OnMouseWheel = function (sender, e) { };
    UIElement.Instance._EmitLostMouseCapture = function (absolutePos) {
        this.LostMouseCapture.Raise(this, new Fayde.Input.MouseEventArgs(absolutePos));
    };
    UIElement.Instance.OnLostMouseCapture = function (sender, e) { };
    UIElement.Instance._EmitKeyDown = function (args) {
        this.OnKeyDown(args);
        this.KeyDown.Raise(this, args);
    };
    UIElement.Instance._EmitKeyUp = function (args) {
        this.OnKeyUp(args);
        this.KeyUp.Raise(this, args);
    };
    UIElement.Instance.OnKeyDown = function (args) { };
    UIElement.Instance.OnKeyUp = function (args) { };
    UIElement.Instance.Focus = function (recurse) {
        return false;
    };
    UIElement.Instance._EmitFocusChange = function (type) {
        if (type === "got")
            this._EmitGotFocus();
        else if (type === "lost")
            this._EmitLostFocus();
    };
    UIElement.Instance._EmitGotFocus = function () {
        var e = new Fayde.RoutedEventArgs();
        this.OnGotFocus(e);
        this.GotFocus.Raise(this, e);
    };
    UIElement.Instance.OnGotFocus = function (e) { };
    UIElement.Instance._EmitLostFocus = function () {
        var e = new Fayde.RoutedEventArgs();
        this.OnLostFocus(e);
        this.LostFocus.Raise(this, e);
    };
    UIElement.Instance.OnLostFocus = function (e) { };
    UIElement.Instance.CreateHtmlObject = function () { };
    if (!Fayde.IsCanvasEnabled) {
        UIElement.Instance.ApplyHtmlChange = function (change) {
            var rootEl = this.GetRootHtmlElement();
            var propd = change.Property;
            if (propd._ID === UIElement.OpacityProperty._ID) {
                var contentEl = rootEl.firstChild;
                contentEl.style.opacity = change.NewValue;
                contentEl.style.filter = "alpha(opacity = " + change.NewValue * 100 + ")";
            } else if (propd._ID === UIElement.VisibilityProperty._ID) {
                if (change.NewValue === Fayde.Visibility.Collapsed) {
                    rootEl.style.display = "none";
                } else if (change.NewValue === Fayde.Visibility.Visible) {
                    rootEl.style.display = this.GetHtmlDefaultDisplay();
                }
            } else if (propd._ID === UIElement.IsHitTestVisibleProperty._ID) {
            } else if (propd._ID === UIElement.ClipProperty._ID) {
            } else if (propd._ID === UIElement.OpacityMaskProperty._ID) {
            } else if (propd._ID === UIElement.RenderTransformProperty._ID
                || propd._ID === UIElement.RenderTransformOriginProperty._ID) {
            } else if (propd._ID === UIElement.TriggersProperty._ID) {
            } else if (propd._ID === UIElement.UseLayoutRoundingProperty._ID) {
            } else if (propd._ID === UIElement.EffectProperty._ID) {
            } else if (propd._ID === UIElement.ProjectionProperty._ID) {
            } else if (propd._ID === UIElement.CacheModeProperty._ID) {
            }
        };
        UIElement.Instance.CreateHtmlObject = function () {
            this._HtmlEl = this.CreateHtmlObjectImpl();
        };
        UIElement.Instance.CreateHtmlObjectImpl = function () {
            return null;
        };
        UIElement.Instance.GetRootHtmlElement = function () {
            if (!this._HtmlEl)
                this.CreateHtmlObject();
            return this._HtmlEl;
        };
        UIElement.Instance.OnHtmlAttached = function () {
            var subtree = this._SubtreeObject;
            if (subtree) {
                this.GetRootHtmlElement().appendChild(subtree.GetRootHtmlElement());
                subtree.OnHtmlAttached();
            }
        };
        UIElement.Instance.OnHtmlDetached = function () {
            var subtree = this._SubtreeObject;
            if (subtree) {
                subtree.OnHtmlDetached();
                this.GetRootHtmlElement().removeChild(subtree.GetRootHtmlElement());
            }
        };
        UIElement.Instance.GetHtmlDefaultDisplay = function () {
            return "";
        }
        UIElement.Instance.GetIsFixedWidth = function (child) {
            return this.IsFixedWidth;
        };
        UIElement.Instance.GetIsFixedHeight = function (child) {
            return this.IsFixedHeight;
        };
        UIElement.Instance.GetParentIsFixedWidth = function () {
            var vp = this.GetVisualParent();
            if (vp) return vp.GetIsFixedWidth(this);
            else return true;
        };
        UIElement.Instance.GetParentIsFixedHeight = function () {
            var vp = this.GetVisualParent();
            if (vp) return vp.GetIsFixedHeight(this);
            else return true;
        };
        UIElement.Instance.InvalidateChildrenFixedWidth = function () {
            var subtree = this._SubtreeObject;
            if (subtree) {
                if (subtree instanceof Fayde.InternalCollection) {
                    var len = subtree.GetCount();
                    for (var i = 0; i < len; i++) {
                        var item = subtree.GetValueAt(i);
                        item.IsFixedWidth = item.CalculateIsFixedWidth();
                    }
                } else if (subtree instanceof UIElement) {
                    subtree.IsFixedWidth = subtree.CalculateIsFixedWidth();
                }
            }
        };
        UIElement.Instance.InvalidateChildrenFixedHeight = function () {
            var subtree = this._SubtreeObject;
            if (subtree) {
                if (subtree instanceof Fayde.InternalCollection) {
                    var len = subtree.GetCount();
                    for (var i = 0; i < len; i++) {
                        var item = subtree.GetValueAt(i);
                        item.IsFixedHeight = item.CalculateIsFixedHeight();
                    }
                } else if (subtree instanceof UIElement) {
                    subtree.IsFixedHeight = subtree.CalculateIsFixedHeight();
                }
            }
        };
        UIElement.Instance.CalculateIsFixedWidth = function () { return false; };
        UIElement.Instance.CalculateIsFixedHeight = function () { return false; };
    }
    UIElement.Instance._IsOpacityInvisible = function () {
        return this._TotalOpacity * 255 < .5;
    };
    UIElement.Instance._IsOpacityTranslucent = function () {
        return this._TotalOpacity * 255 < 245.5;
    };
    UIElement.Instance.__DebugToString = function () {
        return this._ID + ":" + this.constructor._TypeName + ":" + this.Name;
    };
    Fayde.UIElement = Nullstone.FinishCreate(UIElement);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    function _CollectionChangedArgs(oldValue, newValue, index) {
        this.OldValue = oldValue;
        this.NewValue = newValue;
        this.Index = index;
    }
    _CollectionChangedArgs.Add = function (value, index) {
        var args = new _CollectionChangedArgs(undefined, value, index);
        args.IsAdd = true;
        return args;
    };
    _CollectionChangedArgs.Clearing = function () {
        var args = new _CollectionChangedArgs(undefined, undefined, -1);
        args.IsClearing = true;
        return args;
    };
    _CollectionChangedArgs.Cleared = function () {
        var args = new _CollectionChangedArgs(undefined, undefined, -1);
        args.IsCleared = true;
        return args;
    };
    _CollectionChangedArgs.Remove = function (removed, index) {
        var args = new _CollectionChangedArgs(removed, undefined, index);
        args.IsRemove = true;
        return args;
    };
    _CollectionChangedArgs.Replace = function (removed, added, index) {
        var args = new _CollectionChangedArgs(removed, added, index);
        args.IsReplace = true;
        return args;
    };
    _CollectionChangedArgs.Reset = function () {
        var args = new _CollectionChangedArgs(undefined, undefined, -1);
        args.IsReset = true;
        return args;
    };
    function _ItemChangedArgs(item, propd, oldValue, newValue) {
        this.Item = item;
        this.Property = propd;
        this.OldValue = oldValue;
        this.NewValue = newValue;
    };
    function InternalCollectionIterator(collection) {
        this._Collection = collection;
        this._Index = -1;
    }
    InternalCollectionIterator.prototype.Next = function (error) {
        this._Index++;
        return this._Index < this._Collection.GetCount();
    };
    InternalCollectionIterator.prototype.Reset = function () {
        this._Index = -1;
    };
    InternalCollectionIterator.prototype.GetCurrent = function (error) {
        if (this._Index < 0 || this._Index >= this._Collection.GetCount()) {
            error.SetErrored(BError.InvalidOperation, "Index out of bounds.");
            return undefined;
        }
        return this._Collection.GetValueAt(this._Index);
    };
    var InternalCollection = Nullstone.Create("InternalCollection", Fayde.DependencyObject);
    var instance = {};
    instance.Init = function () {
        this.Init$DependencyObject();
        this._ht = [];
        this.Changed = new MulticastEvent();
        this.ItemChanged = new MulticastEvent();
    };
    InternalCollection.CountProperty = DependencyProperty.RegisterCore("Count", function () { return Number; }, InternalCollection, 0);
    instance.GetCount = function () {
        return this._ht.length;
    };
    instance.GetValueAt = function (index) {
        return this._ht[index];
    };
    instance.SetValueAt = function (index, value) {
        if (!this.CanAdd(value))
            return false;
        if (index < 0 || index >= this._ht.length)
            return false;
        var removed = this._ht[index];
        var added = value;
        var error = new BError();
        if (this.AddedToCollection(added, error)) {
            this._ht[index] = added;
            this.RemovedFromCollection(removed, true);
            this._RaiseChanged(_CollectionChangedArgs.Replace(removed, added, index));
            return true;
        }
        return false;
    };
    instance.Add = function (value) {
        var rv = this.Insert(this._ht.length, value);
        return rv ? this._ht.length - 1 : -1;
    };
    instance.AddRange = function (newItems) {
        if (newItems == null)
            return false;
        var rawArray = newItems;
        if (rawArray instanceof InternalCollection)
            rawArray = rawArray._ht;
        if (!Array.isArray(rawArray))
            return false;
        var rv = true;
        var count = rawArray.length;
        for (var i = 0; i < count; i++) {
            if (!this.Add(rawArray[i]))
                rv = false;
        }
        return rv;
    };
    instance.Insert = function (index, value) {
        if (!this.CanAdd(value))
            return false;
        if (index < 0)
            return false;
        var count = this.GetCount();
        if (index > count)
            index = count;
        var error = new BError();
        if (this.AddedToCollection(value, error)) {
            this._ht.splice(index, 0, value);
            this._RaiseChanged(_CollectionChangedArgs.Add(value, index));
            return true;
        }
        if (error.IsErrored())
            throw error.CreateException();
        return false;
    };
    instance.Remove = function (value) {
        var index = this.IndexOf(value);
        if (index == -1)
            return false;
        return this.RemoveAt(index);
    };
    instance.RemoveAt = function (index) {
        if (index < 0 || index >= this._ht.length)
            return false;
        var value = this._ht[index];
        this._ht.splice(index, 1);
        this.RemovedFromCollection(value, true);
        this._RaiseChanged(_CollectionChangedArgs.Remove(value, index));
        return true;
    };
    instance.Clear = function () {
        this._RaiseChanged(_CollectionChangedArgs.Clearing());
        var old = this._ht;
        this._ht = [];
        for (var i = 0; i < old.length; i++) {
            this.RemovedFromCollection(old[i], true);
        }
        this._RaiseChanged(_CollectionChangedArgs.Cleared());
        return true;
    };
    instance.IndexOf = function (value) {
        var count = this.GetCount();
        for (var i = 0; i < count; i++) {
            if (Nullstone.Equals(value, this._ht[i]))
                return i;
        }
        return -1;
    };
    instance.Contains = function (value) {
        return this.IndexOf(value) > -1;
    };
    instance.CanAdd = function (value) { return true; };
    instance.AddedToCollection = function (value, error) { return true; };
    instance.RemovedFromCollection = function (value, isValueSafe) { };
    instance.GetIterator = function () {
        return new InternalCollectionIterator(this);
    };
    instance.ToArray = function () {
        return this._ht.slice(0);
    };
    instance._RaiseItemChanged = function (obj, propd, oldValue, newValue) {
        this.ItemChanged.Raise(this, new _ItemChangedArgs(obj, propd, oldValue, newValue));
    };
    instance._RaiseChanged = function (args) {
        this.Changed.Raise(this, args);
    };
    instance.CloneCore = function (source) {
        this.CloneCore$DependencyObject(source);
        var len = source._ht.length;
        for (var i = 0; i < len; i++) {
            this.Add(Fayde.Clone(source._ht[i]));
        }
    };
    InternalCollection.Instance = instance;
    Fayde.InternalCollection = Nullstone.FinishCreate(InternalCollection);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var PresentationFrameworkCollection = Nullstone.Create("PresentationFrameworkCollection", Fayde.DependencyObject);
    PresentationFrameworkCollection.Instance.Init = function () {
        this.Init$DependencyObject();
        this._Backing = new Fayde.InternalCollection();
        this.ItemsChanged = new MulticastEvent();
        this.Clearing = new MulticastEvent();
    };
    Nullstone.Property(PresentationFrameworkCollection, "IsReadOnly", {
        get: function () {
            return this._IsReadOnlyImpl();
        }
    });
    PresentationFrameworkCollection.Instance.GetCount = function () {
        return this._Backing.GetCount();
    };
    PresentationFrameworkCollection.Instance.GetValueAt = function (index) {
        return this._Backing.GetValueAt(index);
    };
    PresentationFrameworkCollection.Instance.SetValueAt = function (index, value) {
        var old = this.GetValueAt(index);
        this._Backing.SetValueAt(index, value);
        this.ItemsChanged.Raise(this, Fayde.Collections.NotifyCollectionChangedEventArgs.Replace(value, old, index));
    };
    PresentationFrameworkCollection.Instance.Contains = function (value) {
        return this._Backing.IndexOf(value) !== -1;
    };
    PresentationFrameworkCollection.Instance.IndexOf = function (value) {
        return this._IndexOfImpl(value);
    };
    PresentationFrameworkCollection.Instance._IndexOfImpl = function (value) {
        if (value == null)
            return -1;
        return this._Backing.IndexOf(value);
    };
    PresentationFrameworkCollection.Instance.Clear = function () {
        this._CheckReadOnly();
        this._ClearImpl();
    };
    PresentationFrameworkCollection.Instance._ClearImpl = function () {
        this.Clearing.Raise(this, new EventArgs());
        this._Backing.Clear();
        this.ItemsChanged.Raise(this, Fayde.Collections.NotifyCollectionChangedEventArgs.Reset());
    };
    PresentationFrameworkCollection.Instance.Add = function (value) {
        this._CheckReadOnly();
        this._AddImpl(value);
    };
    PresentationFrameworkCollection.Instance._AddImpl = function (value) {
        this._CheckNull(Fayde.Collections.NotifyCollectionChangedAction.Add, value);
        var index = this._Backing.Add(value);
        this.ItemsChanged.Raise(this, Fayde.Collections.NotifyCollectionChangedEventArgs.Add(value, index));
    };
    PresentationFrameworkCollection.Instance.Insert = function (index, value) {
        this._CheckReadOnly();
        this._InsertImpl(index, value);
    };
    PresentationFrameworkCollection.Instance._InsertImpl = function (index, value) {
        this._CheckNull(Fayde.Collections.NotifyCollectionChangedAction.Add, value);
        if (index < 0)
            throw new ArgumentOutOfRangeException();
        var index = this._Backing.Insert(index, value);
        this.ItemsChanged.Raise(this, Fayde.Collections.NotifyCollectionChangedEventArgs.Add(value, index));
    };
    PresentationFrameworkCollection.Instance.Remove = function (value) {
        this._CheckReadOnly();
        return this._RemoveImpl(value);
    };
    PresentationFrameworkCollection.Instance._RemoveImpl = function (value) {
        if (this._CheckNull(Fayde.Collections.NotifyCollectionChangedAction.Remove, value))
            return false;
        var index = this.IndexOf(value);
        if (index === -1)
            return false;
        this._Backing.RemoveAt(index);
        this.ItemsChanged.Raise(this, Fayde.Collections.NotifyCollectionChangedEventArgs.Remove(value, index));
        return true;
    };
    PresentationFrameworkCollection.Instance.RemoveAt = function (index) {
        this._CheckReadOnly();
        this._RemoveAtImpl(index);
    };
    PresentationFrameworkCollection.Instance._RemoveAtImpl = function (index) {
        var value = this.GetValueAt(index);
        this._Backing.RemoveAt(index);
        this.ItemsChanged.Raise(this, Fayde.Collections.NotifyCollectionChangedEventArgs.Remove(value, index));
    };
    PresentationFrameworkCollection.Instance._IsReadOnlyImpl = function () {
        return false;
    };
    PresentationFrameworkCollection.Instance.ToArray = function () {
        return this._Backing.ToArray();
    };
    PresentationFrameworkCollection.Instance._CheckNull = function (action, value) {
        if (value != null)
            return false;
        if (action === Fayde.Collections.NotifyCollectionChangedAction.Add)
            throw new ArgumentNullException();
    };
    PresentationFrameworkCollection.Instance._CheckReadOnly = function () {
        if (this.$GetIsReadOnly())
            throw new InvalidOperationException("The collection is readonly.");
    };
    namespace.PresentationFrameworkCollection = Nullstone.FinishCreate(PresentationFrameworkCollection);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var ResourceDictionary = Nullstone.Create("ResourceDictionary", Fayde.InternalCollection);
    ResourceDictionary.Instance.Init = function () {
        this.Init$InternalCollection();
        this._KeyIndex = [];
    };
    ResourceDictionary.MergedDictionariesProperty = DependencyProperty.RegisterFull("MergedDictionaries", function () { return Fayde.ResourceDictionaryCollection; }, ResourceDictionary, undefined, undefined, { GetValue: function () { return new Fayde.ResourceDictionaryCollection(); } });
    Nullstone.AutoProperties(ResourceDictionary, [
        ResourceDictionary.MergedDictionariesProperty
    ]);
    ResourceDictionary.Instance.ContainsKey = function (key) {
        return this._KeyIndex[key] != undefined;
    };
    ResourceDictionary.Instance._GetIndexFromKey = function (key) {
        return this._KeyIndex[key];
    };
    ResourceDictionary.Instance.Get = function (key) {
        if (this.ContainsKey(key))
            return this.GetValueAt(this._GetIndexFromKey(key));
        return this._GetFromMergedDictionaries(key);
    };
    ResourceDictionary.Instance._GetFromMergedDictionaries = function (key) {
        var merged = this.MergedDictionaries;
        if (!merged)
            return undefined;
        var count = merged.GetCount();
        for (var i = 0; i < count; i++) {
            var dict = merged.GetValueAt(i);
            var value = dict.Get(key);
            if (value != undefined)
                return value;
        }
        return undefined;
    };
    ResourceDictionary.Instance.Set = function (key, value) {
        var oldValue;
        if (this.ContainsKey(key)) {
            oldValue = this.Get(key);
            this.Remove(oldValue);
        }
        var index = this.Add$InternalCollection(value);
        this._KeyIndex[key] = index;
        this._RaiseChanged({ IsReplace: true, OldValue: oldValue, NewValue: value, Index: index });
        return true;
    };
    ResourceDictionary.Instance.Add = function (key, value) {
        this.Set(key, value);
    };
    ResourceDictionary.Instance.Remove = function (key) {
        var index = this._GetIndexFromKey(key);
        if (index > -1 && this.RemoveAt(index)) {
            delete this._KeyIndex[key];
            for (var h in this._KeyIndex) {
                if (this._KeyIndex[h] > index)
                    this._KeyIndex[h] -= 1;
            }
            return true;
        }
    };
    ResourceDictionary.Instance.AddedToCollection = function (value, error) {
        var rv = false;
        var obj = Nullstone.As(value, Fayde.DependencyObject);
        if (obj) {
            if (obj._Parent && !ResourceDictionary._CanBeAddedTwice(value)) {
                error.SetErrored(BError.InvalidOperation, "Element is already a child of another element.");
                return false;
            }
            obj._AddParent(this, true, error);
            if (error.IsErrored())
                return false;
            obj._SetIsAttached(this._IsAttached);
            obj.AddPropertyChangedListener(this);
        }
        rv = this.AddedToCollection$InternalCollection(value, error);
        if (rv /* && !from_resource_dictionary_api */ && obj) {
            this._RaiseChanged({ IsAdd: true, NewValue: obj, Index: null }); //TODO: Add index
        }
        return rv;
    };
    ResourceDictionary.Instance.RemovedFromCollection = function (value, isValueSafe) {
        if (isValueSafe && value instanceof Fayde.DependencyObject) {
            var obj = Nullstone.As(value, Fayde.DependencyObject);
            if (obj) {
                obj.RemovePropertyChangedListener(this);
                obj._RemoveParent(this, null);
                obj._SetIsAttached(false);
            }
        }
        this.RemovedFromCollection$InternalCollection(value, isValueSafe);
    };
    ResourceDictionary.Instance._OnIsAttachedChanged = function (value) {
        this._OnIsAttachedChanged$InternalCollection(value);
        for (var i = 0; i < this._ht.length; i++) {
            var obj = this._ht[i];
            if (obj instanceof Fayde.DependencyObject)
                obj._SetIsAttached(value);
        }
    };
    ResourceDictionary.Instance._OnMentorChanged = function (oldValue, newValue) {
        this._OnMentorChanged$InternalCollection(oldValue, newValue);
        for (var i = 0; i < this._KeyIndex.length; i++) {
            Fayde.DependencyObject._PropagateMentor(this._KeyIndex[i], this.GetValueAt(this._KeyIndex[i]), newValue);
        }
    };
    ResourceDictionary.Instance._RegisterAllNamesRootedAt = function (namescope, error) {
        for (var i = 0; i < this.GetCount() ; i++) {
            var obj = this.GetValueAt(i);
            if (obj && obj instanceof Fayde.DependencyObject)
                obj._RegisterAllNamesRootedAt(namescope, error);
        }
        this._RegisterAllNamesRootedAt$InternalCollection(namescope, error);
    };
    ResourceDictionary.Instance._UnregisterAllNamesRootedAt = function (fromNs) {
        for (var i = 0; i < this.GetCount() ; i++) {
            var obj = this.GetValueAt(i);
            if (obj && obj instanceof Fayde.DependencyObject)
                obj._UnregisterAllNamesRootedAt(fromNs);
        }
        this._UnregisterAllNamesRootedAt$InternalCollection(fromNs);
    };
    ResourceDictionary._CanBeAddedTwice = function (value) {
        if (value instanceof Fayde.FrameworkTemplate)
            return true;
        if (value instanceof Fayde.Style)
            return true;
        if (value instanceof Fayde.Media.Transform)
            return true;
        if (value instanceof Fayde.Media.Brush)
            return true;
        if (value instanceof Fayde.Media.Imaging.BitmapImage)
            return true;
        return false;
    };
    namespace.ResourceDictionary = Nullstone.FinishCreate(ResourceDictionary);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var BindingExpression = Nullstone.Create("BindingExpression", namespace.BindingExpressionBase, 3);
    BindingExpression.Instance.Init = function (binding, target, propd) {
        this.Init$BindingExpressionBase(binding, target, propd);
    };
    Nullstone.Property(BindingExpression, "ParentBinding", {
        get: function () { return this.Binding; }
    });
    Nullstone.Property(BindingExpression, "DataItem", {
        get: function () { return this.DataSource; }
    });
    BindingExpression.Instance.UpdateSource = function () {
        return this._UpdateSourceObject(undefined, true);
    };
    namespace.BindingExpression = Nullstone.FinishCreate(BindingExpression);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var _CollectionViewNode = Nullstone.Create("_CollectionViewNode", namespace._PropertyPathNode, 3);
    _CollectionViewNode.Instance.Init = function (bindsDirectlyToSource, bindToView, viewChanged) {
        this.Init$_PropertyPathNode();
        this.BindsDirectlyToSource = bindsDirectlyToSource === true;
        this.BindToView = bindToView === true;
        this.ViewChangedHandler = this.ViewChanged;
    };
    Nullstone.AutoProperties(_CollectionViewNode, [
        "BindsDirectlyToSource",
        "BindToView"
    ]);
    _CollectionViewNode.Instance.OnSourceChanged = function (oldSource, newSource) {
        this.OnSourceChanged$_PropertyPathNode(oldSource, newSource);
        this.DisconnectViewHandlers();
        this.ConnectViewHandlers(Nullstone.As(newSource, namespace.CollectionViewSource), Nullstone.As(newSource, namespace.ICollectionView));
    };
    _CollectionViewNode.Instance.ViewChanged = function (sender, e) {
        this.DisconnectViewHandlers(true);
        this.ConnectViewHandlers(null, e.NewValue);
        this.ViewCurrentChanged(this, new EventArgs());
    };
    _CollectionViewNode.Instance.ViewCurrentChanged = function (sender, e) {
        this.UpdateValue();
        if (this.Next)
            this.Next.SetSource(this.Value);
    };
    _CollectionViewNode.Instance.SetValue = function () {
        throw new NotImplementedException();
    };
    _CollectionViewNode.Instance.UpdateValue = function () {
        if (this.BindsDirectlyToSource) {
            this.ValueType = this.Source == null ? null : this.Source.constructor;
            this.UpdateValueAndIsBroken(this.Source, this._CheckIsBroken());
        } else {
            var usableSource = this.Source;
            var view;
            if (this.Source instanceof namespace.CollectionViewSource) {
                usableSource = null;
                view = this.Source.View;
            } else if (this.Source.DoesImplement(namespace.ICollectionView)) {
                view = this.Source;
            }
            if (!view) {
                this.ValueType = usableSource == null ? null : usableSource.constructor;
                this.UpdateValueAndIsBroken(usableSource, this._CheckIsBroken());
            } else {
                if (this.BindToView) {
                    this.ValueType = view.constructor;
                    this.UpdateValueAndIsBroken(view, this._CheckIsBroken());
                } else {
                    this.ValueType = view.GetCurrentItem() == null ? null : view.GetCurrentItem().constructor;
                    this.UpdateValueAndIsBroken(view.GetCurrentItem(), this._CheckIsBroken());
                }
            }
        }
    };
    _CollectionViewNode.Instance._CheckIsBroken = function () {
        return this.Source == null;
    };
    _CollectionViewNode.Instance.ConnectViewHandlers = function (source, view) {
        if (source) {
            this._ViewPropertyListener = new namespace.PropertyChangedListener(source, namespace.CollectionViewSource.ViewProperty, this, this.ViewChanged);
            view = source.View;
        }
        if (view)
            this._ViewListener = new namespace.CurrentChangedListener(view, this, this.ViewCurrentChanged);
    };
    _CollectionViewNode.Instance.DisconnectViewHandlers = function (onlyView) {
        if (!onlyView)
            onlyView = false;
        if (this._ViewPropertyListener && !onlyView) {
            this._ViewPropertyListener.Detach();
            this._ViewPropertyListener = null;
        }
        if (this._ViewListener) {
            this._ViewListener.Detach();
            this._ViewListener = null;
        }
    };
    namespace._CollectionViewNode = Nullstone.FinishCreate(_CollectionViewNode);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var CollectionViewSource = Nullstone.Create("CollectionViewSource", Fayde.DependencyObject);
    CollectionViewSource.SourceProperty = DependencyProperty.Register("Source", function () { return Object; }, CollectionViewSource);
    CollectionViewSource.ViewProperty = DependencyProperty.Register("View", function () { return namespace.ICollectionView; }, CollectionViewSource);
    Nullstone.AutoProperties(CollectionViewSource, [
        CollectionViewSource.SourceProperty,
        CollectionViewSource.ViewProperty
    ]);
    namespace.CollectionViewSource = Nullstone.FinishCreate(CollectionViewSource);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var _IndexedPropertyPathNode = Nullstone.Create("_IndexedPropertyPathNode", namespace._PropertyPathNode, 1);
    _IndexedPropertyPathNode.Instance.Init = function (index) {
        this.Init$_PropertyPathNode();
        this._isBroken = false;
        var val = parseInt(index, 10);
        if (isNaN(val))
            this._Index = index;
        else
            this._Index = val;
    };
    _IndexedPropertyPathNode.Instance.UpdateValue = function () {
        if (this.PropertyInfo == null) {
            this._isBroken = true;
            this.ValueType = null;
            this.UpdateValueAndIsBroken(null, this._isBroken);
            return;
        }
        try {
            var newVal = this.PropertyInfo.GetValue(this.Source, [this._Index]);
            this._isBroken = false;
            this.ValueType = this.PropertyInfo.PropertyType;
            this.UpdateValueAndIsBroken(newVal, this._isBroken);
        } catch (err) {
            this._isBroken = true;
            this.ValueType = null;
            this.UpdateValueAndIsBroken(null, this._isBroken);
        }
    };
    _IndexedPropertyPathNode.Instance.SetValue = function (value) {
        if (this.PropertyInfo != null)
            this.PropertyInfo.SetValue(this.Source, value, [this._Index]);
    };
    _IndexedPropertyPathNode.Instance._CheckIsBroken = function () {
        return this._isBroken || this._CheckIsBroken$_PropertyPathNode();
    };
    _IndexedPropertyPathNode.Instance.OnSourcePropertyChanged = function (o, e) {
        this.UpdateValue();
        if (this.Next != null)
            this.Next.SetSource(this.Value);
    };
    _IndexedPropertyPathNode.Instance.OnSourceChanged = function (oldSource, newSource) {
        this.OnSourceChanged$_PropertyPathNode(oldSource, newSource);
        if (this.Listener != null) {
            this.Listener.Detach();
            this.Listener = null;
        }
        if (Nullstone.DoesImplement(newSource, Fayde.Collections.INotifyCollectionChanged)) {
        }
        this._GetIndexer();
    };
    _IndexedPropertyPathNode.Instance._GetIndexer = function () {
    };
    _IndexedPropertyPathNode.Instance.CollectionChanged = function (o, e) {
        this.UpdateValue();
        if (this.Next != null)
            this.Next.SetSource(this.Value);
    };
    Nullstone.Property(_IndexedPropertyPathNode, "Index", {
        get: function () { return this._Index; }
    });
    namespace._IndexedPropertyPathNode = Nullstone.FinishCreate(_IndexedPropertyPathNode);
})(Nullstone.Namespace("Fayde.Data"));

(function (namespace) {
    var App = Nullstone.Create("App", Fayde.DependencyObject);
    App.Instance.Init = function () {
        this.Init$DependencyObject();
        this.MainSurface = new Surface(this);
        this._ClockTimer = new Fayde.ClockTimer();
        this._Storyboards = [];
        this._DebugFunc = {};
        this.Loaded = new MulticastEvent();
        var app = this;
        this._LayoutTiming = [];
        this._RenderTiming = [];
        this._ParserTiming = [];
        this._SubscribeDebugService("HitTest", function (inputList, elapsedTime) {
        });
        this._SubscribeDebugService("LayoutTime", function (elapsedTime) {
            app._LayoutTiming.push(elapsedTime);
        });
        this._SubscribeDebugService("RenderTime", function (elapsedTime) {
            app._RenderTiming.push(elapsedTime);
        });
        this._SubscribeDebugService("ParserTime", function (type, elapsedTime) {
            app._ParserTiming.push(elapsedTime);
        });
    };
    App.ResourcesProperty = DependencyProperty.RegisterFull("Resources", function () { return Fayde.ResourceDictionary; }, App, undefined, undefined, { GetValue: function () { return new Fayde.ResourceDictionary(); } });
    Nullstone.AutoProperties(App, [
        App.ResourcesProperty,
        "Address"
    ]);
    Nullstone.Property(App, "RootVisual", {
        get: function () { return this.MainSurface._TopLevel; }
    });
    App.Instance.LoadResources = function (json) {
        var rd = Fayde.JsonParser.Parse(json);
        if (rd instanceof Fayde.ResourceDictionary)
            this.Resources = rd;
    };
    App.Instance.LoadInitial = function (containerId, json) {
        this.Address = new Uri(document.URL);
        this.MainSurface.Register(containerId);
        this.NavService = new Fayde.Navigation.NavService(this);
        var element = Fayde.JsonParser.Parse(json);
        if (element instanceof Fayde.UIElement)
            this.MainSurface._Attach(element);
        this.Start();
        this.EmitLoaded();
    };
    App.Instance.EmitLoaded = function () {
        this.Loaded.RaiseAsync(this, new EventArgs());
    };
    App.Instance.Start = function () {
        this._ClockTimer.RegisterTimer(this);
    };
    App.Instance._Tick = function (lastTime, nowTime) {
        this.ProcessStoryboards(lastTime, nowTime);
        this.Update();
    };
    App.Instance._Stop = function () {
        this._ClockTimer.UnregisterTimer(this);
    };
    App.Instance.ProcessStoryboards = function (lastTime, nowTime) {
        var len = this._Storyboards.length;
        for (var i = 0; i < len; i++) {
            this._Storyboards[i].Update(nowTime);
        }
    };
    if (!Fayde.IsCanvasEnabled) {
        App.Instance.Update = function () {
            this.MainSurface.ProcessHtmlChanges();
            this.MainSurface.ProcessSizingAdjustments();
        };
    } else {
        App.Instance.Update = function () {
            if (this._IsRunning)
                return;
            var startLayoutTime;
            var isLayoutPassTimed;
            if (isLayoutPassTimed = (this._DebugFunc[3] != null))
                startLayoutTime = new Date().getTime();
            this._IsRunning = true;
            var updated = this.MainSurface.ProcessDirtyElements();
            this._IsRunning = false;
            if (updated && isLayoutPassTimed)
                this._NotifyDebugLayoutPass(new Date().getTime() - startLayoutTime);
        };
    }
    App.Instance.RegisterStoryboard = function (storyboard) {
        Array.addDistinctNullstone(this._Storyboards, storyboard);
    };
    App.Instance.UnregisterStoryboard = function (storyboard) {
        Array.removeNullstone(this._Storyboards, storyboard);
    };
    App.Instance._GetImplicitStyles = function (fe, styleMask) {
        var genericXamlStyle = undefined;
        var appResourcesStyle = undefined;
        var visualTreeStyle = undefined;
        if ((styleMask & _StyleMask.GenericXaml) != 0) {
            if (fe instanceof Fayde.Controls.Control) {
                genericXamlStyle = fe.GetDefaultStyle();
                if (!genericXamlStyle) {
                    var styleKey = fe.DefaultStyleKey;
                    if (styleKey != null)
                        genericXamlStyle = this._GetGenericXamlStyleFor(styleKey);
                }
            }
        }
        if ((styleMask & _StyleMask.ApplicationResources) != 0) {
            appResourcesStyle = this.Resources.Get(fe.constructor);
            if (appResourcesStyle == null)
                appResourcesStyle = this.Resources.Get(fe._TypeName);
            if (appResourcesStyle != null)
                appResourcesStyle._ResChain = [this.Resources];
        }
        if ((styleMask & _StyleMask.VisualTree) != 0) {
            var isControl = fe instanceof Fayde.Controls.Control;
            var el = fe;
            while (el != null) {
                if (el.TemplateOwner != null && fe.TemplateOwner == null) {
                    el = el.TemplateOwner;
                    continue;
                }
                if (!isControl && Nullstone.RefEquals(el, fe.TemplateOwner))
                    break;
                visualTreeStyle = el.Resources.Get(fe.constructor);
                if (visualTreeStyle != null)
                    break;
                visualTreeStyle = el.Resources.Get(fe._TypeName);
                if (visualTreeStyle != null)
                    break;
                el = el.GetVisualParent();
            }
        }
        var styles = [];
        styles[_StyleIndex.GenericXaml] = genericXamlStyle;
        styles[_StyleIndex.ApplicationResources] = appResourcesStyle;
        styles[_StyleIndex.VisualTree] = visualTreeStyle;
        return styles;
    };
    App.Instance._GetGenericXamlStyleFor = function (type) {
        if (!App.GenericResourceDictionary && App.GetGenericResourceDictionary) {
            App.GenericResourceDictionary = App.GetGenericResourceDictionary();
        }
        if (App.GenericResourceDictionary)
            return App.GenericResourceDictionary.Get(type);
    };
    App.Instance._SubscribeDebugService = function (id, func) {
        var i = this._GetInternalDebugServiceID(id);
        if (i)
            this._DebugFunc[i] = func;
    };
    App.Instance._UnsubscribeDebugService = function (id) {
        var i = this._GetInternalDebugServiceID(id);
        if (i)
            delete this._DebugFunc[i];
    };
    App.Instance._GetInternalDebugServiceID = function (id) {
        if (id === "Coordinates")
            return 1;
        else if (id === "HitTest")
            return 2;
        else if (id === "LayoutTime")
            return 3;
        else if (id === "RenderTime")
            return 4;
        else if (id === "ParserTime")
            return 5;
        else if (id === "Layer")
            return 6;
        return null;
    };
    App.Instance._NotifyDebugCoordinates = function (position) {
        var func = this._DebugFunc[1];
        if (!func)
            return;
        func(position);
    };
    App.Instance._NotifyDebugHitTest = function (inputList, elapsedTime) {
        var func = this._DebugFunc[2];
        if (!func)
            return;
        func(inputList, elapsedTime);
    };
    App.Instance._NotifyDebugLayer = function (isAdd, layer) {
        var func = this._DebugFunc[6];
        if (!func)
            return;
        func(isAdd, layer);
    };
    App.Instance._NotifyDebugLayoutPass = function (elapsedTime) {
        var func = this._DebugFunc[3];
        if (!func)
            return;
        func(elapsedTime);
    };
    App.Instance._NotifyDebugRenderPass = function (elapsedTime) {
        var func = this._DebugFunc[4];
        if (!func)
            return;
        func(elapsedTime);
    };
    App.Instance._NotifyDebugParserPass = function (type, elapsedTime) {
        var func = this._DebugFunc[5];
        if (!func)
            return;
        func(type, elapsedTime);
    };
    namespace.App = Nullstone.FinishCreate(App);
})(window);
App.Version = "0.9.3.0";

(function (namespace) {
    var Brush = Nullstone.Create("Brush", Fayde.DependencyObject);
    Brush.TransformProperty = DependencyProperty.RegisterCore("Transform", function () { return Fayde.Media.Transform; }, Brush);
    Nullstone.AutoProperties(Brush, [
        Brush.TransformProperty
    ]);
    Brush.ChangedProperty = DependencyProperty.Register("Changed", function () { return Boolean; }, Brush);
    Nullstone.AutoProperties(Brush, [
        Brush.ChangedProperty
    ]);
    Brush.Instance.SetupBrush = function (ctx, bounds) {
        if (this._IsSurfaceCached(bounds))
            return;
        this._CacheSurface(bounds);
        var transform = this.Transform;
        if (!transform) {
            this._Brush = this.CreateBrush(ctx, bounds, bounds);
            return;
        }
        var transformedBounds = transform.TransformBounds(bounds);
        var raw = transform.Value.raw;
        this._Brush = this.CreateBrush(ctx, bounds);
        var fillExtents = bounds.GrowBy(raw[2], raw[5], 0, 0);
        var tmpCanvas = document.createElement('canvas');
        tmpCanvas.width = Math.max(transformedBounds.Width, bounds.Width);
        tmpCanvas.height = Math.max(transformedBounds.Height, bounds.Height);
        var tmpCtx = tmpCanvas.getContext('2d');
        tmpCtx.setTransform(raw[0], raw[1], raw[3], raw[4], raw[2], raw[5]);
        tmpCtx.fillStyle = this._Brush;
        tmpCtx.fillRect(fillExtents.X, fillExtents.Y, fillExtents.Width, fillExtents.Height);
        this._Brush = ctx.createPattern(tmpCanvas, "no-repeat");
    };
    Brush.Instance.CreateBrush = function (ctx, bounds) { };
    Brush.Instance.ToHtml5Object = function () { return this._Brush; };
    Brush.Instance._IsSurfaceCached = function (bounds) {
        if (!this._Brush)
            return false;
        if (!this._SC)
            return false;
        if (!Rect.Equals(this._SC.Bounds, bounds))
            return false;
        return true;
    };
    Brush.Instance._CacheSurface = function (bounds) {
        this._SC = { Bounds: bounds };
    };
    Brush.Instance._InvalidateSurfaceCache = function () {
        delete this._Brush;
        delete this._SC;
    };
    Brush.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== Brush) {
            this._OnPropertyChanged$DependencyObject(args, error);
            return;
        }
        if (args.Property._ID === Brush.TransformProperty._ID) {
            if (args.OldValue != null) {
                args.OldValue.ValueChanged.Subscribe(this._TransformValueChanged, this);
            }
            if (args.NewValue != null) {
                args.NewValue.ValueChanged.Subscribe(this._TransformValueChanged, this);
            }
            this._InvalidateSurfaceCache();
        }
        this.PropertyChanged.Raise(this, args);
    };
    Brush.Instance._TransformValueChanged = function (sender, args) {
        this._InvalidateSurfaceCache();
    };
    Brush.Instance._OnSubPropertyChanged = function (propd, sender, args) {
        if (propd._ID === Brush.ChangedProperty._ID) {
            var newArgs = {
                Property: Brush.ChangedProperty,
                OldValue: false,
                NewValue: true
            };
            this.PropertyChanged.Raise(this, newArgs);
        }
        this._OnSubPropertyChanged$DependencyObject(propd, sender, args);
    };
    namespace.Brush = Nullstone.FinishCreate(Brush);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var CacheMode = Nullstone.Create("CacheMode", Fayde.DependencyObject);
    CacheMode.Instance.GetTransform = function () { };
    namespace.CacheMode = Nullstone.FinishCreate(CacheMode);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var GeneralTransform = Nullstone.Create("GeneralTransform", Fayde.DependencyObject);
    namespace.GeneralTransform = Nullstone.FinishCreate(GeneralTransform);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var Geometry = Nullstone.Create("Geometry", Fayde.DependencyObject);
    Geometry.Instance.Init = function () {
        this.Init$DependencyObject();
        this.$Path = null;
        this._LocalBounds = new Rect(0, 0, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
    };
    Geometry.TransformProperty = DependencyProperty.RegisterCore("Transform", function () { return Fayde.Media.Transform; }, Geometry);
    Nullstone.AutoProperties(Geometry, [
        Geometry.TransformProperty
    ]);
    Geometry.Instance.Draw = function (ctx) {
        if (this.$Path == null)
            return;
        var transform = this.Transform;
        if (transform != null) {
            ctx.Save();
            ctx.Transform(transform);
        }
        this.$Path.Draw(ctx);
        if (transform != null)
            ctx.Restore();
    };
    Geometry.Instance.GetBounds = function (thickness) {
        var compute = this._LocalBounds.IsEmpty();
        if (this.$Path == null) {
            this._Build();
            compute = true;
        }
        if (compute)
            this._LocalBounds = this.ComputePathBounds(thickness);
        var bounds = this._LocalBounds;
        var transform = this.Transform
        if (transform != null) {
            bounds = transform.TransformBounds(bounds);
        }
        return bounds;
    };
    Geometry.Instance.ComputePathBounds = function (thickness) {
        this._EnsureBuilt();
        if (this.$Path == null)
            return new Rect();
        return this.$Path.CalculateBounds(thickness);
    };
    Geometry.Instance._EnsureBuilt = function () {
        if (this.$Path == null)
            this._Build();
    };
    Geometry.Instance._Build = function () {
    };
    Geometry.Instance._InvalidateCache = function () {
        this.$Path = null;
        this._LocalBounds = new Rect(0, 0, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
    };
    Geometry.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== Geometry
            && args.Property._ID !== namespace.PathGeometry.FillRuleProperty
            && args.Property._ID !== namespace.GeometryGroup.FillRuleProperty) {
            this._OnPropertyChanged$DependencyObject(args, error);
            return;
        }
        this._InvalidateCache();
        this.PropertyChanged.Raise(this, args);
    };
    Geometry.Instance._OnSubPropertyChanged = function (propd, sender, args) {
        this.PropertyChanged.Raise(this, {
            Property: propd,
            OldValue: null,
            NewValue: this._GetValue(propd)
        });
        this._OnSubPropertyChanged$DependencyObject();
    };
    namespace.Geometry = Nullstone.FinishCreate(Geometry);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var GeometryGroup = Nullstone.Create("GeometryGroup", namespace.Geometry);
    GeometryGroup.FillRuleProperty = DependencyProperty.RegisterCore("FillRule", function () { return new Enum(Fayde.Shapes.FillRule); }, GeometryGroup, Fayde.Shapes.FillRule.EvenOdd);
    GeometryGroup.ChildrenProperty = DependencyProperty.RegisterFull("Children", function () { return namespace.GeometryCollection; }, GeometryGroup, undefined, undefined, { GetValue: function () { return new namespace.GeometryCollection(); } });
    Nullstone.AutoProperties(GeometryGroup, [
        GeometryGroup.FillRuleProperty,
        GeometryGroup.ChildrenProperty
    ]);
    GeometryGroup.Instance.ComputePathBounds = function () {
        var bounds = new Rect();
        var children = this.Children;
        var count = children.GetCount();
        for (var i = 0; i < count; i++) {
            var g = children.GetValueAt(i);
            bounds = bounds.Union(g.GetBounds(), true);
        }
        return bounds;
    };
    GeometryGroup.Instance.Draw = function (ctx) {
        var transform = this.Transform;
        if (transform != null) {
            ctx.Save();
            ctx.Transform(transform);
        }
        var children = this.Children;
        var count = children.GetCount();
        for (var i = 0; i < count; i++) {
            var g = children.GetValueAt(i);
            g.Draw(ctx);
        }
        if (transform != null)
            ctx.Restore();
    };
    GeometryGroup.prototype._OnCollectionChanged = function (col, args) {
        this._InvalidateCache();
        if (!this._PropertyHasValueNoAutoCreate(GeometryGroup.ChildrenProperty, col)) {
            this._OnCollectionChanged$Geometry(col, args);
            return;
        }
        this.PropertyChanged.Raise(this, {
            Property: GeometryGroup.ChildrenProperty,
            OldValue: null,
            NewValue: this.Children
        });
    };
    GeometryGroup.prototype._OnCollectionItemChanged = function (col, obj, args) {
        this._InvalidateCache();
        if (!this._PropertyHasValueNoAutoCreate(GeometryGroup.ChildrenProperty, col)) {
            this._OnCollectionItemChanged$Geometry(col, obj, args);
            return;
        }
        this.PropertyChanged.Raise(this, {
            Property: GeometryGroup.ChildrenProperty,
            OldValue: null,
            NewValue: this.Children
        });
    };
    namespace.GeometryGroup = Nullstone.FinishCreate(GeometryGroup);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var InternalTransform = Nullstone.Create("InternalTransform", namespace.GeneralTransform);
    InternalTransform.Instance.Init = function () {
        this.Init$GeneralTransform();
        this.raw = mat4.identity();
    };
    Nullstone.Property(InternalTransform, "Inverse", {
        get: function () {
            var it = new InternalTransform();
            it.raw = mat4.create();
            mat4.inverse(this.raw, it.raw);
            return it;
        }
    });
    Nullstone.Property(InternalTransform, "Matrix", {
        get: function () {
            return mat4.create(this.raw);
        }
    });
    InternalTransform.Instance.Transform = function (p) {
        var pi = vec4.createFrom(p.X, p.Y, 0.0, 1.0);
        var po = vec4.create();
        mat4.transformVec4(this.raw, pi, po);
        if (po[3] != 0.0) {
            var w = 1.0 / po[3];
            return new Point(po[0] * w, p[1] * w);
        }
        return new Point(NaN, NaN);
    };
    namespace.InternalTransform = Nullstone.FinishCreate(InternalTransform);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var PathFigure = Nullstone.Create("PathFigure", Fayde.DependencyObject);
    PathFigure.Instance.Init = function () {
        this.Init$DependencyObject();
        this._Path = null;
    };
    PathFigure.IsClosedProperty = DependencyProperty.RegisterCore("IsClosed", function () { return Boolean; }, PathFigure, false);
    PathFigure.SegmentsProperty = DependencyProperty.RegisterFull("Segments", function () { return namespace.PathSegmentCollection; }, PathFigure, undefined, undefined, { GetValue: function () { return new namespace.PathSegmentCollection(); } });
    PathFigure.StartPointProperty = DependencyProperty.RegisterCore("StartPoint", function () { return Point; }, PathFigure, new Point());
    PathFigure.IsFilledProperty = DependencyProperty.RegisterCore("IsFilled", function () { return Boolean; }, PathFigure, true);
    Nullstone.AutoProperties(PathFigure, [
        PathFigure.IsClosedProperty,
        PathFigure.SegmentsProperty,
        PathFigure.StartPointProperty,
        PathFigure.IsFilledProperty
    ]);
    PathFigure.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== PathFigure) {
            this._OnPropertyChanged$DependencyObject(args, error);
            return;
        }
        this._Path = null;
        this.PropertyChanged.Raise(this, args);
    };
    PathFigure.Instance._OnCollectionChanged = function (col, args) {
        if (!this._PropertyHasValueNoAutoCreate(PathFigure.SegmentsProperty, col)) {
            this._OnCollectionChanged$DependencyObject(col, args);
            return;
        }
        this._Path = null;
        var newArgs = {
            Property: PathFigure.SegmentsProperty,
            OldValue: null,
            NewValue: this._GetValue(PathFigure.SegmentsProperty)
        };
        this.PropertyChanged.Raise(this, newArgs);
    };
    PathFigure.Instance._OnCollectionItemChanged = function (col, obj, args) {
        if (!this._PropertyHasValueNoAutoCreate(PathFigure.SegmentsProperty, col)) {
            this._OnCollectionItemChanged$DependencyObject(col, obj, args);
            return;
        }
        this._Path = null;
        var newArgs = {
            Property: PathFigure.SegmentsProperty,
            OldValue: null,
            NewValue: this._GetValue(PathFigure.SegmentsProperty)
        };
        this.PropertyChanged.Raise(this, newArgs);
    };
    PathFigure.Instance._Build = function () {
        this._Path = [];
        var start = this.StartPoint;
        this._Path.push({ type: Fayde.Shapes.PathEntryType.Move, x: start.X, y: start.Y });
        var segments = this.Segments;
        var count = segments.GetCount();
        for (var i = 0; i < count; i++) {
            var segment = segments[i];
            segment._Append(this._Path);
        }
        if (this.IsClosed)
            this._Path.push({ type: Fayde.Shapes.PathEntryType.Close });
    };
    namespace.PathFigure = Nullstone.FinishCreate(PathFigure);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var PathGeometry = Nullstone.Create("PathGeometry", namespace.Geometry);
    PathGeometry.FillRuleProperty = DependencyProperty.RegisterCore("FillRule", function () { return new Enum(Fayde.Shapes.FillRule); }, PathGeometry);
    PathGeometry.FiguresProperty = DependencyProperty.RegisterFull("Figures", function () { return namespace.PathFigureCollection; }, PathGeometry, undefined, undefined, { GetValue: function () { return new namespace.PathFigureCollection(); } });
    Nullstone.AutoProperties(PathGeometry, [
        PathGeometry.FillRuleProperty,
        PathGeometry.FiguresProperty
    ]);
    PathGeometry.Annotations = {
        ContentProperty: PathGeometry.FiguresProperty
    };
    PathGeometry.prototype._OnCollectionChanged = function (col, args) {
        if (!this._PropertyHasValueNoAutoCreate(PathGeometry.FiguresProperty, col)) {
            this._OnCollectionChanged$Geometry(col, args);
            return;
        }
        this._InvalidateCache();
        this.PropertyChanged.Raise(this, {
            Property: PathGeometry.FiguresProperty,
            OldValue: null,
            NewValue: this.Figures
        });
    };
    PathGeometry.prototype._OnCollectionItemChanged = function (col, obj, args) {
        if (!this._PropertyHasValueNoAutoCreate(PathGeometry.FiguresProperty, col)) {
            this._OnCollectionItemChanged$Geometry(col, obj, args);
            return;
        }
        this._InvalidateCache();
        this.PropertyChanged.Raise(this, {
            Property: PathGeometry.FiguresProperty,
            OldValue: null,
            NewValue: this.Figures
        });
    };
    PathGeometry.Instance._Build = function () {
        this.$Path = new Fayde.Shapes.RawPath();
        var figures = this.Figures;
        if (figures == null)
            return;
        var count = figures.GetCount();
        for (var i = 0; i < count; i++) {
            var f = figures.GetValueAt(i);
            f._EnsureBuilt();
            Fayde.Shapes.RawPath.Merge(this.$Path, f.$Path);
        }
    };
    PathGeometry.Instance.Serialize = function () {
        var path = this.$Path;
        if (!path)
            return;
        return path.Serialize();
    };
    namespace.PathGeometry = Nullstone.FinishCreate(PathGeometry);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var PathSegment = Nullstone.Create("PathSegment", Fayde.DependencyObject);
    PathSegment.Instance._Append = function (path) {
        throw new AbstractMethodException("PathSegment._Append");
    };
    namespace.PathSegment = Nullstone.FinishCreate(PathSegment);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var Projection = Nullstone.Create("Projection", Fayde.DependencyObject);
    namespace.Projection = Nullstone.FinishCreate(Projection);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var RectangleGeometry = Nullstone.Create("RectangleGeometry", namespace.Geometry);
    RectangleGeometry.RectProperty = DependencyProperty.RegisterCore("Rect", function () { return Rect; }, RectangleGeometry, new Rect());
    RectangleGeometry.RadiusXProperty = DependencyProperty.RegisterCore("RadiusX", function () { return Number; }, RectangleGeometry, 0);
    RectangleGeometry.RadiusYProperty = DependencyProperty.RegisterCore("RadiusY", function () { return Number; }, RectangleGeometry, 0);
    Nullstone.AutoProperties(RectangleGeometry, [
        RectangleGeometry.RectProperty,
        RectangleGeometry.RadiusXProperty,
        RectangleGeometry.RadiusYProperty
    ]);
    RectangleGeometry.Instance.ComputePathBounds = function () {
        var rect = this.Rect;
        if (rect)
            return rect;
        return new Rect(0.0, 0.0, 0.0, 0.0);
    };
    RectangleGeometry.Instance._Build = function () {
        var rect = this.Rect;
        if (!rect)
            return;
        var radiusX = this.RadiusX;
        var radiusY = this.RadiusY;
        this.$Path = new Fayde.Shapes.RawPath();
        this.$Path.RoundedRect(rect.X, rect.Y, rect.Width, rect.Height, radiusX, radiusY);
    };
    namespace.RectangleGeometry = Nullstone.FinishCreate(RectangleGeometry);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var SolidColorBrush = Nullstone.Create("SolidColorBrush", namespace.Brush);
    SolidColorBrush.Instance.Init = function (args) {
        this.Init$Brush();
        if (args.length === 1) {
            if (args[0] instanceof Color)
                this.Color = args[0];
        }
    };
    SolidColorBrush.ColorProperty = DependencyProperty.Register("Color", function () { return Color; }, SolidColorBrush, undefined, function (d, args) { d._InvalidateSurfaceCache(); });
    Nullstone.AutoProperties(SolidColorBrush, [
        SolidColorBrush.ColorProperty
    ]);
    SolidColorBrush.Instance.CreateBrush = function (ctx, bounds) {
        var color = this.Color;
        if (color == null)
            return "#000000";
        return color.toString();
    };
    namespace.SolidColorBrush = Nullstone.FinishCreate(SolidColorBrush);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var TileBrush = Nullstone.Create("TileBrush", namespace.Brush);
    TileBrush.AlignmentXProperty = DependencyProperty.RegisterCore("AlignmentX", function () { return new Enum(namespace.AlignmentX); }, TileBrush, namespace.AlignmentX.Center);
    TileBrush.AlignmentYProperty = DependencyProperty.RegisterCore("AlignmentY", function () { return new Enum(namespace.AlignmentY); }, TileBrush, namespace.AlignmentY.Center);
    TileBrush.StretchProperty = DependencyProperty.RegisterCore("Stretch", function () { return new Enum(namespace.Stretch); }, TileBrush, namespace.Stretch.Fill);
    Nullstone.AutoProperties(TileBrush, [
        TileBrush.AlignmentXProperty,
        TileBrush.AlignmentYProperty,
        TileBrush.StretchProperty
    ]);
    TileBrush.Instance.CreateBrush = function (ctx, bounds) {
        var imgExtents = this.GetTileExtents();
        var tmpCanvas = document.createElement("canvas");
        tmpCanvas.width = bounds.Width;
        tmpCanvas.height = bounds.Height;
        var tmpCtx = tmpCanvas.getContext("2d");
        var mat = Fayde.Controls.Image.ComputeMatrix(bounds.Width, bounds.Height,
            imgExtents.Width, imgExtents.Height, this.Stretch, this.AlignmentX, this.AlignmentY);
        var els = mat._Elements;
        tmpCtx.setTransform(els[0], els[1], els[3], els[4], els[2], els[5]);
        this.DrawTile(tmpCtx, bounds);
        return ctx.createPattern(tmpCanvas, "no-repeat");
    };
    TileBrush.Instance.GetTileExtents = function () { };
    TileBrush.Instance.DrawTile = function (canvasCtx, bounds) { };
    TileBrush.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== TileBrush) {
            this._OnPropertyChanged$Brush(args, error);
            return;
        }
        if (args.Property._ID === TileBrush.AlignmentXProperty._ID
            || args.Property._ID === TileBrush.AlignmentYProperty._ID
            || args.Property._ID === TileBrush.StretchProperty._ID) {
            this._InvalidateSurfaceCache();
        }
        this.PropertyChanged.Raise(this, args);
    };
    namespace.TileBrush = Nullstone.FinishCreate(TileBrush);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var Transform = Nullstone.Create("Transform", namespace.GeneralTransform);
    Transform.Instance.Init = function () {
        this.Init$GeneralTransform();
        this.ValueChanged = new MulticastEvent();
    };
    Nullstone.Property(Transform, "Value", {
        get: function () {
            if (!this._Value) {
                var val = new Matrix();
                val.raw = this._BuildValue();
                this._Value = val;
            }
            return this._Value;
        }
    });
    Nullstone.Property(Transform, "Inverse", {
        get: function () {
            var inverse = this.Value.Inverse;
            if (inverse == null)
                return;
            var mt = new namespace.MatrixTransform();
            mt.Matrix = inverse;
            return mt;
        }
    });
    Transform.Instance.Transform = function (point) {
        var v = mat3.transformVec2(this.Value.raw, vec2.createFrom(point.X, point.Y));
        return new Point(v[0], v[1]);
    };
    Transform.Instance.TransformBounds = function (rect) {
        if (!rect)
            return;
        return rect.Transform(this.Value.raw);
    };
    Transform.Instance._BuildValue = function () {
        AbstractMethod("Transform.BuildValue");
    };
    Transform.Instance._ClearValue = function () {
        delete this._Value;
        this.ValueChanged.Raise(this, new EventArgs());
    };
    namespace.Transform = Nullstone.FinishCreate(Transform);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var TransformGroup = Nullstone.Create("TransformGroup", namespace.Transform);
    TransformGroup.ChildrenProperty = DependencyProperty.RegisterCore("Children", function () { return namespace.TransformCollection; }, TransformGroup);
    Nullstone.AutoProperties(TransformGroup, [
        TransformGroup.ChildrenProperty
    ]);
    TransformGroup.Annotations = {
        ContentProperty: TransformGroup.ChildrenProperty
    };
    TransformGroup.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== TransformGroup) {
            this._OnPropertyChanged$Transform(args, error);
            return;
        }
        if (args.Property._ID === TransformGroup.ChildrenProperty._ID) {
            if (args.OldValue != null) {
                args.OldValue.Changed.Unsubscribe(this._ChildrenChanged, this);
                args.OldValue.ItemChanged.Unsubscribe(this._ChildrenItemChanged, this);
            }
            if (args.NewValue != null) {
                args.NewValue.ItemChanged.Subscribe(this._ChildrenItemChanged, this);
                args.NewValue.Changed.Subscribe(this._ChildrenChanged, this);
            }
        }
        this.PropertyChanged.Raise(this, args);
    };
    TransformGroup.Instance._ChildrenChanged = function (sender, e) {
        this._ClearValue();
    };
    TransformGroup.Instance._ChildrenItemChanged = function (sender, e) {
        this._ClearValue();
    };
    TransformGroup.Instance._BuildValue = function () {
        var children = this.Children;
        var count = children.GetCount();
        var cur = mat3.identity();
        for (var i = count - 1; i >= 0; i--) {
            mat3.multiply(children.GetValueAt(i).Value.raw, cur, cur); //cur = cur * child
        }
        return cur;
    };
    namespace.TransformGroup = Nullstone.FinishCreate(TransformGroup);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var TranslateTransform = Nullstone.Create("TranslateTransform", namespace.Transform);
    TranslateTransform.XProperty = DependencyProperty.Register("X", function () { return Number; }, TranslateTransform, 0);
    TranslateTransform.YProperty = DependencyProperty.Register("Y", function () { return Number; }, TranslateTransform, 0);
    Nullstone.AutoProperties(TranslateTransform, [
        TranslateTransform.XProperty,
        TranslateTransform.YProperty
    ]);
    TranslateTransform.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== TranslateTransform) {
            this._OnPropertyChanged$Transform(args, error);
            return;
        }
        if (args.Property._ID === TranslateTransform.XProperty._ID
            || args.Property._ID === TranslateTransform.YProperty._ID) {
            this._ClearValue();
        }
        this.PropertyChanged.Raise(this, args);
    };
    TranslateTransform.Instance._BuildValue = function () {
        return mat3.createTranslate(this.X, this.Y);
    };
    namespace.TranslateTransform = Nullstone.FinishCreate(TranslateTransform);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var EasingFunctionBase = Nullstone.Create("EasingFunctionBase", Fayde.DependencyObject, undefined, [namespace.IEasingFunction]);
    EasingFunctionBase.EasingModeProperty = DependencyProperty.Register("EasingMode", function () { return new Enum(namespace.EasingMode); }, EasingFunctionBase);
    Nullstone.AutoProperties(EasingFunctionBase, [
        EasingFunctionBase.EasingModeProperty
    ]);
    EasingFunctionBase.Instance.Ease = function (normalizedTime) {
        var easingMode = this.EasingMode;
        switch (easingMode) {
            case namespace.EasingMode.EaseIn:
                return this.EaseInCore(normalizedTime);
            case namespace.EasingMode.EaseOut:
                return this.EaseInCore(1.0 - normalizedTime);
            case namespace.EasingMode.EaseInOut:
                return normalizedTime <= 0.5 ?
                    this.EaseInCore(normalizedTime * 2) * 0.5 :
                    1.0 - this.EaseInCore(((1.0 - normalizedTime) * 2) * 0.5);
            default:
                return 0.0;
        }
    };
    EasingFunctionBase.Instance.EaseInCore = function (t) { };
    namespace.EasingFunctionBase = Nullstone.FinishCreate(EasingFunctionBase);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var BackEase = Nullstone.Create("BackEase", namespace.EasingFunctionBase);
    BackEase.AmplitudeProperty = DependencyProperty.Register("Amplitude", function () { return Number; }, BackEase);
    Nullstone.AutoProperties(BackEase, [
        BackEase.AmplitudeProperty
    ]);
    BackEase.Instance.EaseInCore = function (t) {
        var a = this.Amplitude;
        return (t * t * t) - (t * a * Math.sin(t * Math.PI));
    };
    namespace.BackEase = Nullstone.FinishCreate(BackEase);
    var BounceEase = Nullstone.Create("BounceEase", namespace.EasingFunctionBase);
    BounceEase.BouncesProperty = DependencyProperty.Register("Bounces", function () { return Number; }, BounceEase, 3);
    BounceEase.BouncinessProperty = DependencyProperty.Register("Bounciness", function () { return Number; }, BounceEase, 2);
    Nullstone.AutoProperties(BounceEase, [
        BounceEase.BouncesProperty,
        BounceEase.BouncinessProperty
    ]);
    BounceEase.Instance.EaseInCore = function (t) {
        t = 1 - t;
        var bounces = this.Bounces;
        var bounciness = this.Bounciness;
        var r = -1;
        var period = 2;
        for (var i = 0; i <= bounces; i++) {
            r += (period * Math.pow(1 + (bounciness / 2), -i));
        }
        var x1 = -1.0;
        var x2 = 0;
        var r_sq = r * r;
        var val = 100;
        var p = 0;
        while (val > 0.0) {
            x2 = x1 + period * Math.pow(1 + (bounciness / 2), -p++);
            val = r_sq * (t - x1 / r) * (t - x2 / r);
            x1 = x2;
        }
        return -val;
    };
    namespace.BounceEase = Nullstone.FinishCreate(BounceEase);
    var CircleEase = Nullstone.Create("CircleEase", namespace.EasingFunctionBase);
    CircleEase.Instance.EaseInCore = function (t) {
        return 1 - Math.sqrt(1 - (t * t));
    };
    namespace.CircleEase = Nullstone.FinishCreate(CircleEase);
    var CubicEase = Nullstone.Create("CubicEase", namespace.EasingFunctionBase);
    CubicEase.Instance.EaseInCore = function (t) {
        return t * t * t;
    };
    namespace.CubicEase = Nullstone.FinishCreate(CubicEase);
    var ElasticEase = Nullstone.Create("ElasticEase", namespace.EasingFunctionBase);
    ElasticEase.OscillationsProperty = DependencyProperty.Register("Oscillations", function () { return Number; }, ElasticEase);
    ElasticEase.SpringinessProperty = DependencyProperty.Register("Springiness", function () { return Number; }, ElasticEase);
    Nullstone.AutoProperties(ElasticEase, [
        ElasticEase.OscillationsProperty,
        ElasticEase.SpringinessProperty
    ]);
    ElasticEase.Instance.EaseInCore = function (t) {
        var period = 1.0 / (this.Oscillations + .25);
        var offset = period / 4;
        t = t - 1;
        return t * -Math.pow(2.0, this.Springiness * t) * Math.sin(((t - offset) * Math.PI * 2) / period);
    };
    namespace.ElasticEase = Nullstone.FinishCreate(ElasticEase);
    var ExponentialEase = Nullstone.Create("ExponentialEase", namespace.EasingFunctionBase);
    ExponentialEase.ExponentProperty = DependencyProperty.Register("Exponent", function () { return Number; }, ExponentialEase);
    Nullstone.AutoProperties(ExponentialEase, [
        ExponentialEase.ExponentProperty
    ]);
    ExponentialEase.Instance.EaseInCore = function (t) {
        var e = this.Exponent;
        return (Math.exp(e * t) - 1) / (Math.exp(e) - 1);
    };
    namespace.ExponentialEase = Nullstone.FinishCreate(ExponentialEase);
    var PowerEase = Nullstone.Create("PowerEase", namespace.EasingFunctionBase);
    PowerEase.PowerProperty = DependencyProperty.Register("Power", function () { return Number; }, PowerEase);
    Nullstone.AutoProperties(PowerEase, [
        PowerEase.PowerProperty
    ]);
    PowerEase.Instance.EaseInCore = function (t) {
        return Math.pow(t, this.Power);
    };
    namespace.PowerEase = Nullstone.FinishCreate(PowerEase);
    var QuadraticEase = Nullstone.Create("QuadraticEase", namespace.EasingFunctionBase);
    QuadraticEase.Instance.EaseInCore = function (t) {
        return t * t;
    };
    namespace.QuadraticEase = Nullstone.FinishCreate(QuadraticEase);
    var QuarticEase = Nullstone.Create("QuarticEase", namespace.EasingFunctionBase);
    QuarticEase.Instance.EaseInCore = function (t) {
        return t * t * t * t;
    };
    namespace.QuarticEase = Nullstone.FinishCreate(QuarticEase);
    var QuinticEase = Nullstone.Create("QuinticEase", namespace.EasingFunctionBase);
    QuinticEase.Instance.EaseInCore = function (t) {
        return t * t * t * t * t;
    };
    namespace.QuinticEase = Nullstone.FinishCreate(QuinticEase);
    var SineEase = Nullstone.Create("SineEase", namespace.EasingFunctionBase);
    SineEase.Instance.EaseInCore = function (t) {
        return 1 - (Math.sin(1 - t) * (Math.PI / 2));
    };
    namespace.SineEase = Nullstone.FinishCreate(SineEase);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var KeyFrame = Nullstone.Create("KeyFrame", Fayde.DependencyObject);
    KeyFrame.Instance.Init = function () {
        this.Init$DependencyObject();
        this._ResolvedKeyTime = null;
        this._Resolved = false;
    };
    Nullstone.AbstractProperty(KeyFrame, "KeyTime");
    KeyFrame.Instance.CoerceKeyTime = function (dobj, propd, value, coerced, error) {
        if (value == null)
            coerced.Value = this.KeyTime;
        else
            coerced.Value = value;
        return true;
    };
    KeyFrame.Instance.InterpolateValue = function (baseValue, keyFrameProgress) {
        throw new AbstractMethodException();
    };
    KeyFrame.Comparer = function (kf1, kf2) {
        var ts1 = kf1._ResolvedKeyTime;
        var ts2 = kf2._ResolvedKeyTime;
        return ts1.CompareTo(ts2);
    };
    namespace.KeyFrame = Nullstone.FinishCreate(KeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var KeySpline = Nullstone.Create("KeySpline", Fayde.DependencyObject);
    KeySpline.ControlPoint1Property = DependencyProperty.RegisterCore("ControlPoint1", function () { return Point; }, KeySpline, new Point(0, 0));
    KeySpline.ControlPoint2Property = DependencyProperty.RegisterCore("ControlPoint2", function () { return Point; }, KeySpline, new Point(1.0, 1.0));
    Nullstone.AutoProperties(KeySpline, [
        KeySpline.ControlPoint1Property,
        KeySpline.ControlPoint2Property
    ]);
    KeySpline.PRECISION_LEVEL = 4;
    KeySpline.TOTAL_COUNT = Math.pow(2, KeySpline.PRECISION_LEVEL);
    KeySpline.Instance.GetSplineProgress = function (linearProgress) {
        if (linearProgress >= 1.0)
            return 1.0;
        if (linearProgress <= 0.0)
            return 0.0;
        if (!this._QuadraticsArray)
            this._RegenerateQuadratics();
        return namespace.Curves.QuadraticArrayYForX(this._QuadraticsArray, linearProgress, KeySpline.TOTAL_COUNT);
    };
    KeySpline.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== KeySpline) {
            this._OnPropertyChanged$DependencyObject(args, error);
            return;
        }
        delete this._QuadraticsArray;
        this.PropertyChanged.Raise(this, args);
    };
    KeySpline.Instance._RegenerateQuadratics = function () {
        var c1 = this.ControlPoint1;
        var c2 = this.ControlPoint2;
        var src = {
            c0: { x: 0.0, y: 0.0 },
            c1: { x: c1.x, y: c1.y },
            c2: { x: c2.x, y: c2.y },
            c3: { x: 1.0, y: 1.0 }
        };
        var carr = [];
        this._QuadraticsArray = [];
        namespace.Curves.SubdivideCubicAtLevel(carr, KeySpline.PRECISION_LEVEL, src);
        this._QuadraticsArray = namespace.Curves.ConvertCubicsToQuadratics(carr, KeySpline.TOTAL_COUNT);
    };
    namespace.KeySpline = Nullstone.FinishCreate(KeySpline);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var Timeline = Nullstone.Create("Timeline", Fayde.DependencyObject);
    Timeline.Instance.Init = function () {
        this.Init$DependencyObject();
        this.Completed = new MulticastEvent();
        this.Reset();
    };
    Timeline.AutoReverseProperty = DependencyProperty.Register("AutoReverse", function () { return Boolean; }, Timeline, false);
    Timeline.BeginTimeProperty = DependencyProperty.Register("BeginTime", function () { return TimeSpan; }, Timeline, new TimeSpan());
    Timeline.DurationProperty = DependencyProperty.Register("Duration", function () { return Duration; }, Timeline, Duration.CreateAutomatic());
    Timeline.RepeatBehaviorProperty = DependencyProperty.Register("RepeatBehavior", function () { return namespace.RepeatBehavior; }, Timeline, namespace.RepeatBehavior.FromIterationCount(1));
    Timeline.SpeedRatioProperty = DependencyProperty.Register("SpeedRatio", function () { return Number; }, Timeline, 1.0);
    Timeline.FillBehaviorProperty = DependencyProperty.Register("FillBehavior", function () { return new Enum(namespace.FillBehavior); }, Timeline, namespace.FillBehavior.HoldEnd);
    Nullstone.AutoProperties(Timeline, [
        Timeline.AutoReverseProperty,
        Timeline.BeginTimeProperty,
        Timeline.DurationProperty,
        Timeline.RepeatBehaviorProperty,
        Timeline.SpeedRatioProperty,
        Timeline.FillBehaviorProperty
    ]);
    Nullstone.Property(Timeline, "HasManualTarget", {
        get: function () {
            return this._ManualTarget != null;
        }
    });
    Nullstone.Property(Timeline, "ManualTarget", {
        get: function () {
            return this._ManualTarget;
        }
    });
    Timeline.Instance.Reset = function () {
        this._TicksPaused = 0;
        this._IsFirstUpdate = true;
        delete this._BeginTicks;
        this._HasBegun = false;
    };
    Timeline.Instance.Pause = function () {
        if (this._IsPaused)
            return;
        this._BeginPauseTime = new Date().getTime();
        this._IsPaused = true;
    };
    Timeline.Instance.Resume = function () {
        if (!this._IsPaused)
            return;
        this._IsPaused = false;
        var nowTime = new Date().getTime();
        this._TicksPaused = nowTime - this._BeginPauseTime;
    };
    Timeline.Instance.Stop = function () {
        this.Reset();
    };
    Timeline.Instance.OnCompleted = function () {
        var fill = this.FillBehavior;
        switch (fill) {
            case namespace.FillBehavior.HoldEnd:
                this.Disable();
                break;
            case namespace.FillBehavior.Stop:
                this.Stop();
                break;
        }
        this.Completed.Raise(this, new EventArgs());
    };
    Timeline.Instance.Update = function (nowTime) {
        var clockData = this.CreateClockData(nowTime);
        if (!clockData)
            return;
        if (this._IsPaused)
            return;
        this.UpdateInternal(clockData);
        if (clockData.Completed)
            this.OnCompleted();
    };
    Timeline.Instance.UpdateInternal = function (clockData) { };
    Timeline.Instance.Disable = function () { };
    Timeline.Instance.CreateClockData = function (nowTime) {
        if (this._IsFirstUpdate) {
            this._InitialStep = nowTime;
            this._HasBegun = false;
            this._IsFirstUpdate = false;
        }
        if (!this._HasBegun) {
            if (!this.IsAfterBeginTime(nowTime))
                return;
            this._BeginTicks = nowTime;
            this._HasBegun = true;
        }
        var elapsedTicks = nowTime - this._BeginTicks - this._TicksPaused;
        var currentTimeTicks = elapsedTicks;
        var progress = 0.0;
        var completed = false;
        var duration = this.GetNaturalDuration();
        if (!duration || duration.IsAutomatic) {
            progress = 1.0;
            completed = true;
        } else if (duration.HasTimeSpan) {
            var d = duration.TimeSpan._Ticks;
            if (d === 0) {
                progress = 1.0;
            } else if (this.AutoReverse === true) {
                d = d / 2;
                progress = 1 - (Math.abs((elapsedTicks % (d + d)) - d) / d);
            } else {
                progress = (elapsedTicks / d) - Math.floor(elapsedTicks / d);
            }
            var repeat = this.RepeatBehavior;
            if (repeat.IsForever) {
            } else if (repeat.HasCount) {
                if ((d === 0) || (Math.floor(elapsedTicks / d) >= repeat.Count)) {
                    progress = 1.0;
                    completed = true;
                }
            } else if (repeat.HasDuration) {
                if (elapsedTicks >= repeat.Duration.TimeSpan._Ticks) {
                    progress = 1.0;
                    completed = true;
                }
            }
            if (d !== 0)
                currentTimeTicks = progress * d; //normalizes CurrentTime within [0,duration] constraints
        }
        return {
            CurrentTime: new TimeSpan(currentTimeTicks),
            Progress: progress,
            Completed: completed
        };
    };
    Timeline.Instance.IsAfterBeginTime = function (nowTime) {
        var beginTime = this.BeginTime;
        if (beginTime == null)
            return true;
        var beginTicks = beginTime._Ticks;
        if (beginTicks <= 0)
            return true;
        var elapsedTicks = nowTime - this._InitialStep;
        if (elapsedTicks < beginTicks)
            return false;
        return true;
    };
    Timeline.Instance.GetNaturalDuration = function () {
        var d = this.Duration;
        if (d.IsAutomatic)
            return this.GetNaturalDurationCore();
        return d;
    };
    Timeline.Instance.GetNaturalDurationCore = function () {
        return Duration.CreateAutomatic();
    };
    namespace.Timeline = Nullstone.FinishCreate(Timeline);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var TimelineCollection = Nullstone.Create("TimelineCollection", Fayde.InternalCollection);
    namespace.TimelineCollection = Nullstone.FinishCreate(TimelineCollection);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var Effect = Nullstone.Create("Effect", Fayde.DependencyObject);
    Effect.EffectMappingProperty = DependencyProperty.Register("EffectMapping", function () { return Fayde.Media.GeneralTransform; }, Effect);
    Nullstone.AutoProperties(Effect, [
        Effect.EffectMappingProperty
    ]);
    Effect.Instance.Padding = function () {
        return new Thickness();
    };
    Effect.Instance.PreRender = function (ctx) {
        AbstractMethod("Effect.PreRender");
    };
    namespace.Effect = Nullstone.FinishCreate(Effect);
})(Nullstone.Namespace("Fayde.Media.Effects"));

(function (namespace) {
    var ImageBrush = Nullstone.Create("ImageBrush", Fayde.Media.TileBrush);
    ImageBrush.Instance.Init = function () {
        this.Init$TileBrush();
        this.ImageFailed = new MulticastEvent();
        this.ImageOpened = new MulticastEvent();
    };
    ImageBrush.ImageSourceProperty = DependencyProperty.RegisterFull("ImageSource", function () { return Fayde.Media.Imaging.ImageSource; }, ImageBrush, undefined, undefined, { GetValue: function (propd, obj) { return new Fayde.Media.Imaging.BitmapImage(); } });
    Nullstone.AutoProperty(ImageBrush, ImageBrush.ImageSourceProperty, function (value) {
        if (value instanceof Uri)
            return new Fayde.Media.Imaging.BitmapImage(value);
        return value;
    });
    ImageBrush.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== ImageBrush) {
            this._OnPropertyChanged$TileBrush(args, error);
            return;
        }
        if (args.Property._ID === ImageBrush.ImageSourceProperty._ID) {
            var oldBmpSrc = Nullstone.As(args.OldValue, Fayde.Media.Imaging.BitmapSource);
            if (oldBmpSrc != null) {
                oldBmpSrc._ErroredCallback = null;
                oldBmpSrc._LoadedCallback = null;
            }
            var newBmpSrc = Nullstone.As(args.NewValue, Fayde.Media.Imaging.BitmapSource);
            if (newBmpSrc != null) {
                var ib = this;
                newBmpSrc._ErroredCallback = function () { ib.ImageFailed.Raise(this, new EventArgs()); };
                newBmpSrc._LoadedCallback = function () { ib.ImageOpened.Raise(this, new EventArgs()); };
            }
            this._InvalidateSurfaceCache();
        }
        this.PropertyChanged.Raise(this, args);
    };
    ImageBrush.Instance.SetupBrush = function (ctx, bounds) {
        var source = this.ImageSource;
        if (source == null)
            return null;
        if (source._Image == null)
            return null;
        this.SetupBrush$TileBrush(ctx, bounds);
    };
    ImageBrush.Instance.GetTileExtents = function () {
        var source = this.ImageSource;
        return new Rect(0, 0, source.PixelWidth, source.PixelHeight);
    };
    ImageBrush.Instance.DrawTile = function (canvasCtx, bounds) {
        var source = this.ImageSource;
        canvasCtx.rect(0, 0, bounds.Width, bounds.Height);
        canvasCtx.fillStyle = canvasCtx.createPattern(source._Image, "no-repeat");
        canvasCtx.fill();
    };
    namespace.ImageBrush = Nullstone.FinishCreate(ImageBrush);
})(Nullstone.Namespace("Fayde.Media.Imaging"));

(function (namespace) {
    var ImageSource = Nullstone.Create("ImageSource", Fayde.DependencyObject);
    Nullstone.AutoProperties(ImageSource, [
        "PixelWidth",
        "PixelHeight"
    ]);
    ImageSource.Instance.Lock = function () { };
    ImageSource.Instance.Unlock = function () { };
    namespace.ImageSource = Nullstone.FinishCreate(ImageSource);
})(Nullstone.Namespace("Fayde.Media.Imaging"));

(function (namespace) {
    var VisualStateGroup = Nullstone.Create("VisualStateGroup", Fayde.DependencyObject);
    VisualStateGroup.Instance.Init = function () {
        this.Init$DependencyObject();
        this.CurrentStateChanging = new MulticastEvent();
        this.CurrentStateChanged = new MulticastEvent();
        this._CurrentStoryboards = [];
    };
    Nullstone.Property(VisualStateGroup, "States", {
        get: function () {
            if (this._States == null)
                this._States = new namespace.VisualStateCollection();
            return this._States;
        }
    });
    VisualStateGroup.Instance.GetTransitions = function () {
        if (this._Transitions == null)
            this._Transitions = new namespace.VisualTransitionCollection();
        return this._Transitions;
    };
    VisualStateGroup.Instance.GetState = function (stateName) {
        var states = this.States;
        for (var i = 0; i < states.GetCount() ; i++) {
            var state = states.GetValueAt(i);
            if (state.Name === stateName)
                return state;
        }
        return null;
    };
    VisualStateGroup.Instance.StartNewThenStopOld = function (element, newStoryboards) {
        AnimationDebug("StartNewThenStopOld (" + element.__DebugToString() + " - " + this.Name + ")");
        var i;
        var storyboard;
        for (i = 0; i < newStoryboards.length; i++) {
            storyboard = newStoryboards[i];
            if (storyboard == null)
                continue;
            element.Resources.Add(storyboard._ID, storyboard);
            try {
                storyboard.Begin();
            } catch (err) {
                for (var j = 0; j <= i; j++) {
                    if (newStoryboards[j] != null)
                        element.Resources.Remove(newStoryboards[j]._ID);
                }
                throw err;
            }
        }
        this.StopCurrentStoryboards(element);
        var curStoryboards = this._CurrentStoryboards;
        for (i = 0; i < newStoryboards.length; i++) {
            if (newStoryboards[i] == null)
                continue;
            curStoryboards.push(newStoryboards[i]);
        }
    };
    VisualStateGroup.Instance.StopCurrentStoryboards = function (element) {
        var curStoryboards = this._CurrentStoryboards;
        var len = curStoryboards.length;
        for (i = 0; i < len; i++) {
            storyboard = curStoryboards[i];
            if (storyboard == null)
                continue;
            element.Resources.Remove(storyboard._ID);
            storyboard.Stop();
        }
        this._CurrentStoryboards = [];
    };
    VisualStateGroup.Instance.RaiseCurrentStateChanging = function (element, oldState, newState, control) {
        this.CurrentStateChanging.Raise(this, new namespace.VisualStateChangedEventArgs(oldState, newState, control));
    };
    VisualStateGroup.Instance.RaiseCurrentStateChanged = function (element, oldState, newState, control) {
        this.CurrentStateChanged.Raise(this, new namespace.VisualStateChangedEventArgs(oldState, newState, control));
    };
    VisualStateGroup.Annotations = {
        ContentProperty: "States"
    };
    namespace.VisualStateGroup = Nullstone.FinishCreate(VisualStateGroup);
})(Nullstone.Namespace("Fayde.Media.VisualStateManager"));
(function (namespace) {
    var VisualStateGroupCollection = Nullstone.Create("VisualStateGroupCollection", Fayde.InternalCollection);
    namespace.VisualStateGroupCollection = Nullstone.FinishCreate(VisualStateGroupCollection);
})(Nullstone.Namespace("Fayde.Media.VisualStateManager"));

(function (namespace) {
    var VisualStateManager = Nullstone.Create("VisualStateManager", Fayde.DependencyObject);
    VisualStateManager.VisualStateGroupsProperty = DependencyProperty.RegisterAttachedCore("VisualStateGroups", function () { return namespace.VisualStateGroupCollection; }, VisualStateManager, null);
    VisualStateManager.GetVisualStateGroups = function (d) {
        return d.$GetValue(VisualStateManager.VisualStateGroupsProperty);
    };
    VisualStateManager.SetVisualStateGroups = function (d, value) {
        d.$SetValue(VisualStateManager.VisualStateGroupsProperty, value);
    };
    VisualStateManager._GetVisualStateGroupsInternal = function (d) {
        var groups = this.GetVisualStateGroups(d);
        if (groups == null) {
            groups = new namespace.VisualStateGroupCollection();
            VisualStateManager.SetVisualStateGroups(d, groups);
        }
        return groups;
    };
    VisualStateManager.CustomVisualStateManagerProperty = DependencyProperty.RegisterAttachedCore("CustomVisualStateManager", function () { return namespace.VisualStateManager }, VisualStateManager, null);
    VisualStateManager.GetCustomVisualStateManager = function (d) {
        return d.$GetValue(VisualStateManager.CustomVisualStateManagerProperty);
    };
    VisualStateManager.SetCustomVisualStateManager = function (d, value) {
        d.$SetValue(VisualStateManager.CustomVisualStateManagerProperty, value);
    };
    VisualStateManager.Instance.GoToStateCore = function (control, element, stateName, group, state, useTransitions) {
        return VisualStateManager.GoToStateInternal(control, element, group, state, useTransitions);
    };
    VisualStateManager.GoToState = function (control, stateName, useTransitions) {
        var root = VisualStateManager._GetTemplateRoot(control);
        if (root == null)
            return false;
        var groups = VisualStateManager._GetVisualStateGroupsInternal(root);
        if (groups == null)
            return false;
        var data = {};
        if (!VisualStateManager._TryGetState(groups, stateName, data))
            return false;
        var customVsm = VisualStateManager.GetCustomVisualStateManager(root);
        if (customVsm != null) {
            return customVsm.GoToStateCore(control, root, stateName, data.group, data.state, useTransitions);
        } else if (data.state != null) {
            return VisualStateManager.GoToStateInternal(control, root, data.group, data.state, useTransitions);
        }
        return false;
    };
    VisualStateManager.GoToStateInternal = function (control, element, group, state, useTransitions) {
        var lastState = group.CurrentState;
        if (Nullstone.RefEquals(lastState, state))
            return true;
        VsmDebug("GoToStateInternal: " + state.Name);
        var transition = useTransitions ? VisualStateManager._GetTransition(element, group, lastState, state) : null;
        var storyboard;
        if (transition == null || (transition.GeneratedDuration.IsZero() && ((storyboard = transition.Storyboard) == null || storyboard.Duration.IsZero()))) {
            if (transition != null && storyboard != null) {
                group.StartNewThenStopOld(element, [storyboard, state.Storyboard]);
            } else {
                group.StartNewThenStopOld(element, [state.Storyboard]);
            }
            group.RaiseCurrentStateChanging(element, lastState, state, control);
            group.RaiseCurrentStateChanged(element, lastState, state, control);
        } else {
            var dynamicTransition = VisualStateManager._GenerateDynamicTransitionAnimations(element, group, state, transition);
            dynamicTransition.$SetValue(Fayde.Controls.Control.IsTemplateItemProperty, true);
            var eventClosure = new Closure();
            transition.DynamicStoryboardCompleted = false;
            var dynamicCompleted = function (sender, e) {
                if (transition.Storyboard == null || transition.ExplicitStoryboardCompleted === true) {
                    group.StartNewThenStopOld(element, [state.Storyboard]);
                    group.RaiseCurrentStateChanged(element, lastState, state, control);
                }
                transition.DynamicStoryboardCompleted = true;
            };
            dynamicTransition.Completed.Subscribe(dynamicCompleted, eventClosure);
            if (transition.Storyboard != null && transition.ExplicitStoryboardCompleted === true) {
                var transitionCompleted = function (sender, e) {
                    if (transition.DynamicStoryboardCompleted === true) {
                        group.StartNewThenStopOld(element, [state.Storyboard]);
                        group.RaiseCurrentStateChanged(element, lastState, state, control);
                    }
                    transition.Storyboard.Completed.Unsubscribe(transitionCompleted, eventClosure);
                    transition.ExplicitStoryboardCompleted = true;
                };
                transition.ExplicitStoryboardCompleted = false;
                transition.Storyboard.Completed.Subscribe(transitionCompleted, eventClosure);
            }
            group.StartNewThenStopOld(element, [transition.Storyboard, dynamicTransition]);
            group.RaiseCurrentStateChanging(element, lastState, state, control);
        }
        group.CurrentState = state;
        return true;
    };
    VisualStateManager.DestroyStoryboards = function (control) {
        var root = VisualStateManager._GetTemplateRoot(control);
        if (root == null)
            return false;
        var groups = VisualStateManager._GetVisualStateGroupsInternal(root);
        if (groups == null)
            return false;
        var count = groups.GetCount();
        for (var i = 0; i < count; i++) {
            groups.GetValueAt(i).StopCurrentStoryboards(root);
        }
    };
    VisualStateManager._GetTemplateRoot = function (control) {
        var userControl = Nullstone.As(control, Fayde.Controls.UserControl);
        if (userControl != null)
            return Nullstone.As(userControl.Content, Fayde.FrameworkElement);
        if (Fayde.VisualTreeHelper.GetChildrenCount(control) > 0)
            return Nullstone.As(Fayde.VisualTreeHelper.GetChild(control, 0), Fayde.FrameworkElement);
        return null;
    };
    VisualStateManager._TryGetState = function (groups, stateName, data) {
        for (var i = 0; i < groups.GetCount() ; i++) {
            data.group = groups.GetValueAt(i);
            data.state = data.group.GetState(stateName);
            if (data.state != null)
                return true;
        }
        data.group = null;
        data.state = null;
        return false;
    };
    VisualStateManager._GetTransition = function (element, group, from, to) {
        if (element == null)
            throw new ArgumentException("element");
        if (group == null)
            throw new ArgumentException("group");
        if (to == null)
            throw new ArgumentException("to");
        var best = null;
        var defaultTransition = null;
        var bestScore = -1;
        var transitions = group.GetTransitions();
        if (transitions != null) {
            var transition;
            for (var i = 0; i < transitions.GetCount() ; i++) {
                transition = transitions.GetValueAt(i);
                if (defaultTransition == null && transition.GetIsDefault()) {
                    defaultTransition = transition;
                    continue;
                }
                var score = -1;
                var transFromState = group.GetState(transition.From);
                var transToState = group.GetState(transition.To);
                if (Nullstone.RefEquals(from, transFromState))
                    score += 1;
                else if (transFromState != null)
                    continue;
                if (Nullstone.RefEquals(to, transToState))
                    score += 2;
                else if (transToState != null)
                    continue;
                if (score > bestScore) {
                    bestScore = score;
                    best = transition;
                }
            }
        }
        if (best != null)
            return best;
        return defaultTransition;
    };
    VisualStateManager._GenerateDynamicTransitionAnimations = function (root, group, state, transition) {
        var dynamic = new Fayde.Media.Animation.Storyboard();
        if (transition != null) {
            dynamic.SetDuration(transition.GeneratedDuration);
        } else {
            dynamic.SetDuration(new Duration(0));
        }
        var currentAnimations; //FlattenTimelines
        var transitionAnimations; //FlattenTimelines
        var newStateAnimations; //FlattenTimelines
        NotImplemented("VisualStateManager._GenerateDynamicTransitionAnimations");
        return dynamic;
    };
    namespace.VisualStateManager = Nullstone.FinishCreate(VisualStateManager);
})(Nullstone.Namespace("Fayde.Media.VisualStateManager"));

(function (namespace) {
    var Color = Nullstone.Create("Color", undefined, 4);
    Color.Instance.Init = function (r, g, b, a) {
        this.R = r == null ? 255 : r;
        this.G = g == null ? 255 : g;
        this.B = b == null ? 255 : b;
        this.A = a == null ? 1.0 : a;
    };
    Nullstone.Property(Color, "HexString", {
        get: function () { return this._Content; },
        set: function (value) {
            var raw = Color.ParseHex(value);
            this.A = raw.a;
            this.R = raw.r;
            this.G = raw.g;
            this.B = raw.b;
        }
    });
    Color.__NoAlphaRegex = /#([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}/;
    Color.__AlphaRegex = /#([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}/;
    Color.FromHex = function (hex) {
        var raw = Color.ParseHex(hex);
        return new Color(raw.r, raw.g, raw.b, raw.a);
    };
    Color.ParseHex = function (hex) {
        var match;
        var raw = {
            a: 0,
            r: 0,
            g: 0,
            b: 0
        };
        if ((match = Color.__AlphaRegex.exec(hex)) != null) {
            raw.a = parseInt(match[1], 16) / 255.0;
            raw.r = parseInt(match[2], 16);
            raw.g = parseInt(match[3], 16);
            raw.b = parseInt(match[4], 16);
        } else if ((match = Color.__NoAlphaRegex.exec(hex)) != null) {
            raw.a = 1.0;
            raw.r = parseInt(match[1], 16);
            raw.g = parseInt(match[2], 16);
            raw.b = parseInt(match[3], 16);
        }
        return raw;
    };
    Color.Instance.Add = function (color2) {
        return new Color(this.R + color2.R, this.G + color2.G, this.B + color2.B, this.A + color2.A);
    };
    Color.Instance.Subtract = function (color2) {
        return new Color(this.R - color2.R, this.G - color2.G, this.B - color2.B, this.A - color2.A);
    };
    Color.Instance.Multiply = function (factor) {
        return new Color(this.R * factor, this.G * factor, this.B * factor, this.A * factor);
    };
    Color.Instance.toString = function () {
        return "rgba(" + this.R.toString() + "," + this.G.toString() + "," + this.B.toString() + "," + this.A.toString() + ")";
    };
    Color.LERP = function (start, end, p) {
        var r = start.R + (end.R - start.R) * p;
        var g = start.G + (end.G - start.G) * p;
        var b = start.B + (end.B - start.B) * p;
        var a = start.A + (end.A - start.A) * p;
        return new Color(r, g, b, a);
    };
    namespace.Color = Nullstone.FinishCreate(Color);
    Color.KnownColors = {
        AliceBlue: Color.FromHex("#FFF0F8FF"),
        AntiqueWhite: Color.FromHex("#FFFAEBD7"),
        Aqua: Color.FromHex("#FF00FFFF"),
        Aquamarine: Color.FromHex("#FF7FFFD4"),
        Azure: Color.FromHex("#FFF0FFFF"),
        Beige: Color.FromHex("#FFF5F5DC"),
        Bisque: Color.FromHex("#FFFFE4C4"),
        Black: Color.FromHex("#FF000000"),
        BlanchedAlmond: Color.FromHex("#FFFFEBCD"),
        Blue: Color.FromHex("#FF0000FF"),
        BlueViolet: Color.FromHex("#FF8A2BE2"),
        Brown: Color.FromHex("#FFA52A2A"),
        BurlyWood: Color.FromHex("#FFDEB887"),
        CadetBlue: Color.FromHex("#FF5F9EA0"),
        Chartreuse: Color.FromHex("#FF7FFF00"),
        Chocolate: Color.FromHex("#FFD2691E"),
        Coral: Color.FromHex("#FFFF7F50"),
        CornflowerBlue: Color.FromHex("#FF6495ED"),
        Cornsilk: Color.FromHex("#FFFFF8DC"),
        Crimson: Color.FromHex("#FFDC143C"),
        Cyan: Color.FromHex("#FF00FFFF"),
        DarkBlue: Color.FromHex("#FF00008B"),
        DarkCyan: Color.FromHex("#FF008B8B"),
        DarkGoldenrod: Color.FromHex("#FFB8860B"),
        DarkGray: Color.FromHex("#FFA9A9A9"),
        DarkGreen: Color.FromHex("#FF006400"),
        DarkKhaki: Color.FromHex("#FFBDB76B"),
        DarkMagenta: Color.FromHex("#FF8B008B"),
        DarkOliveGreen: Color.FromHex("#FF556B2F"),
        DarkOrange: Color.FromHex("#FFFF8C00"),
        DarkOrchid: Color.FromHex("#FF9932CC"),
        DarkRed: Color.FromHex("#FF8B0000"),
        DarkSalmon: Color.FromHex("#FFE9967A"),
        DarkSeaGreen: Color.FromHex("#FF8FBC8F"),
        DarkSlateBlue: Color.FromHex("#FF483D8B"),
        DarkSlateGray: Color.FromHex("#FF2F4F4F"),
        DarkTurquoise: Color.FromHex("#FF00CED1"),
        DarkViolet: Color.FromHex("#FF9400D3"),
        DeepPink: Color.FromHex("#FFFF1493"),
        DeepSkyBlue: Color.FromHex("#FF00BFFF"),
        DimGray: Color.FromHex("#FF696969"),
        DodgerBlue: Color.FromHex("#FF1E90FF"),
        Firebrick: Color.FromHex("#FFB22222"),
        FloralWhite: Color.FromHex("#FFFFFAF0"),
        ForestGreen: Color.FromHex("#FF228B22"),
        Fuchsia: Color.FromHex("#FFFF00FF"),
        Gainsboro: Color.FromHex("#FFDCDCDC"),
        GhostWhite: Color.FromHex("#FFF8F8FF"),
        Gold: Color.FromHex("#FFFFD700"),
        Goldenrod: Color.FromHex("#FFDAA520"),
        Gray: Color.FromHex("#FF808080"),
        Green: Color.FromHex("#FF008000"),
        GreenYellow: Color.FromHex("#FFADFF2F"),
        Honeydew: Color.FromHex("#FFF0FFF0"),
        HotPink: Color.FromHex("#FFFF69B4"),
        IndianRed: Color.FromHex("#FFCD5C5C"),
        Indigo: Color.FromHex("#FF4B0082"),
        Ivory: Color.FromHex("#FFFFFFF0"),
        Khaki: Color.FromHex("#FFF0E68C"),
        Lavender: Color.FromHex("#FFE6E6FA"),
        LavenderBlush: Color.FromHex("#FFFFF0F5"),
        LawnGreen: Color.FromHex("#FF7CFC00"),
        LemonChiffon: Color.FromHex("#FFFFFACD"),
        LightBlue: Color.FromHex("#FFADD8E6"),
        LightCoral: Color.FromHex("#FFF08080"),
        LightCyan: Color.FromHex("#FFE0FFFF"),
        LightGoldenrodYellow: Color.FromHex("#FFFAFAD2"),
        LightGray: Color.FromHex("#FFD3D3D3"),
        LightGreen: Color.FromHex("#FF90EE90"),
        LightPink: Color.FromHex("#FFFFB6C1"),
        LightSalmon: Color.FromHex("#FFFFA07A"),
        LightSeaGreen: Color.FromHex("#FF20B2AA"),
        LightSkyBlue: Color.FromHex("#FF87CEFA"),
        LightSlateGray: Color.FromHex("#FF778899"),
        LightSteelBlue: Color.FromHex("#FFB0C4DE"),
        LightYellow: Color.FromHex("#FFFFFFE0"),
        Lime: Color.FromHex("#FF00FF00"),
        LimeGreen: Color.FromHex("#FF32CD32"),
        Linen: Color.FromHex("#FFFAF0E6"),
        Magenta: Color.FromHex("#FFFF00FF"),
        Maroon: Color.FromHex("#FF800000"),
        MediumAquamarine: Color.FromHex("#FF66CDAA"),
        MediumBlue: Color.FromHex("#FF0000CD"),
        MediumOrchid: Color.FromHex("#FFBA55D3"),
        MediumPurple: Color.FromHex("#FF9370DB"),
        MediumSeaGreen: Color.FromHex("#FF3CB371"),
        MediumSlateBlue: Color.FromHex("#FF7B68EE"),
        MediumSpringGreen: Color.FromHex("#FF00FA9A"),
        MediumTurquoise: Color.FromHex("#FF48D1CC"),
        MediumVioletRed: Color.FromHex("#FFC71585"),
        MidnightBlue: Color.FromHex("#FF191970"),
        MintCream: Color.FromHex("#FFF5FFFA"),
        MistyRose: Color.FromHex("#FFFFE4E1"),
        Moccasin: Color.FromHex("#FFFFE4B5"),
        NavajoWhite: Color.FromHex("#FFFFDEAD"),
        Navy: Color.FromHex("#FF000080"),
        OldLace: Color.FromHex("#FFFDF5E6"),
        Olive: Color.FromHex("#FF808000"),
        OliveDrab: Color.FromHex("#FF6B8E23"),
        Orange: Color.FromHex("#FFFFA500"),
        OrangeRed: Color.FromHex("#FFFF4500"),
        Orchid: Color.FromHex("#FFDA70D6"),
        PaleGoldenrod: Color.FromHex("#FFEEE8AA"),
        PaleGreen: Color.FromHex("#FF98FB98"),
        PaleTurquoise: Color.FromHex("#FFAFEEEE"),
        PaleVioletRed: Color.FromHex("#FFDB7093"),
        PapayaWhip: Color.FromHex("#FFFFEFD5"),
        PeachPuff: Color.FromHex("#FFFFDAB9"),
        Peru: Color.FromHex("#FFCD853F"),
        Pink: Color.FromHex("#FFFFC0CB"),
        Plum: Color.FromHex("#FFDDA0DD"),
        PowderBlue: Color.FromHex("#FFB0E0E6"),
        Purple: Color.FromHex("#FF800080"),
        Red: Color.FromHex("#FFFF0000"),
        RosyBrown: Color.FromHex("#FFBC8F8F"),
        RoyalBlue: Color.FromHex("#FF4169E1"),
        SaddleBrown: Color.FromHex("#FF8B4513"),
        Salmon: Color.FromHex("#FFFA8072"),
        SandyBrown: Color.FromHex("#FFF4A460"),
        SeaGreen: Color.FromHex("#FF2E8B57"),
        SeaShell: Color.FromHex("#FFFFF5EE"),
        Sienna: Color.FromHex("#FFA0522D"),
        Silver: Color.FromHex("#FFC0C0C0"),
        SkyBlue: Color.FromHex("#FF87CEEB"),
        SlateBlue: Color.FromHex("#FF6A5ACD"),
        SlateGray: Color.FromHex("#FF708090"),
        Snow: Color.FromHex("#FFFFFAFA"),
        SpringGreen: Color.FromHex("#FF00FF7F"),
        SteelBlue: Color.FromHex("#FF4682B4"),
        Tan: Color.FromHex("#FFD2B48C"),
        Teal: Color.FromHex("#FF008080"),
        Thistle: Color.FromHex("#FFD8BFD8"),
        Tomato: Color.FromHex("#FFFF6347"),
        Transparent: Color.FromHex("#00FFFFFF"),
        Turquoise: Color.FromHex("#FF40E0D0"),
        Violet: Color.FromHex("#FFEE82EE"),
        Wheat: Color.FromHex("#FFF5DEB3"),
        White: Color.FromHex("#FFFFFFFF"),
        WhiteSmoke: Color.FromHex("#FFF5F5F5"),
        Yellow: Color.FromHex("#FFFFFF00"),
        YellowGreen: Color.FromHex("#FF9ACD32")
    };
})(window);

(function (namespace) {
    var DoubleCollection = Nullstone.Create("DoubleCollection", Fayde.InternalCollection);
    namespace.DoubleCollection = Nullstone.FinishCreate(DoubleCollection);
})(Nullstone.Namespace("Fayde.Shapes"));

(function (namespace) {
    var PointCollection = Nullstone.Create("PointCollection", Fayde.InternalCollection);
    namespace.PointCollection = Nullstone.FinishCreate(PointCollection);
})(Nullstone.Namespace("Fayde.Shapes"));

(function (Collections) {
    var ObservableCollection = Nullstone.Create("ObservableCollection", Fayde.InternalCollection, 0, [Collections.INotifyCollectionChanged]);
    ObservableCollection.Instance.Init = function () {
        this.Init$InternalCollection();
        this.CollectionChanged = new MulticastEvent();
    };
    ObservableCollection.Instance._RaiseChanged = function (args) {
        var argsClass = Collections.NotifyCollectionChangedEventArgs;
        var rargs;
        if (args.IsReset) {
            rargs = argsClass.Reset();
        } else if (args.IsReplace) {
            rargs = argsClass.Replace(args.NewValue, args.OldValue, args.Index);
        } else if (args.IsAdd) {
            rargs = argsClass.Add(args.NewValue, args.Index);
        } else if (args.IsRemove) {
            rargs = argsClass.Remove(args.OldValue, args.Index);
        }
        this.CollectionChanged.Raise(this, rargs);
    };
    Collections.ObservableCollection = Nullstone.FinishCreate(ObservableCollection);
})(Nullstone.Namespace("Fayde.Collections"));

(function (namespace) {
    var ColumnDefinition = Nullstone.Create("ColumnDefinition", Fayde.DependencyObject);
    ColumnDefinition.WidthProperty = DependencyProperty.RegisterCore("Width", function () { return namespace.GridLength; }, ColumnDefinition, new namespace.GridLength(1.0, namespace.GridUnitType.Star));
    ColumnDefinition.MaxWidthProperty = DependencyProperty.RegisterCore("MaxWidth", function () { return Number; }, ColumnDefinition, Number.POSITIVE_INFINITY);
    ColumnDefinition.MinWidthProperty = DependencyProperty.RegisterCore("MinWidth", function () { return Number; }, ColumnDefinition, 0.0);
    ColumnDefinition.ActualWidthProperty = DependencyProperty.RegisterReadOnlyCore("ActualWidth", function () { return Number; }, ColumnDefinition, 0.0);
    Nullstone.AutoProperties(ColumnDefinition, [
        ColumnDefinition.WidthProperty,
        ColumnDefinition.MaxWidthProperty,
        ColumnDefinition.MinWidthProperty,
        ColumnDefinition.ActualWidthProperty
    ]);
    namespace.ColumnDefinition = Nullstone.FinishCreate(ColumnDefinition);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ControlTemplate = Nullstone.Create("ControlTemplate", Fayde.FrameworkTemplate, 2);
    ControlTemplate.Instance.Init = function (targetType, json) {
        this.Init$FrameworkTemplate();
        this.TargetType = targetType;
        this._TempJson = json;
    };
    ControlTemplate.TargetTypeProperty = DependencyProperty.Register("TargetType", function () { return Function; }, ControlTemplate);
    Nullstone.AutoProperties(ControlTemplate, [
        ControlTemplate.TargetTypeProperty
    ]);
    ControlTemplate.Instance._GetVisualTreeWithError = function (templateBindingSource, error) {
        if (this._TempJson) {
            var namescope = new Fayde.NameScope();
            var root = Fayde.JsonParser.Parse(this._TempJson, templateBindingSource, namescope, this._ResChain);
            Fayde.NameScope.SetNameScope(root, namescope);
            return root;
        }
        return this._GetVisualTreeWithError$FrameworkTemplate(templateBindingSource, error);
    };
    namespace.ControlTemplate = Nullstone.FinishCreate(ControlTemplate);
})(Nullstone.Namespace("Fayde.Controls"));

(function (Controls) {
    var ItemCollection = Nullstone.Create("ItemCollection", Fayde.PresentationFrameworkCollection, 0, [Fayde.Collections.INotifyCollectionChanged]);
    ItemCollection.Instance.Init = function () {
        this.Init$PresentationFrameworkCollection();
        this.CollectionChanged = this.ItemsChanged;
        this._ReadOnly = false;
    };
    ItemCollection.Instance.$GetIsReadOnly = function () {
        return this._ReadOnly;
    };
    ItemCollection.Instance._IsReadOnlyImpl = function () {
        return this._ReadOnly;
    };
    ItemCollection.Instance._CheckNull = function (action, value) {
        if (value != null)
            return false;
        if (action === Fayde.Collections.NotifyCollectionChangedAction.Remove)
            return true;
        throw new ArgumentException();
    };
    Controls.ItemCollection = Nullstone.FinishCreate(ItemCollection);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ItemsPanelTemplate = Nullstone.Create("ItemsPanelTemplate", Fayde.FrameworkTemplate, 1);
    ItemsPanelTemplate.Instance.Init = function (json) {
        this.Init$FrameworkTemplate();
        this._TempJson = json;
    };
    ItemsPanelTemplate.Instance._GetVisualTreeWithError = function (templateBindingSource, error) {
        if (this._TempJson) {
            var namescope = new Fayde.NameScope();
            var root = Fayde.JsonParser.Parse(this._TempJson, templateBindingSource, namescope);
            Fayde.NameScope.SetNameScope(root, namescope);
            return root;
        }
        return this._GetVisualTreeWithError$FrameworkTemplate(templateBindingSource, error);
    };
    namespace.ItemsPanelTemplate = Nullstone.FinishCreate(ItemsPanelTemplate);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var RowDefinition = Nullstone.Create("RowDefinition", Fayde.DependencyObject);
    RowDefinition.HeightProperty = DependencyProperty.RegisterCore("Height", function () { return namespace.GridLength; }, RowDefinition, new namespace.GridLength(1.0, namespace.GridUnitType.Star));
    RowDefinition.MaxHeightProperty = DependencyProperty.RegisterCore("MaxHeight", function () { return Number; }, RowDefinition, Number.POSITIVE_INFINITY);
    RowDefinition.MinHeightProperty = DependencyProperty.RegisterCore("MinHeight", function () { return Number; }, RowDefinition, 0.0);
    RowDefinition.ActualHeightProperty = DependencyProperty.RegisterReadOnlyCore("ActualHeight", function () { return Number; }, RowDefinition, 0.0);
    Nullstone.AutoProperties(RowDefinition, [
        RowDefinition.HeightProperty,
        RowDefinition.MaxHeightProperty,
        RowDefinition.MinHeightProperty,
        RowDefinition.ActualHeightProperty
    ]);
    namespace.RowDefinition = Nullstone.FinishCreate(RowDefinition);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ToolTipService = Nullstone.Create("ToolTipService");
    ToolTipService.ToolTipProperty = DependencyProperty.RegisterAttached("ToolTip", function () { return Fayde.DependencyObject; }, ToolTipService);
    ToolTipService.PlacementTargetProperty = DependencyProperty.RegisterAttached("PlacementTarget", function () { return Fayde.UIElement; }, ToolTipService);
    namespace.ToolTipService = Nullstone.FinishCreate(ToolTipService);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var _PasswordBoxDynamicPropertyValueProvider = Nullstone.Create("_PasswordBoxDynamicPropertyValueProvider", namespace._TextBoxBaseDynamicPropertyValueProvider, 2);
    _PasswordBoxDynamicPropertyValueProvider.Instance.Init = function (obj, propPrecedence) {
        this.Init$_TextBoxBaseDynamicPropertyValueProvider(obj, propPrecedence,
            namespace.PasswordBox.SelectionForegroundProperty, namespace.PasswordBox.SelectionBackgroundProperty, namespace.PasswordBox.BaselineOffsetProperty);
    };
    namespace._PasswordBoxDynamicPropertyValueProvider = Nullstone.FinishCreate(_PasswordBoxDynamicPropertyValueProvider);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var DataTemplate = Nullstone.Create("DataTemplate", namespace.FrameworkTemplate, 1);
    DataTemplate.Instance.Init = function (json) {
        this.Init$FrameworkTemplate();
        this._TempJson = json;
    };
    DataTemplate.Instance._GetVisualTreeWithError = function (templateBindingSource, error) {
        if (this._TempJson) {
            var namescope = new Fayde.NameScope();
            var root = Fayde.JsonParser.Parse(this._TempJson, templateBindingSource, namescope);
            Fayde.NameScope.SetNameScope(root, namescope);
            return root;
        }
        return this._GetVisualTreeWithError$FrameworkTemplate(templateBindingSource, error);
    };
    namespace.DataTemplate = Nullstone.FinishCreate(DataTemplate);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var UIElementFlags = Fayde.UIElementFlags;
    var FrameworkElement = Nullstone.Create("FrameworkElement", Fayde.UIElement);
    FrameworkElement.Instance.Init = function () {
        this.Init$UIElement();
        this._BoundsWithChildren = new Rect();
        this._GlobalBoundsWithChildren = new Rect();
        this._SurfaceBoundsWithChildren = new Rect();
        this._ExtentsWithChildren = new Rect();
        this.AddProvider(new Fayde._StylePropertyValueProvider(this));
        this.AddProvider(new Fayde._ImplicitStylePropertyValueProvider(this));
        this.AddProvider(new Fayde.FrameworkElementPropertyValueProvider(this));
        this.AddProvider(new Fayde._InheritedDataContextPropertyValueProvider(this));
        this.SizeChanged = new MulticastEvent();
        this.LayoutUpdated = {
            Subscribe: function (callback, closure) {
                var surface = App.Instance.MainSurface;
                if (surface)
                    surface.LayoutUpdated.Subscribe(callback, closure);
            },
            Unsubscribe: function (callback, closure) {
                var surface = App.Instance.MainSurface;
                if (surface)
                    surface.LayoutUpdated.Unsubscribe(callback, closure);
            }
        };
    };
    FrameworkElement.CursorProperty = DependencyProperty.RegisterFull("Cursor", function () { return new Enum(CursorType); }, FrameworkElement, CursorType.Default); //TODO: AutoCreator: FrameworkElement._CoerceCursor);
    FrameworkElement.HeightProperty = DependencyProperty.RegisterCore("Height", function () { return Number; }, FrameworkElement, NaN);
    FrameworkElement.WidthProperty = DependencyProperty.RegisterCore("Width", function () { return Number; }, FrameworkElement, NaN);
    FrameworkElement.ActualHeightProperty = DependencyProperty.RegisterReadOnlyCore("ActualHeight", function () { return Number; }, FrameworkElement);
    FrameworkElement.ActualWidthProperty = DependencyProperty.RegisterReadOnlyCore("ActualWidth", function () { return Number; }, FrameworkElement);
    FrameworkElement.DataContextProperty = DependencyProperty.RegisterCore("DataContext", function () { return Object; }, FrameworkElement);
    FrameworkElement.HorizontalAlignmentProperty = DependencyProperty.RegisterCore("HorizontalAlignment", function () { return new Enum(Fayde.HorizontalAlignment); }, FrameworkElement, Fayde.HorizontalAlignment.Stretch);
    FrameworkElement.LanguageProperty = DependencyProperty.RegisterCore("Language", function () { return String; }, FrameworkElement);
    FrameworkElement.MarginProperty = DependencyProperty.RegisterCore("Margin", function () { return Thickness; }, FrameworkElement, new Thickness());
    FrameworkElement.MaxHeightProperty = DependencyProperty.RegisterCore("MaxHeight", function () { return Number; }, FrameworkElement, Number.POSITIVE_INFINITY);
    FrameworkElement.MaxWidthProperty = DependencyProperty.RegisterCore("MaxWidth", function () { return Number; }, FrameworkElement, Number.POSITIVE_INFINITY);
    FrameworkElement.MinHeightProperty = DependencyProperty.RegisterCore("MinHeight", function () { return Number; }, FrameworkElement, 0.0);
    FrameworkElement.MinWidthProperty = DependencyProperty.RegisterCore("MinWidth", function () { return Number; }, FrameworkElement, 0.0);
    FrameworkElement.VerticalAlignmentProperty = DependencyProperty.RegisterCore("VerticalAlignment", function () { return new Enum(Fayde.VerticalAlignment); }, FrameworkElement, Fayde.VerticalAlignment.Stretch);
    FrameworkElement.StyleProperty = DependencyProperty.RegisterCore("Style", function () { return Fayde.Style; }, FrameworkElement);
    FrameworkElement.FlowDirectionProperty = DependencyProperty.RegisterInheritable("FlowDirection", function () { return new Enum(Fayde.FlowDirection); }, FrameworkElement, Fayde.FlowDirection.LeftToRight, undefined, undefined, _Inheritable.FlowDirection);
    Nullstone.AutoProperties(FrameworkElement, [
        FrameworkElement.CursorProperty,
        FrameworkElement.WidthProperty,
        FrameworkElement.HeightProperty,
        FrameworkElement.DataContextProperty,
        FrameworkElement.HorizontalAlignmentProperty,
        FrameworkElement.LanguageProperty,
        FrameworkElement.MarginProperty,
        FrameworkElement.MaxWidthProperty,
        FrameworkElement.MaxHeightProperty,
        FrameworkElement.MinWidthProperty,
        FrameworkElement.MinHeightProperty,
        FrameworkElement.VerticalAlignmentProperty,
        FrameworkElement.StyleProperty,
        FrameworkElement.FlowDirectionProperty
    ]);
    Nullstone.AutoPropertiesReadOnly(FrameworkElement, [
        FrameworkElement.ActualWidthProperty,
        FrameworkElement.ActualHeightProperty
    ]);
    Nullstone.Property(FrameworkElement, "Parent", {
        get: function () {
            return this._LogicalParent;
        }
    });
    FrameworkElement.Instance.SetTemplateBinding = function (propd, tb) {
        try {
            this.$SetValue(propd, tb);
        } catch (err) {
        }
    };
    FrameworkElement.Instance.SetBinding = function (propd, binding) {
        return Fayde.BindingOperations.SetBinding(this, propd, binding);
    };
    FrameworkElement.Instance.GetBindingExpression = function (propd) {
        var data = {};
        if (this._Expressions && this._Expressions.TryGetValue(propd, data))
            return data.Value;
        return null;
    };
    FrameworkElement.Instance._GetTransformOrigin = function () {
        var userXformOrigin = this.RenderTransformOrigin;
        var width = this.ActualWidth;
        var height = this.ActualHeight;
        return new Point(width * userXformOrigin.X, height * userXformOrigin.Y);
    };
    FrameworkElement.Instance._GetSizeForBrush = function () {
        return {
            Width: this.ActualWidth,
            Height: this.ActualHeight
        };
    };
    FrameworkElement.Instance._PurgeSizeCache = function () {
        delete this._CachedValues[FrameworkElement.ActualWidthProperty];
        delete this._CachedValues[FrameworkElement.ActualHeightProperty];
    };
    FrameworkElement.Instance._ComputeActualSize = function () {
        if (this.Visibility !== Fayde.Visibility.Visible)
            return new Size(0.0, 0.0);
        var parent = this.GetVisualParent();
        if ((parent && !(parent instanceof Fayde.Controls.Canvas)) || this.IsLayoutContainer())
            return this._RenderSize;
        var actual = new Size(0, 0);
        actual = this._ApplySizeConstraints(actual);
        return actual;
    };
    FrameworkElement.Instance._ApplySizeConstraints = function (size) {
        var specified = new Size(this.Width, this.Height);
        var constrained = new Size(this.MinWidth, this.MinHeight);
        constrained = constrained.Max(size);
        if (!isNaN(specified.Width))
            constrained.Width = specified.Width;
        if (!isNaN(specified.Height))
            constrained.Height = specified.Height;
        constrained = constrained.Min(new Size(this.MaxWidth, this.MaxHeight));
        constrained = constrained.Max(new Size(this.MinWidth, this.MinHeight));
        if (this.UseLayoutRounding) {
            constrained.Width = Math.round(constrained.Width);
            constrained.Height = Math.round(constrained.Height);
        }
        return constrained;
    };
    FrameworkElement.Instance._GetSubtreeExtents = function () {
        if (this._SubtreeObject)
            return this._ExtentsWithChildren;
        return this._Extents;
    };
    FrameworkElement.Instance._ComputeBounds = function () {
        var size = new Size(this.ActualWidth, this.ActualHeight);
        size = this._ApplySizeConstraints(size);
        this._Extents = new Rect(0, 0, size.Width, size.Height);
        this._ExtentsWithChildren = this._Extents;
        var walker = new Fayde._VisualTreeWalker(this);
        var item;
        while (item = walker.Step()) {
            if (item._GetRenderVisible())
                this._ExtentsWithChildren = this._ExtentsWithChildren.Union(item._GetGlobalBounds());
        }
        this._Bounds = this._IntersectBoundsWithClipPath(this._Extents.GrowByThickness(this._EffectPadding), false).Transform(this._AbsoluteXform);
        this._BoundsWithChildren = this._ExtentsWithChildren.GrowByThickness(this._EffectPadding).Transform(this._AbsoluteXform);
        this._ComputeGlobalBounds();
        this._ComputeSurfaceBounds();
    };
    FrameworkElement.Instance._ComputeGlobalBounds = function () {
        this._ComputeGlobalBounds$UIElement();
        this._GlobalBoundsWithChildren = this._ExtentsWithChildren.GrowByThickness(this._EffectPadding).Transform4(this._LocalProjection);
    };
    FrameworkElement.Instance._GetGlobalBounds = function () {
        if (this._SubtreeObject)
            return this._GlobalBoundsWithChildren;
        return this._GlobalBounds;
    };
    FrameworkElement.Instance._ComputeSurfaceBounds = function () {
        this._ComputeSurfaceBounds$UIElement();
        this._SurfaceBoundsWithChildren = this._ExtentsWithChildren.GrowByThickness(this._EffectPadding).Transform4(this._AbsoluteProjection);
    };
    FrameworkElement.Instance._GetSubtreeBounds = function () {
        if (this._SubtreeObject)
            return this._SurfaceBoundsWithChildren;
        return this._SurfaceBounds;
    };
    FrameworkElement.Instance.Measure = function (availableSize) {
        var error = new BError();
        this._MeasureWithError(availableSize, error);
        if (error.IsErrored())
            throw error.CreateException();
    };
    FrameworkElement.Instance._MeasureWithError = function (availableSize, error) {
        if (error.IsErrored())
            return;
        if (isNaN(availableSize.Width) || isNaN(availableSize.Height)) {
            error.SetErrored("Cannot call Measure using a size with NaN values");
            Fayde.LayoutInformation.SetLayoutExceptionElement(this);
            return;
        }
        var last = Fayde.LayoutInformation.GetPreviousConstraint(this);
        var shouldMeasure = (this._DirtyFlags & _Dirty.Measure) > 0;
        shouldMeasure = shouldMeasure || (!last || last.Width !== availableSize.Width || last.Height !== availableSize.Height);
        if (this.Visibility !== Fayde.Visibility.Visible) {
            Fayde.LayoutInformation.SetPreviousConstraint(this, availableSize);
            this._DesiredSize = new Size(0, 0);
            return;
        }
        this._ApplyTemplateWithError(error);
        var parent = this.GetVisualParent();
        if (!shouldMeasure)
            return;
        Fayde.LayoutInformation.SetPreviousConstraint(this, availableSize);
        this._InvalidateArrange();
        this._UpdateBounds();
        var margin = this.Margin;
        var size = availableSize.ShrinkByThickness(margin);
        size = this._ApplySizeConstraints(size);
        if (this.MeasureOverride)
            size = this.MeasureOverride(size);
        else
            size = this._MeasureOverrideWithError(size, error);
        if (error.IsErrored())
            return;
        this._DirtyFlags &= ~_Dirty.Measure;
        this._HiddenDesire = size;
        if (!parent || parent instanceof Fayde.Controls.Canvas) {
            if (this instanceof Fayde.Controls.Canvas || !this.IsLayoutContainer()) {
                this._DesiredSize = new Size(0, 0);
                return;
            }
        }
        size = this._ApplySizeConstraints(size);
        size = size.GrowByThickness(margin);
        size = size.Min(availableSize);
        if (this.UseLayoutRounding) {
            size.Width = Math.round(size.Width);
            size.Height = Math.round(size.Height);
        }
        this._DesiredSize = size;
    };
    FrameworkElement.Instance._MeasureOverrideWithError = function (availableSize, error) {
        var desired = new Size(0, 0);
        availableSize = availableSize.Max(desired);
        var walker = new Fayde._VisualTreeWalker(this);
        var child;
        while (child = walker.Step()) {
            child._MeasureWithError(availableSize, error);
            desired = child._DesiredSize;
        }
        return desired.Min(availableSize);
    };
    FrameworkElement.Instance.Arrange = function (finalRect) {
        var error = new BError();
        this._ArrangeWithError(finalRect, error);
        if (error.IsErrored())
            throw error.CreateException();
    };
    FrameworkElement.Instance._ArrangeWithError = function (finalRect, error) {
        if (error.IsErrored())
            return;
        var slot = this._ReadLocalValue(Fayde.LayoutInformation.LayoutSlotProperty);
        if (slot === null)
            slot = undefined;
        var shouldArrange = (this._DirtyFlags & _Dirty.Arrange) > 0;
        if (this.UseLayoutRounding) {
            finalRect = new Rect(Math.round(finalRect.X), Math.round(finalRect.Y), Math.round(finalRect.Width), Math.round(finalRect.Height));
        }
        shouldArrange |= slot ? !Rect.Equals(slot, finalRect) : true;
        if (finalRect.Width < 0 || finalRect.Height < 0
                || !isFinite(finalRect.Width) || !isFinite(finalRect.Height)
                || isNaN(finalRect.Width) || isNaN(finalRect.Height)) {
            var desired = this._DesiredSize;
            Warn("Invalid arguments to Arrange. Desired = " + desired.toString());
            return;
        }
        var parent = this.GetVisualParent();
        if (this.Visibility !== Fayde.Visibility.Visible) {
            Fayde.LayoutInformation.SetLayoutSlot(this, finalRect);
            return;
        }
        if (!shouldArrange)
            return;
        var measure = Fayde.LayoutInformation.GetPreviousConstraint(this);
        if (this.IsContainer() && !measure)
            this._MeasureWithError(new Size(finalRect.Width, finalRect.Height), error);
        measure = Fayde.LayoutInformation.GetPreviousConstraint(this);
        this._ClearValue(Fayde.LayoutInformation.LayoutClipProperty);
        var margin = this.Margin;
        var childRect = finalRect.ShrinkByThickness(margin);
        this._UpdateTransform();
        this._UpdateProjection();
        this._UpdateBounds();
        var offer = this._HiddenDesire;
        var stretched = this._ApplySizeConstraints(new Size(childRect.Width, childRect.Height));
        var framework = this._ApplySizeConstraints(new Size());
        var horiz = this.HorizontalAlignment;
        var vert = this.VerticalAlignment;
        if (horiz === Fayde.HorizontalAlignment.Stretch)
            framework.Width = Math.max(framework.Width, stretched.Width);
        if (vert === Fayde.VerticalAlignment.Stretch)
            framework.Height = Math.max(framework.Height, stretched.Height);
        offer = offer.Max(framework);
        Fayde.LayoutInformation.SetLayoutSlot(this, finalRect);
        var response;
        if (this.ArrangeOverride)
            response = this.ArrangeOverride(offer);
        else
            response = this._ArrangeOverrideWithError(offer, error);
        if (horiz === Fayde.HorizontalAlignment.Stretch)
            response.Width = Math.max(response.Width, framework.Width);
        if (vert === Fayde.VerticalAlignment.Stretch)
            response.Height = Math.max(response.Height, framework.Height);
        var flipHoriz = false;
        if (parent)
            flipHoriz = parent.FlowDirection !== this.FlowDirection;
        else if (this._Parent instanceof Fayde.Controls.Primitives.Popup)
            flipHoriz = this._Parent.FlowDirection !== this.FlowDirection;
        else
            flipHoriz = this.FlowDirection === Fayde.FlowDirection.RightToLeft;
        var layoutXform = mat3.identity();
        mat3.translate(layoutXform, childRect.X, childRect.Y);
        if (flipHoriz) {
            mat3.translate(layoutXform, offer.Width, 0);
            mat3.scale(layoutXform, -1, 1);
        }
        this._LayoutXform = layoutXform;
        if (error.IsErrored())
            return;
        this._DirtyFlags &= ~_Dirty.Arrange;
        var visualOffset = new Point(childRect.X, childRect.Y);
        Fayde.LayoutInformation.SetVisualOffset(this, visualOffset);
        var oldSize = this._RenderSize;
        if (this.UseLayoutRounding) {
            response.Width = Math.round(response.Width);
            response.Height = Math.round(response.Height);
        }
        this._RenderSize = response;
        var constrainedResponse = response.Min(this._ApplySizeConstraints(response));
        if (!parent || parent instanceof Fayde.Controls.Canvas) {
            if (!this.IsLayoutContainer()) {
                this._RenderSize = new Size(0, 0);
                return;
            }
        }
        var surface = App.Instance.MainSurface;
        var isTopLevel = this._IsAttached && surface._IsTopLevel(this);
        if (!isTopLevel) {
            switch (horiz) {
                case Fayde.HorizontalAlignment.Left:
                    break;
                case Fayde.HorizontalAlignment.Right:
                    visualOffset.X += childRect.Width - constrainedResponse.Width;
                    break;
                case Fayde.HorizontalAlignment.Center:
                    visualOffset.X += (childRect.Width - constrainedResponse.Width) * 0.5;
                    break;
                default:
                    visualOffset.X += Math.max((childRect.Width - constrainedResponse.Width) * 0.5, 0);
                    break;
            }
            switch (vert) {
                case Fayde.VerticalAlignment.Top:
                    break;
                case Fayde.VerticalAlignment.Bottom:
                    visualOffset.Y += childRect.Height - constrainedResponse.Height;
                    break;
                case Fayde.VerticalAlignment.Center:
                    visualOffset.Y += (childRect.Height - constrainedResponse.Height) * 0.5;
                    break;
                default:
                    visualOffset.Y += Math.max((childRect.Height - constrainedResponse.Height) * 0.5, 0);
                    break;
            }
        }
        if (this.UseLayoutRounding) {
            visualOffset.X = Math.round(visualOffset.X);
            visualOffset.Y = Math.round(visualOffset.Y);
        }
        layoutXform = mat3.identity();
        mat3.translate(layoutXform, visualOffset.X, visualOffset.Y);
        if (flipHoriz) {
            mat3.translate(layoutXform, response.Width, 0);
            mat3.scale(layoutXform, -1, 1);
        }
        this._LayoutXform = layoutXform;
        Fayde.LayoutInformation.SetVisualOffset(this, visualOffset);
        var element = new Rect(0, 0, response.Width, response.Height);
        var layoutClip = childRect;
        layoutClip.X = Math.max(childRect.X - visualOffset.X, 0);
        layoutClip.Y = Math.max(childRect.Y - visualOffset.Y, 0);
        if (this.UseLayoutRounding) {
            layoutClip.X = Math.round(layoutClip.X);
            layoutClip.Y = Math.round(layoutClip.Y);
        }
        if (((!isTopLevel && !Rect.Equals(element, element.Intersection(layoutClip))) || !Rect.Equals(constrainedResponse, response)) && !(this instanceof Fayde.Controls.Canvas) && ((parent && !(parent instanceof Fayde.Controls.Canvas)) || this.IsContainer())) {
            var frameworkClip = this._ApplySizeConstraints(new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
            layoutClip = layoutClip.Intersection(new Rect(0, 0, frameworkClip.Width, frameworkClip.Height));
            var rectangle = new Fayde.Media.RectangleGeometry();
            rectangle.Rect = layoutClip;
            Fayde.LayoutInformation.SetLayoutClip(this, rectangle);
        }
        if (!Rect.Equals(oldSize, response)) {
            if (!Fayde.LayoutInformation.GetLastRenderSize(this)) {
                Fayde.LayoutInformation.SetLastRenderSize(this, oldSize);
                this._PropagateFlagUp(UIElementFlags.DirtySizeHint);
            }
        }
    };
    FrameworkElement.Instance._ArrangeOverrideWithError = function (finalSize, error) {
        var arranged = finalSize;
        var walker = new Fayde._VisualTreeWalker(this);
        var child;
        while (child = walker.Step()) {
            var childRect = new Rect(0, 0, finalSize.Width, finalSize.Height);
            child._ArrangeWithError(childRect, error);
            arranged = arranged.Max(finalSize);
        }
        return arranged;
    };
    FrameworkElement.Instance._HitTestPoint = function (ctx, p, uielist) {
        if (!this._GetRenderVisible())
            return;
        if (!this._GetIsHitTestVisible())
            return;
        if (!this._InsideClip(ctx, p.X, p.Y))
            return;
        var node = uielist.Prepend(new Fayde.UIElementNode(this));
        var hit = false;
        var walker = Fayde._VisualTreeWalker.ZReverse(this);
        var child;
        while (child = walker.Step()) {
            child._HitTestPoint(ctx, p, uielist);
            if (!Nullstone.RefEquals(node, uielist.Head)) {
                hit = true;
                break;
            }
        }
        if (!hit && !(this._CanFindElement() && this._InsideObject(ctx, p.X, p.Y)))
            uielist.Remove(node);
    };
    FrameworkElement.Instance._InsideObject = function (ctx, x, y) {
        var np = new Point(x, y);
        this._TransformPoint(np);
        if (np.X < 0 || np.Y < 0 || np.X > this.ActualWidth || np.Y > this.ActualHeight)
            return false;
        if (!this._InsideLayoutClip(x, y))
            return false;
        return this._InsideObject$UIElement(ctx, x, y);
    };
    FrameworkElement.Instance._InsideLayoutClip = function (x, y) {
        return true;
    };
    FrameworkElement.Instance._HasLayoutClip = function () {
        var element = this;
        while (element) {
            if (Fayde.LayoutInformation.GetLayoutClip(element))
                return true;
            if (element instanceof Fayde.Controls.Canvas || element instanceof Fayde.Controls.UserControl)
                break;
            element = element.GetVisualParent();
        }
        return false;
    };
    FrameworkElement.Instance._RenderLayoutClip = function (ctx) {
        var element = this;
        var iX = 0;
        var iY = 0;
        while (element) {
            var geom = Fayde.LayoutInformation.GetLayoutClip(element);
            if (geom)
                ctx.Clip(geom);
            if (element instanceof Fayde.Controls.Canvas || element instanceof Fayde.Controls.UserControl)
                break;
            var visualOffset = Fayde.LayoutInformation.GetVisualOffset(element);
            if (visualOffset) {
                ctx.Translate(-visualOffset.X, -visualOffset.Y);
                iX += visualOffset.X;
                iY += visualOffset.Y;
            }
            element = element.GetVisualParent();
        }
        ctx.Translate(iX, iY);
    };
    FrameworkElement.Instance._ElementRemoved = function (value) {
        this._ElementRemoved$UIElement(value);
        if (Nullstone.RefEquals(this._SubtreeObject, value))
            this._SubtreeObject = null;
    };
    FrameworkElement.Instance.UpdateLayout = function () {
        var error = new BError();
        if (this._IsAttached) {
            App.Instance.MainSurface._UpdateLayout(error);
        } else {
            var pass = new Fayde.LayoutPass();
            this._UpdateLayer(pass, error);
            if (pass.Updated)
                App.Instance.MainSurface.LayoutUpdated.Raise(this, new EventArgs());
        }
        if (error.IsErrored())
            throw error.CreateException();
    };
    FrameworkElement.Instance._UpdateLayer = function (pass, error) {
        var element = this;
        var parent;
        while (parent = element.GetVisualParent())
            element = parent;
        var uie;
        while (pass.Count < Fayde.LayoutPass.MaxCount) {
            while (uie = pass.ArrangeList.shift()) {
                uie._PropagateFlagUp(UIElementFlags.DirtyArrangeHint);
                LayoutDebug("PropagateFlagUp DirtyArrangeHint");
            }
            while (uie = pass.SizeList.shift()) {
                uie._PropagateFlagUp(UIElementFlags.DirtySizeHint);
                LayoutDebug("PropagateFlagUp DirtySizeHint");
            }
            pass.Count = pass.Count + 1;
            var flag = UIElementFlags.None;
            if (element.Visibility === Fayde.Visibility.Visible) {
                if (element._HasFlag(UIElementFlags.DirtyMeasureHint))
                    flag = UIElementFlags.DirtyMeasureHint;
                else if (element._HasFlag(UIElementFlags.DirtyArrangeHint))
                    flag = UIElementFlags.DirtyArrangeHint;
                else if (element._HasFlag(UIElementFlags.DirtySizeHint))
                    flag = UIElementFlags.DirtySizeHint;
            }
            if (flag !== UIElementFlags.None) {
                var measureWalker = new Fayde._DeepTreeWalker(element);
                var child;
                while (child = measureWalker.Step()) {
                    if (child.Visibility !== Fayde.Visibility.Visible || !child._HasFlag(flag)) {
                        measureWalker.SkipBranch();
                        continue;
                    }
                    child._ClearFlag(flag);
                    switch (flag) {
                        case UIElementFlags.DirtyMeasureHint:
                            if (child._DirtyFlags & _Dirty.Measure)
                                pass.MeasureList.push(child);
                            break;
                        case UIElementFlags.DirtyArrangeHint:
                            if (child._DirtyFlags & _Dirty.Arrange)
                                pass.ArrangeList.push(child);
                            break;
                        case UIElementFlags.DirtySizeHint:
                            if (child._ReadLocalValue(Fayde.LayoutInformation.LastRenderSizeProperty) !== undefined)
                                pass.SizeList.push(child);
                            break;
                        default:
                            break;
                    }
                }
            }
            if (flag === UIElementFlags.DirtyMeasureHint) {
                LayoutDebug("Starting _MeasureList Update: " + pass.MeasureList.length);
                while (uie = pass.MeasureList.shift()) {
                    LayoutDebug("Measure [" + uie.__DebugToString() + "]");
                    uie._DoMeasureWithError(error);
                    pass.Updated = true;
                }
            } else if (flag === UIElementFlags.DirtyArrangeHint) {
                LayoutDebug("Starting _ArrangeList Update: " + pass.ArrangeList.length);
                while (uie = pass.ArrangeList.shift()) {
                    LayoutDebug("Arrange [" + uie.__DebugToString() + "]");
                    uie._DoArrangeWithError(error);
                    pass.Updated = true;
                    if (element._HasFlag(UIElementFlags.DirtyMeasureHint))
                        break;
                }
            } else if (flag === UIElementFlags.DirtySizeHint) {
                while (uie = pass.SizeList.shift()) {
                    pass.Updated = true;
                    var last = Fayde.LayoutInformation.GetLastRenderSize(uie);
                    if (last) {
                        uie._ClearValue(Fayde.LayoutInformation.LastRenderSizeProperty, false);
                        uie._PurgeSizeCache();
                        uie.SizeChanged.Raise(uie, new Fayde.SizeChangedEventArgs(last, uie._RenderSize));
                    }
                }
                LayoutDebug("Completed _SizeList Update");
            } else {
                break;
            }
        }
    };
    FrameworkElement.Instance._SetImplicitStyles = function (styleMask, styles) {
        var app = App.Instance;
        if (!app)
            return;
        if (!styles)
            styles = app._GetImplicitStyles(this, styleMask);
        var error = new BError();
        if (styles) {
            for (var i = 0; i < _StyleIndex.Count; i++) {
                var style = styles[i];
                if (!style)
                    continue;
                if (!Fayde.Validators.StyleValidator(this, FrameworkElement.StyleProperty, style, error)) {
                    Warn("Style validation failed. [" + error.Message + "]");
                    return;
                }
            }
        }
        this._Providers[_PropertyPrecedence.ImplicitStyle].SetStyles(styleMask, styles, error);
    };
    FrameworkElement.Instance._ClearImplicitStyles = function (styleMask) {
        var error = new BError();
        this._Providers[_PropertyPrecedence.ImplicitStyle].ClearStyles(styleMask, error);
    };
    FrameworkElement.Instance.OnApplyTemplate = function () { };
    FrameworkElement.Instance.ApplyTemplate = function () {
        var error = new BError();
        this._ApplyTemplateWithError(error);
        if (error.IsErrored())
            throw error.CreateException();
    };
    FrameworkElement.Instance._ApplyTemplateWithError = function (error) {
        if (this._SubtreeObject)
            return false;
        var result = this._DoApplyTemplateWithError(error);
        if (result)
            this.OnApplyTemplate();
        return result;
    };
    FrameworkElement.Instance._DoApplyTemplateWithError = function (error) {
        var uie = this._GetDefaultTemplate();
        if (uie) {
            uie._AddParent(this, true, error);
            if (error.IsErrored())
                return false;
            this._SubtreeObject = uie;
            this._ElementAdded(uie);
        }
        return uie != null;
    };
    FrameworkElement.Instance._GetDefaultTemplate = function () {
        if (this._GetDefaultTemplateCallback)
            return this._GetDefaultTemplateCallback();
        return null;
    };
    FrameworkElement.Instance.InvokeLoaded = function () {
    };
    FrameworkElement.Instance._OnIsLoadedChanged = function (loaded) {
        if (loaded)
            this._SetImplicitStyles(_StyleMask.All);
        else
            this._ClearImplicitStyles(_StyleMask.VisualTree);
        this._OnIsLoadedChanged$UIElement(loaded);
        if (loaded)
            this.InvokeLoaded();
        if (this._Providers[_PropertyPrecedence.InheritedDataContext])
            this._Providers[_PropertyPrecedence.InheritedDataContext].EmitChanged();
    };
    FrameworkElement.Instance.SetVisualParent = function (value) {
        this.SetVisualParent$UIElement(value);
        if (!this._LogicalParent && (!this._VisualParent || this._VisualParent instanceof FrameworkElement)) {
            this._Providers[_PropertyPrecedence.InheritedDataContext].SetDataSource(this._VisualParent);
            if (this._IsLoaded)
                this._Providers[_PropertyPrecedence.InheritedDataContext].EmitChanged();
        }
    };
    FrameworkElement.Instance._SetLogicalParent = function (value, error) {
        if (Nullstone.RefEquals(this._LogicalParent, value))
            return;
        if (false/* TODO: IsShuttingDown */) {
            this._LogicalParent = null;
            return;
        }
        if (value && this._LogicalParent && !Nullstone.RefEquals(this._LogicalParent, value)) {
            error.SetErrored(BError.InvalidOperation, "Element is a child of another element");
            return;
        }
        var oldParent = this._LogicalParent;
        this._LogicalParent = value;
        this._OnLogicalParentChanged(oldParent, value);
    };
    FrameworkElement.Instance._GetLogicalParent = function () {
        return this._LogicalParent;
    };
    FrameworkElement.Instance._OnLogicalParentChanged = function (oldParent, newParent) {
        if (false/* TODO: this._IsDisposing() */) {
        } else {
            var visualParent;
            if (newParent && newParent instanceof FrameworkElement)
                this._Providers[_PropertyPrecedence.InheritedDataContext].SetDataSource(newParent);
            else if ((visualParent = this.GetVisualParent()) && visualParent instanceof FrameworkElement)
                this._Providers[_PropertyPrecedence.InheritedDataContext].SetDataSource(visualParent);
            else
                this._Providers[_PropertyPrecedence.InheritedDataContext].SetDataSource(null);
            if (this._IsLoaded)
                this._Providers[_PropertyPrecedence.InheritedDataContext].EmitChanged();
        }
    };
    FrameworkElement.Instance._HasFocus = function () {
        for (var doh = Nullstone.As(Fayde.FocusManager.GetFocusedElement(), Fayde.DependencyObject) ; doh != null; doh = Fayde.VisualTreeHelper.GetParent(doh)) {
            if (Nullstone.RefEquals(doh, this))
                return true;
        }
        return false;
    };
    if (!Fayde.IsCanvasEnabled) {
        FrameworkElement.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== FrameworkElement) {
                this._OnPropertyChanged$UIElement(args, error);
                return;
            }
            var ivprop = false;
            switch (args.Property._ID) {
                case FrameworkElement.WidthProperty._ID:
                case FrameworkElement.MaxWidthProperty._ID:
                case FrameworkElement.MinWidthProperty._ID:
                case FrameworkElement.HeightProperty._ID:
                case FrameworkElement.MaxHeightProperty._ID:
                case FrameworkElement.MinHeightProperty._ID:
                case FrameworkElement.MarginProperty._ID:
                case FrameworkElement.FlowDirectionProperty._ID:
                    this._PurgeSizeCache();
                    ivprop = true;
                    break;
                case FrameworkElement.CursorProperty._ID:
                case FrameworkElement.HorizontalAlignmentProperty._ID:
                case FrameworkElement.VerticalAlignmentProperty._ID:
                    ivprop = true;
                    break;
                case FrameworkElement.StyleProperty._ID:
                    var newStyle = args.NewValue;
                    if (!error.IsErrored())
                        this._Providers[_PropertyPrecedence.LocalStyle]._UpdateStyle(newStyle, error);
                    if (error.IsErrored())
                        return;
                    break;
            }
            if (args.Property._ID === FrameworkElement.HorizontalAlignmentProperty._ID
                || args.Property._ID === FrameworkElement.WidthProperty._ID) {
                this.IsFixedWidth = this.CalculateIsFixedWidth();
            }
            if (args.Property._ID === FrameworkElement.VerticalAlignmentProperty._ID ||
                args.Property._ID === FrameworkElement.HeightProperty._ID) {
                this.IsFixedHeight = this.CalculateIsFixedHeight();
            }
            if (ivprop)
                this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            this.PropertyChanged.Raise(this, args);
        };
    }
    if (Fayde.IsCanvasEnabled) {
        FrameworkElement.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== FrameworkElement) {
                this._OnPropertyChanged$UIElement(args, error);
                return;
            }
            switch (args.Property._ID) {
                case FrameworkElement.WidthProperty._ID:
                case FrameworkElement.MaxWidthProperty._ID:
                case FrameworkElement.MinWidthProperty._ID:
                case FrameworkElement.HeightProperty._ID:
                case FrameworkElement.MaxHeightProperty._ID:
                case FrameworkElement.MinHeightProperty._ID:
                case FrameworkElement.MarginProperty._ID:
                case FrameworkElement.FlowDirectionProperty._ID:
                    this._PurgeSizeCache();
                    this._FullInvalidate(false);
                    var visualParent = this.GetVisualParent();
                    if (visualParent)
                        visualParent._InvalidateMeasure();
                    this._InvalidateMeasure();
                    this._InvalidateArrange();
                    this._UpdateBounds();
                    break;
                case FrameworkElement.HorizontalAlignmentProperty._ID:
                case FrameworkElement.VerticalAlignmentProperty._ID:
                    this._InvalidateArrange();
                    this._FullInvalidate(true);
                    break;
                case FrameworkElement.StyleProperty._ID:
                    var newStyle = args.NewValue;
                    if (!error.IsErrored())
                        this._Providers[_PropertyPrecedence.LocalStyle]._UpdateStyle(newStyle, error);
                    if (error.IsErrored())
                        return;
                    break;
            }
            this.PropertyChanged.Raise(this, args);
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        FrameworkElement.Instance.GetContentHtmlElement = function () {
            return this.GetRootHtmlElement().firstChild;
        };
        FrameworkElement.Instance.CreateHtmlObjectImpl = function () {
            var rootEl = document.createElement("div");
            var contentEl = rootEl.appendChild(document.createElement("div"));
            contentEl.style.zoom = "1";
            if (navigator.appName === "Microsoft Internet Explorer") {
                contentEl.style.filter = "inherit";
                contentEl.style.opacity = "inherit";
            }
            this.InitializeHtml(rootEl);
            return rootEl;
        };
        FrameworkElement.Instance.InitializeHtml = function (rootEl) {
            if (this.ApplySizing(rootEl)) {
                Surface._SizingAdjustments[this._ID] = this;
            }
        };
        FrameworkElement.Instance.OnHtmlAttached = function () {
            this.ApplyTemplate();
            var subtree = this._SubtreeObject;
            if (subtree) {
                this.GetRootHtmlElement().firstChild.appendChild(subtree.GetRootHtmlElement());
                subtree.OnHtmlAttached();
            }
        };
        FrameworkElement.Instance.OnHtmlDetached = function () {
            var subtree = this._SubtreeObject;
            if (subtree) {
                subtree.OnHtmlDetached();
                this.GetRootHtmlElement().firstChild.removeChild(subtree.GetRootHtmlElement());
            }
        };
        FrameworkElement.Instance.ApplySizing = function (rootEl) {
            var isStretchPlusShrink = false;
            var subEl = rootEl.firstChild;
            rootEl.style.display = "table";
            subEl.style.display = "table-cell";
            rootEl.style.width = "";
            rootEl.style.left = "";
            rootEl.style.right = "";
            rootEl.style.height = "";
            rootEl.style.top = "";
            rootEl.style.bottom = "";
            subEl.style.maxWidth = "";
            subEl.style.maxHeight = "";
            subEl.style.width = "";
            subEl.style.height = "";
            subEl.style.left = "";
            subEl.style.right = "";
            subEl.style.top = "";
            subEl.style.bottom = "";
            var horizontalAlignment = FrameworkElement.RealHorizontalAlignment(this.Width, this.HorizontalAlignment);
            var verticalAlignment = FrameworkElement.RealVerticalAlignment(this.Height, this.VerticalAlignment);
            var horizontalLayoutType = HorizontalLayoutType.Shrink;
            if (horizontalAlignment === Fayde.HorizontalAlignment.Stretch && this.GetParentIsFixedWidth())
                horizontalLayoutType = HorizontalLayoutType.Stretch;
            var verticalLayoutType = VerticalLayoutType.Shrink;
            if (verticalAlignment === Fayde.VerticalAlignment.Stretch && this.GetParentIsFixedHeight())
                verticalLayoutType = VerticalLayoutType.Stretch;
            if (horizontalLayoutType == HorizontalLayoutType.Stretch || verticalLayoutType === VerticalLayoutType.Stretch) {
                rootEl.style.position = "absolute";
                subEl.style.position = "absolute";
                if (horizontalLayoutType === HorizontalLayoutType.Stretch) rootEl.style.width = "100%";
                if (verticalLayoutType === VerticalLayoutType.Stretch) rootEl.style.height = "100%";
                if (horizontalLayoutType === HorizontalLayoutType.Shrink || verticalLayoutType === VerticalLayoutType.Shrink) isStretchPlusShrink = true;
            }
            else {
                if (horizontalAlignment === Fayde.HorizontalAlignment.Left || horizontalAlignment === Fayde.HorizontalAlignment.Right || horizontalAlignment === Fayde.HorizontalAlignment.Center ||
                    verticalAlignment === Fayde.VerticalAlignment.Top || verticalAlignment === Fayde.VerticalAlignment.Bottom || verticalAlignment === Fayde.VerticalAlignment.Center) {
                    rootEl.style.position = "absolute";
                    subEl.style.position = "relative";
                    if (horizontalAlignment === Fayde.HorizontalAlignment.Left) rootEl.style.left = "0px";
                    if (horizontalAlignment === Fayde.HorizontalAlignment.Right) rootEl.style.right = "0px";
                    if (verticalAlignment === Fayde.VerticalAlignment.Top) rootEl.style.top = "0px";
                    if (verticalAlignment === Fayde.VerticalAlignment.Bottom) rootEl.style.bottom = "0px";
                }
                else {
                    rootEl.style.position = "relative";
                    subEl.style.position = "relative";
                }
            }
            if (horizontalLayoutType === HorizontalLayoutType.Stretch) {
                var left = (isNaN(this.Margin.Left) ? 0 : this.Margin.Left);
                subEl.style.left = left + "px";
                var right = (isNaN(this.Margin.Right) ? 0 : this.Margin.Right);
                subEl.style.right = right + "px";
            }
            else {
                rootEl.style.marginLeft = this.Margin.Left + "px";
                rootEl.style.marginRight = this.Margin.Right + "px";
            }
            if (verticalLayoutType === VerticalLayoutType.Stretch) {
                var top = (isNaN(this.Margin.Top) ? 0 : this.Margin.Top);
                subEl.style.top = top + "px";
                var bottom = (isNaN(this.Margin.Bottom) ? 0 : this.Margin.Bottom);
                subEl.style.bottom = bottom + "px";
            }
            else {
                rootEl.style.marginTop = this.Margin.Top + "px";
                rootEl.style.marginBottom = this.Margin.Bottom + "px";
            }
            if (!isNaN(this.Width)) {
                rootEl.style.width = this.Width + "px";
            }
            if (!isNaN(this.Height)) {
                rootEl.style.height = this.Height + "px";
            }
            subEl.style.maxHeight = this.MaxHeight + "px";
            subEl.style.maxWidth = this.MaxWidth + "px";
            return isStretchPlusShrink;
        };
        FrameworkElement.Instance.ApplyHtmlChanges = function (invalidations) {
            var sizingChecks = [Fayde.UIElement.IsFixedWidthProperty, Fayde.UIElement.IsFixedHeightProperty,
                FrameworkElement.HorizontalAlignmentProperty, FrameworkElement.VerticalAlignmentProperty,
                FrameworkElement.MarginProperty, FrameworkElement.WidthProperty, FrameworkElement.HeightProperty,
                FrameworkElement.MaxWidthProperty, FrameworkElement.MaxHeightProperty];
            for (var i = 0; i < sizingChecks.length; i++) {
                if (invalidations[sizingChecks[i]._ID]) {
                    if (this.ApplySizing(this.GetRootHtmlElement())) {
                        Surface._SizingAdjustments[this._ID] = this;
                    }
                    break;
                }
            }
            this.ApplyHtmlChanges$UIElement(invalidations);
        };
        FrameworkElement.Instance.CalculateAdjustedWidth = function (width) {
            var marginLeft = isNaN(this.Margin.Left) ? 0 : this.Margin.Left;
            var marginRight = isNaN(this.Margin.Right) ? 0 : this.Margin.Right;
            return width + marginLeft + marginRight;
        };
        FrameworkElement.Instance.CalculateAdjustedHeight = function (height) {
            var marginTop = isNaN(this.Margin.Top) ? 0 : this.Margin.Top;
            var marginBottom = isNaN(this.Margin.Bottom) ? 0 : this.Margin.Bottom;
            return height + marginTop + marginBottom;
        };
        FrameworkElement.Instance.UpdateAdjustedWidth = function (child, width) {
            delete Surface._SizingAdjustments[this._ID];
            if (!this.GetIsFixedWidth()) {
                this.GetContentHtmlElement().style.width = width + "px";
                var myWidth = this.CalculateAdjustedWidth(width);
                var parent = this.GetVisualParent();
                if (parent) parent.UpdateAdjustedWidth(this, myWidth);
            }
        };
        FrameworkElement.Instance.UpdateAdjustedHeight = function (child, height) {
            delete Surface._SizingAdjustments[this._ID];
            if (!this.GetIsFixedHeight()) {
                this.GetContentHtmlElement().style.height = height + "px";
                var myHeight = this.CalculateAdjustedHeight(height);
                var parent = this.GetVisualParent();
                if (parent) parent.UpdateAdjustedHeight(this, myHeight);
            }
        };
        FrameworkElement.Instance.FindAndSetAdjustedWidth = function () {
            var result;
            if (!this.GetIsFixedWidth()) {
                var subtree = this._SubtreeObject;
                var childWidth = 0;
                if (subtree && Nullstone.Is(subtree, FrameworkElement)) childWidth = subtree.FindAndSetAdjustedWidth();
                this.GetContentHtmlElement().style.width = childWidth + "px";
                result = this.CalculateAdjustedWidth(childWidth);
            }
            else result = this.CalculateAdjustedWidth(this.GetRootHtmlElement().offsetWidth);
            delete Surface._SizingAdjustments[this._ID];
            return result;
        };
        FrameworkElement.Instance.FindAndSetAdjustedHeight = function () {
            var result;
            if (!this.GetIsFixedHeight()) {
                var subtree = this._SubtreeObject;
                var childHeight = 0;
                if (subtree && Nullstone.Is(subtree, FrameworkElement)) childHeight = subtree.FindAndSetAdjustedHeight();
                this.GetContentHtmlElement().style.height = childHeight + "px";
                result = this.CalculateAdjustedHeight(childHeight);
            }
            else result = this.CalculateAdjustedHeight(this.GetRootHtmlElement().offsetHeight);
            delete Surface._SizingAdjustments[this._ID];
            return result;
        };
        FrameworkElement.RealHorizontalAlignment = function (width, horizontalAlignment) {
            if (!isNaN(width) && horizontalAlignment === Fayde.HorizontalAlignment.Stretch) {
                return Fayde.HorizontalAlignment.Left;
            }
            else {
                return horizontalAlignment;
            }
        };
        FrameworkElement.RealVerticalAlignment = function (height, verticalAlignment) {
            if (!isNaN(height) && verticalAlignment === Fayde.VerticalAlignment.Stretch) {
                return Fayde.VerticalAlignment.Top;
            }
            else {
                return verticalAlignment;
            }
        };
        FrameworkElement.Instance.CalculateIsFixedWidth = function () {
            if (!isNaN(this.Width)) {
                return true;
            }
            if (FrameworkElement.RealHorizontalAlignment(this.Width, this.HorizontalAlignment) === Fayde.HorizontalAlignment.Stretch
                && this.GetParentIsFixedWidth()) {
                return true;
            }
            return false;
        };
        FrameworkElement.Instance.CalculateIsFixedHeight = function () {
            if (!isNaN(this.Height)) {
                return true;
            }
            if (FrameworkElement.RealVerticalAlignment(this.Height, this.VerticalAlignment) === Fayde.VerticalAlignment.Stretch
                && this.GetParentIsFixedHeight()) {
                return true;
            }
            return false;
        };
    }
    Fayde.FrameworkElement = Nullstone.FinishCreate(FrameworkElement);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var Setter = Nullstone.Create("Setter", namespace.SetterBase);
    Setter.PropertyProperty = DependencyProperty.RegisterCore("Property", function () { return DependencyProperty; }, Setter);
    Setter.ValueProperty = DependencyProperty.RegisterCore("Value", function () { return Object; }, Setter);
    Setter.ConvertedValueProperty = DependencyProperty.RegisterCore("ConvertedValue", function () { return Object; }, Setter);
    namespace.Setter = Nullstone.FinishCreate(Setter);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var DependencyObjectCollection = Nullstone.Create("DependencyObjectCollection", Fayde.InternalCollection, 1);
    DependencyObjectCollection.Instance.Init = function (setsParent) {
        this.Init$InternalCollection();
        this._IsSecondaryParent = false;
        this._SetsParent = setsParent == null ? true : setsParent;
    };
    DependencyObjectCollection.Instance.IsElementType = function (value) {
        return value instanceof Fayde.DependencyObject;
    };
    DependencyObjectCollection.Instance._GetIsSecondaryParent = function () {
        return this._IsSecondaryParent;
    };
    DependencyObjectCollection.Instance._SetIsSecondaryParent = function (value) {
        this._IsSecondaryParent = value;
    };
    DependencyObjectCollection.Instance._OnMentorChanged = function (oldValue, newValue) {
        this._OnMentorChanged$InternalCollection(oldValue, newValue);
        for (var i = 0; i < this._ht.length; i++) {
            if (this._ht[i] instanceof Fayde.DependencyObject)
                this._ht[i].SetMentor(newValue);
        }
    };
    DependencyObjectCollection.Instance.AddedToCollection = function (value, error) {
        if (this._SetsParent) {
            var existingParent = value._Parent;
            value._AddParent(this, true, error);
            if (!error.IsErrored() && existingParent == null && this._GetIsSecondaryParent() != null)
                value._AddParent(this, true, error);
            if (error.IsErrored())
                return false;
        } else {
            value.SetMentor(this.GetMentor());
        }
        value.AddPropertyChangedListener(this);
        var rv = this.AddedToCollection$InternalCollection(value, error);
        value._SetIsAttached(rv && this._IsAttached);
        if (!rv) {
            if (this._SetsParent) {
                value._RemoveParent(this, error);
                value.SetMentor(this.GetMentor());
            } else {
                value.SetMentor(null);
            }
        }
        return rv;
    };
    DependencyObjectCollection.Instance.RemovedFromCollection = function (value, isValueSafe) {
        if (isValueSafe) {
            if (value instanceof Fayde.DependencyObject) {
                value.RemovePropertyChangedListener(this);
                if (this._GetIsSecondaryParent())
                    value._RemoveSecondaryParent(this);
                if (this._SetsParent && Nullstone.RefEquals(value._Parent, this))
                    value._RemoveParent(this, null);
                value._SetIsAttached(false);
            }
        }
    };
    DependencyObjectCollection.Instance._OnIsAttachedChanged = function (value) {
        this._OnIsAttachedChanged$InternalCollection(value);
        for (var i = 0; i < this.GetCount() ; i++) {
            var val = this.GetValueAt(i);
            if (val instanceof Fayde.DependencyObject)
                val._SetIsAttached(value);
        }
    };
    DependencyObjectCollection.Instance._OnSubPropertyChanged = function (propd, sender, args) {
        this._RaiseItemChanged(sender, args.Property, args.OldValue, args.NewValue);
    };
    namespace.DependencyObjectCollection = Nullstone.FinishCreate(DependencyObjectCollection);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var ResourceDictionaryCollection = Nullstone.Create("ResourceDictionaryCollection", Fayde.DependencyObjectCollection);
    ResourceDictionaryCollection.Instance.AddedToCollection = function (value, error) {
        if (!this.AddedToCollection$DependencyObjectCollection(value, error))
            return false;
        var parent = this._Parent;
        if (!parent)
            return true;
        return this._WalkSubtreeLookingForCycle(value, parent, error);
    };
    ResourceDictionaryCollection.Instance.IsElementType = function (value) {
        return value instanceof Fayde.ResourceDictionary;
    };
    ResourceDictionaryCollection.Instance._WalkSubtreeLookingForCycle = function (subtreeRoot, firstAncestor, error) {
        var source = subtreeRoot._GetInternalSource();
        var p = firstAncestor;
        while (p) {
            if (p instanceof Fayde.ResourceDictionary) {
                var cycleFound = false;
                var rdSource = p._GetInternalSource();
                if (p == subtreeRoot)
                    cycleFound = true;
                else if (source && rdSource && !source.localeCompare(rdSource))
                    cycleFound = true;
                if (cycleFound) {
                    error.SetErrored(BError.InvalidOperation, "Cycle found in resource dictionaries.");
                    return false;
                }
            }
            p = p._Parent;
        }
        var children = subtreeRoot.MergedDictionaries;
        var count = children.GetCount();
        for (var i = 0; i < count; i++) {
            if (!this._WalkSubtreeLookingForCycle(children.GetValueAt(i), firstAncestor, error))
                return false;
        }
        return true;
    };
    namespace.ResourceDictionaryCollection = Nullstone.FinishCreate(ResourceDictionaryCollection);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    function zIndexComparer(uie1, uie2) {
        var p = Fayde.Controls.Panel;
        var zi1 = p.GetZIndex(uie1);
        var zi2 = p.GetZIndex(uie2);
        if (zi1 === zi2) {
            var z1 = p.GetZ(uie1);
            var z2 = p.GetZ(uie2);
            if (isNaN(z1) || isNaN(z2))
                return 0;
            return z1 > z2 ? 1 : (z1 < z2 ? -1 : 0);
        }
        return zi1 - zi2;
    }
    var UIElementCollection = Nullstone.Create("UIElementCollection", Fayde.DependencyObjectCollection);
    UIElementCollection.Instance.Init = function () {
        this.Init$DependencyObjectCollection();
        this._ZSorted = [];
    };
    UIElementCollection.Instance.GetValueAtZIndex = function (index) {
        return this._ZSorted[index];
    };
    UIElementCollection.Instance.GetZSortedCount = function () {
        return this._ZSorted.length;
    };
    UIElementCollection.Instance.ResortByZIndex = function () {
        var count = this.GetCount();
        this._ZSorted = new Array(count);
        if (count < 1)
            return;
        for (var i = 0; i < count; i++) {
            this._ZSorted[i] = this._ht[i];
        }
        if (count > 1) {
            this._ZSorted.sort(zIndexComparer);
        }
    };
    UIElementCollection.Instance.IsElementType = function (value) {
        return value instanceof Fayde.UIElement;
    };
    Fayde.UIElementCollection = Nullstone.FinishCreate(UIElementCollection);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var TextElement = Nullstone.Create("TextElement", Fayde.DependencyObject);
    TextElement.Instance.Init = function () {
        this.Init$DependencyObject();
        this.AddProvider(new Fayde._InheritedPropertyValueProvider(this));
        this._Font = new Font();
        this._UpdateFont(true);
    };
    TextElement.ForegroundProperty = DependencyProperty.RegisterInheritable("Foreground", function () { return Fayde.Media.Brush; }, TextElement, undefined, undefined, { GetValue: function () { return new Fayde.Media.SolidColorBrush(new Color(0, 0, 0)); } }, _Inheritable.Foreground);
    TextElement.FontFamilyProperty = DependencyProperty.RegisterInheritable("FontFamily", function () { return String; }, TextElement, Font.DEFAULT_FAMILY, undefined, undefined, _Inheritable.FontFamily);
    TextElement.FontStretchProperty = DependencyProperty.RegisterInheritable("FontStretch", function () { return String; }, TextElement, Font.DEFAULT_STRETCH, undefined, undefined, _Inheritable.FontStretch);
    TextElement.FontStyleProperty = DependencyProperty.RegisterInheritable("FontStyle", function () { return String; }, TextElement, Font.DEFAULT_STYLE, undefined, undefined, _Inheritable.FontStyle);
    TextElement.FontWeightProperty = DependencyProperty.RegisterInheritable("FontWeight", function () { return new Enum(Fayde.FontWeight); }, TextElement, Font.DEFAULT_WEIGHT, undefined, undefined, _Inheritable.FontWeight);
    TextElement.FontSizeProperty = DependencyProperty.RegisterInheritable("FontSize", function () { return Number; }, TextElement, Font.DEFAULT_SIZE, undefined, undefined, _Inheritable.FontSize);
    TextElement.LanguageProperty = DependencyProperty.RegisterInheritable("Language", function () { return String; }, TextElement, undefined, undefined, undefined, _Inheritable.Language);
    TextElement.TextDecorationsProperty = DependencyProperty.RegisterInheritable("TextDecorations", function () { return new Enum(Fayde.TextDecorations); }, TextElement, Fayde.TextDecorations.None, undefined, undefined, _Inheritable.TextDecorations);
    Nullstone.AutoProperties(TextElement, [
        TextElement.ForegroundProperty,
        TextElement.FontFamilyProperty,
        TextElement.FontStretchProperty,
        TextElement.FontStyleProperty,
        TextElement.FontWeightProperty,
        TextElement.FontSizeProperty,
        TextElement.LanguageProperty,
        TextElement.TextDecorationsProperty
    ]);
    TextElement.Instance.GetBackground = function (selected) { return null; }
    TextElement.Instance.GetFont = function () { return this._Font; };
    TextElement.Instance.GetDirection = function () { return Fayde.FlowDirection.LeftToRight; };
    TextElement.Instance._SerializeText = function (str) { return str; };
    TextElement.Instance._UpdateFont = function (force) {
        this._Font.Family = this.FontFamily;
        this._Font.Stretch = this.FontStretch;
        this._Font.Style = this.FontStyle;
        this._Font.Weight = this.FontWeight;
        this._Font.Size = this.FontSize;
        return this._Font.IsChanged || force;
    };
    if (!Fayde.IsCanvasEnabled) {
        TextElement.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== TextElement) {
                this._OnPropertyChanged$DependencyObject(args, error);
                return;
            }
            var ivprop = false;
            if (args.Property._ID === TextElement.FontFamilyProperty._ID
                || args.Property._ID === TextElement.FontSizeProperty._ID
                || args.Property._ID === TextElement.FontStretchProperty._ID
                || args.Property._ID === TextElement.FontStyleProperty._ID
                || args.Property._ID === TextElement.FontWeightProperty._ID) {
                this._UpdateFont(false);
                ivprop = true;
            } else if (args.Property._ID === TextElement.ForegroundProperty._ID) {
                ivprop = true;
            }
            if (ivprop)
                this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            this.PropertyChanged.Raise(this, args);
        };
        TextElement.Instance._OnSubPropertyChanged = function (propd, sender, args) {
            if (propd && propd._ID === TextElement.ForegroundProperty._ID) {
                this.InvalidateProperty(propd);
            } else {
                this._OnSubPropertyChanged$DependencyObject(propd, sender, args);
            }
        };
    }
    if (Fayde.IsCanvasEnabled) {
        TextElement.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== TextElement) {
                this._OnPropertyChanged$DependencyObject(args, error);
                return;
            }
            if (args.Property._ID === TextElement.FontFamilyProperty._ID
                || args.Property._ID === TextElement.FontSizeProperty._ID
                || args.Property._ID === TextElement.FontStretchProperty._ID
                || args.Property._ID === TextElement.FontStyleProperty._ID
                || args.Property._ID === TextElement.FontWeightProperty._ID) {
                this._UpdateFont(false);
            }
            this.PropertyChanged.Raise(this, args);
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        TextElement.Instance.GetRootHtmlElement = function () {
            if (!this._HtmlEl)
                this.CreateHtmlObject();
            return this._HtmlEl;
        };
        TextElement.Instance.CreateHtmlObject = function () {
            this._HtmlEl = this.CreateHtmlObjectImpl();
        };
        TextElement.Instance.CreateHtmlObjectImpl = function () {
            var container = document.createElement("span");
            container.style.whiteSpace = "nowrap";
            return container;
        };
        TextElement.Instance.ApplyHtmlChange = function (change) {
            var propd = change.Property;
            var rootEl = this.GetRootHtmlElement();
            if (propd._ID === TextElement.FontFamilyProperty._ID) {
                rootEl.style.fontFamily = change.NewValue.toString();
            } else if (propd._ID === TextElement.FontSizeProperty._ID) {
                rootEl.style.fontSize = change.NewValue + "px";
            } else if (propd._ID === TextElement.FontStretchProperty._ID) {
                rootEl.style.fontStretch = change.NewValue;
            } else if (propd._ID === TextElement.FontStyleProperty._ID) {
                rootEl.style.fontStyle = change.NewValue;
            } else if (propd._ID === TextElement.FontWeightProperty._ID) {
                rootEl.style.fontWeight = change.NewValue.toString();
            } else if (propd._ID === TextElement.ForegroundProperty._ID) {
                var brush = change.NewValue;
                if (!brush)
                    brush = this.Foreground;
                this.ApplyForegroundHtml(rootEl, brush);
            }
        };
        TextElement.Instance.ApplyForegroundHtml = function (contentEl, foreground) {
            var ctx = document.createElement("canvas").getContext("2d");
            foreground.SetupBrush(ctx, null);
            contentEl.style.color = foreground.ToHtml5Object();
        };
    }
    namespace.TextElement = Nullstone.FinishCreate(TextElement);
})(Nullstone.Namespace("Fayde.Documents"));
(function (namespace) {
    var TextElementCollection = Nullstone.Create("TextElementCollection", Fayde.DependencyObjectCollection);
    TextElementCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.TextElement;
    };
    namespace.TextElementCollection = Nullstone.FinishCreate(TextElementCollection);
})(Nullstone.Namespace("Fayde.Documents"));

(function (namespace) {
    var ArcSegment = Nullstone.Create("ArcSegment", namespace.PathSegment);
    ArcSegment.IsLargeArcProperty = DependencyProperty.RegisterCore("IsLargeArc", function () { return Boolean; }, ArcSegment, false);
    ArcSegment.PointProperty = DependencyProperty.Register("Point", function () { return Point; }, ArcSegment, new Point());
    ArcSegment.RotationAngleProperty = DependencyProperty.Register("RotationAngle", function () { return Number; }, ArcSegment, 0.0);
    ArcSegment.SizeProperty = DependencyProperty.Register("Size", function () { return Size; }, ArcSegment, new Size());
    ArcSegment.SweepDirectionProperty = DependencyProperty.Register("SweepDirection", function () { return new Enum(Fayde.Shapes.SweepDirection); }, ArcSegment, Fayde.Shapes.SweepDirection.Counterclockwise);
    Nullstone.AutoProperties(ArcSegment, [
        ArcSegment.IsLargeArcProperty,
        ArcSegment.PointProperty,
        ArcSegment.RotationAngleProperty,
        ArcSegment.SizeProperty,
        ArcSegment.SweepDirectionProperty
    ]);
    ArcSegment.Instance._Append = function (path) {
        NotImplemented("ArcSegment._Append");
    };
    namespace.ArcSegment = Nullstone.FinishCreate(ArcSegment);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var GeometryCollection = Nullstone.Create("GeometryCollection", Fayde.DependencyObjectCollection);
    GeometryCollection.Instance.IsElementType = function (value) {
        return val instanceof namespace.Geometry;
    };
    namespace.GeometryCollection = Nullstone.FinishCreate(GeometryCollection);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var GradientStop = Nullstone.Create("GradientStop", Fayde.DependencyObject);
    GradientStop.ColorProperty = DependencyProperty.Register("Color", function () { return Color; }, GradientStop, new Color());
    GradientStop.OffsetProperty = DependencyProperty.Register("Offset", function () { return Number; }, GradientStop, 0.0);
    Nullstone.AutoProperties(GradientStop, [
        GradientStop.ColorProperty,
        GradientStop.OffsetProperty
    ]);
    GradientStop.Instance.toString = function () {
        return this.Color.toString() + " @ " + this.Offset.toString();
    };
    namespace.GradientStop = Nullstone.FinishCreate(GradientStop);
})(Nullstone.Namespace("Fayde.Media"));
(function (namespace) {
    var GradientStopCollection = Nullstone.Create("GradientStopCollection", Fayde.DependencyObjectCollection);
    GradientStopCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.GradientStop;
    };
    namespace.GradientStopCollection = Nullstone.FinishCreate(GradientStopCollection);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var Matrix3DProjection = Nullstone.Create("Matrix3DProjection", namespace.Projection);
    Matrix3DProjection.ProjectionMatrixProperty = DependencyProperty.Register("ProjectionMatrix", function () { return Matrix3D; }, Matrix3DProjection);
    Nullstone.AutoProperties(Matrix3DProjection, [
        Matrix3DProjection.ProjectionMatrixProperty
    ]);
    namespace.Matrix3DProjection = Nullstone.FinishCreate(Matrix3DProjection);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var MatrixTransform = Nullstone.Create("MatrixTransform", namespace.Transform);
    MatrixTransform.MatrixProperty = DependencyProperty.RegisterFull("Matrix", function () { return Matrix; }, MatrixTransform, undefined, undefined, { GetValue: function () { return new Matrix(); } });
    Nullstone.AutoProperty(MatrixTransform, MatrixTransform.MatrixProperty);
    MatrixTransform.Instance._BuildValue = function () {
        return this.Matrix.raw;
    };
    MatrixTransform.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== MatrixTransform) {
            this._OnPropertyChanged$Transform(args, error);
            return;
        }
        if (args.Property._ID === MatrixTransform.MatrixProperty._ID) {
            if (args.OldValue != null)
                args.OldValue._ChangedCallback = null;
            if (args.NewValue != null) {
                var mt = this;
                args.NewValue._ChangedCallback = function () { mt._OnSubPropertyChanged(MatrixTransform.MatrixProperty, this, args) };
            }
        }
        this.PropertyChanged.Raise(this, args);
    };
    MatrixTransform.Instance._OnSubPropertyChanged = function (propd, sender, args) {
        this._NeedUpdate = true;
        this._OnSubPropertyChanged$Transform(propd, sender, args);
        var newArgs = {
            Property: propd,
            OldValue: null,
            NewValue: this._GetValue(propd)
        };
        this.PropertyChanged.Raise(this, newArgs);
    };
    namespace.MatrixTransform = Nullstone.FinishCreate(MatrixTransform);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var PathFigureCollection = Nullstone.Create("PathFigureCollection", Fayde.DependencyObjectCollection);
    PathFigureCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.PathFigure;
    };
    namespace.PathFigureCollection = Nullstone.FinishCreate(PathFigureCollection);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var PathSegmentCollection = Nullstone.Create("PathSegmentCollection", Fayde.DependencyObjectCollection);
    PathSegmentCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.PathSegment;
    };
    namespace.PathSegmentCollection = Nullstone.FinishCreate(PathSegmentCollection);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var RotateTransform = Nullstone.Create("RotateTransform", namespace.Transform);
    RotateTransform.AngleProperty = DependencyProperty.Register("Angle", function () { return Number; }, RotateTransform, 0);
    RotateTransform.CenterXProperty = DependencyProperty.Register("CenterX", function () { return Number; }, RotateTransform, 0);
    RotateTransform.CenterYProperty = DependencyProperty.Register("CenterY", function () { return Number; }, RotateTransform, 0);
    Nullstone.AutoProperties(RotateTransform, [
        RotateTransform.AngleProperty,
        RotateTransform.CenterXProperty,
        RotateTransform.CenterYProperty
    ]);
    RotateTransform.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== RotateTransform) {
            this._OnPropertyChanged$Transform(args, error);
            return;
        }
        if (args.Property._ID === RotateTransform.AngleProperty._ID
            || args.Property._ID === RotateTransform.CenterXProperty._ID
            || args.Property._ID === RotateTransform.CenterYProperty._ID) {
            this._ClearValue();
        }
        this.PropertyChanged.Raise(this, args);
    };
    RotateTransform.Instance._BuildValue = function () {
        var cx = this.CenterX;
        var cy = this.CenterY;
        var angleRad = Math.PI / 180 * this.Angle;
        var m = mat3.createRotate(angleRad);
        if (cx === 0 && cy === 0)
            return m;
        mat3.multiply(mat3.createTranslate(-cx, -cy), m, m); //m = m * translation
        mat3.translate(m, cx, cy);
        return m;
    };
    namespace.RotateTransform = Nullstone.FinishCreate(RotateTransform);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var ScaleTransform = Nullstone.Create("ScaleTransform", namespace.Transform);
    ScaleTransform.CenterXProperty = DependencyProperty.Register("CenterX", function () { return Number; }, ScaleTransform, 0);
    ScaleTransform.CenterYProperty = DependencyProperty.Register("CenterY", function () { return Number; }, ScaleTransform, 0);
    ScaleTransform.ScaleXProperty = DependencyProperty.Register("ScaleX", function () { return Number; }, ScaleTransform, 0);
    ScaleTransform.ScaleYProperty = DependencyProperty.Register("ScaleY", function () { return Number; }, ScaleTransform, 0);
    Nullstone.AutoProperties(ScaleTransform, [
        ScaleTransform.CenterXProperty,
        ScaleTransform.CenterYProperty,
        ScaleTransform.ScaleXProperty,
        ScaleTransform.ScaleYProperty
    ]);
    ScaleTransform.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== ScaleTransform) {
            this._OnPropertyChanged$Transform(args, error);
            return;
        }
        if (args.Property._ID === ScaleTransform.ScaleXProperty._ID
            || args.Property._ID === ScaleTransform.ScaleYProperty._ID
            || args.Property._ID === ScaleTransform.CenterXProperty._ID
            || args.Property._ID === ScaleTransform.CenterYProperty._ID) {
            this._ClearValue();
        }
        this.PropertyChanged.Raise(this, args);
    };
    ScaleTransform.Instance._BuildValue = function () {
        var cx = this.CenterX;
        var cy = this.CenterY;
        var m = mat3.createScale(this.ScaleX, this.ScaleY);
        if (cx === 0 && cy === 0)
            return m;
        mat3.multiply(mat3.createTranslate(-cx, -cy), m, m); //m = m * translation
        mat3.translate(m, cx, cy);
        return m;
    };
    namespace.ScaleTransform = Nullstone.FinishCreate(ScaleTransform);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var SkewTransform = Nullstone.Create("SkewTransform", namespace.Transform);
    SkewTransform.AngleXProperty = DependencyProperty.Register("AngleX", function () { return Number; }, SkewTransform, 0);
    SkewTransform.AngleYProperty = DependencyProperty.Register("AngleY", function () { return Number; }, SkewTransform, 0);
    SkewTransform.CenterXProperty = DependencyProperty.Register("CenterX", function () { return Number; }, SkewTransform, 0);
    SkewTransform.CenterYProperty = DependencyProperty.Register("CenterY", function () { return Number; }, SkewTransform, 0);
    Nullstone.AutoProperties(SkewTransform, [
        SkewTransform.AngleXProperty,
        SkewTransform.AngleYProperty,
        SkewTransform.CenterXProperty,
        SkewTransform.CenterYProperty
    ]);
    SkewTransform.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== SkewTransform) {
            this._OnPropertyChanged$Transform(args, error);
            return;
        }
        if (args.Property._ID === SkewTransform.AngleXProperty._ID
            || args.Property._ID === SkewTransform.AngleYProperty._ID
            || args.Property._ID === SkewTransform.CenterXProperty._ID
            || args.Property._ID === SkewTransform.CenterYProperty._ID) {
            this._ClearValue();
        }
        this.PropertyChanged.Raise(this, args);
    };
    SkewTransform.Instance._BuildValue = function () {
        var cx = this.CenterX;
        var cy = this.CenterY;
        var angleXRad = Math.PI / 180 * this.AngleX;
        var angleYRad = Math.PI / 180 * this.AngleY;
        var m = mat3.createSkew(angleXRad, angleYRad);
        if (cx === 0 && cy === 0)
            return m;
        mat3.multiply(mat3.createTranslate(-cx, -cy), m, m); //m = m * translation
        mat3.translate(m, cx, cy);
        return m;
    };
    namespace.SkewTransform = Nullstone.FinishCreate(SkewTransform);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var TransformCollection = Nullstone.Create("TransformCollection", Fayde.DependencyObjectCollection);
    TransformCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.Transform;
    };
    namespace.TransformCollection = Nullstone.FinishCreate(TransformCollection);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var Animation = Nullstone.Create("Animation", namespace.Timeline);
    Animation.Instance.Resolve = function () { return true; };
    Animation.Instance.HookupStorage = function (targetObj, targetProp) {
        this._Storage = new namespace.AnimationStorage(this, targetObj, targetProp);
        return this._Storage;
    };
    Animation.Instance.Disable = function () {
        if (this._Storage != null)
            this._Storage.Disable();
    };
    Animation.Instance.Stop = function () {
        if (this._Storage == null)
            return;
        this._Storage.Stop();
    };
    Animation.Instance.UpdateInternal = function (clockData) {
        if (this._Storage != null)
            this._Storage.UpdateCurrentValueAndApply(clockData);
    };
    Animation.Instance.GetNaturalDurationCore = function () {
        return Duration.CreateTimeSpan(new TimeSpan(0, 0, 1));
    };
    Animation.Instance.GetTargetValue = function (defaultOriginValue) { };
    Animation.Instance.GetCurrentValue = function (defaultOriginValue, defaultDestinationValue, clockData) { };
    namespace.Animation = Nullstone.FinishCreate(Animation);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var AnimationUsingKeyFrames = Nullstone.Create("AnimationUsingKeyFrames", namespace.Animation);
    Nullstone.AbstractProperty(AnimationUsingKeyFrames, "KeyFrames");
    AnimationUsingKeyFrames.Instance.Resolve = function (target, propd) {
        var keyFrames = this.KeyFrames;
        namespace.KeyFrameCollection.ResolveKeyFrames(this, keyFrames);
        var count = keyFrames._SortedList.length;
        for (var j = 0; j < count; j++) {
            if (!keyFrames._SortedList[j].KeyTime.IsValid)
                return false;
        }
        return true;
    };
    AnimationUsingKeyFrames.Instance.GetCurrentValue = function (defaultOriginValue, defaultDestinationValue, clockData) {
        var keyFrames = this.KeyFrames;
        var prevFrameRef = {};
        var currentKeyFrame = keyFrames.GetKeyFrameForTime(clockData.CurrentTime, prevFrameRef);
        var prevFrame = prevFrameRef.Value;
        if (currentKeyFrame == null)
            return null;
        var baseValue;
        var keyStartTime;
        var keyEndTime = currentKeyFrame._ResolvedKeyTime;
        if (prevFrame == null) {
            baseValue = defaultOriginValue;
            keyStartTime = new TimeSpan();
        } else {
            baseValue = prevFrame.ConvertedValue;
            keyStartTime = prevFrame._ResolvedKeyTime;
        }
        var progress;
        if (clockData.CurrentTime.CompareTo(keyEndTime) >= 0) {
            progress = 1.0;
        } else {
            var keyDuration = keyEndTime._Ticks - keyStartTime._Ticks;
            if (keyDuration <= 0)
                progress = 1.0;
            else
                progress = (clockData.CurrentTime._Ticks - keyStartTime._Ticks) / keyDuration;
        }
        return currentKeyFrame.InterpolateValue(baseValue, progress);
    };
    AnimationUsingKeyFrames.Instance.GetNaturalDurationCore = function () {
        var keyFrames = this.KeyFrames;
        namespace.KeyFrameCollection.ResolveKeyFrames(this, keyFrames);
        var count = keyFrames._SortedList.length;
        var ts;
        if (count > 0)
            ts = keyFrames._SortedList[count - 1]._ResolvedKeyTime;
        else
            ts = new TimeSpan();
        return Duration.CreateTimeSpan(ts);
    };
    AnimationUsingKeyFrames.Instance.AddKeyFrame = function (frame) {
        this.KeyFrames.Add(frame);
    };
    AnimationUsingKeyFrames.Instance.RemoveKeyFrame = function (frame) {
        this.KeyFrames.Remove(frame);
    };
    namespace.AnimationUsingKeyFrames = Nullstone.FinishCreate(AnimationUsingKeyFrames);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var ColorAnimation = Nullstone.Create("ColorAnimation", namespace.Animation);
    ColorAnimation.ByProperty = DependencyProperty.Register("By", function () { return Color; }, ColorAnimation);
    ColorAnimation.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () { return namespace.IEasingFunction; }, ColorAnimation);
    ColorAnimation.FromProperty = DependencyProperty.Register("From", function () { return Color; }, ColorAnimation);
    ColorAnimation.ToProperty = DependencyProperty.Register("To", function () { return Color; }, ColorAnimation);
    Nullstone.AutoProperties(ColorAnimation, [
        ColorAnimation.ByProperty,
        ColorAnimation.EasingFunctionProperty,
        ColorAnimation.FromProperty,
        ColorAnimation.ToProperty
    ]);
    ColorAnimation.Instance.GetTargetValue = function (defaultOriginValue) {
        this._EnsureCache();
        var start = new Color();
        if (this._FromCached != null)
            start = this._FromCached;
        else if (defaultOriginValue != null && defaultOriginValue instanceof Color)
            start = defaultOriginValue;
        if (this._ToCached != null)
            return this._ToCached;
        else if (this._ByCached != null)
            return start.Add(this._ByCached);
        return start;
    };
    ColorAnimation.Instance.GetCurrentValue = function (defaultOriginValue, defaultDestinationValue, clockData) {
        this._EnsureCache();
        var start = new Color();
        if (this._FromCached != null)
            start = this._FromCached;
        else if (defaultOriginValue != null && defaultOriginValue instanceof Color)
            start = defaultOriginValue;
        var end = start;
        if (this._ToCached != null)
            end = this._ToCached;
        else if (this._ByCached != null)
            end = start.Add(this._ByCached);
        else if (defaultDestinationValue != null && defaultDestinationValue instanceof Color)
            end = defaultDestinationValue;
        var easingFunc = this.EasingFunction;
        if (easingFunc != null)
            clockData.Progress = easingFunc.Ease(clockData.Progress);
        return Color.LERP(start, end, clockData.Progress);
    };
    ColorAnimation.Instance._EnsureCache = function () {
        if (this._HasCached)
            return;
        this._FromCached = this.From;
        this._ToCached = this.To;
        this._ByCached = this.By;
        this._HasCached = true;
    };
    namespace.ColorAnimation = Nullstone.FinishCreate(ColorAnimation);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var DoubleAnimation = Nullstone.Create("DoubleAnimation", namespace.Animation);
    DoubleAnimation.ByProperty = DependencyProperty.Register("By", function () { return Number; }, DoubleAnimation);
    DoubleAnimation.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () { return namespace.IEasingFunction; }, DoubleAnimation);
    DoubleAnimation.FromProperty = DependencyProperty.Register("From", function () { return Number; }, DoubleAnimation);
    DoubleAnimation.ToProperty = DependencyProperty.Register("To", function () { return Number; }, DoubleAnimation);
    Nullstone.AutoProperties(DoubleAnimation, [
        DoubleAnimation.ByProperty,
        DoubleAnimation.EasingFunctionProperty,
        DoubleAnimation.FromProperty,
        DoubleAnimation.ToProperty
    ]);
    DoubleAnimation.Instance.GetTargetValue = function (defaultOriginValue) {
        this._EnsureCache();
        var start = 0.0;
        if (this._FromCached != null)
            start = this._FromCached;
        else if (defaultOriginValue != null && Number.isNumber(defaultOriginValue))
            start = defaultOriginValue;
        if (this._ToCached != null)
            return this._ToCached;
        else if (this._ByCached != null)
            return start + this._ByCached;
        return start;
    };
    DoubleAnimation.Instance.GetCurrentValue = function (defaultOriginValue, defaultDestinationValue, clockData) {
        this._EnsureCache();
        var start = 0.0;
        if (this._FromCached != null)
            start = this._FromCached;
        else if (defaultOriginValue != null && Number.isNumber(defaultOriginValue))
            start = defaultOriginValue;
        var end = start;
        if (this._ToCached != null)
            end = this._ToCached;
        else if (this._ByCached != null)
            end = start + this._ByCached;
        else if (defaultDestinationValue != null && Number.isNumber(defaultDestinationValue))
            end = defaultDestinationValue;
        var easingFunc = this.EasingFunction;
        if (easingFunc != null)
            clockData.Progress = easingFunc.Ease(clockData.Progress);
        return start + ((end - start) * clockData.Progress);
    };
    DoubleAnimation.Instance._EnsureCache = function () {
        if (this._HasCached)
            return;
        this._FromCached = this.From;
        this._ToCached = this.To;
        this._ByCached = this.By;
        this._HasCached = true;
    };
    DoubleAnimation.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== DoubleAnimation) {
            this._OnPropertyChanged$Animation(args, error);
            return;
        }
        this._FromCached = null;
        this._ToCached = null;
        this._ByCached = null;
        this._HasCached = false;
        this.PropertyChanged.Raise(this, args);
    };
    namespace.DoubleAnimation = Nullstone.FinishCreate(DoubleAnimation);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var KeyFrameCollection = Nullstone.Create("KeyFrameCollection", Fayde.DependencyObjectCollection);
    KeyFrameCollection.Instance.Init = function () {
        this.Init$DependencyObjectCollection();
        this._Resolved = false;
        this._SortedList = [];
    };
    KeyFrameCollection.Instance.GetKeyFrameForTime = function (t, prevFrameRef) {
        var currentKeyFrame = null;
        var previousKeyFrame = null;
        var i;
        if (this._SortedList.length == 0) {
            prevFrameRef.Value = null;
            return null;
        }
        var keyFrame;
        var valuePropd;
        for (i = 0; i < this._SortedList.length; i++) {
            keyFrame = this._SortedList[i];
            var keyEndTime = keyFrame._ResolvedKeyTime;
            if (keyEndTime.CompareTo(t) >= 0 || (i + 1) >= this._SortedList.length)
                break;
        }
        for (; i >= 0; i--) {
            keyFrame = this._SortedList[i];
            valuePropd = keyFrame.GetDependencyProperty("Value");
            if (keyFrame._GetValue(valuePropd) !== undefined) {
                currentKeyFrame = keyFrame;
                break;
            }
        }
        for (i--; i >= 0; i--) {
            keyFrame = this._SortedList[i];
            valuePropd = keyFrame.GetDependencyProperty("Value");
            if (keyFrame._GetValue(valuePropd) !== undefined) {
                previousKeyFrame = keyFrame;
                break;
            }
        }
        prevFrameRef.Value = previousKeyFrame;
        return currentKeyFrame;
    };
    KeyFrameCollection.Instance.Clear = function () {
        this._Resolved = false;
        this._SortedList = [];
        this.Clear$DependencyObjectCollection();
    };
    KeyFrameCollection.Instance.AddedToCollection = function (value, error) {
        if (!this.AddedToCollection$DependencyObjectCollection(value, error))
            return false;
        this._Resolved = false;
        return true;
    };
    KeyFrameCollection.Instance.RemovedFromCollection = function (value, isValueSafe) {
        this.RemovedFromCollection$DependencyObjectCollection(value, isValueSafe);
        this._Resolved = false;
    };
    KeyFrameCollection.Instance._OnSubPropertyChanged = function (propd, sender, args) {
        if (args.Property.Name === "KeyTime")
            this._Resolved = false;
        this._OnSubPropertyChanged$DependencyObjectCollection(propd, sender, args);
    };
    KeyFrameCollection.ResolveKeyFrames = function (animation, coll) {
        if (coll._Resolved)
            return;
        coll._Resolved = true;
        var totalInterpolationTime;
        var hasTimeSpanKeyFrame = false;
        var highestKeyTimeTimeSpan = new TimeSpan();
        var keyFrame;
        var value;
        var count = coll.GetCount();
        var i;
        for (i = 0; i < count; i++) {
            value = coll.GetValueAt(i);
            keyFrame = Nullstone.As(value, namespace.KeyFrame);
            keyFrame._ResolvedKeyTime = new TimeSpan();
            keyFrame._Resolved = false;
        }
        var keyTime;
        for (i = 0; i < count; i++) {
            value = coll.GetValueAt(i);
            keyFrame = Nullstone.As(value, namespace.KeyFrame);
            keyTime = keyFrame.KeyTime;
            if (keyTime.HasTimeSpan) {
                hasTimeSpanKeyFrame = true;
                var ts = keyTime.TimeSpan;
                if (ts.CompareTo(highestKeyTimeTimeSpan) > 0)
                    highestKeyTimeTimeSpan = ts;
                keyFrame._ResolvedKeyTime = ts;
                keyFrame._Resolved = true;
            }
        }
        var d = animation._GetValue(Fayde.Media.Animation.Timeline.DurationProperty);
        if (d.HasTimeSpan) {
            totalInterpolationTime = d.TimeSpan;
        } else if (hasTimeSpanKeyFrame) {
            totalInterpolationTime = highestKeyTimeTimeSpan;
        } else {
            totalInterpolationTime = new TimeSpan(TimeSpan._TicksPerSecond);
        }
        animation._TotalKeyTime = totalInterpolationTime;
        for (i = 0; i < count; i++) {
            value = coll.GetValueAt(i);
            keyFrame = Nullstone.As(value, namespace.KeyFrame);
            keyTime = keyFrame.KeyTime;
            if (keyTime.HasPercent) {
                keyFrame._ResolvedTime = totalInterpolationTime.Multiply(keyTime.Percent)
                keyFrame._Resolved = true;
            }
        }
        if (count > 0) {
            value = coll.GetValueAt(count - 1);
            keyFrame = Nullstone.As(value, namespace.KeyFrame);
            keyTime = keyFrame.KeyTime;
            if (keyTime.IsPaced || keyTime.IsUniform) {
                keyFrame._ResolvedKeyTime = totalInterpolationTime;
                keyFrame._Resolved = true;
            }
        }
        /* if the first frame is KeyTime Paced:
        **   1. if there is only 1 frame, its KeyTime is the total interpolation time.
        **   2. if there is more than 1 frame, its KeyTime is 0.
        **
        ** note 1 is handled in the above block so we only have to
        ** handle 2 here.
        */
        if (count > 0) {
            value = coll.GetValueAt(count - 1);
            keyFrame = Nullstone.As(value, namespace.KeyFrame);
            keyTime = keyFrame.KeyTime;
            if (!keyFrame._Resolved && keyTime.IsPaced) {
                keyFrame._ResolvedKeyTime = new TimeSpan(0);
                keyFrame._Resolved = true;
            }
        }
        coll._SortedList = [];
        for (i = 0; i < count; i++) {
            value = coll.GetValueAt(i);
            keyFrame = Nullstone.As(value, namespace.KeyFrame);
            coll._SortedList.push(keyFrame);
        }
        coll._SortedList.sort(namespace.KeyFrame.Comparer);
    };
    namespace.KeyFrameCollection = Nullstone.FinishCreate(KeyFrameCollection);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var ObjectKeyFrame = Nullstone.Create("ObjectKeyFrame", namespace.KeyFrame);
    ObjectKeyFrame.KeyTimeProperty = DependencyProperty.Register("KeyTime", function () { return KeyTime; }, ObjectKeyFrame, new KeyTime(), null, { GetValue: function () { NotImplemented("KeyTime Coercer"); } });
    ObjectKeyFrame.ValueProperty = DependencyProperty.Register("Value", function () { return Object; }, ObjectKeyFrame);
    ObjectKeyFrame.ConvertedValueProperty = DependencyProperty.Register("ConvertedValue", function () { return Object; }, ObjectKeyFrame);
    Nullstone.AutoProperties(ObjectKeyFrame, [
        ObjectKeyFrame.KeyTimeProperty,
        ObjectKeyFrame.ValueProperty,
        ObjectKeyFrame.ConvertedValueProperty
    ]);
    namespace.ObjectKeyFrame = Nullstone.FinishCreate(ObjectKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var ObjectKeyFrameCollection = Nullstone.Create("ObjectKeyFrameCollection", namespace.KeyFrameCollection);
    ObjectKeyFrameCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.ObjectKeyFrame;
    };
    namespace.ObjectKeyFrameCollection = Nullstone.FinishCreate(ObjectKeyFrameCollection);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var DiscreteObjectKeyFrame = Nullstone.Create("DiscreteObjectKeyFrame", namespace.ObjectKeyFrame);
    DiscreteObjectKeyFrame.Instance.InterpolateValue = function (baseValue, keyFrameProgress) {
        if (keyFrameProgress >= 1.0)
            return this.ConvertedValue;
        return baseValue;
    };
    namespace.DiscreteObjectKeyFrame = Nullstone.FinishCreate(DiscreteObjectKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var PointAnimation = Nullstone.Create("PointAnimation", namespace.Animation);
    PointAnimation.ByProperty = DependencyProperty.Register("By", function () { return Point; }, PointAnimation);
    PointAnimation.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () { return namespace.IEasingFunction; }, PointAnimation);
    PointAnimation.FromProperty = DependencyProperty.Register("From", function () { return Point; }, PointAnimation);
    PointAnimation.ToProperty = DependencyProperty.Register("To", function () { return Point; }, PointAnimation);
    Nullstone.AutoProperties(PointAnimation, [
        PointAnimation.ByProperty,
        PointAnimation.EasingFunctionProperty,
        PointAnimation.FromProperty,
        PointAnimation.ToProperty
    ]);
    PointAnimation.Instance.GetTargetValue = function (defaultOriginValue) {
        this._EnsureCache();
        var start = 0.0;
        if (this._FromCached != null)
            start = this._FromCached;
        else if (defaultOriginValue != null && Number.isNumber(defaultOriginValue))
            start = defaultOriginValue;
        if (this._ToCached != null)
            return this._ToCached;
        else if (this._ByCached != null)
            return new Point(start.X + this._ByCached.X, start.Y + this._ByCached.Y);
        return start;
    };
    PointAnimation.Instance.GetCurrentValue = function (defaultOriginValue, defaultDestinationValue, clockData) {
        this._EnsureCache();
        var start = 0.0;
        if (this._FromCached != null)
            start = this._FromCached;
        else if (defaultOriginValue != null && Number.isNumber(defaultOriginValue))
            start = defaultOriginValue;
        var end = start;
        if (this._ToCached != null)
            end = this._ToCached;
        else if (this._ByCached != null)
            end = new Point(start.X + this._ByCached.X, start.Y + this._ByCached.Y);
        else if (defaultDestinationValue != null && Number.isNumber(defaultDestinationValue))
            end = defaultDestinationValue;
        var easingFunc = this.EasingFunction;
        if (easingFunc != null)
            clockData.Progress = easingFunc.Ease(clockData.Progress);
        return Point.LERP(start, end, clockData.Progress);
    };
    PointAnimation.Instance._EnsureCache = function () {
        if (this._HasCached)
            return;
        this._FromCached = this.From;
        this._ToCached = this.To;
        this._ByCached = this.By;
        this._HasCached = true;
    };
    PointAnimation.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== PointAnimation) {
            this._OnPropertyChanged$Animation(args, error);
            return;
        }
        this._FromCached = null;
        this._ToCached = null;
        this._ByCached = null;
        this._HasCached = false;
        this.PropertyChanged.Raise(this, args);
    };
    namespace.PointAnimation = Nullstone.FinishCreate(PointAnimation);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var PointAnimationUsingKeyFrames = Nullstone.Create("PointAnimationUsingKeyFrames", namespace.AnimationUsingKeyFrames);
    PointAnimationUsingKeyFrames.KeyFramesProperty = DependencyProperty.RegisterFull("KeyFrames", function () { return namespace.PointKeyFrameCollection; }, PointAnimationUsingKeyFrames, undefined, undefined, { GetValue: function () { return new namespace.PointKeyFrameCollection(); } });
    Nullstone.AutoProperties(PointAnimationUsingKeyFrames, [
        PointAnimationUsingKeyFrames.KeyFramesProperty
    ]);
    PointAnimationUsingKeyFrames.Annotations = {
        ContentProperty: PointAnimationUsingKeyFrames.KeyFramesProperty
    };
    namespace.PointAnimationUsingKeyFrames = Nullstone.FinishCreate(PointAnimationUsingKeyFrames);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var PointKeyFrame = Nullstone.Create("PointKeyFrame", namespace.KeyFrame);
    PointKeyFrame.KeyTimeProperty = DependencyProperty.Register("KeyTime", function () { return KeyTime; }, PointKeyFrame);
    PointKeyFrame.ValueProperty = DependencyProperty.Register("Value", function () { return Point; }, PointKeyFrame);
    Nullstone.AutoProperties(PointKeyFrame, [
        PointKeyFrame.KeyTimeProperty,
        PointKeyFrame.ValueProperty
    ]);
    namespace.PointKeyFrame = Nullstone.FinishCreate(PointKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var PointKeyFrameCollection = Nullstone.Create("PointKeyFrameCollection", namespace.KeyFrameCollection);
    PointKeyFrameCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.PointKeyFrame;
    };
    namespace.PointKeyFrameCollection = Nullstone.FinishCreate(PointKeyFrameCollection);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var DiscretePointKeyFrame = Nullstone.Create("DiscretePointKeyFrame", namespace.PointKeyFrame);
    DiscretePointKeyFrame.Instance.InterpolateValue = function (baseValue, keyFrameProgress) {
        if (keyFrameProgress >= 1.0)
            return this.Value;
        return baseValue;
    };
    namespace.DiscretePointKeyFrame = Nullstone.FinishCreate(DiscretePointKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var SplinePointKeyFrame = Nullstone.Create("SplinePointKeyFrame", namespace.PointKeyFrame);
    SplinePointKeyFrame.KeySplineProperty = DependencyProperty.Register("KeySpline", function () { return namespace.KeySpline; }, SplinePointKeyFrame);
    Nullstone.AutoProperties(SplinePointKeyFrame, [
        SplinePointKeyFrame.KeySplineProperty
    ]);
    SplinePointKeyFrame.Instance.InterpolateValue = function (baseValue, keyFrameProgress) {
        if (keyFrameProgress >= 1.0)
            return this.Value;
        var start = baseValue;
        var end = this.Value;
        var splineProgress = keyFrameProgress;
        var keySpline = this.KeySpline;
        if (keySpline)
            splineProgress = keySpline.GetSplineProgress(keyFrameProgress);
        if (isNaN(start))
            start = 0;
        if (isNaN(end))
            end = 0;
        return Point.LERP(start, end, splineProgress);
    };
    namespace.SplinePointKeyFrame = Nullstone.FinishCreate(SplinePointKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var LinearPointKeyFrame = Nullstone.Create("LinearPointKeyFrame", namespace.PointKeyFrame);
    LinearPointKeyFrame.Instance.InterpolateValue = function (baseValue, keyFrameProgress) {
        return Point.LERP(baseValue, this.Value, keyFrameProgress);
    };
    namespace.LinearPointKeyFrame = Nullstone.FinishCreate(LinearPointKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var EasingPointKeyFrame = Nullstone.Create("EasingPointKeyFrame", namespace.PointKeyFrame);
    EasingPointKeyFrame.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () { return namespace.IEasingFunction; }, EasingPointKeyFrame);
    Nullstone.AutoProperties(EasingPointKeyFrame, [
        EasingPointKeyFrame.EasingFunctionProperty
    ]);
    EasingPointKeyFrame.Instance.InterpolateValue = function (baseValue, keyFrameProgress) {
        if (keyFrameProgress >= 1.0)
            return this.Value;
        var start = baseValue;
        var end = this.Value;
        var easingFunction = this.EasingFunction;
        if (easingFunction)
            keyFrameProgress = easingFunction.Ease(keyFrameProgress);
        return Point.LERP(start, end, keyFrameProgress);
    };
    namespace.EasingPointKeyFrame = Nullstone.FinishCreate(EasingPointKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var Storyboard = Nullstone.Create("Storyboard", namespace.Timeline);
    Storyboard.ChildrenProperty = DependencyProperty.RegisterFull("Children", function () { return namespace.TimelineCollection; }, Storyboard, undefined, undefined, { GetValue: function () { return new namespace.TimelineCollection(); } });
    Storyboard.TargetNameProperty = DependencyProperty.RegisterAttached("TargetName", function () { return String }, Storyboard);
    Storyboard.GetTargetName = function (d) {
        return d.$GetValue(Storyboard.TargetNameProperty);
    };
    Storyboard.SetTargetName = function (d, value) {
        d.$SetValue(Storyboard.TargetNameProperty, value);
    };
    Storyboard.TargetPropertyProperty = DependencyProperty.RegisterAttached("TargetProperty", function () { return Fayde.Data.PropertyPath }, Storyboard);
    Storyboard.GetTargetProperty = function (d) {
        return d.$GetValue(Storyboard.TargetPropertyProperty);
    };
    Storyboard.SetTargetProperty = function (d, value) {
        d.$SetValue(Storyboard.TargetPropertyProperty, value);
    };
    Nullstone.AutoProperties(Storyboard, [
        Storyboard.ChildrenProperty
    ]);
    Storyboard.Annotations = {
        ContentProperty: Storyboard.ChildrenProperty
    };
    Storyboard.Instance.Begin = function () {
        this.Reset();
        var error = new BError();
        var promotedValues = [];
        if (this._HookupAnimations(promotedValues, error)) {
            App.Instance.RegisterStoryboard(this);
        } else {
            throw error.CreateException();
        }
    };
    Storyboard.Instance.Pause = function () {
        this.Pause$Timeline();
        var children = this.Children;
        var count = children.GetCount();
        for (var i = 0; i < count; i++) {
            children.GetValueAt(i).Pause();
        }
    };
    Storyboard.Instance.Resume = function () {
        this.Resume$Timeline();
        var children = this.Children;
        var count = children.GetCount();
        for (var i = 0; i < count; i++) {
            children.GetValueAt(i).Resume();
        }
    };
    Storyboard.Instance.Stop = function () {
        this.Stop$Timeline();
        App.Instance.UnregisterStoryboard(this);
        var children = this.Children;
        if (!children)
            return;
        var count = children.GetCount();
        for (var i = 0; i < count; i++) {
            children.GetValueAt(i).Stop();
        }
    };
    Storyboard.Instance._HookupAnimations = function (promotedValues, error) {
        var children = this.Children;
        if (!children)
            return true;
        var count = children.GetCount();
        for (var i = 0; i < count; i++) {
            if (!this._HookupAnimation(children.GetValueAt(i), null, null, promotedValues, error))
                return false;
        }
        return true;
    };
    Storyboard.Instance._HookupAnimation = function (animation, targetObject, targetPropertyPath, promotedValues, error) {
        animation.Reset();
        var localTargetObject = null;
        var localTargetPropertyPath = null;
        if (animation.HasManualTarget) {
            localTargetObject = animation.ManualTarget;
        } else {
            var name = Storyboard.GetTargetName(animation);
            if (name)
                localTargetObject = animation.FindName(name);
        }
        localTargetPropertyPath = Storyboard.GetTargetProperty(animation);
        if (localTargetObject != null)
            targetObject = localTargetObject;
        if (localTargetPropertyPath != null)
            targetPropertyPath = localTargetPropertyPath;
        var refobj = {
            Value: targetObject
        };
        targetPropertyPath.TryResolveDependencyProperty(targetObject);
        var targetProperty = DependencyProperty.ResolvePropertyPath(refobj, targetPropertyPath, promotedValues);
        if (targetProperty == null) {
            error.SetErrored(BError.XamlParseException, "Could not resolve property for storyboard. [" + localTargetPropertyPath.Path.toString() + "]");
            return false;
        }
        if (!animation.Resolve(refobj.Value, targetProperty)) {
            error.SetErrored(BError.InvalidOperation, "Storyboard value could not be converted to the correct type");
            return false;
        }
        AnimationDebug("Hookup (" + targetPropertyPath.Path + ")");
        animation.HookupStorage(refobj.Value, targetProperty);
        return true;
    };
    Storyboard.Instance.UpdateInternal = function (clockData) {
        var children = this.Children;
        if (!children)
            return;
        var count = children.GetCount();
        for (var i = 0; i < count; i++) {
            children.GetValueAt(i).Update(clockData.CurrentTime._Ticks);
        }
    };
    Storyboard.Instance.GetNaturalDurationCore = function () {
        var children = this.Children;
        var count = children.GetCount();
        if (count === 0)
            return new Duration(new TimeSpan());
        var fullTicks = null;
        for (var i = 0; i < count; i++) {
            var timeline = children.GetValueAt(i);
            var dur = timeline.GetNaturalDuration();
            if (dur.IsAutomatic)
                continue;
            if (dur.IsForever)
                return Duration.CreateForever();
            var spanTicks = dur.TimeSpan._Ticks;
            var repeat = timeline.RepeatBehavior;
            if (repeat.IsForever)
                return dur.IsForever;
            if (repeat.HasCount)
                spanTicks = spanTicks * repeat.Count;
            if (timeline.AutoReverse)
                spanTicks *= 2;
            if (repeat.HasDuration)
                spanTicks = repeat.Duration.TimeSpan._Ticks;
            if (spanTicks !== 0)
                spanTicks = spanTicks / timeline.SpeedRatio;
            spanTicks += timeline.BeginTime._Ticks;
            if (fullTicks == null || fullTicks <= spanTicks)
                fullTicks = spanTicks;
        }
        if (fullTicks == null)
            return Duration.CreateAutomatic();
        return new Duration(new TimeSpan(fullTicks));
    };
    namespace.Storyboard = Nullstone.FinishCreate(Storyboard);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var StoryboardCollection = Nullstone.Create("StoryboardCollection", Fayde.InternalCollection);
    StoryboardCollection.Instance.IsElementType = function (obj) {
        return obj instanceof namespace.Storyboard;
    };
    namespace.StoryboardCollection = Nullstone.FinishCreate(StoryboardCollection);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var BlurEffect = Nullstone.Create("BlurEffect", namespace.Effect);
    BlurEffect.RadiusProperty = DependencyProperty.Register("Radius", function () { return Number; }, BlurEffect);
    Nullstone.AutoProperties(BlurEffect, [
        BlurEffect.RadiusProperty
    ]);
    namespace.BlurEffect = Nullstone.FinishCreate(BlurEffect);
})(Nullstone.Namespace("Fayde.Media.Effects"));

(function (namespace) {
    var DropShadowEffect = Nullstone.Create("DropShadowEffect", namespace.Effect);
    DropShadowEffect.MAX_BLUR_RADIUS = 20;
    DropShadowEffect.MAX_SHADOW_DEPTH = 300;
    DropShadowEffect.BlurRadiusProperty = DependencyProperty.Register("BlurRadius", function () { return Number; }, DropShadowEffect, 5.0);
    DropShadowEffect.ColorProperty = DependencyProperty.Register("Color", function () { return Color; }, DropShadowEffect, Color.KnownColors.Black);
    DropShadowEffect.DirectionProperty = DependencyProperty.Register("Direction", function () { return Number; }, DropShadowEffect, 315.0);
    DropShadowEffect.OpacityProperty = DependencyProperty.Register("Opacity", function () { return Number; }, DropShadowEffect, 1.0);
    DropShadowEffect.ShadowDepthProperty = DependencyProperty.Register("ShadowDepth", function () { return Number; }, DropShadowEffect, 5.0);
    Nullstone.AutoProperties(DropShadowEffect, [
        DropShadowEffect.BlurRadiusProperty,
        DropShadowEffect.ColorProperty,
        DropShadowEffect.DirectionProperty,
        DropShadowEffect.OpacityProperty,
        DropShadowEffect.ShadowDepthProperty
    ]);
    DropShadowEffect.Instance.Padding = function () {
        var radius = Math.min(this.BlurRadius, DropShadowEffect.MAX_BLUR_RADIUS);
        var depth = Math.min(Math.max(0, this.ShadowDepth), DropShadowEffect.MAX_SHADOW_DEPTH);
        var direction = this.Direction * Math.PI / 180.0;
        var width = Math.ceil(radius);
        var offsetX = Math.cos(direction) * depth;
        var offsetY = Math.sin(direction) * depth;
        var left = -offsetX + width;
        var top = offsetY + width;
        var right = offsetX + width;
        var bottom = -offsetY + width;
        return new Thickness(left < 1.0 ? 1.0 : Math.ceil(left),
            top < 1.0 ? 1.0 : Math.ceil(top),
            right < 1.0 ? 1.0 : Math.ceil(right),
            bottom < 1.0 ? 1.0 : Math.ceil(bottom));
    };
    DropShadowEffect.Instance.PreRender = function (ctx) {
        var color = this.Color;
        var opacity = color.A * this.Opacity;
        var radius = Math.min(this.BlurRadius, DropShadowEffect.MAX_BLUR_RADIUS);
        var depth = Math.min(Math.max(0, this.ShadowDepth), DropShadowEffect.MAX_SHADOW_DEPTH);
        var direction = this.Direction * Math.PI / 180.0;
        var offsetX = Math.cos(direction) * depth;
        var offsetY = Math.sin(direction) * depth;
        var canvasCtx = ctx.CanvasContext;
        canvasCtx.shadowColor = "rgba(" + color.R + "," + color.G + "," + color.B + "," + opacity + ")";
        canvasCtx.shadowBlur = radius;
        canvasCtx.shadowOffsetX = offsetX;
        canvasCtx.shadowOffsetY = offsetY;
    };
    namespace.DropShadowEffect = Nullstone.FinishCreate(DropShadowEffect);
})(Nullstone.Namespace("Fayde.Media.Effects"));

(function (namespace) {
    var BitmapSource = Nullstone.Create("BitmapSource", namespace.ImageSource);
    BitmapSource.Instance.Init = function () {
        this.Init$ImageSource();
        this.ResetImage();
    };
    BitmapSource.IntGreaterThanZeroValidator = function (instance, propd, value, error) {
        if (typeof value !== "number")
            return false;
        return value > 0;
    };
    BitmapSource.PixelWidthProperty = DependencyProperty.RegisterFull("PixelWidth", function () { return Number; }, BitmapSource, 0, undefined, undefined, undefined, undefined, BitmapSource.IntGreaterThanZeroValidator);
    BitmapSource.PixelHeightProperty = DependencyProperty.RegisterFull("PixelHeight", function () { return Number; }, BitmapSource, 0, undefined, undefined, undefined, undefined, BitmapSource.IntGreaterThanZeroValidator);
    Nullstone.AutoProperty(BitmapSource, BitmapSource.PixelWidthProperty, undefined, true);
    Nullstone.AutoProperty(BitmapSource, BitmapSource.PixelHeightProperty, undefined, true);
    BitmapSource.Instance.ResetImage = function () {
        this._Image = new Image();
        var bs = this;
        this._Image.onerror = function (e) { bs._OnErrored(e); };
        this._Image.onload = function (e) { bs._OnLoad(e); };
        this.PixelWidth = 0;
        this.PixelHeight = 0;
    };
    BitmapSource.Instance.UriSourceChanged = function (oldValue, newValue) {
        this._Image.src = newValue.toString();
    };
    BitmapSource.Instance._OnErrored = function (e) {
        Info("Failed to load: " + this._Image.src.toString());
        if (this._ErroredCallback)
            this._ErroredCallback(e);
    };
    BitmapSource.Instance._OnLoad = function (e) {
        this.PixelWidth = this._Image.naturalWidth;
        this.PixelHeight = this._Image.naturalHeight;
        if (this._LoadedCallback)
            this._LoadedCallback(e);
    };
    namespace.BitmapSource = Nullstone.FinishCreate(BitmapSource);
})(Nullstone.Namespace("Fayde.Media.Imaging"));

(function (namespace) {
    var VisualState = Nullstone.Create("VisualState", Fayde.DependencyObject);
    VisualState.StoryboardProperty = DependencyProperty.Register("Storyboard", function () { return Fayde.Media.Animation.Storyboard; }, VisualState, null);
    Nullstone.AutoProperties(VisualState, [
        VisualState.StoryboardProperty
    ]);
    VisualState.Annotations = {
        ContentProperty: VisualState.StoryboardProperty
    };
    namespace.VisualState = Nullstone.FinishCreate(VisualState);
})(Nullstone.Namespace("Fayde.Media.VisualStateManager"));
(function (namespace) {
    var VisualStateCollection = Nullstone.Create("VisualStateCollection", Fayde.DependencyObjectCollection);
    VisualStateCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.VisualState;
    };
    namespace.VisualStateCollection = Nullstone.FinishCreate(VisualStateCollection);
})(Nullstone.Namespace("Fayde.Media.VisualStateManager"));

(function (namespace) {
    var VisualTransition = Nullstone.Create("VisualTransition", Fayde.DependencyObject);
    VisualTransition.Instance.Init = function () {
        this.Init$DependencyObject();
        this.DynamicStoryboardCompleted = true;
        this.ExplicitStoryboardCompleted = true;
        this._GeneratedDuration = new Duration();
    };
    Nullstone.AutoProperties(VisualTransition, [
        "From",
        "To",
        "Storyboard",
        "GeneratedDuration",
        "DynamicStoryboardCompleted",
        "ExplicitStoryboardCompleted",
        "GeneratedEasingFunction"
    ]);
    namespace.VisualTransition = Nullstone.FinishCreate(VisualTransition);
})(Nullstone.Namespace("Fayde.Media.VisualStateManager"));
(function (namespace) {
    var VisualTransitionCollection = Nullstone.Create("VisualTransitionCollection", Fayde.DependencyObjectCollection);
    VisualTransitionCollection.Instance.IsElementType = function (obj) {
        return obj instanceof namespace.VisualTransition;
    };
    namespace.VisualTransitionCollection = Nullstone.FinishCreate(VisualTransitionCollection);
})(Nullstone.Namespace("Fayde.Media.VisualStateManager"));

(function (namespace) {
    var Shape = Nullstone.Create("Shape", Fayde.FrameworkElement);
    Shape.Instance.Init = function () {
        this.Init$FrameworkElement();
        this._ShapeFlags = 0;
        this._StretchXform = mat3.identity();
        this._NaturalBounds = new Rect();
    };
    Shape.FillProperty = DependencyProperty.Register("Fill", function () { return Fayde.Media.Brush; }, Shape);
    Shape.StretchProperty = DependencyProperty.Register("Stretch", function () { return new Enum(Fayde.Media.Stretch); }, Shape, Fayde.Media.Stretch.None);
    Shape.StrokeProperty = DependencyProperty.Register("Stroke", function () { return Fayde.Media.Brush; }, Shape);
    Shape.StrokeThicknessProperty = DependencyProperty.Register("StrokeThickness", function () { return Number; }, Shape, 1.0);
    Shape.StrokeDashArrayProperty = DependencyProperty.Register("StrokeDashArray", function () { return namespace.DoubleCollection; }, Shape);
    Shape.StrokeDashCapProperty = DependencyProperty.Register("StrokeDashCap", function () { return new Enum(namespace.PenLineCap); }, Shape, namespace.PenLineCap.Flat);
    Shape.StrokeDashOffsetProperty = DependencyProperty.Register("StrokeDashOffset", function () { return Number; }, Shape, 0.0);
    Shape.StrokeEndLineCapProperty = DependencyProperty.Register("StrokeEndLineCap", function () { return new Enum(namespace.PenLineCap); }, Shape, namespace.PenLineCap.Flat);
    Shape.StrokeLineJoinProperty = DependencyProperty.Register("StrokeLineJoin", function () { return new Enum(namespace.PenLineJoin); }, Shape, namespace.PenLineJoin.Miter);
    Shape.StrokeMiterLimitProperty = DependencyProperty.Register("StrokeMiterLimit", function () { return Number; }, Shape, 10.0);
    Shape.StrokeStartLineCapProperty = DependencyProperty.Register("StrokeStartLineCap", function () { return new Enum(namespace.PenLineCap); }, Shape, namespace.PenLineCap.Flat);
    Nullstone.AutoProperties(Shape, [
        Shape.FillProperty,
        Shape.StretchProperty,
        Shape.StrokeProperty,
        Shape.StrokeThicknessProperty,
        Shape.StrokeDashArrayProperty,
        Shape.StrokeDashCapProperty,
        Shape.StrokeDashOffsetProperty,
        Shape.StrokeEndLineCapProperty,
        Shape.StrokeLineJoinProperty,
        Shape.StrokeMiterLimitProperty,
        Shape.StrokeStartLineCapProperty
    ]);
    Shape.Instance._IsEmpty = function () { return this._ShapeFlags & namespace.ShapeFlags.Empty; };
    Shape.Instance._IsNormal = function () { return this._ShapeFlags & namespace.ShapeFlags.Normal; };
    Shape.Instance._IsDegenerate = function () { return this._ShapeFlags & namespace.ShapeFlags.Degenerate; };
    Shape.Instance._HasRadii = function () { return this._ShapeFlags & namespace.ShapeFlags.Radii; };
    Shape.Instance._SetShapeFlags = function (sf) { this._ShapeFlags = sf; };
    Shape.Instance._AddShapeFlags = function (sf) { this._ShapeFlags |= sf; };
    Shape.Instance._IsStroked = function () { return this._Stroke != null; };
    Shape.Instance._IsFilled = function () { return this._Fill != null; };
    Shape.Instance._CanFill = function () { return false; };
    Shape.Instance._CanFindElement = function () { return this._IsFilled() || this._IsStroked(); };
    Shape.Instance._GetFillRule = function () {
        return namespace.FillRule.NonZero;
    };
    Shape.Instance._ShiftPosition = function (point) {
        var dx = this._Bounds.X - point.X;
        var dy = this._Bounds.Y - point.Y;
        this._ShiftPosition$FrameworkElement(point);
    };
    Shape.Instance._MeasureOverrideWithError = function (availableSize, error) {
        var desired = availableSize;
        var shapeBounds = this._GetNaturalBounds();
        if (!shapeBounds)
            return new Size();
        var sx = 0.0;
        var sy = 0.0;
        if (this instanceof namespace.Rectangle || this instanceof namespace.Ellipse) {
            desired = new Size(0, 0);
        }
        var stretch = this.Stretch;
        if (stretch === Fayde.Media.Stretch.None)
            return new Size(shapeBounds.X + shapeBounds.Width, shapeBounds.Y + shapeBounds.Height);
        if (!isFinite(availableSize.Width))
            desired.Width = shapeBounds.Width;
        if (!isFinite(availableSize.Height))
            desired.Height = shapeBounds.Height;
        if (shapeBounds.Width > 0)
            sx = desired.Width / shapeBounds.Width;
        if (shapeBounds.Height > 0)
            sy = desired.Height / shapeBounds.Height;
        if (!isFinite(availableSize.Width))
            sx = sy;
        if (!isFinite(availableSize.Height))
            sy = sx;
        switch (stretch) {
            case Fayde.Media.Stretch.Uniform:
                sx = sy = Math.min(sx, sy);
                break;
            case Fayde.Media.Stretch.UniformToFill:
                sx = sy = Math.max(sx, sy);
                break;
            case Fayde.Media.Stretch.Fill:
                if (!isFinite(availableSize.Width))
                    sx = 1.0;
                if (!isFinite(availableSize.Height))
                    sy = 1.0;
                break;
            default:
                break;
        }
        desired = new Size(shapeBounds.Width * sx, shapeBounds.Height * sy);
        return desired;
    };
    Shape.Instance._ArrangeOverrideWithError = function (finalSize, error) {
        var arranged = finalSize;
        var sx = 1.0;
        var sy = 1.0;
        var shapeBounds = this._GetNaturalBounds();
        if (!shapeBounds)
            return new Size();
        this._InvalidateStretch();
        var stretch = this.Stretch;
        if (stretch === Fayde.Media.Stretch.None)
            return arranged.Max(new Size(shapeBounds.X + shapeBounds.Width, shapeBounds.Y + shapeBounds.Height));
        if (shapeBounds.Width === 0)
            shapeBounds.Width = arranged.Width;
        if (shapeBounds.Height === 0)
            shapeBounds.Height = arranged.Height;
        if (shapeBounds.Width !== arranged.Width)
            sx = arranged.Width / shapeBounds.Width;
        if (shapeBounds.Height !== arranged.Height)
            sy = arranged.Height / shapeBounds.Height;
        switch (stretch) {
            case Fayde.Media.Stretch.Uniform:
                sx = sy = Math.min(sx, sy);
                break;
            case Fayde.Media.Stretch.UniformToFill:
                sx = sy = Math.max(sx, sy);
                break;
            default:
                break;
        }
        arranged = new Size(shapeBounds.Width * sx, shapeBounds.Height * sy);
        return arranged;
    };
    Shape.Instance._InvalidateNaturalBounds = function () {
        this._NaturalBounds = new Rect();
        this._InvalidateStretch();
    };
    Shape.Instance._InvalidateStretch = function () {
        this._ExtentsWithChildren = this._Extents = new Rect();
        this._StretchXform = mat3.identity();
        this._InvalidatePathCache();
    };
    Shape.Instance._InvalidatePathCache = function (free) {
        this._Path = null;
        if (!free) {
            this._UpdateBounds(true);
        }
        this._InvalidateSurfaceCache();
    };
    Shape.Instance._InvalidateSurfaceCache = function () {
    };
    Shape.Instance._InvalidateStrokeBounds = function () {
        this._InvalidateFillBounds();
    };
    Shape.Instance._InvalidateFillBounds = function () {
        this._InvalidateNaturalBounds();
    };
    Shape.Instance._CacheInvalidateHint = function () {
        this._InvalidatePathCache();
    };
    Shape.Instance._GetStretchExtents = function () {
        if (this._Extents.IsEmpty()) {
            this._ExtentsWithChildren = this._Extents = this._ComputeStretchBounds();
        }
        return this._Extents;
    };
    Shape.Instance._ComputeActualSize = function () {
        var desired = this._ComputeActualSize$FrameworkElement();
        var shapeBounds = this._GetNaturalBounds();
        var sx = 1.0;
        var sy = 1.0;
        var parent = this.GetVisualParent();
        if (parent != null && !(parent instanceof Fayde.Controls.Canvas)) {
            if (Fayde.LayoutInformation.GetPreviousConstraint(this) !== undefined || this._ReadLocalValue(Fayde.LayoutInformation.LayoutSlotProperty) !== undefined) {
                return desired;
            }
        }
        if (!this._IsAttached)
            return desired;
        if (shapeBounds.Width <= 0 && shapeBounds.Height <= 0)
            return desired;
        var stretch = this.Stretch;
        if (stretch === Fayde.Media.Stretch.None && shapeBounds.Width > 0 && shapeBounds.Height > 0)
            return new Size(shapeBounds.Width, shapeBounds.Height);
        if (!isFinite(desired.Width))
            desired.Width = shapeBounds.Width;
        if (!isFinite(desired.Height))
            desired.Height = shapeBounds.Height;
        if (shapeBounds.Width > 0)
            sx = desired.Width / shapeBounds.Width;
        if (shapeBounds.Height > 0)
            sy = desired.Height / shapeBounds.Height;
        switch (stretch) {
            case Fayde.Media.Stretch.Uniform:
                sx = sy = Math.min(sx, sy);
                break;
            case Fayde.Media.Stretch.UniformToFill:
                sx = sy = Math.max(sx, sy);
                break;
            default:
                break;
        }
        desired = desired.Min(shapeBounds.Width * sx, shapeBounds.Height * sy);
        return desired;
    };
    Shape.Instance._GetSizeForBrush = function (ctx) {
        var se = this._GetStretchExtents();
        return new Size(se.Width, se.Height);
    };
    Shape.Instance._GetNaturalBounds = function () {
        if (!this._NaturalBounds)
            return;
        if (this._NaturalBounds.IsEmpty())
            this._NaturalBounds = this._ComputeShapeBoundsImpl(false, null);
        return this._NaturalBounds;
    };
    Shape.Instance._TransformBounds = function () {
    };
    Shape.Instance._ComputeBounds = function () {
        this._BoundsWithChildren = this._Bounds = this._IntersectBoundsWithClipPath(this._GetStretchExtents().GrowBy(this._EffectPadding), false).Transform(this._AbsoluteXform);
        this._ComputeGlobalBounds();
        this._ComputeSurfaceBounds();
    };
    Shape.Instance._ComputeStretchBounds = function () {
        var shapeBounds = this._GetNaturalBounds();
        if (!shapeBounds || shapeBounds.Width <= 0.0 || shapeBounds.Height <= 0.0) {
            this._SetShapeFlags(namespace.ShapeFlags.Empty);
            return new Rect();
        }
        var specified = new Size(this.Width, this.Height);
        var autoDim = isNaN(specified.Width);
        var framework = new Size(this.ActualWidth, this.ActualHeight);
        if (specified.Width <= 0.0 || specified.Height <= 0.0) {
            this._SetShapeFlags(namespace.ShapeFlags.Empty);
            return new Rect();
        }
        var visualParent = this.GetVisualParent();
        if (visualParent != null && visualParent instanceof Fayde.Controls.Canvas) {
            framework.Width = framework.Width === 0.0 ? shapeBounds.Width : framework.Width;
            framework.Height = framework.Height === 0.0 ? shapeBounds.Height : framework.Height;
            if (!isNaN(specified.Width))
                framework.Width = specified.Width;
            if (!isNaN(specified.Height))
                framework.Height = specified.Height;
        } else if (!Fayde.LayoutInformation.GetPreviousConstraint(this)) {
            framework.Width = framework.Width === 0.0 ? shapeBounds.Width : framework.Width;
            framework.Height = framework.Height === 0.0 ? shapeBounds.Height : framework.Height;
        }
        var stretch = this.Stretch;
        if (stretch === Fayde.Media.Stretch.None) {
            shapeBounds = shapeBounds.Transform(this._StretchXform);
            return shapeBounds;
        }
        if (framework.Width === 0.0 || framework.Height === 0.0) {
            this._SetShapeFlags(namespace.ShapeFlags.Empty);
            return new Rect();
        }
        var logicalBounds = this._ComputeShapeBoundsImpl(true, null);
        var adjX = logicalBounds.Width !== 0.0;
        var adjY = logicalBounds.Height !== 0.0;
        var diffX = shapeBounds.Width - logicalBounds.Width;
        var diffY = shapeBounds.Height - logicalBounds.Height;
        var sw = adjX ? (framework.Width - diffX) / logicalBounds.Width : 1.0;
        var sh = adjY ? (framework.Height - diffY) / logicalBounds.Height : 1.0;
        var center = false;
        switch (stretch) {
            case Fayde.Media.Stretch.Fill:
                center = true;
                break;
            case Fayde.Media.Stretch.Uniform:
                sw = sh = (sw < sh) ? sw : sh;
                center = true;
                break;
            case Fayde.Media.Stretch.UniformToFill:
                sw = sh = (sw > sh) ? sw : sh;
                break;
        }
        if ((adjX && Shape.IsSignificant(sw - 1, shapeBounds.Width)) || (adjY && Shape.IsSignificant(sh - 1, shapeBounds.Height))) {
            var temp = mat3.createScale(adjX ? sw : 1.0, adjY ? sh : 1.0);
            var stretchBounds = this._ComputeShapeBoundsImpl(false, temp);
            if (stretchBounds.Width !== shapeBounds.Width && stretchBounds.Height !== shapeBounds.Height) {
                sw *= adjX ? (framework.Width - stretchBounds.Width + logicalBounds.Width * sw) / (logicalBounds.Width * sw) : 1.0;
                sh *= adjY ? (framework.Height - stretchBounds.Height + logicalBounds.Height * sh) / (logicalBounds.Height * sh) : 1.0;
                switch (stretch) {
                    case Fayde.Media.Stretch.Uniform:
                        sw = sh = (sw < sh) ? sw : sh;
                        break;
                    case Fayde.Media.Stretch.UniformToFill:
                        sw = sh = (sw > sh) ? sw : sh;
                        break;
                }
            }
        }
        var x = (!autoDim || adjX) ? shapeBounds.X : 0;
        var y = (!autoDim || adjY) ? shapeBounds.Y : 0;
        var st = this._StretchXform;
        if (!(this instanceof namespace.Line) || !autoDim)
            mat3.translate(st, -x, -y);
        mat3.translate(st,
            adjX ? -shapeBounds.Width * 0.5 : 0.0,
            adjY ? -shapeBounds.Height * 0.5 : 0.0);
        mat3.scale(st,
            adjX ? sw : 1.0,
            adjY ? sh : 1.0);
        if (center) {
            mat3.translate(st,
                adjX ? framework.Width * 0.5 : 0,
                adjY ? framework.Height * 0.5 : 0);
        } else {
            mat3.translate(st,
                adjX ? (logicalBounds.Width * sw + diffX) * 0.5 : 0,
                adjY ? (logicalBounds.Height * sh + diffY) * 0.5 : 0);
        }
        this._StretchXform = st;
        shapeBounds = shapeBounds.Transform(this._StretchXform);
        return shapeBounds;
    };
    Shape.IsSignificant = function (dx, x) {
        return Math.abs(x) < 0.000019 && (Math.abs(dx) * x - x) > 1.0;
    };
    Shape.Instance._ComputeShapeBounds = function (logical) {
        this._ComputeShapeBoundsImpl(logical, null);
    };
    Shape.Instance._ComputeShapeBoundsImpl = function (logical, matrix) {
        var thickness = (logical || !this._IsStroked()) ? 0.0 : this.StrokeThickness;
        if (this._Path == null)
            this._BuildPath();
        if (this._IsEmpty())
            return new Rect();
        if (logical) {
        } else if (thickness > 0) {
        } else {
        }
        NotImplemented("Shape._ComputeShapeBoundsImpl");
    };
    Shape.Instance._InsideObject = function (ctx, x, y) {
        if (!this._InsideLayoutClip(x, y))
            return false;
        if (!this._InsideClip(ctx, x, y))
            return false;
        var p = new Point(x, y);
        this._TransformPoint(p);
        x = p.X;
        y = p.Y;
        if (!this._GetStretchExtents().ContainsPointXY(x, y))
            return false;
        return this._InsideShape(ctx, x, y);
    };
    Shape.Instance._InsideShape = function (ctx, x, y) {
        if (this._IsEmpty())
            return false;
        var ret = false;
        var area = this._GetStretchExtents();
        ctx.Save();
        ctx.PreTransform(this._StretchXform);
        if (this._Fill != null) {
            this._DrawPath(ctx);
            if (ctx.IsPointInPath(new Point(x, y)))
                ret = true;
        }
        if (!ret && this._Stroke != null) {
            NotImplemented("Shape._InsideShape-Stroke");
        }
        ctx.Restore();
        return ret;
    };
    Shape.Instance._Render = function (ctx, region) {
        if (this._IsEmpty())
            return;
        var area = this._GetStretchExtents();
        ctx.Save();
        ctx.PreTransform(this._StretchXform);
        this._DrawPath(ctx);
        if (this._Fill != null)
            ctx.Fill(this._Fill, area);
        if (this._Stroke != null)
            ctx.Stroke(this._Stroke, this.StrokeThickness, area);
        ctx.Restore();
    };
    Shape.Instance._BuildPath = function () { };
    Shape.Instance._DrawPath = function (ctx) {
        this._Path.Draw(ctx);
    };
    if (!Fayde.IsCanvasEnabled) {
        Shape.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Shape) {
                if (args.Property._ID === Fayde.FrameworkElement.HeightProperty || args.Property._ID === Fayde.FrameworkElement.WidthProperty) {
                    this.InvalidateProperty(Shape.StretchProperty);
                }
                this._OnPropertyChanged$FrameworkElement(args, error);
                return;
            }
            this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            this.PropertyChanged.Raise(this, args);
        };
        Shape.Instance._OnSubPropertyChanged = function (propd, sender, args) {
            if (propd != null && (propd._ID === Shape.FillProperty._ID || propd._ID === Shape.StrokeProperty._ID)) {
                this.InvalidateProperty(propd);
            } else {
                this._OnSubPropertyChanged$FrameworkElement(propd, sender, args);
            }
        };
    }
    if (Fayde.IsCanvasEnabled) {
        Shape.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Shape) {
                if (args.Property._ID === Fayde.FrameworkElement.HeightProperty || args.Property._ID === Fayde.FrameworkElement.WidthProperty) {
                    this._InvalidateStretch();
                }
                this._OnPropertyChanged$FrameworkElement(args, error);
                return;
            }
            if (args.Property._ID === Shape.StretchProperty._ID) {
                this._InvalidateMeasure();
                this._InvalidateStretch();
            } else if (args.Property._ID === Shape.StrokeProperty._ID) {
                var newStroke = Nullstone.As(args.NewValue, Fayde.Media.Brush);
                if (this._Stroke == null || newStroke == null) {
                    this._InvalidateStrokeBounds();
                } else {
                    this._InvalidateSurfaceCache();
                }
                this._Stroke = newStroke;
            } else if (args.Property._ID === Shape.FillProperty._ID) {
                var newFill = Nullstone.As(args.NewValue, Fayde.Media.Brush);
                if (this._Fill == null || newFill == null) {
                    this._InvalidateFillBounds();
                } else {
                    this._InvalidateSurfaceCache();
                }
                this._Fill = newFill;
            } else if (args.Property._ID === Shape.StrokeThicknessProperty._ID) {
                this._InvalidateStrokeBounds();
            } else if (args.Property._ID === Shape.StrokeDashCapProperty._ID
                || args.Property._ID === Shape.StrokeDashArrayProperty._ID
                || args.Property._ID === Shape.StrokeEndLineCapProperty._ID
                || args.Property._ID === Shape.StrokeLineJoinProperty._ID
                || args.Property._ID === Shape.StrokeMiterLimitProperty._ID
                || args.Property._ID === Shape.StrokeStartLineCapProperty._ID) {
                this._InvalidateStrokeBounds();
            }
            this._Invalidate();
            this.PropertyChanged.Raise(this, args);
        };
        Shape.Instance._OnSubPropertyChanged = function (propd, sender, args) {
            if (propd != null && (propd._ID === Shape.FillProperty._ID || propd._ID === Shape.StrokeProperty._ID)) {
                this._Invalidate();
                this._InvalidateSurfaceCache();
            } else {
                this._OnSubPropertyChanged$FrameworkElement(propd, sender, args);
            }
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        Shape.Instance.CreateHtmlObjectImpl = function () {
            var rootEl = this.CreateHtmlObjectImpl$FrameworkElement();
            var contentEl = rootEl.firstChild;
            var svg = this.GetSvg();
            svg.appendChild(this.GetSvgShape());
            contentEl.appendChild(svg);
            return rootEl;
        };
        Shape.Instance.CreateSvg = function () {
            var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
            return svg;
        };
        Shape.Instance.GetSvg = function () {
            if (!this._Svg)
                this._Svg = this.CreateSvg();
            return this._Svg;
        };
        Shape.Instance.CreateSvgShape = function () { };
        Shape.Instance.GetSvgShape = function () {
            if (!this._Shape) {
                this._Shape = this.CreateSvgShape();
                this._Shape.setAttribute("width", "100%");
                this._Shape.setAttribute("height", "100%");
            }
            return this._Shape;
        };
        var serializeDashArray = function (collection) {
            var s = "";
            var len = collection.GetCount();
            for (var i = 0; i < len; i++) {
                if (s)
                    s += ", ";
                s = collection.GetValueAt(i).toString();
            }
            return s;
        };
        Shape.Instance.ApplyHtmlChange = function (change) {
            var propd = change.Property;
            if (propd.OwnerType !== Shape) {
                this.ApplyHtmlChange$FrameworkElement(change);
                return;
            }
            var shape = this.GetSvgShape();
            if (propd._ID === Shape.StretchProperty._ID) {
                var stretch = change.NewValue;
                if (!stretch)
                    stretch = this.Stretch;
            } else if (propd._ID === Shape.FillProperty._ID) {
                var fill = change.NewValue;
                if (!fill)
                    fill = this.Fill;
                fill.SetupBrush(null, null);
                shape.setAttribute("fill", fill.ToHtml5Object());
            } else if (propd._ID === Shape.StrokeProperty._ID) {
                var stroke = change.NewValue;
                if (!stroke)
                    stroke = this.Stroke;
                stroke.SetupBrush(null, null);
                shape.setAttribute("stroke", stroke.ToHtml5Object());
            } else if (propd._ID === Shape.StrokeThicknessProperty._ID) {
                shape.setAttribute("stroke-width", change.NewValue);
            } else if (propd._ID === Shape.StrokeDashArrayProperty._ID) {
                shape.setAttribute("stroke-dasharray", serializeDashArray(change.NewValue));
            } else if (propd._ID === Shape.StrokeDashOffsetProperty._ID) {
                shape.setAttribute("stroke-dashoffset", change.NewValue);
            } else if (propd._ID === Shape.StrokeLineJoinProperty._ID) {
                switch (change.NewValue) {
                    case Miter:
                        shape.setAttribute("stroke-linejoin", "miter");
                        break;
                    case Bevel:
                        shape.setAttribute("stroke-linejoin", "bevel");
                        break;
                    case Round:
                        shape.setAttribute("stroke-linejoin", "round");
                        break;
                }
            } else if (propd._ID === Shape.StrokeMiterLimitProperty._ID) {
                shape.setAttribute("stroke-miterlimit", change.NewValue);
            }
        };
    }
    namespace.Shape = Nullstone.FinishCreate(Shape);
})(Nullstone.Namespace("Fayde.Shapes"));

(function (namespace) {
    var Border = Nullstone.Create("Border", Fayde.FrameworkElement);
    Border.BackgroundProperty = DependencyProperty.RegisterCore("Background", function () { return Fayde.Media.Brush; }, Border);
    Border.BorderBrushProperty = DependencyProperty.RegisterCore("BorderBrush", function () { return Fayde.Media.Brush; }, Border);
    Border.BorderThicknessProperty = DependencyProperty.RegisterFull("BorderThickness", function () { return Thickness; }, Border, new Thickness(0), undefined, undefined, undefined, undefined, Border._ThicknessValidator);
    Border.ChildProperty = DependencyProperty.RegisterCore("Child", function () { return Fayde.UIElement; }, Border);
    Border.CornerRadiusProperty = DependencyProperty.RegisterFull("CornerRadius", function () { return CornerRadius; }, Border, new CornerRadius(0), undefined, undefined, undefined, undefined, Border._CornerRadiusValidator);
    Border.PaddingProperty = DependencyProperty.RegisterFull("Padding", function () { return Thickness; }, Border, new Thickness(0), undefined, undefined, undefined, undefined, Border._ThicknessValidator);
    Nullstone.AutoProperties(Border, [
        Border.BackgroundProperty,
        Border.BorderBrushProperty,
        Border.BorderThicknessProperty,
        Border.ChildProperty,
        Border.CornerRadiusProperty,
        Border.PaddingProperty
    ]);
    Border.Annotations = {
        ContentProperty: Border.ChildProperty
    };
    Border.Instance.IsLayoutContainer = function () { return true; };
    Border.Instance._MeasureOverrideWithError = function (availableSize, error) {
        var desired = new Size();
        var border = this.Padding.Plus(this.BorderThickness);
        var walker = new Fayde._VisualTreeWalker(this);
        var child;
        while (child = walker.Step()) {
            child._MeasureWithError(availableSize.ShrinkByThickness(border), error);
            desired = child._DesiredSize;
        }
        desired = desired.GrowByThickness(border);
        desired = desired.Min(availableSize);
        return desired;
    };
    Border.Instance._ArrangeOverrideWithError = function (finalSize, error) {
        var border = this.Padding.Plus(this.BorderThickness);
        var arranged = finalSize;
        var walker = new Fayde._VisualTreeWalker(this);
        var child;
        while (child = walker.Step()) {
            var childRect = new Rect(0, 0, finalSize.Width, finalSize.Height);
            childRect = childRect.ShrinkByThickness(border);
            child._ArrangeWithError(childRect, error);
            arranged = new Size(childRect.Width, childRect.Height).GrowBy(border);
            arranged = arranged.Max(finalSize);
        }
        return finalSize;
    };
    Border.Instance._Render = function (ctx, region) {
        var borderBrush = this.BorderBrush;
        var extents = this._Extents;
        var backgroundBrush = this.Background;
        if (!backgroundBrush && !borderBrush)
            return;
        if (extents.IsEmpty())
            return;
        var thickness = this.BorderThickness;
        var fillOnly = !borderBrush || thickness.IsEmpty();
        if (fillOnly && !backgroundBrush)
            return;
        ctx.Save();
        this._RenderLayoutClip(ctx);
        if (fillOnly)
            this._RenderFillOnly(ctx, extents, backgroundBrush, thickness, this.CornerRadius);
        else if (thickness.IsBalanced())
            this._RenderBalanced(ctx, extents, backgroundBrush, borderBrush, thickness, this.CornerRadius);
        else
            this._RenderUnbalanced(ctx, extents, backgroundBrush, borderBrush, thickness, this.CornerRadius);
        ctx.Restore();
    };
    Border.Instance._RenderFillOnly = function (ctx, extents, backgroundBrush, thickness, cornerRadius) {
        var fillExtents = thickness.IsEmpty() ? extents : extents.ShrinkByThickness(thickness);
        if (cornerRadius.IsZero()) {
            ctx.FillRect(backgroundBrush, fillExtents);
            return;
        }
        var rawPath = new Fayde.Shapes.RawPath();
        rawPath.RoundedRectFull(fillExtents.X, fillExtents.Y, fillExtents.Width, fillExtents.Height,
            cornerRadius.TopLeft, cornerRadius.TopRight, cornerRadius.BottomRight, cornerRadius.BottomLeft);
        rawPath.Draw(ctx);
        ctx.Fill(backgroundBrush, fillExtents);
    };
    Border.Instance._RenderBalanced = function (ctx, extents, backgroundBrush, borderBrush, thickness, cornerRadius) {
        var full = thickness.Left;
        var half = full * 0.5;
        var strokeExtents = extents.ShrinkBy(half, half, half, half);
        var fillExtents = extents.ShrinkBy(full, full, full, full);
        if (cornerRadius.IsZero()) {
            if (backgroundBrush) {
                ctx.StrokeAndFillRect(borderBrush, thickness.Left, strokeExtents, backgroundBrush, fillExtents);
            } else {
                ctx.Rect(fillExtents);
                ctx.Stroke(borderBrush, thickness.Left, extents);
            }
        } else {
            var rawPath = new Fayde.Shapes.RawPath();
            rawPath.RoundedRectFull(strokeExtents.X, strokeExtents.Y, strokeExtents.Width, strokeExtents.Height,
                cornerRadius.TopLeft, cornerRadius.TopRight, cornerRadius.BottomRight, cornerRadius.BottomLeft);
            rawPath.Draw(ctx);
            if (backgroundBrush)
                ctx.Fill(backgroundBrush, fillExtents);
            ctx.Stroke(borderBrush, thickness.Left, extents);
        }
    };
    Border.Instance._RenderUnbalanced = function (ctx, extents, backgroundBrush, borderBrush, thickness, cornerRadius) {
        var hasCornerRadius = !cornerRadius.IsZero();
        var innerExtents = extents.ShrinkByThickness(thickness);
        var innerPath = new Fayde.Shapes.RawPath();
        var outerPath = new Fayde.Shapes.RawPath();
        if (hasCornerRadius) {
            outerPath.RoundedRectFull(0, 0, extents.Width, extents.Height,
                cornerRadius.TopLeft, cornerRadius.TopRight, cornerRadius.BottomRight, cornerRadius.BottomLeft);
            innerPath.RoundedRectFull(innerExtents.X - extents.X, innerExtents.Y - extents.Y, innerExtents.Width, innerExtents.Height,
                cornerRadius.TopLeft, cornerRadius.TopRight, cornerRadius.BottomRight, cornerRadius.BottomLeft);
        } else {
            outerPath.Rect(0, 0, extents.Width, extents.Height);
            innerPath.Rect(innerExtents.X - extents.X, innerExtents.Y - extents.Y, innerExtents.Width, innerExtents.Height);
        }
        var tmpCanvas = document.createElement("canvas");
        tmpCanvas.width = extents.Width;
        tmpCanvas.height = extents.Height;
        var tmpCtx = tmpCanvas.getContext("2d");
        outerPath.Draw(tmpCtx);
        borderBrush.SetupBrush(tmpCtx, extents);
        tmpCtx.fillStyle = borderBrush.ToHtml5Object();
        tmpCtx.fill();
        tmpCtx.globalCompositeOperation = "xor";
        innerPath.Draw(tmpCtx);
        tmpCtx.fill();
        ctx.CanvasContext.drawImage(tmpCanvas, extents.X, extents.Y);
        DrawDebug("Draw Image (Border)");
        innerPath.Draw(ctx);
        if (backgroundBrush)
            ctx.Fill(backgroundBrush, innerExtents);
    };
    Border.Instance._CanFindElement = function () {
        return this.Background != null || this.BorderBrush != null;
    };
    if (!Fayde.IsCanvasEnabled) {
        Border.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Border) {
                this._OnPropertyChanged$FrameworkElement(args, error)
                return;
            }
            var ivprop = false;
            switch (args.Property._ID) {
                case Border.ChildProperty._ID:
                    if (args.OldValue && args.OldValue instanceof Fayde.UIElement) {
                        this._ElementRemoved(args.OldValue);
                        this._SubtreeObject = null;
                        if (args.OldValue instanceof Fayde.FrameworkElement) {
                            args.OldValue._SetLogicalParent(null, error);
                            if (error.IsErrored())
                                return;
                        }
                    }
                    if (args.NewValue && args.NewValue instanceof Fayde.UIElement) {
                        this._SubtreeObject = args.NewValue;
                        this._ElementAdded(args.NewValue);
                        if (args.NewValue instanceof Fayde.FrameworkElement) {
                            var logicalParent = args.NewValue._GetLogicalParent();
                            if (logicalParent && !Nullstone.RefEquals(logicalParent, this)) {
                                error.SetErrored(BError.Argument, "Content is already a child of another element.");
                                return;
                            }
                            args.NewValue._SetLogicalParent(this, error);
                            if (error.IsErrored())
                                return;
                        }
                    }
                    break;
                case Border.BackgroundProperty._ID:
                case Border.BorderThicknessProperty._ID:
                case Border.BorderBrushProperty._ID:
                case Border.CornerRadiusProperty._ID:
                case Border.PaddingProperty._ID:
                    ivprop = true;
                    break;
            }
            if (ivprop)
                this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            this.PropertyChanged.Raise(this, args);
        };
    }
    if (Fayde.IsCanvasEnabled) {
        Border.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Border) {
                this._OnPropertyChanged$FrameworkElement(args, error)
                return;
            }
            switch (args.Property._ID) {
                case Border.ChildProperty._ID:
                    if (args.OldValue && args.OldValue instanceof Fayde.UIElement) {
                        this._ElementRemoved(args.OldValue);
                        this._SubtreeObject = null;
                        if (args.OldValue instanceof Fayde.FrameworkElement) {
                            args.OldValue._SetLogicalParent(null, error);
                            if (error.IsErrored())
                                return;
                        }
                    }
                    if (args.NewValue && args.NewValue instanceof Fayde.UIElement) {
                        this._SubtreeObject = args.NewValue;
                        this._ElementAdded(args.NewValue);
                        if (args.NewValue instanceof Fayde.FrameworkElement) {
                            var logicalParent = args.NewValue._GetLogicalParent();
                            if (logicalParent && !Nullstone.RefEquals(logicalParent, this)) {
                                error.SetErrored(BError.Argument, "Content is already a child of another element.");
                                return;
                            }
                            args.NewValue._SetLogicalParent(this, error);
                            if (error.IsErrored())
                                return;
                        }
                    }
                    this._UpdateBounds();
                    this._InvalidateMeasure();
                    break;
                case Border.PaddingProperty._ID:
                case Border.BorderThicknessProperty._ID:
                    this._InvalidateMeasure();
                    break;
                case Border.BackgroundProperty._ID:
                case Border.BorderBrushProperty._ID:
                    this._Invalidate();
                    break;
            }
            this.PropertyChanged.Raise(this, args);
        };
        Border.Instance._OnSubPropertyChanged = function (propd, sender, args) {
            if (propd && (propd._ID === Border.BackgroundProperty._ID || propd._ID === Border.BorderBrushProperty._ID)) {
                this._Invalidate();
            } else {
                this._OnSubPropertyChanged$FrameworkElement(propd, sender, args);
            }
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        Border.Instance.ApplyHtmlChange = function (change) {
            var propd = change.Property;
            if (propd.OwnerType !== Border) {
                this.ApplyHtmlChange$FrameworkElement(change);
                return;
            }
            var rootEl = this.GetRootHtmlElement();
            var contentEl = rootEl.firstChild;
            if (propd._ID === Border.BackgroundProperty._ID) {
                var brush = change.NewValue;
                if (!brush)
                    brush = this.Background;
                brush.SetupBrush(null, null);
                contentEl.style.background = brush.ToHtml5Object();
            }
            if (propd._ID === Border.BorderBrushProperty._ID) {
                var brush = change.NewValue;
                if (!brush)
                    brush = this.BorderBrush;
                brush.SetupBrush(null, null);
                contentEl.style.borderStyle = "solid";
                contentEl.style.borderColor = brush.ToHtml5Object();
            }
            if (propd._ID === Border.BorderThicknessProperty._ID
                || propd._ID === Border.CornerRadiusProperty._ID) {
                var thickness = this.BorderThickness;
                var radius = this.CornerRadius;
                contentEl.style.borderWidth = thickness.Top + "px " + thickness.Right + "px " + thickness.Bottom + "px " + thickness.Left + "px";
                var halfThickness = new Thickness(thickness.Left * 0.5, thickness.Top * 0.5, thickness.Right * 0.5, thickness.Bottom * 0.5);
                var htmlRadius = new CornerRadius(
                    radius.TopLeft + (halfThickness.Top + halfThickness.Left) / 2,
                    radius.TopRight + (halfThickness.Top + halfThickness.Right) / 2,
                    radius.BottomRight + (halfThickness.Bottom + halfThickness.Right) / 2,
                    radius.BottomLeft + (halfThickness.Bottom + halfThickness.Left) / 2);
                contentEl.style.borderRadius = htmlRadius.TopLeft + "px " + htmlRadius.TopRight + "px " + htmlRadius.BottomRight + "px " + htmlRadius.BottomLeft + "px";
            }
        };
        Border.Instance.CalculateAdjustedWidth = function (width) {
            var marginLeft = isNaN(this.Margin.Left) ? 0 : this.Margin.Left;
            var marginRight = isNaN(this.Margin.Right) ? 0 : this.Margin.Right;
            var borderLeft = isNaN(this.BorderThickness.Left) ? 0 : this.BorderThickness.Left;
            var borderRight = isNaN(this.BorderThickness.Right) ? 0 : this.BorderThickness.Right;
            return width + marginLeft + marginRight + borderLeft + borderRight;
        };
        Border.Instance.CalculateAdjustedHeight = function (height) {
            var marginTop = isNaN(this.Margin.Top) ? 0 : this.Margin.Top;
            var marginBottom = isNaN(this.Margin.Bottom) ? 0 : this.Margin.Bottom;
            var borderTop = isNaN(this.BorderThickness.Top) ? 0 : this.BorderThickness.Top;
            var borderBottom = isNaN(this.BorderThickness.Bottom) ? 0 : this.BorderThickness.Bottom;
            return height + marginTop + marginBottom + borderTop + borderBottom;
        };
    }
    Border._ThicknessValidator = function () {
    };
    namespace.Border = Nullstone.FinishCreate(Border);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ColumnDefinitionCollection = Nullstone.Create("ColumnDefinitionCollection", Fayde.DependencyObjectCollection);
    ColumnDefinitionCollection.Instance.AddedToCollection = function (value, error) {
        if (this.Contains(value)) {
            error.SetErrored(BError.Argument, "ColumnDefinition is already a member of this collection.");
            return false;
        }
        return this.AddedToCollection$DependencyObjectCollection(value, error);
    };
    ColumnDefinitionCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.ColumnDefinition;
    };
    namespace.ColumnDefinitionCollection = Nullstone.FinishCreate(ColumnDefinitionCollection);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ContentPresenter = Nullstone.Create("ContentPresenter", Fayde.FrameworkElement);
    ContentPresenter.ContentProperty = DependencyProperty.Register("Content", function () { return Object; }, ContentPresenter);
    ContentPresenter.ContentTemplateProperty = DependencyProperty.Register("ContentTemplate", function () { return namespace.ControlTemplate; }, ContentPresenter);
    Nullstone.AutoProperties(ContentPresenter, [
        ContentPresenter.ContentProperty,
        ContentPresenter.ContentTemplateProperty
    ]);
    ContentPresenter.Instance._CreateFallbackTemplate = function () {
        return new namespace.ControlTemplate(ContentPresenter, {
            Type: namespace.Grid,
            Children: [
                {
                    Type: namespace.TextBlock,
                    Props: {
                        Text: new Fayde.BindingMarkup()
                    }
                }
            ]
        });
    };
    ContentPresenter.Instance._GetFallbackRoot = function () {
        if (this._FallbackRoot == null) {
            if (!ContentPresenter._FallbackTemplate)
                ContentPresenter._FallbackTemplate = this._CreateFallbackTemplate();
            this._FallbackRoot = ContentPresenter._FallbackTemplate.GetVisualTree(this);
        }
        return this._FallbackRoot;
    };
    ContentPresenter.Instance._GetDefaultTemplateCallback = function () {
        var templateOwner = Nullstone.As(this.TemplateOwner, namespace.ContentControl);
        if (templateOwner != null) {
            if (this.$ReadLocalValue(ContentPresenter.ContentProperty) instanceof Fayde.UnsetValue) {
                this.$SetValue(ContentPresenter.ContentProperty,
                    new Fayde.TemplateBindingExpression(namespace.ContentControl.ContentProperty, ContentPresenter.ContentProperty));
            }
            if (this.$ReadLocalValue(ContentPresenter.ContentTemplateProperty) instanceof Fayde.UnsetValue) {
                this.$SetValue(ContentPresenter.ContentTemplateProperty,
                    new Fayde.TemplateBindingExpression(namespace.ContentControl.ContentTemplateProperty, ContentPresenter.ContentTemplateProperty));
            }
        }
        var template = Nullstone.As(this.ContentTemplate, Fayde.DataTemplate);
        if (template != null) {
            this._ContentRoot = Nullstone.As(template.GetVisualTree(this), Fayde.UIElement);
        } else {
            var content = this.Content;
            this._ContentRoot = Nullstone.As(content, Fayde.UIElement);
            if (this._ContentRoot == null && content != null)
                this._ContentRoot = this._GetFallbackRoot();
        }
        return this._ContentRoot;
    };
    ContentPresenter.Instance._ClearRoot = function () {
        if (this._ContentRoot != null)
            this._ElementRemoved(this._ContentRoot);
        this._ContentRoot = null;
    };
    ContentPresenter.Instance.InvokeLoaded = function () {
        if (Nullstone.Is(this.Content, Fayde.UIElement))
            this.$ClearValue(Fayde.FrameworkElement.DataContextProperty);
        else
            this.DataContext = this.Content;
        this.InvokeLoaded$FrameworkElement();
    };
    ContentPresenter.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== ContentPresenter) {
            this._OnPropertyChanged$FrameworkElement(args, error);
            return;
        }
        if (args.Property._ID === ContentPresenter.ContentProperty._ID) {
            if ((args.NewValue && args.NewValue instanceof Fayde.UIElement)
                || (args.OldValue && args.OldValue instanceof Fayde.UIElement)) {
                this._ClearRoot();
            }
            if (args.NewValue && !(args.NewValue instanceof Fayde.UIElement))
                this._SetValue(Fayde.FrameworkElement.DataContextProperty, args.NewValue);
            else
                this._ClearValue(Fayde.FrameworkElement.DataContextProperty);
            this._InvalidateMeasure();
        } else if (args.Property._ID === ContentPresenter.ContentTemplateProperty._ID) {
            this._ClearRoot();
            this._InvalidateMeasure();
        }
        this.PropertyChanged.Raise(this, args);
    };
    ContentPresenter.Annotations = {
        ContentProperty: ContentPresenter.ContentProperty
    };
    namespace.ContentPresenter = Nullstone.FinishCreate(ContentPresenter);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var Control = Nullstone.Create("Control", Fayde.FrameworkElement);
    Control.Instance.Init = function () {
        this.Init$FrameworkElement();
        this.AddProvider(new Fayde._InheritedIsEnabledPropertyValueProvider(this));
    };
    Control.BackgroundProperty = DependencyProperty.RegisterCore("Background", function () { return Fayde.Media.Brush; }, Control);
    Control.BorderBrushProperty = DependencyProperty.RegisterCore("BorderBrush", function () { return Fayde.Media.Brush; }, Control);
    Control.BorderThicknessProperty = DependencyProperty.RegisterCore("BorderThickness", function () { return Thickness; }, Control, new Thickness());
    Control.FontFamilyProperty = DependencyProperty.RegisterInheritable("FontFamily", function () { return String; }, Control, Font.DEFAULT_FAMILY, undefined, undefined, _Inheritable.FontFamily);
    Control.FontSizeProperty = DependencyProperty.RegisterInheritable("FontSize", function () { return Number; }, Control, Font.DEFAULT_SIZE, undefined, undefined, _Inheritable.FontSize);
    Control.FontStretchProperty = DependencyProperty.RegisterInheritable("FontStretch", function () { return String; }, Control, Font.DEFAULT_STRETCH, undefined, undefined, _Inheritable.FontStretch);
    Control.FontStyleProperty = DependencyProperty.RegisterInheritable("FontStyle", function () { return String; }, Control, Font.DEFAULT_STYLE, undefined, undefined, _Inheritable.FontStyle);
    Control.FontWeightProperty = DependencyProperty.RegisterInheritable("FontWeight", function () { return new Enum(Fayde.FontWeight); }, Control, Font.DEFAULT_WEIGHT, undefined, undefined, _Inheritable.FontWeight);
    Control.ForegroundProperty = DependencyProperty.RegisterInheritable("Foreground", function () { return Fayde.Media.Brush; }, Control, undefined, undefined, { GetValue: function () { return new Fayde.Media.SolidColorBrush(new Color(0, 0, 0, 1.0)); } }, _Inheritable.Foreground);
    Control.HorizontalContentAlignmentProperty = DependencyProperty.RegisterCore("HorizontalContentAlignment", function () { return new Enum(Fayde.HorizontalAlignment); }, Control, Fayde.HorizontalAlignment.Center);
    Control.IsEnabledProperty = DependencyProperty.RegisterCore("IsEnabled", function () { return Boolean; }, Control, true, function (d, args, error) { d.OnIsEnabledChanged(args); });
    Control.IsTabStopProperty = DependencyProperty.RegisterCore("IsTabStop", function () { return Boolean; }, Control, true);
    Control.PaddingProperty = DependencyProperty.RegisterCore("Padding", function () { return Thickness; }, Control, new Thickness());
    Control.TabIndexProperty = DependencyProperty.RegisterCore("TabIndex", function () { return Number; }, Control, Number.MAX_VALUE);
    Control.TabNavigationProperty = DependencyProperty.RegisterCore("TabNavigation", function () { return Number; }, Control);
    Control.TemplateProperty = DependencyProperty.RegisterCore("Template", function () { return namespace.ControlTemplate; }, Control);
    Control.VerticalContentAlignmentProperty = DependencyProperty.RegisterCore("VerticalContentAlignment", function () { return new Enum(Fayde.VerticalAlignment); }, Control, Fayde.VerticalAlignment.Center);
    Control.DefaultStyleKeyProperty = DependencyProperty.RegisterCore("DefaultStyleKey", function () { return Function; }, Control);
    Control.IsTemplateItemProperty = DependencyProperty.RegisterAttachedCore("IsTemplateItem", function () { return Boolean; }, Control, false);
    Control.GetIsTemplateItem = function (d) {
        return d.$GetValue(Control.IsTemplateItemProperty);
    };
    Control.SetIsTemplateItem = function (d, value) {
        d.$SetValue(Control.IsTemplateItemProperty, value);
    };
    Nullstone.AutoProperties(Control, [
        Control.BackgroundProperty,
        Control.BorderBrushProperty,
        Control.BorderThicknessProperty,
        Control.FontFamilyProperty,
        Control.FontSizeProperty,
        Control.FontStretchProperty,
        Control.FontStyleProperty,
        Control.FontWeightProperty,
        Control.ForegroundProperty,
        Control.HorizontalContentAlignmentProperty,
        Control.IsEnabledProperty,
        Control.IsTabStopProperty,
        Control.PaddingProperty,
        Control.TabIndexProperty,
        Control.TabNavigationProperty,
        Control.TemplateProperty,
        Control.VerticalContentAlignmentProperty,
        Control.DefaultStyleKeyProperty
    ]);
    Nullstone.Property(Control, "IsFocused", {
        get: function () {
            return this._IsFocused;
        }
    });
    Control.Instance.GetDefaultStyle = function () {
        return null;
    };
    Control.Instance.GetTemplateChild = function (name) {
        if (this._TemplateRoot)
            return this._TemplateRoot.FindName(name);
        return null;
    };
    Control.Instance.SetVisualParent = function (visualParent) {
        if (this.GetVisualParent() != visualParent) {
            this.SetVisualParent$FrameworkElement(visualParent);
            this._Providers[_PropertyPrecedence.IsEnabled].SetDataSource(this._GetLogicalParent());
        }
    };
    Control.Instance._ElementAdded = function (item) {
        var error = new BError();
        item._AddParent(this, true, error);
        this._SubtreeObject = item;
        this._ElementAdded$FrameworkElement(item);
    };
    Control.Instance._ElementRemoved = function (item) {
        var error;
        if (this._TemplateRoot) {
            this._TemplateRoot._RemoveParent(this, error);
            this._TemplateRoot = null;
        }
        item._RemoveParent(this, error);
        this._ElementRemoved$FrameworkElement(item);
    };
    Control.Instance.IsLayoutContainer = function () {
        return true;
    };
    Control.Instance.CanCaptureMouse = function () {
        return this.IsEnabled;
    };
    Control.Instance._CanFindElement = function () {
        return this.IsEnabled;
    };
    Control.Instance._InsideObject = function (x, y) {
        return false;
    };
    Control.Instance._HitTestPoint = function (ctx, p, uielist) {
        if (this.IsEnabled)
            this._HitTestPoint$FrameworkElement(ctx, p, uielist);
    };
    Control.Instance._UpdateIsEnabledSource = function (control) {
        this._Providers[_PropertyPrecedence.IsEnabled].SetDataSource(control);
    };
    Control.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== Control) {
            this._OnPropertyChanged$FrameworkElement(args, error);
            return;
        }
        if (args.Property._ID === Control.TemplateProperty._ID) {
            var subtree = this._SubtreeObject;
            if (subtree)
                this._ElementRemoved(subtree);
            this._InvalidateMeasure();
        } else if (args.Property._ID === Control.PaddingProperty._ID
            || args.Property._ID === Control.BorderThicknessProperty._ID) {
            this._InvalidateMeasure();
        } else if (args.Property._ID === Control.IsEnabledProperty._ID) {
            if (!args.NewValue) {
            }
        } else if (args.Property._ID === Control.HorizontalContentAlignmentProperty._ID
            || args.Property._ID === Control.VerticalContentAlignmentProperty._ID) {
            this._InvalidateArrange();
        }
        this.PropertyChanged.Raise(this, args);
    };
    Control.Instance._OnLogicalParentChanged = function (oldParent, newParent) {
        this._OnLogicalParentChanged$FrameworkElement(oldParent, newParent);
        this._Providers[_PropertyPrecedence.IsEnabled].SetDataSource(newParent);
    };
    Control.Instance._OnIsAttachedChanged = function (value) {
        this._OnIsAttachedChanged$FrameworkElement(value);
        this._Providers[_PropertyPrecedence.IsEnabled].SetDataSource(this._GetLogicalParent());
        if (!value)
            Fayde.Media.VisualStateManager.VisualStateManager.DestroyStoryboards(this);
    };
    Control.Instance._DoApplyTemplateWithError = function (error) {
        var t = this.Template;
        if (!t)
            return this._DoApplyTemplateWithError$FrameworkElement(error);
        var root = t._GetVisualTreeWithError(this, error);
        if (root && !(root instanceof Fayde.UIElement)) {
            Warn("Root element in template was not a UIElement.");
            root = null;
        }
        if (!root)
            return this._DoApplyTemplateWithError$FrameworkElement(error);
        if (this._TemplateRoot != null && !Nullstone.RefEquals(this._TemplateRoot, root)) {
            this._TemplateRoot._RemoveParent(this, null);
            this._TemplateRoot = null;
        }
        this._TemplateRoot = root;
        this._ElementAdded(this._TemplateRoot);
        if (this._IsLoaded) {
        }
        return true;
    };
    Control.Instance.OnMouseLeftButtonDown = function (sender, args) { };
    Control.Instance.Focus = function (recurse) {
        recurse = recurse === undefined || recurse === true;
        if (!this._IsAttached)
            return false;
        var surface = App.Instance.MainSurface;
        var walker = new Fayde._DeepTreeWalker(this);
        var uie;
        while (uie = walker.Step()) {
            if (uie.Visibility !== Fayde.Visibility.Visible) {
                walker.SkipBranch();
                continue;
            }
            var c = Nullstone.As(uie, Control);
            if (c == null)
                continue;
            if (!c.IsEnabled) {
                if (!recurse)
                    return false;
                walker.SkipBranch();
                continue;
            }
            var loaded = false;
            for (var check = this; !loaded && check != null; check = check.GetVisualParent())
                loaded = loaded || check._IsLoaded;
            if (loaded && c._GetRenderVisible() && c.IsTabStop)
                return surface._FocusElement(c);
            if (!recurse)
                return false;
        }
        return false;
    };
    Control.Instance.OnGotFocus = function (e) {
        this._IsFocused = true;
        this.OnGotFocus$FrameworkElement(e);
    };
    Control.Instance.OnLostFocus = function (e) {
        this._IsFocused = false;
        this.OnLostFocus$FrameworkElement(e);
    };
    Control.Instance.OnIsEnabledChanged = function (args) {
        if (!this.IsEnabled)
            this.$SetValueInternal(Fayde.UIElement.IsMouseOverProperty, false);
    }
    Control.Instance.$UpdateVisualState = function (useTransitions) {
        useTransitions = useTransitions !== false;
        var states = this.$GetVisualStateNamesToActivate();
        for (var i = 0; i < states.length; i++) {
            Fayde.Media.VisualStateManager.VisualStateManager.GoToState(this, states[i], useTransitions);
        }
    };
    Control.Instance.$GetVisualStateNamesToActivate = function () {
        var commonState = this.$GetVisualStateCommon();
        var focusedState = this.$GetVisualStateFocus();
        return [commonState, focusedState];
    };
    Control.Instance.$GetVisualStateCommon = function () {
        if (!this.IsEnabled) {
            return "Disabled";
        } else if (this.IsMouseOver) {
            return "MouseOver";
        } else {
            return "Normal";
        }
    };
    Control.Instance.$GetVisualStateFocus = function () {
        if (this.IsFocused && this.IsEnabled)
            return "Focused";
        else
            return "Unfocused";
    };
    namespace.Control = Nullstone.FinishCreate(Control);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var Image = Nullstone.Create("Image", Fayde.FrameworkElement);
    Image.Instance.Init = function () {
        this.Init$FrameworkElement();
        this.ImageFailed = new MulticastEvent();
        this.ImageOpened = new MulticastEvent();
    };
    Image.SourceProperty = DependencyProperty.RegisterFull("Source", function () { return Fayde.Media.Imaging.ImageSource; }, Image, undefined, undefined, { GetValue: function (propd, obj) { return new Fayde.Media.Imaging.BitmapImage(); } });
    Image.StretchProperty = DependencyProperty.RegisterCore("Stretch", function () { return new Enum(Fayde.Media.Stretch); }, Image, Fayde.Media.Stretch.Uniform);
    Nullstone.AutoProperties(Image, [
        Image.StretchProperty
    ]);
    Nullstone.AutoProperty(Image, Image.SourceProperty, function (value) {
        if (value instanceof Uri)
            return new Fayde.Media.Imaging.BitmapImage(value);
        return value;
    });
    Image.Instance._MeasureOverrideWithError = function (availableSize, error) {
        var desired = availableSize;
        var shapeBounds = new Rect();
        var source = this.Source;
        var sx = sy = 0.0;
        if (source != null)
            shapeBounds = new Rect(0, 0, source.PixelWidth, source.PixelHeight);
        if (!isFinite(desired.Width))
            desired.Width = shapeBounds.Width;
        if (!isFinite(desired.Height))
            desired.Height = shapeBounds.Height;
        if (shapeBounds.Width > 0)
            sx = desired.Width / shapeBounds.Width;
        if (shapeBounds.Height > 0)
            sy = desired.Height / shapeBounds.Height;
        if (!isFinite(availableSize.Width))
            sx = sy;
        if (!isFinite(availableSize.Height))
            sy = sx;
        switch (this.Stretch) {
            case Fayde.Media.Stretch.Uniform:
                sx = sy = Math.min(sx, sy);
                break;
            case Fayde.Media.Stretch.UniformToFill:
                sx = sy = Math.max(sx, sy);
                break;
            case Fayde.Media.Stretch.Fill:
                if (!isFinite(availableSize.Width))
                    sx = sy;
                if (!isFinite(availableSize.Height))
                    sy = sx;
                break;
            case Fayde.Media.Stretch.None:
                sx = sy = 1.0;
                break;
        }
        desired = new Size(shapeBounds.Width * sx, shapeBounds.Height * sy);
        return desired;
    };
    Image.Instance._ArrangeOverrideWithError = function (finalSize, error) {
        var arranged = finalSize;
        var shapeBounds = new Rect();
        var source = this.Source;
        var sx = 1.0;
        var sy = 1.0;
        if (source != null)
            shapeBounds = new Rect(0, 0, source.PixelWidth, source.PixelHeight);
        if (shapeBounds.Width === 0)
            shapeBounds.Width = arranged.Width;
        if (shapeBounds.Height === 0)
            shapeBounds.Height = arguments.Height;
        if (shapeBounds.Width !== arranged.Width)
            sx = arranged.Width / shapeBounds.Width;
        if (shapeBounds.Height !== arranged.Height)
            sy = arranged.Height / shapeBounds.Height;
        switch (this.Stretch) {
            case Fayde.Media.Stretch.Uniform:
                sx = sy = Math.min(sx, sy);
                break;
            case Fayde.Media.Stretch.UniformToFill:
                sx = sy = Math.max(sx, sy);
                break;
            case Fayde.Media.Stretch.None:
                sx = sy = 1.0;
                break;
            default:
                break;
        }
        arranged = new Size(shapeBounds.Width * sx, shapeBounds.Height * sy);
        return arranged;
    };
    Image.Instance._CanFindElement = function () { return true; };
    Image.Instance._InsideObject = function (ctx, x, y) {
        if (!this._InsideObject$FrameworkElement(ctx, x, y))
            return false;
        var source = this.Source;
        if (!source)
            return false;
        var stretch = this.Stretch;
        if (stretch === Fayde.Media.Stretch.Fill || stretch === Fayde.Media.Stretch.UniformToFill)
            return true;
        var metrics = this._CalculateRenderMetrics(source);
        if (!metrics)
            return null;
        var rect = new Rect(0, 0, source.PixelWidth, source.PixelHeight);
        rect = rect.Transform(metrics.Matrix);
        var np = new Point(x, y);
        this._TransformPoint(np);
        return rect.ContainsPoint(np);
    };
    Image.Instance._ComputeActualSize = function () {
        var result = this._ComputeActualSize$FrameworkElement();
        var parent = this.GetVisualParent();
        var source = this.Source;
        if (parent && !Nullstone.Is(parent, namespace.Canvas))
            if (this._ReadLocalValue(Fayde.LayoutInformation.LayoutSlotProperty) !== undefined)
                return result;
        if (source) {
            var available = new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
            available = this._ApplySizeConstraints(available);
            var error = new BError();
            result = this._MeasureOverrideWithError(available, error);
            result = this._ApplySizeConstraints(result);
        }
        return result;
    };
    Image.Instance._Render = function (ctx, region) {
        var source = this.Source;
        if (!source)
            return;
        source.Lock();
        var metrics = this._CalculateRenderMetrics(source);
        if (!metrics) {
            source.Unlock();
            return;
        }
        ctx.Save();
        if (metrics.Overlap !== RectOverlap.In || this._HasLayoutClip())
            this._RenderLayoutClip(ctx);
        ctx.PreTransform(metrics.Matrix);
        ctx.CanvasContext.drawImage(source._Image, 0, 0);
        DrawDebug("Image: [" + source._Image.src + "]");
        ctx.Restore();
        source.Unlock();
    };
    var computeMatrix = function (width, height, sw, sh, stretch, alignX, alignY) {
        var sx = width / sw;
        var sy = height / sh;
        if (width === 0)
            sx = 1.0;
        if (height === 0)
            sy = 1.0;
        if (stretch === Fayde.Media.Stretch.Fill) {
            return mat3.createScale(sx, sy);
        }
        var scale = 1.0;
        var dx = 0.0;
        var dy = 0.0;
        switch (stretch) {
            case Fayde.Media.Stretch.Uniform:
                scale = sx < sy ? sx : sy;
                break;
            case Fayde.Media.Stretch.UniformToFill:
                scale = sx < sy ? sy : sx;
                break;
            case Fayde.Media.Stretch.None:
                break;
        }
        switch (alignX) {
            case Fayde.Media.AlignmentX.Left:
                dx = 0.0;
                break;
            case Fayde.Media.AlignmentX.Center:
                dx = (width - (scale * sw)) / 2;
                break;
            case Fayde.Media.AlignmentX.Right:
            default:
                dx = width - (scale * sw);
                break;
        }
        switch (alignY) {
            case Fayde.Media.AlignmentY.Top:
                dy = 0.0;
                break;
            case Fayde.Media.AlignmentY.Center:
                dy = (height - (scale * sh)) / 2;
                break;
            case Fayde.Media.AlignmentY.Bottom:
            default:
                dy = height - (scale * sh);
                break;
        }
        var m = mat3.createScale(scale, scale);
        mat3.translate(m, dx, dy);
        return m;
    };
    Image.Instance._CalculateRenderMetrics = function (source) {
        var stretch = this.Stretch;
        var specified = new Size(this.ActualWidth, this.ActualHeight);
        var stretched = this._ApplySizeConstraints(specified);
        var adjust = !Rect.Equals(specified, this._RenderSize);
        var pixelWidth = source.PixelWidth;
        var pixelHeight = source.PixelHeight;
        if (pixelWidth === 0 || pixelHeight === 0)
            return null;
        if (stretch !== Fayde.Media.Stretch.UniformToFill)
            specified = specified.Min(stretched);
        var paint = new Rect(0, 0, specified.Width, specified.Height);
        var image = new Rect(0, 0, pixelWidth, pixelHeight);
        if (stretch === Fayde.Media.Stretch.None)
            paint = paint.Union(image);
        var matrix = computeMatrix(paint.Width, paint.Height, image.Width, image.Height,
            stretch, Fayde.Media.AlignmentX.Center, Fayde.Media.AlignmentY.Center);
        if (adjust) {
            var error = new BError();
            this._MeasureOverrideWithError(specified, error);
            paint = new Rect((stretched.Width - specified.Width) * 0.5, (stretched.Height - specified.Height) * 0.5, specified.Width, specified.Height);
        }
        var overlap = RectOverlap.In;
        if (stretch === Fayde.Media.Stretch.UniformToFill || adjust) {
            var bounds = new Rect(paint.RoundOut());
            var box = image.Transform(matrix).RoundIn();
            overlap = bounds.RectIn(box);
        }
        return {
            Matrix: matrix,
            Overlap: overlap
        };
    };
    if (!Fayde.IsCanvasEnabled) {
        Image.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Image) {
                this._OnPropertyChanged$FrameworkElement(args, error);
                return;
            }
            var ivprop = false;
            if (args.Property._ID === Image.SourceProperty._ID) {
                var oldBmpSrc = Nullstone.As(args.OldValue, Fayde.Media.Imaging.BitmapSource);
                if (oldBmpSrc) {
                    oldBmpSrc._ErroredCallback = null;
                    oldBmpSrc._LoadedCallback = null;
                }
                var newBmpSrc = Nullstone.As(args.NewValue, Fayde.Media.Imaging.BitmapSource);
                if (newBmpSrc) {
                    var i = this;
                    newBmpSrc._ErroredCallback = function () { i.ImageFailed.Raise(this, new EventArgs()); };
                    newBmpSrc._LoadedCallback = function () { i.ImageOpened.Raise(this, new EventArgs()); };
                }
                ivprop = true;
            }
            if (ivprop)
                this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            this.PropertyChanged.Raise(this, args);
        };
        Image.Instance._OnSubPropertyChanged = function (propd, sender, args) {
            if (propd && (propd._ID === Image.SourceProperty._ID)) {
                this.InvalidateProperty(propd, undefined, undefined);
                return;
            }
        };
    }
    if (Fayde.IsCanvasEnabled) {
        Image.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Image) {
                this._OnPropertyChanged$FrameworkElement(args, error);
                return;
            }
            if (args.Property._ID === Image.SourceProperty._ID) {
                var oldBmpSrc = Nullstone.As(args.OldValue, Fayde.Media.Imaging.BitmapSource);
                if (oldBmpSrc) {
                    oldBmpSrc._ErroredCallback = null;
                    oldBmpSrc._LoadedCallback = null;
                }
                var newBmpSrc = Nullstone.As(args.NewValue, Fayde.Media.Imaging.BitmapSource);
                if (newBmpSrc) {
                    var i = this;
                    newBmpSrc._ErroredCallback = function () { i.ImageFailed.Raise(this, new EventArgs()); };
                    newBmpSrc._LoadedCallback = function () { i.ImageOpened.Raise(this, new EventArgs()); };
                } else {
                    this._UpdateBounds();
                    this._Invalidate();
                }
                this._InvalidateMeasure();
            }
            this.PropertyChanged.Raise(this, args);
        };
        Image.Instance._OnSubPropertyChanged = function (propd, sender, args) {
            if (propd && (propd._ID === Image.SourceProperty._ID)) {
                this._InvalidateMeasure();
                this._Invalidate();
                return;
            }
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        Image.Instance.CreateHtmlObjectImpl = function () {
            var rootEl = document.createElement("div");
            rootEl.appendChild(document.createElement("div"));
            this.InitializeHtml(rootEl);
            return rootEl;
        };
        var applyImage = function (rootEl, parentIsFixedWidth, parentIsFixedHeight, source, stretch) {
            var imgEl = rootEl.firstChild;
            switch (stretch) {
                case Fayde.Media.Stretch.None:
                    var img = imgEl.appendChild(document.createElement("img"));
                    img.src = source._Image.src;
                    break;
                case Fayde.Media.Stretch.Fill:
                    break;
                case Fayde.Media.Stretch.Uniform:
                    imgEl.style.backgroundSize = "contain";
                    imgEl.style.backgroundRepeat = "no-repeat";
                    imgEl.style.backgroundPosition = "center";
                    imgEl.style.backgroundImage = "url('" + source._Image.src + "')";
                    break;
                case Fayde.Media.Stretch.UniformToFill:
                    break;
            }
        };
        Image.Instance.ApplyHtmlChanges = function (invalidations) {
            var imageChecks = [Image.StretchProperty, Image.SourceProperty];
            for (var i = 0; i < imageChecks.length; i++) {
                if (invalidations[imageChecks[i]._ID]) {
                    applyImage(this.GetRootHtmlElement(), this.GetParentIsFixedWidth(), this.GetParentIsFixedHeight(), this.Source, this.Stretch);
                    break;
                }
            }
            this.ApplyHtmlChanges$FrameworkElement(invalidations);
        };
    }
    namespace.Image = Nullstone.FinishCreate(Image);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ItemsControl = Nullstone.Create("ItemsControl", namespace.Control);
    ItemsControl.Instance.Init = function () {
        this.Init$Control();
        this.DefaultStyleKey = this.constructor;
        this._ItemContainerGenerator = new namespace.ItemContainerGenerator(this);
        this._ItemContainerGenerator.ItemsChanged.Subscribe(this.OnItemContainerGeneratorChanged, this);
    };
    ItemsControl.DisplayMemberPathProperty = DependencyProperty.RegisterCore("DisplayMemberPath", function () { return String; }, ItemsControl, null, function (d, args) { d.OnDisplayMemberPathChanged(args); });
    ItemsControl.ItemsProperty = DependencyProperty.RegisterCore("Items", function () { return Fayde.Controls.ItemCollection; }, ItemsControl);
    ItemsControl.ItemsPanelProperty = DependencyProperty.RegisterCore("ItemsPanel", function () { return namespace.ItemsPanelTemplate; }, ItemsControl);
    ItemsControl.ItemsSourceProperty = DependencyProperty.RegisterCore("ItemsSource", function () { return Object; }, ItemsControl, null, function (d, args) { d.OnItemsSourceChanged(args); });
    ItemsControl.ItemTemplateProperty = DependencyProperty.RegisterCore("ItemTemplate", function () { return Fayde.DataTemplate; }, ItemsControl, undefined, function (d, args) { d.OnItemTemplateChanged(args); });
    Nullstone.AutoProperties(ItemsControl, [
        ItemsControl.DisplayMemberPathProperty,
        ItemsControl.ItemsPanelProperty,
        ItemsControl.ItemTemplateProperty
    ]);
    Nullstone.Property(ItemsControl, "Items", {
        get: function () {
            var items = Nullstone.As(this.$GetValue(ItemsControl.ItemsProperty), Fayde.Controls.ItemCollection);
            if (items == null) {
                items = new Fayde.Controls.ItemCollection();
                this._itemsIsDataBound = false;
                items.ItemsChanged.Subscribe(this.InvokeItemsChanged, this);
                items.Clearing.Subscribe(this.OnItemsClearing, this);
                this.$SetValue(ItemsControl.ItemsProperty, items);
            }
            return items;
        }
    });
    Nullstone.Property(ItemsControl, "ItemsSource", {
        get: function () { return this.$GetValue(ItemsControl.ItemsSourceProperty); },
        set: function (value) {
            if (!this._itemsIsDataBound && this.Items.GetCount() > 0)
                throw new InvalidOperationException("Items collection must be empty before using ItemsSource");
            this.$SetValue(ItemsControl.ItemsSourceProperty, value);
        }
    });
    Nullstone.Property(ItemsControl, "ItemContainerGenerator", {
        get: function () { return this._ItemContainerGenerator; }
    });
    Nullstone.Property(ItemsControl, "$DisplayMemberTemplate", {
        get: function () {
            if (this._DisplayMemberTemplate == null) {
                var json = {
                    Type: namespace.Grid,
                    Children: [
                        {
                            Type: namespace.TextBlock,
                            Props: {
                                Text: new Fayde.BindingMarkup({ Path: this.DisplayMemberPath })
                            }
                        }
                    ]
                };
                this._DisplayMemberTemplate = new Fayde.DataTemplate(json);
            }
            return this._DisplayMemberTemplate;
        }
    });
    Nullstone.Property(ItemsControl, "$Panel", {
        get: function () {
            return this._Presenter == null ? null : this._Presenter._ElementRoot;
        }
    });
    ItemsControl.Annotations = {
        ContentProperty: "Items"
    };
    ItemsControl.GetItemsOwner = function (element) {
        var panel = Nullstone.As(element, namespace.Panel);
        if (panel == null || !panel.IsItemsHost)
            return null;
        var owner = Nullstone.As(panel.TemplateOwner, namespace.ItemsPresenter);
        if (owner != null)
            return Nullstone.As(owner.TemplateOwner, namespace.ItemsControl);
        return null;
    };
    ItemsControl.ItemsControlFromItemContainer = function (container) {
        var e = Nullstone.As(container, Fayde.FrameworkElement);
        if (e == null)
            return null;
        var itctl = Nullstone.As(e.Parent, ItemsControl);
        if (itctl == null)
            return ItemsControl.GetItemsOwner(e.Parent);
        if (itctl.IsItemItsOwnContainer(e))
            return itctl;
        return null;
    };
    ItemsControl.Instance._GetDefaultTemplate = function () {
        var presenter = this._Presenter;
        if (presenter == null) {
            presenter = new namespace.ItemsPresenter();
            presenter.TemplateOwner = this;
        }
        return presenter;
    };
    ItemsControl.Instance._SetItemsPresenter = function (presenter) {
        if (this._Presenter != null)
            this._Presenter._ElementRoot.Children.Clear();
        this._Presenter = presenter;
        this.AddItemsToPresenter(-1, 1, this.Items.GetCount());
    };
    ItemsControl.Instance.OnItemsSourceChanged = function (e) {
        if (!e.OldValue && Nullstone.Is(e.OldValue, Fayde.Collections.INotifyCollectionChanged)) {
            e.OldValue.CollectionChanged.Unsubscribe(this._CollectionChanged, this);
        }
        if (e.NewValue != null) {
            if (Nullstone.Is(e.NewValue, Fayde.Collections.INotifyCollectionChanged)) {
                e.NewValue.CollectionChanged.Subscribe(this._CollectionChanged, this);
            }
            this.Items._ReadOnly = true;
            this._itemsIsDataBound = true;
            this.Items._ClearImpl();
            var count = e.NewValue.length;
            for (var i = 0; i < count; i++) {
                this.Items._AddImpl(e.NewValue[i]);
            }
            this.OnItemsChanged(Fayde.Collections.NotifyCollectionChangedEventArgs.Reset());
        } else {
            this._itemsIsDataBound = false;
            this.Items._ReadOnly = false;
            this.Items._ClearImpl();
        }
        this._InvalidateMeasure();
    };
    ItemsControl.Instance._CollectionChanged = function (sender, e) {
        switch (e.Action) {
            case Fayde.Collections.NotifyCollectionChangedAction.Add:
                var count = e.NewItems.GetCount();
                for (var i = 0; i < count; i++) {
                    this.Items._InsertImpl(e.NewStartingIndex + 1, e.NewItems.GetValueAt(i));
                }
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Remove:
                var count = e.OldItems.GetCount();
                for (var i = 0; i < count; i++) {
                    this.Items._RemoveAtImpl(e.OldStartingIndex);
                }
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Replace:
                var count = e.NewItems.GetCount();
                for (var i = 0; i < count; i++) {
                    this.Items._SetItemImpl(e.NewStartingIndex + 1, e.NewItems.GetValueAt(i));
                }
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Reset:
                this.Items._ClearImpl();
                var count = this.ItemsSource.GetCount();
                for (var i = 0; i < count; i++) {
                    this.Items._AddImpl(this.ItemsSource.GetValueAt(i));
                }
                break;
        }
        this.OnItemsChanged(e);
    };
    ItemsControl.Instance.OnDisplayMemberPathChanged = function (e) {
        var items = this.Items;
        var count = items.GetCount();
        for (var i = 0; i < count; i++) {
            this.UpdateContentTemplateOnContainer(ItemContainerGenerator.ContainerFromIndex(i), items.GetValueAt(i));
        }
    };
    ItemsControl.Instance.ClearContainerForItem = function (element, item) { };
    ItemsControl.Instance.GetContainerForItem = function () {
        return new namespace.ContentPresenter();
    };
    ItemsControl.Instance.IsItemItsOwnContainer = function (item) {
        return item instanceof Fayde.FrameworkElement;
    };
    ItemsControl.Instance.OnItemsChanged = function (e) { };
    ItemsControl.Instance.OnItemsClearing = function (object, e) {
        this.SetLogicalParent(null, this.Items.ToArray());
    };
    ItemsControl.Instance.InvokeItemsChanged = function (object, e) {
        switch (e.Action) {
            case Fayde.Collections.NotifyCollectionChangedAction.Add:
                this.SetLogicalParent(this, e.NewItems);
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Remove:
                this.SetLogicalParent(null, e.OldItems);
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Replace:
                this.SetLogicalParent(null, e.OldItems);
                this.SetLogicalParent(this, e.NewItems);
                break;
        }
        this._ItemContainerGenerator.OnOwnerItemsItemsChanged(object, e);
        if (!this._itemsIsDataBound)
            this.OnItemsChanged(e);
    };
    ItemsControl.Instance.OnItemContainerGeneratorChanged = function (sender, e) {
        if (this._Presenter == null || this._Presenter._ElementRoot instanceof namespace.VirtualizingPanel)
            return;
        var panel = this._Presenter._ElementRoot;
        switch (e.Action) {
            case Fayde.Collections.NotifyCollectionChangedAction.Reset:
                var count = panel.Children.GetCount();
                if (count > 0)
                    this.RemoveItemsFromPresenter(0, 0, count);
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Add:
                this.AddItemsToPresenter(e.Position.index, e.Position.offset, e.ItemCount);
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Remove:
                this.RemoveItemsFromPresenter(e.Position.index, e.Position.offset, e.ItemCount);
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Replace:
                this.RemoveItemsFromPresenter(e.Position.index, e.Position.offset, e.ItemCount);
                this.AddItemsToPresenter(e.Position.index, e.Position.offset, e.ItemCount);
                break;
        }
    };
    ItemsControl.Instance.OnItemTemplateChanged = function (e) {
        var items = this.Items;
        var count = items.GetCount();
        for (var i = 0; i < count; i++) {
            this.UpdateContentTemplateOnContainer(this.ItemContainerGenerator.ContainerFromIndex(i), items.GetValueAt(i));
        }
    };
    ItemsControl.Instance.SetLogicalParent = function (parent, items) {
        if (this.ItemsSource != null)
            return;
        var error = new BError();
        var count = items.length;
        for (var i = 0; i < count; i++) {
            var fe = Nullstone.As(items[i], Fayde.FrameworkElement);
            if (fe == null)
                continue;
            this._SetLogicalParent(parent, error);
            if (error.IsErrored())
                throw error.CreateException();
        }
    };
    ItemsControl.Instance.AddItemsToPresenter = function (positionIndex, positionOffset, count) {
        if (this._Presenter == null || this._Presenter._ElementRoot == null || this._Presenter._ElementRoot instanceof namespace.VirtualizingPanel)
            return;
        var panel = this._Presenter._ElementRoot;
        var icg = this._ItemContainerGenerator;
        var newIndex = icg.IndexFromGeneratorPosition(positionIndex, positionOffset);
        var items = this.Items;
        var children = panel.Children;
        var p = icg.StartAt(positionIndex, positionOffset, 0, true);
        try {
            for (var i = 0; i < count; i++) {
                var item = items.GetValueAt(newIndex + i);
                var container = icg.GenerateNext({});
                if (container instanceof namespace.ContentControl)
                    container._ContentSetsParent = false;
                if (container instanceof Fayde.FrameworkElement && !(item instanceof Fayde.FrameworkElement))
                    container.DataContext = item;
                children.Insert(newIndex + i, container);
                icg.PrepareItemContainer(container);
            }
        } finally {
            icg.StopGeneration();
        }
    };
    ItemsControl.Instance.RemoveItemsFromPresenter = function (positionIndex, positionOffset, count) {
        if (this._Presenter == null || this._Presenter._ElementRoot == null || this._Presenter._ElementRoot instanceof namespace.VirtualizingPanel)
            return;
        var panel = this._Presenter._ElementRoot;
        while (count > 0) {
            panel.Children.RemoveAt(positionIndex);
            count--;
        }
    };
    ItemsControl.Instance.PrepareContainerForItem = function (element, item) {
        if (this.DisplayMemberPath != null && this.ItemTemplate != null)
            throw new InvalidOperationException("Cannot set 'DisplayMemberPath' and 'ItemTemplate' simultaenously");
        this.UpdateContentTemplateOnContainer(element, item);
    };
    ItemsControl.Instance.UpdateContentTemplateOnContainer = function (element, item) {
        if (Nullstone.RefEquals(element, item))
            return;
        var presenter = Nullstone.As(element, namespace.ContentPresenter);
        var control = Nullstone.As(element, namespace.ContentControl);
        var template;
        if (!(item instanceof Fayde.UIElement)) {
            template = this.ItemTemplate;
            if (template == null)
                template = this.$DisplayMemberTemplate;
        }
        if (presenter != null) {
            presenter.ContentTemplate = template;
            presenter.Content = item;
        } else if (control != null) {
            control.ContentTemplate = template;
            control.Content = item;
        }
    };
    namespace.ItemsControl = Nullstone.FinishCreate(ItemsControl);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ItemsPresenter = Nullstone.Create("ItemsPresenter", Fayde.FrameworkElement);
    Nullstone.Property(ItemsPresenter, "StackPanelFallbackTemplate", {
        get: function () {
            if (this._SPFT == null)
                this._SPFT = new namespace.ItemsPanelTemplate({ Type: namespace.StackPanel });
            return this._SPFT;
        }
    });
    Nullstone.Property(ItemsPresenter, "VirtualizingStackPanelFallbackTemplate", {
        get: function () {
            if (this._VSPFT == null)
                this._VSPFT = new namespace.ItemsPanelTemplate({ Type: namespace.VirtualizingStackPanel });
            return this._VSPFT;
        }
    });
    ItemsPresenter.Instance.OnApplyTemplate = function () {
        this.TemplateOwner._SetItemsPresenter(this);
        this.OnApplyTemplate$FrameworkElement();
    };
    ItemsPresenter.Instance._GetDefaultTemplateCallback = function () {
        var c = Nullstone.As(this.TemplateOwner, namespace.ItemsControl);
        if (c == null)
            return null;
        if (this._ElementRoot != null)
            return this._ElementRoot;
        if (c.ItemsPanel != null) {
            var root = c.ItemsPanel.GetVisualTree(this);
            if (root != null && !(root instanceof namespace.Panel))
                throw new InvalidOperationException("The root element of an ItemsPanelTemplate must be a Panel subclass");
            this._ElementRoot = root;
        }
        if (this._ElementRoot == null) {
            var template;
            if (c instanceof namespace.ListBox)
                template = this.VirtualizingStackPanelFallbackTemplate;
            else
                template = this.StackPanelFallbackTemplate;
            this._ElementRoot = template.GetVisualTree(this);
        }
        this._ElementRoot.IsItemsHost = true;
        return this._ElementRoot;
    };
    namespace.ItemsPresenter = Nullstone.FinishCreate(ItemsPresenter);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var MediaElement = Nullstone.Create("MediaElement", Fayde.FrameworkElement);
    MediaElement.Instance.Init = function () {
        this.Init$FrameworkElement();
        this.BufferingProgressChanged = new MulticastEvent();
        this.CurrentStateChanged = new MulticastEvent();
        this.DownloadProgressChanged = new MulticastEvent();
        this.MarkerReached = new MulticastEvent();
        this.MarkerReached = new MulticastEvent();
        this.MediaEnded = new MulticastEvent();
        this.MediaFailed = new MulticastEvent();
        this.MediaOpened = new MulticastEvent();
        this.RateChanged = new MulticastEvent();
    };
    MediaElement.AutoPlayProperty = DependencyProperty.RegisterCore("AutoPlay", function () { return Boolean; }, MediaElement, true);
    MediaElement.BufferingProgressProperty = DependencyProperty.RegisterReadOnlyCore("BufferingProgress", function () { return Number; }, MediaElement);
    MediaElement.BufferingTimeProperty = DependencyProperty.RegisterReadOnlyCore("BufferingTime", function () { return TimeSpan; }, MediaElement);
    MediaElement.CanPauseProperty = DependencyProperty.RegisterReadOnlyCore("CanPause", function () { return Boolean; }, MediaElement);
    MediaElement.CanSeekProperty = DependencyProperty.RegisterReadOnlyCore("CanSeek", function () { return Boolean; }, MediaElement);
    MediaElement.CurrentStateProperty = DependencyProperty.RegisterReadOnlyCore("CurrentState", function () { return new Enum(namespace.MediaElementState); }, MediaElement);
    MediaElement.DownloadProgressProperty = DependencyProperty.RegisterReadOnlyCore("DownloadProgress", function () { return Number; }, MediaElement);
    MediaElement.DownloadProgressOffsetProperty = DependencyProperty.RegisterReadOnlyCore("DownloadProgressOffset", function () { return Number; }, MediaElement);
    MediaElement.IsMutedProperty = DependencyProperty.RegisterCore("IsMuted", function () { return Boolean; }, MediaElement, false);
    MediaElement.NaturalDurationProperty = DependencyProperty.RegisterReadOnlyCore("NaturalDuration", function () { return Duration; }, MediaElement);
    MediaElement.NaturalVideoHeightProperty = DependencyProperty.RegisterReadOnlyCore("NaturalVideoHeight", function () { return Number; }, MediaElement);
    MediaElement.NaturalVideoWidthProperty = DependencyProperty.RegisterReadOnlyCore("NaturalVideoWidth", function () { return Number; }, MediaElement);
    MediaElement.PlaybackRateProperty = DependencyProperty.RegisterCore("PlaybackRate", function () { return Number; }, MediaElement, 1.0);
    MediaElement.PositionProperty = DependencyProperty.RegisterCore("Position", function () { return TimeSpan; }, MediaElement);
    MediaElement.SourceProperty = DependencyProperty.RegisterCore("Source", function () { return Uri; }, MediaElement);
    MediaElement.StretchProperty = DependencyProperty.RegisterCore("Stretch", function () { return Fayde.Media.Stretch; }, MediaElement, Fayde.Media.Stretch.Uniform);
    MediaElement.VolumeProperty = DependencyProperty.RegisterCore("Volume", function () { return Number; }, MediaElement);
    Nullstone.AutoProperties(MediaElement, [
        MediaElement.AutoPlayProperty,
        MediaElement.IsMutedProperty,
        MediaElement.PlaybackRateProperty,
        MediaElement.PositionProperty,
        MediaElement.SourceProperty,
        MediaElement.StretchProperty,
        MediaElement.VolumeProperty
    ]);
    Nullstone.AutoPropertiesReadOnly(MediaElement, [
        MediaElement.BufferingProgressProperty,
        MediaElement.BufferingTimeProperty,
        MediaElement.CanPauseProperty,
        MediaElement.CanSeekProperty,
        MediaElement.CurrentStateProperty,
        MediaElement.DownloadProgressProperty,
        MediaElement.DownloadProgressOffsetProperty,
        MediaElement.NaturalDurationProperty,
        MediaElement.NaturalVideoHeightProperty,
        MediaElement.NaturalVideoWidthProperty
    ]);
    Nullstone.Property(MediaElement, "IsClosed", {
        get: function () { return this._State === namespace.MediaElementState.Closed; }
    });
    MediaElement.Instance._ComputeActualSize = function () {
        return new Size();
    };
    MediaElement.Instance._InsideObject = function (ctx, x, y) {
        return false;
    };
    MediaElement.Instance._Render = function (ctx, region) {
        var element = this._Element;
        if (!element)
            return;
    };
    MediaElement.Instance._MeasureOverrideWithError = function (availableSize, error) {
        return new Size();
    };
    MediaElement.Instance._ArrangeOverrideWithError = function (finalSize, error) {
        return new Size();
    };
    if (!Fayde.IsCanvasEnabled) {
        MediaElement.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== MediaElement) {
                this._OnPropertyChanged$FrameworkElement(args, error);
                return;
            }
            var ivprop = false;
            switch (args.Property._ID) {
                case MediaElement.SourceProperty._ID:
                case MediaElement.AutoPlayProperty._ID:
                case MediaElement.IsMutedProperty._ID:
                case MediaElement.PlaybackRateProperty._ID:
                case MediaElement.VolumeProperty._ID:
                case MediaElement.StretchProperty._ID:
                    ivprop = true;
                    break;
            }
            if (ivprop)
                this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            this.PropertyChanged.Raise(this, args);
        };
    }
    if (Fayde.IsCanvasEnabled) {
        MediaElement.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== MediaElement) {
                this._OnPropertyChanged$FrameworkElement(args, error);
                return;
            }
            if (args.Property._ID === MediaElement.StretchProperty._ID) {
                this._InvalidateMeasure();
            }
            this.PropertyChanged.Raise(this, args);
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        MediaElement.Instance.CreateHtmlObjectImpl = function () {
            var rootEl = this.CreateHtmlObjectImpl$FrameworkElement();
            var contentEl = rootEl.firstChild;
            contentEl.appendChild(this.GetHtmlMediaEl());
            return rootEl;
        };
        MediaElement.Instance.GetHtmlMediaEl = function () {
            if (!this._Element)
                this._Element = this.CreateHtmlMediaEl();
            return this._Element;
        };
        MediaElement.Instance.CreateHtmlMediaEl = function () {
            var video = document.createElement("video");
            video.style.position = "absolute";
            video.style.width = "100%";
            video.style.height = "100%";
            video.autoplay = this.AutoPlay;
            var that = this;
            video.onerror = function (e) { that.HandleMediaError(e); };
            video.onvolumechange = function (e) { that.$SetValueInternal(MediaElement.VolumeProperty, video.volume); };
            video.ondurationchange = function (e) { that.$SetValueInternal(MediaElement.NaturalDurationProperty, new Duration(new TimeSpan(0, 0, video.duration))); };
            video.onratechange = function (e) {
                that.$SetValueInternal(MediaElement.PlaybackRateProperty, video.playbackRate);
                that.RateChanged.Raise(that, new namespace.RateChangedRoutedEventArgs(vide.playbackRate));
            };
            video.addEventListener("progress", function (e) {
            }, false);
            video.ontimeupdate = function (e) { that.$SetValueInternal(MediaElement.PositionProperty, new TimeSpan(0, 0, video.currentTime)); };
            video.onloadeddata = function (e) { that.MediaOpened.Raise(that, new Fayde.RoutedEventArgs()); };
            video.onended = function (e) { that.MediaEnded.Raise(that, new Fayde.RoutedEventArgs()); };
            return video;
        };
        MediaElement.Instance.HandleMediaError = function (e) {
            var el = this.GetHtmlMediaEl();
            if (!el.error)
                return;
            this.MediaFailed.Raise(this, new namespace.MediaFailedEventArgs(el.error.code));
        };
        MediaElement.Instance.ApplyHtmlChange = function (change) {
            var propd = change.Property;
            if (propd.OwnerType !== MediaElement) {
                this.ApplyHtmlChange$FrameworkElement(change);
                return;
            }
            var el = this.GetHtmlMediaEl();
            if (propd._ID === MediaElement.SourceProperty._ID) {
                el.src = change.NewValue.toString();
            } else if (propd._ID === MediaElement.AutoPlayProperty._ID) {
                el.autoplay = change.NewValue;
            } else if (propd._ID === MediaElement.IsMutedProperty._ID) {
                el.muted = change.NewValue;
            } else if (propd._ID === MediaElement.PlaybackRateProperty._ID) {
                el.playbackRate = change.NewValue;
            } else if (propd._ID === MediaElement.StretchProperty._ID) {
            } else if (propd._ID === MediaElement.VolumeProperty._ID) {
                el.volume = change.NewValue;
            }
        };
    }
    namespace.MediaElement = Nullstone.FinishCreate(MediaElement);
})(Nullstone.Namespace("Fayde.Controls"));
(function (namespace) {
    var MediaFailedEventArgs = Nullstone.Create("MediaFailedEventArgs", Fayde.RoutedEventArgs, 1);
    MediaFailedEventArgs.Instance.Init = function (code) {
        this.Init$RoutedEventArgs();
        this.Code = code;
        switch (code) {
            case 1: //MEDIA_ERR_ABORTED
                this.Description = "Aborted";
                break;
            case 2: //MEDIA_ERR_NETWORK
                this.Description = "Aborted";
                break;
            case 3: //MEDIA_ERR_DECODE
                this.Description = "Decode";
                break;
            case 4: //MEDIA_ERR_SRC_NOT_SUPPORTED
                this.Description = "Media Type Not Supported";
                break;
        }
    };
    namespace.MediaFailedEventArgs = Nullstone.FinishCreate(MediaFailedEventArgs);
})(Nullstone.Namespace("Fayde.Controls"));
(function (namespace) {
    var RateChangedRoutedEventArgs = Nullstone.Create("RateChangedRoutedEventArgs", Fayde.RoutedEventArgs, 1);
    RateChangedRoutedEventArgs.Instance.Init = function (newRate) {
        this.Init$RoutedEventArgs();
        this.NewRate = newRate;
    };
    namespace.RateChangedRoutedEventArgs = Nullstone.FinishCreate(RateChangedRoutedEventArgs);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var Panel = Nullstone.Create("Panel", Fayde.FrameworkElement);
    Panel.BackgroundProperty = DependencyProperty.Register("Background", function () { return Fayde.Media.Brush; }, Panel);
    Panel._CreateChildren = {
        GetValue: function (propd, obj) {
            var col = new Fayde.UIElementCollection();
            col._SetIsSecondaryParent(true);
            if (obj)
                obj._SubtreeObject = col;
            return col;
        }
    };
    Panel.ChildrenProperty = DependencyProperty.RegisterFull("Children", function () { return Fayde.UIElementCollection; }, Panel, undefined, undefined, Panel._CreateChildren);
    Panel.IsItemsHostProperty = DependencyProperty.Register("IsItemsHost", function () { return Boolean; }, Panel, false);
    Nullstone.AutoProperties(Panel, [
        Panel.BackgroundProperty,
        Panel.ChildrenProperty,
        Panel.IsItemsHostProperty
    ]);
    Panel.ZIndexProperty = DependencyProperty.RegisterAttached("ZIndex", function () { return Number; }, Panel, 0);
    Panel.GetZIndex = function (d) {
        return d.$GetValue(Panel.ZIndexProperty);
    };
    Panel.SetZIndex = function (d, value) {
        d.$SetValue(Panel.ZIndexProperty, value);
    };
    Panel.ZProperty = DependencyProperty.RegisterAttached("Z", function () { return Number; }, Panel, NaN);
    Panel.GetZ = function (d) {
        return d.$GetValue(Panel.ZProperty);
    };
    Panel.SetZ = function (d, value) {
        d.$SetValue(Panel.ZProperty, value);
    };
    Panel.Instance.IsLayoutContainer = function () { return true; };
    Panel.Instance.IsContainer = function () { return true; };
    Panel.Instance._ComputeBounds = function () {
        this._Extents = this._ExtentsWithChildren = this._Bounds = this._BoundsWithChildren = new Rect();
        var walker = Fayde._VisualTreeWalker.Logical(this);
        var item;
        while (item = walker.Step()) {
            if (!item._GetRenderVisible())
                continue;
            this._ExtentsWithChildren = this._ExtentsWithChildren.Union(item._GetGlobalBounds());
        }
        if (this.Background) {
            this._Extents = new Rect(0, 0, this.ActualWidth, this.ActualHeight);
            this._ExtentsWithChildren = this._ExtentsWithChildren.Union(this._Extents);
        }
        this._Bounds = this._IntersectBoundsWithClipPath(this._Extents.GrowByThickness(this._EffectPadding), false).Transform(this._AbsoluteXform);
        this._BoundsWithChildren = this._IntersectBoundsWithClipPath(this._ExtentsWithChildren.GrowByThickness(this._EffectPadding), false).Transform(this._AbsoluteXform);
        this._ComputeGlobalBounds();
        this._ComputeSurfaceBounds();
    };
    Panel.Instance._ShiftPosition = function (point) {
        var dx = point.X - this._Bounds.X;
        var dy = point.Y - this._Bounds.Y;
        this._ShiftPosition$FrameworkElement(point);
        this._BoundsWithChildren.X += dx;
        this._BoundsWithChildren.Y += dy;
    };
    Panel.Instance._EmptyBackground = function () {
        return this.Background == null;
    };
    Panel.Instance._MeasureOverrideWithError = function (availableSize, error) {
        Info("Panel._MeasureOverrideWithError [" + this._TypeName + "]");
        var result = new Size(0, 0);
        return result;
    };
    Panel.Instance._Render = function (ctx, region) {
        var background = this.Background;
        if (!background)
            return;
        var framework = new Size(this.ActualWidth, this.ActualHeight);
        framework = this._ApplySizeConstraints(framework);
        if (framework.Width <= 0 || framework.Height <= 0)
            return;
        var area = new Rect(0, 0, framework.Width, framework.Height);
        ctx.Save();
        this._RenderLayoutClip(ctx);
        ctx.FillRect(background, area);
        ctx.Restore();
    };
    Panel.Instance._CanFindElement = function () { return this.Background != null; }
    Panel.Instance._InsideObject = function (ctx, x, y) {
        if (this.Background)
            return this._InsideObject$FrameworkElement(ctx, x, y);
        return false;
    };
    if (Fayde.IsCanvasEnabled) {
        Panel.Instance._ElementAdded = function (item) {
            this._ElementAdded$FrameworkElement(item);
            if (this._IsAttached) {
                App.Instance.MainSurface._AddDirtyElement(this, _Dirty.ChildrenZIndices);
            }
        };
        Panel.Instance._ElementRemoved = function (item) {
            this._ElementRemoved$FrameworkElement(item);
            if (this._IsAttached) {
                App.Instance.MainSurface._AddDirtyElement(this, _Dirty.ChildrenZIndices);
            }
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        Panel.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Panel) {
                this._OnPropertyChanged$FrameworkElement(args, error);
                return;
            }
            var item;
            if (args.Property._ID === Panel.BackgroundProperty._ID) {
                this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            } else if (args.Property._ID === Panel.ChildrenProperty._ID) {
                var collection;
                var count;
                var i;
                this._SubtreeObject = args.NewValue ? args.NewValue : null;
                if (args.OldValue) {
                    collection = args.OldValue;
                    count = collection.GetCount();
                    for (i = 0; i < count; i++) {
                        item = collection.GetValueAt(i);
                        this._ElementRemoved(item);
                        if (this._IsAttached)
                            this.RemoveHtmlChild(item, i);
                    }
                }
                if (args.NewValue) {
                    collection = args.NewValue;
                    count = collection.GetCount();
                    for (i = 0; i < count; i++) {
                        item = collection.GetValueAt(i);
                        this._ElementAdded(item);
                        if (this._IsAttached)
                            this.InsertHtmlChild(item, i);
                    }
                }
            }
            this.PropertyChanged.Raise(this, args);
        };
        Panel.Instance._OnSubPropertyChanged = function (propd, sender, args) {
            if (propd && propd._ID === Panel.BackgroundProperty._ID) {
                this.InvalidateProperty(propd);
            } else {
                this._OnSubPropertyChanged$FrameworkElement(propd, sender, args);
            }
        };
        Panel.Instance._OnCollectionChanged = function (col, args) {
            if (this._PropertyHasValueNoAutoCreate(Panel.ChildrenProperty, col)) {
                var error = new BError();
                if (args.IsAdd || args.IsReplace) {
                    if (args.IsReplace) {
                        if (args.OldValue instanceof Fayde.FrameworkElement)
                            args.OldValue._SetLogicalParent(null, error);
                        this._ElementRemoved(args.OldValue);
                        if (this._IsAttached)
                            this.RemoveHtmlChild(args.OldValue, args.Index);
                    }
                    if (args.NewValue instanceof Fayde.FrameworkElement)
                        args.NewValue._SetLogicalParent(this, error);
                    this._ElementAdded(args.NewValue);
                    if (this._IsAttached)
                        this.InsertHtmlChild(args.NewValue, args.Index);
                } else if (args.IsRemove) {
                    if (args.OldValue instanceof Fayde.FrameworkElement)
                        args.OldValue._SetLogicalParent(null, error);
                    this._ElementRemoved(args.OldValue);
                    if (this._IsAttached)
                        this.RemoveHtmlChild(args.OldValue, args.Index);
                }
            } else {
                this._OnCollectionChanged$FrameworkElement(col, args);
            }
        };
    }
    if (Fayde.IsCanvasEnabled) {
        Panel.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Panel) {
                this._OnPropertyChanged$FrameworkElement(args, error);
                return;
            }
            if (args.Property._ID === Panel.BackgroundProperty._ID) {
                this._UpdateBounds();
                this._Invalidate();
            } else if (args.Property._ID === Panel.ChildrenProperty._ID) {
                var collection;
                var count;
                var i;
                this._SubtreeObject = args.NewValue ? args.NewValue : null;
                if (args.OldValue) {
                    collection = args.OldValue;
                    count = collection.GetCount();
                    for (i = 0; i < count; i++) {
                        this._ElementRemoved(collection.GetValueAt(i));
                    }
                }
                if (args.NewValue) {
                    collection = args.NewValue;
                    count = collection.GetCount();
                    for (i = 0; i < count; i++) {
                        this._ElementAdded(collection.GetValueAt(i));
                    }
                }
                this._UpdateBounds();
            }
            this.PropertyChanged.Raise(this, args);
        };
        Panel.Instance._OnSubPropertyChanged = function (propd, sender, args) {
            if (propd && propd._ID === Panel.BackgroundProperty._ID) {
                this._Invalidate();
            } else {
                this._OnSubPropertyChanged$FrameworkElement(propd, sender, args);
            }
        };
        Panel.Instance._OnCollectionChanged = function (col, args) {
            if (this._PropertyHasValueNoAutoCreate(Panel.ChildrenProperty, col)) {
                var error = new BError();
                if (args.IsAdd || args.IsReplace) {
                    if (args.IsReplace) {
                        if (args.OldValue instanceof Fayde.FrameworkElement)
                            args.OldValue._SetLogicalParent(null, error);
                        this._ElementRemoved(args.OldValue);
                    }
                    if (args.NewValue instanceof Fayde.FrameworkElement)
                        args.NewValue._SetLogicalParent(this, error);
                    this._ElementAdded(args.NewValue);
                } else if (args.IsRemove) {
                    if (args.OldValue instanceof Fayde.FrameworkElement)
                        args.OldValue._SetLogicalParent(null, error);
                    this._ElementRemoved(args.OldValue);
                }
            } else {
                this._OnCollectionChanged$FrameworkElement(col, args);
            }
        };
        Panel.Instance._OnCollectionItemChanged = function (col, obj, args) {
            if (this._PropertyHasValueNoAutoCreate(Panel.ChildrenProperty, col)) {
                if (args.Property._ID === Panel.ZIndexProperty._ID) {
                    args.Item._Invalidate();
                    if (this._IsAttached) {
                        App.Instance.MainSurface._AddDirtyElement(this, _Dirty.ChildrenZIndices);
                    }
                    return;
                }
            }
            this._OnCollectionItemChanged$FrameworkElement(col, obj, args);
        };
        Panel.Instance._OnIsAttachedChanged = function (value) {
            this._OnIsAttachedChanged$FrameworkElement(value);
            if (value) {
                App.Instance.MainSurface._AddDirtyElement(this, _Dirty.ChildrenZIndices);
            }
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        Panel.Instance.OnHtmlAttached = function () {
            var children = this.Children;
            if (children) {
                var len = children.GetCount();
                for (var i = 0; i < len; i++) {
                    var child = children.GetValueAt(i);
                    this.InsertHtmlChild(child, i);
                    child.OnHtmlAttached();
                }
            }
        };
        Panel.Instance.OnHtmlDetached = function () {
            var children = this.Children;
            if (children) {
                var len = children.GetCount();
                for (var i = 0; i < len; i++) {
                    var child = children.GetValueAt(i);
                    this.RemoveHtmlChild(child, i);
                    child.OnHtmlDetached();
                }
            }
        };
        Panel.Instance.GetHtmlChildrenContainer = function () {
            var contentEl = this.GetContentHtmlElement();
            if (!contentEl.firstChild)
                contentEl.appendChild(this.CreateHtmlChildrenContainer());
            return contentEl.firstChild;
        };
        Panel.Instance.CreateHtmlChildrenContainer = function () { };
        Panel.Instance.ApplyHtmlChange = function (change) {
            var propd = change.Property;
            if (propd.OwnerType !== Panel) {
                this.ApplyHtmlChange$FrameworkElement(change);
                return;
            }
            var contentEl = this.GetRootHtmlElement().firstChild;
            if (propd._ID === Panel.BackgroundProperty._ID) {
                var brush = change.NewValue;
                if (!brush)
                    brush = this.Background;
                brush.SetupBrush(null, null);
                contentEl.style.background = brush.ToHtml5Object();
            }
        };
        Panel.Instance.InsertHtmlChild = function () { };
        Panel.Instance.RemoveHtmlChild = function () { };
    }
    Panel.Annotations = {
        ContentProperty: Panel.ChildrenProperty
    };
    namespace.Panel = Nullstone.FinishCreate(Panel);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var RichTextBox = Nullstone.Create("RichTextBox", namespace.Control);
    namespace.RichTextBox = Nullstone.FinishCreate(RichTextBox);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var _RichTextBoxView = Nullstone.Create("_RichTextBoxView", Fayde.FrameworkElement);
    namespace._RichTextBoxView = Nullstone.FinishCreate(_RichTextBoxView);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var RowDefinitionCollection = Nullstone.Create("RowDefinitionCollection", Fayde.DependencyObjectCollection);
    RowDefinitionCollection.Instance.AddedToCollection = function (value, error) {
        if (this.Contains(value)) {
            error.SetErrored(BError.Argument, "RowDefinition is already a member of this collection.");
            return false;
        }
        return this.AddedToCollection$DependencyObjectCollection(value, error);
    };
    RowDefinitionCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.RowDefinition;
    };
    namespace.RowDefinitionCollection = Nullstone.FinishCreate(RowDefinitionCollection);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ScrollContentPresenter = Nullstone.Create("ScrollContentPresenter", namespace.ContentPresenter, 0, [namespace.Primitives.IScrollInfo]);
    ScrollContentPresenter.Instance.Init = function () {
        this.Init$ContentPresenter();
        this.$IsClipPropertySet = false;
        this.$ScrollData = new namespace.Primitives.ScrollData();
    };
    Nullstone.Property(ScrollContentPresenter, "ScrollOwner", {
        get: function () { return this.$ScrollData.ScrollOwner; },
        set: function (value) { this.$ScrollData.ScrollOwner = value; }
    });
    Nullstone.Property(ScrollContentPresenter, "CanHorizontallyScroll", {
        get: function () { return this.$ScrollData.CanHorizontallyScroll; },
        set: function (value) {
            if (this.$ScrollData.CanHorizontallyScroll !== value) {
                this.$ScrollData.CanHorizontallyScroll = value;
                this._InvalidateMeasure();
            }
        }
    });
    Nullstone.Property(ScrollContentPresenter, "CanVerticallyScroll", {
        get: function () { return this.$ScrollData.CanVerticallyScroll; },
        set: function (value) {
            if (this.$ScrollData.CanVerticallyScroll !== value) {
                this.$ScrollData.CanVerticallyScroll = value;
                this._InvalidateMeasure();
            }
        }
    });
    Nullstone.Property(ScrollContentPresenter, "ExtentWidth", { get: function () { return this.$ScrollData.Extent.Width; } });
    Nullstone.Property(ScrollContentPresenter, "ExtentHeight", { get: function () { return this.$ScrollData.Extent.Height; } });
    Nullstone.Property(ScrollContentPresenter, "ViewportWidth", { get: function () { return this.$ScrollData.Viewport.Width; } });
    Nullstone.Property(ScrollContentPresenter, "ViewportHeight", { get: function () { return this.$ScrollData.Viewport.Height; } });
    Nullstone.Property(ScrollContentPresenter, "HorizontalOffset", { get: function () { return this.$ScrollData.Offset.X; } });
    Nullstone.Property(ScrollContentPresenter, "VerticalOffset", { get: function () { return this.$ScrollData.Offset.Y; } });
    ScrollContentPresenter.Instance.LineUp = function () {
        this.ChangeVerticalOffset(this.VerticalOffset - 16);
    };
    ScrollContentPresenter.Instance.LineDown = function () {
        this.ChangeVerticalOffset(this.VerticalOffset + 16);
    };
    ScrollContentPresenter.Instance.LineLeft = function () {
        this.ChangeHorizontalOffset(this.HorizontalOffset - 16);
    };
    ScrollContentPresenter.Instance.LineRight = function () {
        this.ChangeHorizontalOffset(this.HorizontalOffset + 16);
    };
    ScrollContentPresenter.Instance.MouseWheelUp = function () {
        this.ChangeVerticalOffset(this.VerticalOffset - 48);
    };
    ScrollContentPresenter.Instance.MouseWheelDown = function () {
        this.ChangeVerticalOffset(this.VerticalOffset + 48);
    };
    ScrollContentPresenter.Instance.MouseWheelLeft = function () {
        this.ChangeHorizontalOffset(this.HorizontalOffset - 48);
    };
    ScrollContentPresenter.Instance.MouseWheelRight = function () {
        this.ChangeHorizontalOffset(this.HorizontalOffset + 48);
    };
    ScrollContentPresenter.Instance.PageUp = function () {
        this.ChangeVerticalOffset(this.VerticalOffset - this.ViewportHeight);
    };
    ScrollContentPresenter.Instance.PageDown = function () {
        this.ChangeVerticalOffset(this.VerticalOffset + this.ViewportHeight);
    };
    ScrollContentPresenter.Instance.PageLeft = function () {
        this.ChangeHorizontalOffset(this.HorizontalOffset - this.ViewportWidth);
    };
    ScrollContentPresenter.Instance.PageRight = function () {
        this.ChangeHorizontalOffset(this.HorizontalOffset + this.ViewportWidth);
    };
    ScrollContentPresenter.Instance.MakeVisible = function (visual, rectangle) {
        if (rectangle.IsEmpty() || !visual || Nullstone.RefEquals(visual, this) || !this.IsAncestorOf(visual))
            return new Rect();
        var generalTransform = visual.TransformToVisual(this);
        var point = generalTransform.Transform(new Point(rectangle.X, rectangle.Y));
        rectangle.X = point.X;
        rectangle.Y = point.Y;
        return rectangle;
        var rect = new Rect(this.HorizontalOffset, this.VerticalOffset, this.ViewportWidth, this.ViewportHeight);
        rectangle.X += rect.X;
        rectangle.Y += rect.Y;
        var num = ScrollContentPresenter._ComputeScrollOffsetWithMinimalScroll(rect.X, rect.GetRight(), rectangle.X, rectangle.GetRight());
        var num1 = ScrollContentPresenter._ComputeScrollOffsetWithMinimalScroll(rect.Y, rect.GetBottom(), rectangle.Y, rectangle.GetBottom());
        this.ChangeHorizontalOffset(num);
        this.ChangeVerticalOffset(num1);
        rect.X = num;
        rect.Y = num1;
        rectangle = rectangle.Intersection(rect)
        if (!rectangle.IsEmpty()) {
            rectangle.X -= rect.X;
            rectangle.Y -= rect.Y;
        }
        return rectangle;
    };
    ScrollContentPresenter.Instance.ChangeHorizontalOffset = function (offset) {
        if (!this.CanHorizontallyScroll)
            return;
        var valid = ScrollContentPresenter._ValidateInputOffset(offset);
        if (DoubleUtil.AreClose(this.$ScrollData.Offset.X, valid))
            return;
        this.$ScrollData.CachedOffset.X = valid;
        this._InvalidateArrange();
    };
    ScrollContentPresenter.Instance.ChangeVerticalOffset = function (offset) {
        if (!this.CanVerticallyScroll)
            return;
        var valid = ScrollContentPresenter._ValidateInputOffset(offset);
        if (DoubleUtil.AreClose(this.$ScrollData.Offset.Y, valid))
            return;
        this.$ScrollData.CachedOffset.Y = valid;
        this._InvalidateArrange();
    };
    ScrollContentPresenter._ValidateInputOffset = function (offset) {
        if (!isNaN(offset)) {
            return Math.max(0, offset);
        }
        throw new ArgumentException("Offset is not a number.");
    };
    ScrollContentPresenter.Instance.MeasureOverride = function (constraint) {
        var scrollOwner = this.ScrollOwner;
        if (scrollOwner == null || this._ContentRoot == null) {
            var error = new BError();
            return this._MeasureOverrideWithError(constraint, error);
        }
        var ideal = new Size(this.CanHorizontallyScroll ? Number.POSITIVE_INFINITY : constraint.Width,
            this.CanVerticallyScroll ? Number.POSITIVE_INFINITY : constraint.Height);
        this._ContentRoot.Measure(ideal);
        this._UpdateExtents(constraint, this._ContentRoot._DesiredSize);
        return constraint.Min(this.$ScrollData.Extent);
    };
    ScrollContentPresenter.Instance.ArrangeOverride = function (arrangeSize) {
        var scrollOwner = this.ScrollOwner;
        if (!scrollOwner || !this._ContentRoot)
            return this._ArrangeOverrideWithError(arrangeSize, new BError());
        if (this._ClampOffsets())
            scrollOwner._InvalidateScrollInfo();
        var desired = this._ContentRoot._DesiredSize;
        var start = new Point(-this.HorizontalOffset, -this.VerticalOffset);
        var offerSize = desired.Max(arrangeSize);
        this._ContentRoot.Arrange(new Rect(start.X, start.Y, offerSize.Width, offerSize.Height));
        this._UpdateClip(arrangeSize);
        this._UpdateExtents(arrangeSize, this.$ScrollData.Extent);
        return arrangeSize;
    };
    ScrollContentPresenter.Instance.OnApplyTemplate = function () {
        this.OnApplyTemplate$ContentPresenter();
        var sv = Nullstone.As(this.TemplateOwner, namespace.ScrollViewer);
        if (!sv)
            return;
        var content = this.Content;
        var info = Nullstone.As(content, namespace.Primitives.IScrollInfo);
        if (!info) {
            var presenter = Nullstone.As(content, namespace.ItemsPresenter);
            if (presenter) {
                if (!presenter._ElementRoot)
                    presenter.ApplyTemplate();
                info = Nullstone.As(presenter._ElementRoot, namespace.Primitives.IScrollInfo);
            }
        }
        if (!info)
            info = this;
        info.CanHorizontallyScroll = sv.HorizontalScrollBarVisibility !== namespace.ScrollBarVisibility.Disabled;
        info.CanVerticallyScroll = sv.VerticalScrollBarVisibility !== namespace.ScrollBarVisibility.Disabled;
        info.ScrollOwner = sv;
        sv.SetScrollInfo(info);
        sv._InvalidateScrollInfo();
    };
    ScrollContentPresenter._ComputeScrollOffsetWithMinimalScroll = function (topView, bottomView, topChild, bottomChild) {
        var flag = DoubleUtil.LessThan(topChild, topView) && DoubleUtil.LessThan(bottomChild, bottomView);
        var flag1 = DoubleUtil.GreaterThan(topChild, topView) && DoubleUtil.GreaterThan(bottomChild, bottomView);
        var flag4 = (bottomChild - topChild) > (bottomView - topView);
        if ((!flag || flag4) && (!flag1 || !flag4)) {
            if (flag || flag1)
                return bottomChild - bottomView - topView;
            return topView;
        }
        return topChild;
    };
    ScrollContentPresenter.Instance._UpdateExtents = function (viewport, extents) {
        var changed = !Size.Equals(this.$ScrollData.Viewport, viewport)
            || !Size.Equals(this.$ScrollData.Extent, extents);
        this.$ScrollData.Viewport = viewport;
        this.$ScrollData.Extent = extents;
        changed |= this._ClampOffsets();
        if (changed)
            this.ScrollOwner._InvalidateScrollInfo();
    };
    ScrollContentPresenter.Instance._ClampOffsets = function () {
        var changed = false;
        var result = this.CanHorizontallyScroll ? Math.min(this.$ScrollData.CachedOffset.X, this.ExtentWidth - this.ViewportWidth) : 0;
        result = Math.max(0, result);
        if (!DoubleUtil.AreClose(result, this.HorizontalOffset)) {
            this.$ScrollData.Offset.X = result;
            changed = true;
        }
        result = this.CanVerticallyScroll ? Math.min(this.$ScrollData.CachedOffset.Y, this.ExtentHeight - this.ViewportHeight) : 0;
        result = Math.max(0, result);
        if (!DoubleUtil.AreClose(result, this.VerticalOffset)) {
            this.$ScrollData.Offset.Y = result;
            changed = true;
        }
        return changed;
    };
    ScrollContentPresenter.Instance._UpdateClip = function (arrangeSize) {
        if (!this.$IsClipPropertySet) {
            this.$ClippingRectangle = new Fayde.Media.RectangleGeometry();
            this.Clip = this.$ClippingRectangle;
            this.$IsClipPropertySet = true;
        }
        var content;
        if (Nullstone.Is(this.TemplateOwner, Fayde.Controls.ScrollViewer) && (content = this.Content) && (Nullstone.Is(content, Fayde.Controls._TextBoxView) || Nullstone.Is(content, Fayde.Controls._RichTextBoxView))) {
            this.$ClippingRectangle.Rect = this._CalculateTextBoxClipRect(arrangeSize);
        } else {
            this.$ClippingRectangle.Rect = new Rect(0, 0, arrangeSize.Width, arrangeSize.Height);
        }
    };
    ScrollContentPresenter.Instance._CalculateTextBoxClipRect = function (arrangeSize) {
        var left = 0;
        var right = 0;
        var templatedParent = Nullstone.As(this.TemplateOwner, namespace.ScrollViewer);
        var width = this.$ScrollData.Extent.Width;
        var num = this.$ScrollData.Viewport.Width;
        var x = this.$ScrollData.Offset.X;
        var textbox = Nullstone.As(templatedParent.TemplateOwner, namespace.TextBox);
        var richtextbox = Nullstone.As(templatedParent.TemplateOwner, namespace.RichTextBox);
        var textWrapping = namespace.TextWrapping.NoWrap;
        var horizontalScrollBarVisibility = namespace.ScrollBarVisibility.Disabled;
        if (richtextbox) {
            textWrapping = richtextbox.TextWrapping;
            horizontalScrollBarVisibility = richtextbox.HorizontalScrollBarVisibility;
        } else if (textbox) {
            textWrapping = textbox.TextWrapping;
            horizontalScrollBarVisibility = textbox.HorizontalScrollBarVisibility;
        }
        var padding = templatedParent.Padding;
        if (textWrapping !== namespace.TextWrapping.Wrap) {
            if (num > width || x === 0)
                left = padding.Left + 1;
            if (num > width || horizontalScrollBarVisibility !== namespace.ScrollBarVisibility.Disabled && Math.abs(width - x + num) <= 1)
                right = padding.Right + 1;
        } else {
            left = padding.Left + 1;
            right = padding.Right + 1;
        }
        left = Math.max(0, left);
        right = Math.max(0, right);
        return new Rect(-left, 0, arrangeSize.Width + left + right, arrangeSize.Height);
    };
    namespace.ScrollContentPresenter = Nullstone.FinishCreate(ScrollContentPresenter);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var StackPanel = Nullstone.Create("StackPanel", namespace.Panel);
    StackPanel._OrientationChanged = function (d, args) {
        var sp = Nullstone.As(d, StackPanel);
        if (!sp)
            sp._UpdateHtmlOrientation(args.NewValue);
    };
    StackPanel.OrientationProperty = DependencyProperty.Register("Orientation", function () { return new Enum(Fayde.Orientation); }, StackPanel, Fayde.Orientation.Vertical, StackPanel._OrientationChanged);
    Nullstone.AutoProperties(StackPanel, [
        StackPanel.OrientationProperty
    ]);
    StackPanel.Instance.MeasureOverride = function (constraint) {
        var childAvailable = new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
        var measured = new Size(0, 0);
        var orientation = this.Orientation;
        if (orientation === Fayde.Orientation.Vertical) {
            childAvailable.Width = constraint.Width;
            var width = this.Width;
            if (!isNaN(width))
                childAvailable.Width = width;
            childAvailable.Width = Math.min(childAvailable.Width, this.MaxWidth);
            childAvailable.Width = Math.max(childAvailable.Width, this.MinWidth);
        } else {
            childAvailable.Height = constraint.Height;
            var height = this.Height;
            if (!isNaN(height))
                childAvailable.Height = height;
            childAvailable.Height = Math.min(childAvailable.Height, this.MaxHeight);
            childAvailable.Height = Math.max(childAvailable.Height, this.MinHeight);
        }
        var children = this.Children;
        for (var i = 0; i < children.GetCount() ; i++) {
            var child = children.GetValueAt(i);
            child.Measure(childAvailable);
            var size = child._DesiredSize;
            if (orientation === Fayde.Orientation.Vertical) {
                measured.Height += size.Height;
                measured.Width = Math.max(measured.Width, size.Width);
            } else {
                measured.Width += size.Width;
                measured.Height = Math.max(measured.Height, size.Height);
            }
        }
        return measured;
    };
    StackPanel.Instance.ArrangeOverride = function (arrangeSize) {
        var arranged = arrangeSize;
        var orientation = this.Orientation;
        if (orientation === Fayde.Orientation.Vertical)
            arranged.Height = 0;
        else
            arranged.Width = 0;
        var children = this.Children;
        for (var i = 0; i < children.GetCount() ; i++) {
            var child = children.GetValueAt(i);
            var size = child._DesiredSize;
            var childFinal;
            if (orientation === Fayde.Orientation.Vertical) {
                size.Width = arrangeSize.Width;
                childFinal = new Rect(0, arranged.Height, size.Width, size.Height);
                if (childFinal.IsEmpty())
                    child.Arrange(new Rect());
                else
                    child.Arrange(childFinal);
                arranged.Width = Math.max(arranged.Width, size.Width);
                arranged.Height += size.Height;
            } else {
                size.Height = arrangeSize.Height;
                childFinal = new Rect(arranged.Width, 0, size.Width, size.Height);
                if (childFinal.IsEmpty())
                    child.Arrange(new Rect());
                else
                    child.Arrange(childFinal);
                arranged.Width += size.Width;
                arranged.Height = Math.max(arranged.Height, size.Height);
            }
        }
        if (orientation === Fayde.Orientation.Vertical)
            arranged.Height = Math.max(arranged.Height, arrangeSize.Height);
        else
            arranged.Width = Math.max(arranged.Width, arrangeSize.Width);
        return arranged;
    };
    if (!Fayde.IsCanvasEnabled) {
        StackPanel.Instance.CreateHtmlObjectImpl = function () {
            var rootEl = this.CreateHtmlObjectImpl$Panel();
            rootEl.firstChild.style.fontSize = "0px";
            return rootEl;
        };
        StackPanel.Instance.CreateHtmlChildrenContainer = function () {
            var table = document.createElement("table");
            table.style.borderSpacing = "0px";
            table.style.width = "100%";
            table.style.height = "100%";
            var rowEl = table.appendChild(document.createElement("tr"));
            var columnEl = rowEl.appendChild(document.createElement("td"));
            columnEl.style.padding = "0px";
            columnEl.style.height = "100%";
            columnEl.style.width = "100%";
            return table;
        };
        StackPanel.Instance.InsertHtmlChild = function (child, index) {
            var table = this.GetHtmlChildrenContainer();
            var children = this.Children;
            var nextEl;
            if (this.Orientation === Fayde.Orientation.Horizontal) {
                var columnEl = document.createElement("td");
                columnEl.style.height = "100%";
                columnEl.style.width = "auto";
                columnEl.style.padding = "0px";
                var sizingEl = columnEl.appendChild(document.createElement("div"));
                sizingEl.style.position = "relative";
                sizingEl.style.display = "table";
                sizingEl.style.width = "100%";
                sizingEl.style.height = "100%";
                var contentEl = sizingEl.appendChild(document.createElement("div"));
                contentEl.style.position = "absolute";
                contentEl.style.display = "table-cell";
                contentEl.style.width = "100%";
                contentEl.style.height = "100%";
                contentEl.appendChild(child.GetRootHtmlElement());
                var rowEl = table.children[0];
                nextEl = rowEl.children[index];
                rowEl.insertBefore(columnEl, nextEl);
            }
            else {
                var rowEl = document.createElement("tr");
                var columnEl = rowEl.appendChild(document.createElement("td"));
                columnEl.style.padding = "0px";
                columnEl.style.height = "auto";
                columnEl.style.width = "100%";
                var sizingEl = columnEl.appendChild(document.createElement("div"));
                sizingEl.style.position = "relative";
                sizingEl.style.display = "table";
                sizingEl.style.width = "100%";
                sizingEl.style.height = "100%";
                var contentEl = sizingEl.appendChild(document.createElement("div"));
                contentEl.style.position = "absolute";
                contentEl.style.display = "table-cell";
                contentEl.style.width = "100%";
                contentEl.style.height = "100%";
                contentEl.appendChild(child.GetRootHtmlElement());
                nextEl = table.children[index];
                table.insertBefore(rowEl, nextEl);
            }
        };
        StackPanel.Instance.RemoveHtmlChild = function (child, index) {
            var table = this.GetHtmlChildrenContainer();
            if (this.Orientation === Fayde.Orientation.Horizontal)
                table.children[0].removeChild(table.children[0].children[index]);
            else
                table.removeChild(table.children[index]);
        };
        StackPanel.Instance._UpdateHtmlOrientation = function (orientation) {
            /*
            this.InvalidateChildrenFixedWidth();
            this.InvalidateChildrenFixedHeight();
            var children = this.Children;
            var len = children.GetCount();
            var child;
            for (var i = 0; i < len; i++) {
                child = children.GetValueAt(i);
                var wrapper = child.GetRootHtmlElement().parentNode;
                if (this.Orientation === Fayde.Orientation.Horizontal) {
                    wrapper.style.height = "100%";
                    wrapper.style.width = "auto";
                }
                else {
                    wrapper.style.width = "100%";
                    wrapper.style.height = "auto";
                }
            }
            */
        };
        StackPanel.Instance.UpdateAdjustedWidth = function (child, width) {
            delete Surface._SizingAdjustments[this._ID];
            if (this.Orientation === Fayde.Orientation.Horizontal) {
                var cell = child.GetRootHtmlElement().parentNode.parentNode.parentNode;
                cell.style.width = width + "px";
                cell.style.minWidth = width + "px";
            }
            if (!this.GetIsFixedWidth()) {
                var myWidth = this.GetHtmlChildrenContainer().offsetWidth;
                this.GetContentHtmlElement().style.width = myWidth + "px";
                myWidth = this.CalculateAdjustedWidth(myWidth);
                var parent = this.GetVisualParent();
                if (parent) parent.UpdateAdjustedWidth(this, myWidth);
            }
        };
        StackPanel.Instance.UpdateAdjustedHeight = function (child, height) {
            delete Surface._SizingAdjustments[this._ID];
            if (this.Orientation === Fayde.Orientation.Vertical) {
                var cell = child.GetRootHtmlElement().parentNode.parentNode.parentNode;
                cell.style.height = height + "px";
                cell.style.minHeight = height + "px";
            }
            if (!this.GetIsFixedHeight()) {
                var myHeight = this.GetHtmlChildrenContainer().offsetHeight;
                this.GetContentHtmlElement().style.height = myHeight + "px";
                myHeight = this.CalculateAdjustedHeight(myHeight);
                var parent = this.GetVisualParent();
                if (parent) parent.UpdateAdjustedHeight(this, myHeight);
            }
        };
        StackPanel.Instance.GetIsFixedWidth = function (child) {
            if (child) {
                if (this.Orientation === Fayde.Orientation.Horizontal) return false;
                else return true;
            }
            else {
                return this.IsFixedWidth;
            }
        };
        StackPanel.Instance.GetIsFixedHeight = function (child) {
            if (child) {
                if (this.Orientation === Fayde.Orientation.Vertical) return false;
                else return true;
            }
            else {
                return this.IsFixedHeight;
            }
        };
    }
    if (Fayde.IsCanvasEnabled) {
        StackPanel.Instance._UpdateHtmlOrientation = function (orientation) {
            this._InvalidateMeasure();
            this._InvalidateArrange();
        };
    }
    namespace.StackPanel = Nullstone.FinishCreate(StackPanel);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var TextBlock = Nullstone.Create("TextBlock", Fayde.FrameworkElement);
    TextBlock.Instance.Init = function () {
        this.Init$FrameworkElement();
        this._Layout = new Fayde.Text.TextLayout();
        this._ActualHeight = 0.0;
        this._ActualWidth = 0.0;
        this._SetsValue = true;
        this._WasSet = true;
        this._Dirty = true;
        this.AddProvider(new namespace._TextBlockDynamicPropertyValueProvider(this, _PropertyPrecedence.DynamicValue));
        this._Font = new Font();
    };
    TextBlock.PaddingProperty = DependencyProperty.RegisterCore("Padding", function () { return Thickness; }, TextBlock, new Thickness());
    TextBlock.ForegroundProperty = DependencyProperty.RegisterInheritable("Foreground", function () { return Fayde.Media.Brush; }, TextBlock, undefined, undefined, { GetValue: function () { return new Fayde.Media.SolidColorBrush(new Color(0, 0, 0)); } }, _Inheritable.Foreground);
    TextBlock.FontFamilyProperty = DependencyProperty.RegisterInheritable("FontFamily", function () { return String; }, TextBlock, Font.DEFAULT_FAMILY, undefined, undefined, _Inheritable.FontFamily);
    TextBlock.FontStretchProperty = DependencyProperty.RegisterInheritable("FontStretch", function () { return String; }, TextBlock, Font.DEFAULT_STRETCH, undefined, undefined, _Inheritable.FontStretch);
    TextBlock.FontStyleProperty = DependencyProperty.RegisterInheritable("FontStyle", function () { return String; }, TextBlock, Font.DEFAULT_STYLE, undefined, undefined, _Inheritable.FontStyle);
    TextBlock.FontWeightProperty = DependencyProperty.RegisterInheritable("FontWeight", function () { return new Enum(Fayde.FontWeight); }, TextBlock, Font.DEFAULT_WEIGHT, undefined, undefined, _Inheritable.FontWeight);
    TextBlock.FontSizeProperty = DependencyProperty.RegisterInheritable("FontSize", function () { return Number; }, TextBlock, Font.DEFAULT_SIZE, undefined, undefined, _Inheritable.FontSize);
    TextBlock.TextDecorationsProperty = DependencyProperty.RegisterInheritable("TextDecorations", function () { return new Enum(Fayde.TextDecorations); }, TextBlock, Fayde.TextDecorations.None, undefined, undefined, _Inheritable.TextDecorations);
    TextBlock.FontSourceProperty = DependencyProperty.RegisterCore("FontSource", function () { return Object; }, TextBlock);
    TextBlock.TextProperty = DependencyProperty.RegisterCore("Text", function () { return String; }, TextBlock, "");
    TextBlock.InlinesProperty = DependencyProperty.RegisterFull("Inlines", function () { return Fayde.Documents.InlineCollection; }, TextBlock, undefined, undefined, { GetValue: function () { return new Fayde.Documents.InlineCollection(); } });
    TextBlock.LineStackingStrategyProperty = DependencyProperty.RegisterCore("LineStackingStrategy", function () { return new Enum(Fayde.LineStackingStrategy); }, TextBlock);
    TextBlock.LineHeightProperty = DependencyProperty.RegisterCore("LineHeight", function () { return Number; }, TextBlock, NaN);
    TextBlock.TextAlignmentProperty = DependencyProperty.RegisterCore("TextAlignment", function () { return new Enum(Fayde.TextAlignment); }, TextBlock, Fayde.TextAlignment.Left);
    TextBlock.TextTrimmingProperty = DependencyProperty.RegisterCore("TextTrimming", function () { return new Enum(namespace.TextTrimming); }, TextBlock, namespace.TextTrimming.None);
    TextBlock.TextWrappingProperty = DependencyProperty.RegisterCore("TextWrapping", function () { return new Enum(namespace.TextWrapping); }, TextBlock, namespace.TextWrapping.NoWrap);
    Nullstone.AutoProperties(TextBlock, [
        TextBlock.PaddingProperty,
        TextBlock.ForegroundProperty,
        TextBlock.FontFamilyProperty,
        TextBlock.FontStretchProperty,
        TextBlock.FontStyleProperty,
        TextBlock.FontWeightProperty,
        TextBlock.FontSizeProperty,
        TextBlock.TextDecorationsProperty,
        TextBlock.FontSourceProperty,
        TextBlock.TextProperty,
        TextBlock.InlinesProperty,
        TextBlock.LineStackingStrategyProperty,
        TextBlock.LineHeightProperty,
        TextBlock.TextAlignmentProperty,
        TextBlock.TextTrimmingProperty,
        TextBlock.TextWrappingProperty
    ]);
    TextBlock.Annotations = {
        ContentProperty: TextBlock.InlinesProperty
    };
    TextBlock.Instance._ComputeBounds = function () {
        this._Extents = this._Layout.GetRenderExtents();
        var padding = this.Padding;
        this._Extents.X += padding.Left;
        this._Extents.Y += padding.Top;
        this._ExtentsWithChildren = this._Extents;
        this._Bounds = this._IntersectBoundsWithClipPath(this._Extents.GrowBy(this._EffectPadding), false).Transform(this._AbsoluteXform);
        this._BoundsWithChildren = this._Bounds;
        this._ComputeGlobalBounds();
        this._ComputeSurfaceBounds();
    };
    TextBlock.Instance._ComputeActualSize = function () {
        var padding = this.Padding;
        var constraint = this._ApplySizeConstraints(new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
        var result = new Size(0.0, 0.0);
        if (Fayde.LayoutInformation.GetPreviousConstraint(this) !== undefined || this._ReadLocalValue(Fayde.LayoutInformation.LayoutSlotProperty) !== undefined) {
            this._Layout.Layout();
            var actuals = this._Layout.GetActualExtents();
            this._ActualWidth = actuals.Width;
            this._ActualHeight = actuals.Height;
        } else {
            constraint = constraint.ShrinkByThickness(padding);
            this.Layout(constraint);
        }
        result = new Size(this._ActualWidth, this._ActualHeight);
        result = result.GrowByThickness(padding);
        return result;
    };
    TextBlock.Instance._GetTransformOrigin = function () {
        var userXformOrigin = this.RenderTransformOrigin;
        var xformSize = this._ApplySizeConstraints(this.RenderSize);
        return new Point(xformSize.Width * userXformOrigin.X, xformSize.height * userXformOrigin.Y);
    };
    TextBlock.Instance._MeasureOverrideWithError = function (availableSize, error) {
        var padding = this.Padding;
        var constraint = availableSize.ShrinkByThickness(padding);
        this.Layout(constraint);
        desired = new Size(this._ActualWidth, this._ActualHeight).GrowByThickness(padding);
        return desired;
    };
    TextBlock.Instance._ArrangeOverrideWithError = function (finalSize, error) {
        var padding = this.Padding;
        var constraint = finalSize.ShrinkByThickness(padding);
        this.Layout(constraint);
        var arranged = new Size(this._ActualWidth, this._ActualHeight);
        arranged = arranged.Max(constraint);
        this._Layout.SetAvailableWidth(constraint.Width);
        arranged = arranged.GrowByThickness(padding);
        return finalSize;
    };
    TextBlock.Instance._Render = function (ctx, region) {
        ctx.Save();
        this._RenderLayoutClip(ctx);
        var padding = this.Padding;
        var offset = new Point(padding.Left, padding.Top);
        if (this.FlowDirection === Fayde.FlowDirection.RightToLeft) {
            NotImplemented("TextBlock._Render: Right to left");
        }
        this._Layout._Render(ctx, this._GetOriginPoint(), offset);
        ctx.Restore();
    };
    TextBlock.Instance.Layout = function (constraint) {
        if (this._WasSet && this._GetValueNoDefault(TextBlock.TextProperty) === undefined) {
            this._ActualHeight = this._Font.GetActualHeight();
            this._ActualWidth = 0.0;
        } else if (!this._WasSet) {
            this._ActualHeight = 0.0;
            this._ActualWidth = 0.0;
        } else {
            this._Layout.SetMaxWidth(constraint.Width);
            this._Layout.Layout();
            var actuals = this._Layout.GetActualExtents();
            this._ActualWidth = actuals.Width;
            this._ActualHeight = actuals.Height;
        }
        this._Dirty = false;
    };
    TextBlock.Instance._UpdateFont = function (force) {
        this._Font.Family = this.FontFamily;
        this._Font.Stretch = this.FontStretch;
        this._Font.Style = this.FontStyle;
        this._Font.Weight = this.FontWeight;
        this._Font.Size = this.FontSize;
        return this._Font.IsChanged || force;
    };
    TextBlock.Instance._UpdateFonts = function (force) {
        if (!this._UpdateFont(force))
            return false;
        this._InvalidateMeasure();
        this._InvalidateArrange();
        this._UpdateBounds(true);
        this._Dirty = true;
        return true;
    };
    TextBlock.Instance._UpdateLayoutAttributes = function () {
        var inlines = this.Inlines;
        this._InvalidateMeasure();
        this._InvalidateArrange();
        this._UpdateFont(false);
        var length = 0;
        var runs = new LinkedList();
        var count = inlines.GetCount();
        for (var i = 0; i < count; i++) {
            length = this._UpdateLayoutAttributesForInline(inlines.GetValueAt(i), length, runs);
        }
        if (count > 0)
            this._WasSet = true;
        this._Layout.SetText(this.Text, length);
        this._Layout.SetTextAttributes(runs);
    };
    TextBlock.Instance._UpdateLayoutAttributesForInline = function (item, length, runs) {
        if (item instanceof Fayde.Documents.Run) {
            var text = item.Text;
            if (text && text.length) {
                runs.Append(new Fayde.Text._TextLayoutAttributes(item, length));
                length += text.length;
            }
        } else if (item instanceof Fayde.Documents.LineBreak) {
            runs.Append(new Fayde.Text._TextLayoutAttributes(item, length));
            length += 1; //line break length
        } else if (item instanceof Fayde.Documents.Span) {
            var inlines = item.Inlines;
            var count = inlines.GetCount();
            for (var i = 0; i < count; i++) {
                length = this._UpdateLayoutAttributesForInline(inlines.GetValueAt(i), length, runs);
            }
        }
        return length;
    };
    TextBlock.Instance._SerializeText = function (str) {
        var inlines = this.Inlines;
        var count = inlines.GetCount();
        for (var i = 0; i < count; i++) {
            str = inlines.GetValueAt(i)._SerializeText(str);
        }
        return str;
    };
    TextBlock.Instance._GetTextInternal = function (inlines) {
        if (!inlines)
            return "";
        var block = "";
        var count = inlines.GetCount();
        for (var i = 0; i < count; i++) {
            block += inlines.GetValueAt(i)._SerializeText();
        }
        return block;
    };
    TextBlock.Instance._SetTextInternal = function (text) {
        this._SetsValue = false;
        var value;
        var inlines = this._GetValue(TextBlock.InlinesProperty);
        if (text) {
            var count = inlines.GetCount();
            var run = null;
            if (count > 0 && (value = inlines.GetValueAt(0)) && value instanceof Fayde.Documents.Run) {
                run = value;
                if (run._GetAutogenerated()) {
                    while (count > 1) {
                        inlines.RemoveAt(count - 1);
                        count--;
                    }
                } else {
                    run = null;
                }
            }
            if (!run) {
                inlines.Clear();
                run = new Fayde.Documents.Run();
                run._SetAutogenerated(true);
                inlines.Add(run);
            }
            run.Text = text;
            this._Providers[_PropertyPrecedence.Inherited].PropagateInheritedPropertiesOnAddingToTree(run);
        } else {
            inlines.Clear();
            this.Text = "";
        }
        this._SetsValue = true;
    };
    TextBlock.Instance._CanFindElement = function () {
        return true;
    };
    if (!Fayde.IsCanvasEnabled) {
        TextBlock.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== TextBlock) {
                this._OnPropertyChanged$FrameworkElement(args, error);
                if (args.Property._ID !== Fayde.FrameworkElement.LanguageProperty._ID)
                    return;
                if (!this._UpdateFonts(false))
                    return;
            }
            var ivprop = false;
            if (args.Property._ID === TextBlock.FontFamilyProperty._ID
                || args.Property._ID === TextBlock.FontSizeProperty._ID
                || args.Property._ID === TextBlock.FontStretchProperty._ID
                || args.Property._ID === TextBlock.FontStyleProperty._ID
                || args.Property._ID === TextBlock.FontWeightProperty._ID) {
                ivprop = true;
                this._UpdateFonts(false);
            } else if (args.Property._ID === TextBlock.TextProperty._ID) {
                if (this._SetsValue) {
                    this._SetTextInternal(args.NewValue);
                    this._UpdateLayoutAttributes();
                    this._Dirty = true;
                } else {
                    this._UpdateLayoutAttributes();
                }
            } else if (args.Property._ID === TextBlock.InlinesProperty._ID) {
                if (this._SetsValue) {
                    this._SetsValue = false;
                    this._SetValue(TextBlock.TextProperty, this._GetTextInternal(args.NewValue));
                    this._SetsValue = true;
                    this._UpdateLayoutAttributes();
                    this._Dirty = true;
                    this.SetChildrenHtml(args.NewValue);
                } else {
                    this._UpdateLayoutAttributes();
                }
            } else if (args.Property._ID === TextBlock.LineStackingStrategyProperty._ID) {
                this._Dirty = this._Layout.SetLineStackingStrategy(args.NewValue);
            } else if (args.Property._ID === TextBlock.LineHeightProperty._ID) {
                this._Dirty = this._Layout.SetLineHeight(args.NewValue);
                ivprop = true;
            } else if (args.Property._ID === TextBlock.TextDecorationsProperty._ID) {
                this._Dirty = true;
                ivprop = true;
            } else if (args.Property._ID === TextBlock.TextAlignmentProperty._ID) {
                this._Dirty = this._Layout.SetTextAlignment(args.NewValue);
                ivprop = true;
            } else if (args.Property._ID === TextBlock.TextTrimmingProperty._ID) {
                this._Dirty = this._Layout.SetTextTrimming(args.NewValue);
            } else if (args.Property._ID === TextBlock.TextWrappingProperty._ID) {
                this._Dirty = this._Layout.SetTextWrapping(args.NewValue);
                ivprop = true;
            } else if (args.Property._ID === TextBlock.PaddingProperty._ID) {
                this._Dirty = true;
            } else if (args.Property._ID === TextBlock.FontSourceProperty._ID) {
            } else if (args.Property._ID === TextBlock.ForegroundProperty._ID) {
                ivprop = true;
            }
            if (ivprop)
                this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            this.PropertyChanged.Raise(this, args);
        };
        TextBlock.Instance._OnSubPropertyChanged = function (propd, sender, args) {
            if (propd && propd._ID === TextBlock.ForegroundProperty._ID) {
                this.InvalidateProperty(propd);
            } else {
                this._OnSubPropertyChanged$FrameworkElement(propd, sender, args);
            }
        };
        TextBlock.Instance._OnCollectionChanged = function (sender, args) {
            if (!this._PropertyHasValueNoAutoCreate(TextBlock.InlinesProperty, sender)) {
                this._OnCollectionChanged$FrameworkElement(sender, args);
                return;
            }
            var inlines = this.Inlines;
            if (args.IsClearing)
                return;
            if (!this._SetsValue)
                return;
            if (args.IsAdd)
                this._Providers[_PropertyPrecedence.Inherited].PropagateInheritedPropertiesOnAddingToTree(args.NewValue);
            this._SetsValue = false;
            this._SetValue(TextBlock.TextProperty, this._GetTextInternal(inlines));
            this._SetsValue = true;
            this._UpdateLayoutAttributes();
            if (args.IsCleared) {
                this.ClearChildrenHtml();
            } else if (args.IsAdd) {
                this.AddChildHtml(args.NewValue, args.Index);
            } else if (args.IsRemove) {
                this.RemoveChildHtml(args.NewValue);
            } else if (args.IsReplace) {
                this.ReplaceChildHtml(args.OldValue, args.NewValue);
            }
        };
    }
    if (Fayde.IsCanvasEnabled) {
        TextBlock.Instance._OnPropertyChanged = function (args, error) {
            var invalidate = true;
            if (args.Property.OwnerType !== TextBlock) {
                this._OnPropertyChanged$FrameworkElement(args, error);
                if (args.Property._ID !== Fayde.FrameworkElement.LanguageProperty._ID)
                    return;
                if (!this._UpdateFonts(false))
                    return;
            }
            if (args.Property._ID === TextBlock.FontFamilyProperty._ID
                || args.Property._ID === TextBlock.FontSizeProperty._ID
                || args.Property._ID === TextBlock.FontStretchProperty._ID
                || args.Property._ID === TextBlock.FontStyleProperty._ID
                || args.Property._ID === TextBlock.FontWeightProperty._ID) {
                this._UpdateFonts(false);
            } else if (args.Property._ID === TextBlock.TextProperty._ID) {
                if (this._SetsValue) {
                    this._SetTextInternal(args.NewValue);
                    this._UpdateLayoutAttributes();
                    this._Dirty = true;
                } else {
                    this._UpdateLayoutAttributes();
                    invalidate = false;
                }
            } else if (args.Property._ID === TextBlock.InlinesProperty._ID) {
                if (this._SetsValue) {
                    this._SetsValue = false;
                    this._SetValue(TextBlock.TextProperty, this._GetTextInternal(args.NewValue));
                    this._SetsValue = true;
                    this._UpdateLayoutAttributes();
                    this._Dirty = true;
                } else {
                    this._UpdateLayoutAttributes();
                    invalidate = false;
                }
            } else if (args.Property._ID === TextBlock.LineStackingStrategyProperty._ID) {
                this._Dirty = this._Layout.SetLineStackingStrategy(args.NewValue);
            } else if (args.Property._ID === TextBlock.LineHeightProperty._ID) {
                this._Dirty = this._Layout.SetLineHeight(args.NewValue);
            } else if (args.Property._ID === TextBlock.TextDecorationsProperty._ID) {
                this._Dirty = true;
            } else if (args.Property._ID === TextBlock.TextAlignmentProperty._ID) {
                this._Dirty = this._Layout.SetTextAlignment(args.NewValue);
            } else if (args.Property._ID === TextBlock.TextTrimmingProperty._ID) {
                this._Dirty = this._Layout.SetTextTrimming(args.NewValue);
            } else if (args.Property._ID === TextBlock.TextWrappingProperty._ID) {
                this._Dirty = this._Layout.SetTextWrapping(args.NewValue);
            } else if (args.Property._ID === TextBlock.PaddingProperty._ID) {
                this._Dirty = true;
            } else if (args.Property._ID === TextBlock.FontSourceProperty._ID) {
            } else if (args.Property._ID === TextBlock.ForegroundProperty._ID) {
            }
            if (invalidate) {
                if (this._Dirty) {
                    this._InvalidateMeasure();
                    this._InvalidateArrange();
                    this._UpdateBounds(true);
                }
                this._Invalidate();
            }
            this.PropertyChanged.Raise(this, args);
        };
        TextBlock.Instance._OnSubPropertyChanged = function (propd, sender, args) {
            if (propd && propd._ID === TextBlock.ForegroundProperty._ID) {
                this._Invalidate();
            } else {
                this._OnSubPropertyChanged$FrameworkElement(propd, sender, args);
            }
        };
        TextBlock.Instance._OnCollectionChanged = function (sender, args) {
            if (!this._PropertyHasValueNoAutoCreate(TextBlock.InlinesProperty, sender)) {
                this._OnCollectionChanged$FrameworkElement(sender, args);
                return;
            }
            var inlines = this.Inlines;
            if (args.IsClearing)
                return;
            if (!this._SetsValue)
                return;
            if (args.IsAdd)
                this._Providers[_PropertyPrecedence.Inherited].PropagateInheritedPropertiesOnAddingToTree(args.NewValue);
            this._SetsValue = false;
            this._SetValue(TextBlock.TextProperty, this._GetTextInternal(inlines));
            this._SetsValue = true;
            this._UpdateLayoutAttributes();
            this._InvalidateMeasure();
            this._InvalidateArrange();
            this._UpdateBounds(true);
            this._Invalidate();
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        TextBlock.Instance.InitializeHtml = function (rootEl) {
            this.InitializeHtml$FrameworkElement(rootEl);
            var contentEl = rootEl.firstChild;
            contentEl.style.fontFamily = this.FontFamily.toString();
            contentEl.style.fontSize = this.FontSize + "px";
            contentEl.style.fontStretch = this.FontStretch;
            contentEl.style.fontStyle = this.FontStyle;
            contentEl.style.fontWeight = this.FontWeight.toString();
            this.ApplyTextAlignmentHtml(contentEl, this.TextAlignment);
            this.ApplyLineHeightHtml(contentEl, this.LineHeight);
            this.ApplyForegroundHtml(contentEl, this.Foreground);
        };
        TextBlock.Instance.ApplyHtmlChange = function (change) {
            var propd = change.Property;
            if (propd.OwnerType !== TextBlock) {
                this.ApplyHtmlChange$FrameworkElement(change);
                return;
            }
            var rootEl = this.GetRootHtmlElement();
            var contentEl = rootEl.firstChild;
            if (propd._ID === TextBlock.FontFamilyProperty._ID) {
                contentEl.style.fontFamily = change.NewValue.toString();
            } else if (propd._ID === TextBlock.FontSizeProperty._ID) {
                contentEl.style.fontSize = change.NewValue + "px";
            } else if (propd._ID === TextBlock.FontStretchProperty._ID) {
                contentEl.style.fontStretch = change.NewValue;
            } else if (propd._ID === TextBlock.FontStyleProperty._ID) {
                contentEl.style.fontStyle = change.NewValue;
            } else if (propd._ID === TextBlock.FontWeightProperty._ID) {
                contentEl.style.fontWeight = change.NewValue.toString();
            } else if (propd._ID === TextBlock.ForegroundProperty._ID) {
                var brush = change.NewValue;
                if (!brush)
                    brush = this.Foreground;
                this.ApplyForegroundHtml(contentEl, brush);
            } else if (propd._ID === TextBlock.LineHeightProperty._ID) {
                this.ApplyLineHeightHtml(contentEl, change.NewValue);
            } else if (propd._ID === TextBlock.TextAlignmentProperty._ID) {
                var alignment = change.NewValue;
                this.ApplyTextAlignmentHtml(contentEl, alignment);
            } else if (propd._ID === TextBlock.TextWrappingProperty._ID) {
                var wrapping = change.NewValue;
            } else if (propd._ID === TextBlock.TextDecorationsProperty._ID) {
                var decorations = change.NewValue;
                this.ApplyTextDecorationsHtml(contentEl, decorations);
            }
        };
        TextBlock.Instance.ApplyForegroundHtml = function (contentEl, foreground) {
            foreground.SetupBrush(null, null);
            contentEl.style.color = foreground.ToHtml5Object();
        };
        TextBlock.Instance.ApplyLineHeightHtml = function (contentEl, lineHeight) {
            if (isNaN(lineHeight))
                contentEl.style.lineHeight = "";
            else
                contentEl.style.lineHeight = lineHeight + "px";
        };
        TextBlock.Instance.ApplyTextAlignmentHtml = function (contentEl, alignment) {
            switch (alignment) {
                case Fayde.TextAlignment.Left:
                    contentEl.style.textAlign = "left";
                    break;
                case Fayde.TextAlignment.Center:
                    contentEl.style.textAlign = "center";
                    break;
                case Fayde.TextAlignment.Right:
                    contentEl.style.textAlign = "right";
                    break;
            }
        };
        TextBlock.Instance.ApplyTextDecorationsHtml = function (contentEl, decorations) {
            var finalStyle = "";
            if (decorations & Fayde.TextDecorations.Underline)
                finalStyle += "underline ";
            contentEl.style.textDecoration = finalStyle;
        };
        TextBlock.Instance.GetIsFixedWidth = function () {
            return true;
        };
        TextBlock.Instance.GetIsFixedHeight = function () {
            return true;
        };
        TextBlock.Instance.GetParentIsFixedWidth = function () {
            return false;
        };
        TextBlock.Instance.GetParentIsFixedHeight = function () {
            return false;
        };
        TextBlock.Instance.SetChildrenHtml = function (inlines) {
            var rootEl = this.GetRootHtmlElement();
            var contentEl = rootEl.firstChild;
            while (contentEl.hasChildNodes()) {
                contentEl.removeChild(contentEl.lastChild);
            }
            var len = inlines.GetCount();
            for (var i = 0; i < len; i++) {
                var te = inlines.GetValueAt(i);
                contentEl.appendChild(te.GetRootHtmlElement());
            }
        };
        TextBlock.Instance.AddChildHtml = function (inline, newIndex) {
            var rootEl = this.GetRootHtmlElement();
            var contentEl = rootEl.firstChild;
            var index = 0;
            var curEl = contentEl.firstChild;
            while (curEl && index < newIndex) {
                curEl = curEl.nextSibling;
                index++;
            }
            contentEl.insertBefore(inline.GetRootHtmlElement(), curEl);
        };
        TextBlock.Instance.ReplaceChildHtml = function (oldInline, newInline) {
            var rootEl = this.GetRootHtmlElement();
            var contentEl = rootEl.firstChild;
            contentEl.replaceChild(newInline.GetRootHtmlElement(), oldInline.GetRootHtmlElement());
        };
        TextBlock.Instance.RemoveChildHtml = function (inline) {
            var rootEl = this.GetRootHtmlElement();
            var contentEl = rootEl.firstChild;
            contentEl.removeChild(inline.GetRootHtmlElement());
        };
        TextBlock.Instance.ClearChildrenHtml = function () {
            var rootEl = this.GetRootHtmlElement();
            var contentEl = rootEl.firstChild;
            while (contentEl.hasChildNodes()) {
                contentEl.removeChild(contentEl.lastChild);
            }
        };
    }
    namespace.TextBlock = Nullstone.FinishCreate(TextBlock);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var _TextBoxModelChanged = Fayde.Text._TextBoxModelChanged;
    var _TextBoxEmitChanged = Fayde.Text._TextBoxEmitChanged;
    var TextBoxBase = Nullstone.Create("TextBoxBase", namespace.Control);
    TextBoxBase.Instance.Init = function () {
        this.Init$Control();
        this._Undo = new Fayde.Text._TextBoxUndoStack(10);
        this._Redo = new Fayde.Text._TextBoxUndoStack(10);
        this._Buffer = new Fayde.Text._TextBuffer();
        this._MaxLength = 0;
        this._Emit = _TextBoxEmitChanged.NOTHING;
        this._SelectionAnchor = 0;
        this._SelectionCursor = 0;
        this._CursorOffset = 0;
        this._Batch = 0;
        this._Font = new Font();
        this.ModelChanged = new MulticastEvent();
        this._NeedIMReset = false;
        this._Selecting = false;
        this._Captured = false;
        this._IsFocused = false;
        this._SettingValue = true;
    };
    Nullstone.AbstractProperty(TextBoxBase, "SelectionStart");
    Nullstone.AbstractProperty(TextBoxBase, "SelectionLength");
    TextBoxBase.Instance.HasSelectedText = function () {
        return this._SelectionCursor !== this._SelectionAnchor;
    };
    TextBoxBase.Instance.GetFont = function () {
        return this._Font;
    };
    TextBoxBase.Instance.GetTextDecorations = function () {
        return Fayde.TextDecorations.None;
    };
    TextBoxBase.Instance.GetSelectionCursor = function () {
        return this._SelectionCursor;
    };
    TextBoxBase.Instance.GetCaretBrush = function () {
        return null;
    };
    TextBoxBase.Instance.OnApplyTemplate = function () {
        this._ContentElement = this.GetTemplateChild("ContentElement");
        if (this._ContentElement == null) {
            Warn("No ContentElement found");
            this.OnApplyTemplate$Control();
            return;
        }
        if (this._View != null) {
            this._View.SetTextBox(null);
        }
        this._View = new namespace._TextBoxView();
        this._View.SetEnableCursor(!this._IsReadOnly);
        this._View.SetTextBox(this);
        if (this._ContentElement instanceof namespace.ContentPresenter) {
            this._ContentElement._SetValue(namespace.ContentPresenter.ContentProperty, this._View);
        } else if (this._ContentElement instanceof namespace.ContentControl) {
            this._ContentElement._SetValue(namespace.ContentControl.ContentProperty, this._View);
        } else if (this._ContentElement instanceof namespace.Border) {
            this._ContentElement._SetValue(namespace.Border.ChildProperty, this._View);
        } else if (this._ContentElement instanceof namespace.Panel) {
            this._ContentElement.Children.Add(this._View);
        } else {
            Warn("Can't handle ContentElement.");
            this._View.SetTextBox(null);
            this._View = null;
        }
        this.OnApplyTemplate$Control();
    };
    TextBoxBase.Instance._BatchPush = function () {
        this._Batch++;
    };
    TextBoxBase.Instance._BatchPop = function () {
        if (this._Batch == 0) {
            Warn("TextBoxBase._Batch underflow");
            return;
        }
        this._Batch--;
    };
    TextBoxBase.Instance._SyncAndEmit = function (syncText) {
        if (syncText === undefined)
            syncText = true;
        if (this._Batch != 0 || this._Emit === _TextBoxEmitChanged.NOTHING)
            return;
        if (syncText && (this._Emit & _TextBoxEmitChanged.TEXT))
            this._SyncText();
        if (this._Emit & _TextBoxEmitChanged.SELECTION)
            this._SyncSelectedText();
        if (this._IsLoaded) {
            this._Emit &= this._EventsMask;
            if (this._Emit & _TextBoxEmitChanged.TEXT)
                this._EmitTextChanged();
            if (this._Emit & _TextBoxEmitChanged.SELECTION)
                this._EmitSelectionChanged();
        }
        this._Emit = _TextBoxEmitChanged.NOTHING;
    };
    TextBoxBase.Instance._SyncText = function () {
        AbstractMethod("TextBoxBase._SyncText");
    };
    TextBoxBase.Instance._EmitTextChanged = function () { };
    TextBoxBase.Instance.SelectAll = function () {
        this._Select(0, this._Buffer.GetLength());
    };
    TextBoxBase.Instance.ClearSelection = function (start) {
        this._BatchPush();
        this.SelectionStart = start;
        this.SelectionLength = 0;
        this._BatchPop();
    };
    TextBoxBase.Instance.Select = function (start, length) {
        if (start < 0)
            throw new ArgumentException("start < 0");
        if (length < 0)
            throw new ArgumentException("length < 0");
        if (start > this._Buffer.GetLength())
            start = this._Buffer.GetLength();
        if (length > (this._Buffer.GetLength() - start))
            length = this._Buffer.GetLength() - start;
        this._BatchPush();
        this.SelectionStart = start;
        this.SelectionLength = length;
        this._BatchPop();
        this._ResetIMContext();
        this._SyncAndEmit();
        return true;
    };
    TextBoxBase.Instance._SyncSelectedText = function () {
        AbstractMethod("TextBoxBase._SyncSelectedText");
    };
    TextBoxBase.Instance._EmitSelectionChanged = function () { };
    TextBoxBase.Instance._ResetIMContext = function () {
        if (this._NeedIMReset) {
            this._NeedIMReset = false;
        }
    };
    TextBoxBase.Instance.CanUndo = function () {
        return !this._Undo.IsEmpty();
    };
    TextBoxBase.Instance.Undo = function () {
        if (this._Undo.IsEmpty())
            return;
        var action = this._Undo.Pop();
        this._Redo.Push(action);
        if (action instanceof Fayde.Text._TextBoxUndoActionInsert) {
            this._Buffer.Cut(action._Start, action._Length);
        } else if (action instanceof Fayde.Text._TextBoxUndoActionDelete) {
            this._Buffer.Insert(action._Start, action._Text);
        } else if (action instanceof Fayde.Text._TextBoxUndoActionReplace) {
            this._Buffer.Cut(action._Start, action._Inserted.length);
            this._Buffer.Insert(action._Start, action._Deleted);
        }
        var anchor = action._SelectionAnchor;
        var cursor = action._SelectionCursor;
        this._BatchPush();
        this.SelectionStart = Math.min(anchor, cursor);
        this.SelectionLength = Math.abs(cursor - anchor);
        this._Emit = _TextBoxEmitChanged.TEXT | _TextBoxEmitChanged.SELECTION;
        this._SelectionAnchor = anchor;
        this._SelectionCursor = cursor;
        this._BatchPop();
        this._SyncAndEmit();
    };
    TextBoxBase.Instance.CanRedo = function () {
        return !this._Redo.IsEmpty();
    };
    TextBoxBase.Instance.Redo = function () {
        if (this._Redo.IsEmpty())
            return;
        var action = this._Redo.Pop();
        this._Undo.Push(action);
        var anchor;
        var cursor;
        if (action instanceof Fayde.Text._TextBoxUndoActionInsert) {
            this._Buffer.Insert(action._Start, action._Buffer._Text);
            anchor = cursor = action._Start + action._Buffer.GetLength();
        } else if (action instanceof Fayde.Text._TextBoxUndoActionDelete) {
            this._Buffer.Cut(action._Start, action._Length);
            anchor = cursor = action._Start;
        } else if (action instanceof Fayde.Text._TextBoxUndoActionReplace) {
            this._Buffer.Cut(action._Start, action._Length);
            this._Buffer.Insert(action._Start, action._Inserted);
            anchor = cursor = action._Start + action._Inserted.length;
        }
        this._BatchPush();
        this.SelectionStart = Math.min(anchor, cursor);
        this.SelectionLength = Math.abs(cursor - anchor);
        this._Emit = _TextBoxEmitChanged.TEXT | _TextBoxEmitChanged.SELECTION;
        this._SelectionAnchor = anchor;
        this._SelectionCursor = cursor;
        this._BatchPop();
        this._SyncAndEmit();
    };
    TextBoxBase.Instance._OnPropertyChanged = function (args, error) {
        var changed = _TextBoxModelChanged.Nothing;
        if (args.Property._ID === Fayde.Controls.Control.FontFamilyProperty._ID) {
            this._Font.Family = args.NewValue;
            changed = _TextBoxModelChanged.Font;
        } else if (args.Property._ID === Fayde.Controls.Control.FontSizeProperty._ID) {
            this._Font.Size = args.NewValue;
            changed = _TextBoxModelChanged.Font;
        } else if (args.Property._ID === Fayde.Controls.Control.FontStretchProperty._ID) {
            this._Font.Stretch = args.NewValue;
            changed = _TextBoxModelChanged.Font;
        } else if (args.Property._ID === Fayde.Controls.Control.FontStyleProperty._ID) {
            this._Font.Style = args.NewValue;
            changed = _TextBoxModelChanged.Font;
        } else if (args.Property._ID === Fayde.Controls.Control.FontWeightProperty._ID) {
            this._Font.Weight = args.NewValue;
            changed = _TextBoxModelChanged.Font;
        }
        if (changed !== _TextBoxModelChanged.Nothing)
            this.ModelChanged.Raise(this, new namespace._TextBoxModelChangedEventArgs(changed, args));
        if (args.Property.OwnerType !== TextBoxBase) {
            this._OnPropertyChanged$Control(args, error);
            return;
        }
        this.PropertyChanged.Raise(this, args);
    };
    TextBoxBase.Instance._OnSubPropertyChanged = function (propd, sender, args) {
        if (propd && (propd._ID === Fayde.Controls.Control.BackgroundProperty._ID
            || propd._ID === Fayde.Controls.Control.ForegroundProperty._ID)) {
            this.ModelChanged.Raise(this, new namespace._TextBoxModelChangedEventArgs(_TextBoxModelChanged.Brush, args));
            this._Invalidate();
        }
        if (propd && propd.OwnerType !== TextBoxBase)
            this._OnSubPropertyChanged$Control(propd, sender, args);
    };
    TextBoxBase.Instance.OnMouseLeftButtonDown = function (sender, args) {
        args.Handled = true;
        this.Focus();
        if (this._View) {
            var p = args.GetPosition(this._View);
            var cursor = this._View.GetCursorFromXY(p.X, p.Y);
            this._ResetIMContext();
            this._Captured = this.CaptureMouse();
            TextDebug("TextBox-CapturedMouse: " + this._Captured);
            this._Selecting = true;
            this._BatchPush();
            this._Emit = _TextBoxEmitChanged.NOTHING;
            this.SelectionStart = cursor;
            this.SelectionLength = 0;
            this._BatchPop();
            this._SyncAndEmit();
        }
    };
    TextBoxBase.Instance.OnMouseLeftButtonUp = function (sender, args) {
        if (this._Captured) {
            this.ReleaseMouseCapture();
            TextDebug("TextBox-ReleaseCapturedMouse");
        }
        args.Handled = true;
        this._Selecting = false;
        this._Captured = false;
    };
    TextBoxBase.Instance.OnMouseMove = function (sender, args) {
        var anchor = this._SelectionAnchor;
        var cursor = this._SelectionCursor;
        if (this._Selecting) {
            var p = args.GetPosition(this._View);
            args.Handled = true;
            cursor = this._View.GetCursorFromXY(p.X, p.Y);
            TextDebug("TextBox.MouseMove-CursorPos: " + p.toString());
            this._BatchPush();
            this._Emit = _TextBoxEmitChanged.NOTHING;
            this.SelectionStart = Math.min(anchor, cursor);
            this.SelectionLength = Math.abs(cursor - anchor);
            this._SelectionAnchor = anchor;
            this._SelectionCursor = cursor;
            this._BatchPop();
            this._SyncAndEmit();
        }
    };
    TextBoxBase.Instance.CursorDown = function (cursor, isPage) {
        return cursor;
    };
    TextBoxBase.Instance.CursorUp = function (cursor, isPage) {
        return cursor;
    };
    TextBoxBase.Instance.CursorNextWord = function (cursor) {
        return cursor;
    };
    TextBoxBase.Instance.CursorPrevWord = function (cursor) {
        return cursor;
    };
    TextBoxBase.Instance.CursorLineBegin = function (cursor) {
        return cursor;
    };
    TextBoxBase.Instance.CursorLineEnd = function (cursor) {
        return cursor;
    };
    TextBoxBase.Instance._EmitCursorPositionChanged = function (height, x, y) {
    };
    TextBoxBase.Instance.OnKeyDown = function (args) {
        switch (args.Key) {
            case Key.Shift: //shift
            case Key.Ctrl: //ctrl
            case Key.Alt: //alt
                return;
        }
        var handled = false;
        this._Emit = _TextBoxEmitChanged.NOTHING;
        this._BatchPush();
        switch (args.Key) {
            case Key.Back:
                if (this._IsReadOnly)
                    break;
                handled = this._KeyDownBackSpace(args.Modifiers);
                break;
            case Key.Delete:
                if (this._IsReadOnly)
                    break;
                if (args.Modifiers.Shift) {
                    handled = true;
                } else {
                    handled = this._KeyDownDelete(args.Modifiers);
                }
                break;
            case Key.Insert:
                if (args.Modifiers.Shift) {
                    handled = true;
                } else if (args.Modifiers.Ctrl) {
                    handled = true;
                }
                break;
            case Key.PageDown:
                handled = this._KeyDownPageDown(args.Modifiers);
                break;
            case Key.PageUp:
                handled = this._KeyDownPageUp(args.Modifiers);
                break;
            case Key.Home:
                handled = this._KeyDownHome(args.Modifiers);
                break;
            case Key.End:
                handled = this._KeyDownEnd(args.Modifiers);
                break;
            case Key.Left:
                handled = this._KeyDownLeft(args.Modifiers);
                break;
            case Key.Right:
                handled = this._KeyDownRight(args.Modifiers);
                break;
            case Key.Down:
                handled = this._KeyDownDown(args.Modifiers);
                break;
            case Key.Up:
                handled = this._KeyDownUp(args.Modifiers);
                break;
            default:
                if (args.Modifiers.Ctrl) {
                    switch (args.Key) {
                        case Key.A:
                            handled = true;
                            this.SelectAll();
                            break;
                        case Key.C:
                            handled = true;
                            break;
                        case Key.X:
                            if (this._IsReadOnly)
                                break;
                            this.SelectedText = "";
                            handled = true;
                            break;
                        case Key.Y:
                            if (!this.IsReadOnly) {
                                handled = true;
                                this.Redo();
                            }
                            break;
                        case Key.Z:
                            if (!this.IsReadOnly) {
                                handled = true;
                                this.Undo();
                            }
                            break;
                    }
                }
                break;
        }
        if (handled) {
            args.Handled = handled;
            this._ResetIMContext();
        }
        this._BatchPop();
        this._SyncAndEmit();
        if (!args.Handled)
            this.PostOnKeyDown(args);
    };
    TextBoxBase.Instance.PostOnKeyDown = function (args) {
        if (args.Handled)
            return;
        /*
        if (!this._IsReadOnly && this._IMCtx.FilterKeyPress()) {
        this._NeedIMReset = true;
        return;
        }
        */
        if (this._IsReadOnly || args.Modifiers.Alt || args.Modifiers.Ctrl)
            return;
        this._Emit = _TextBoxEmitChanged.NOTHING;
        this._BatchPush();
        if (args.Key === Key.Enter) {
            this._KeyDownChar('\r');
        } else if (args.Char != null && !args.Modifiers.Ctrl && !args.Modifiers.Alt) {
            this._KeyDownChar(args.Char);
        }
        this._BatchPop();
        this._SyncAndEmit();
    };
    TextBoxBase.Instance._KeyDownBackSpace = function (modifiers) {
        if (modifiers.Shift || modifiers.Alt)
            return false;
        var anchor = this._SelectionAnchor;
        var cursor = this._SelectionCursor;
        var start = 0;
        var length = 0;
        var handled = false;
        if (cursor !== anchor) {
            length = Math.abs(cursor - anchor);
            start = Math.min(anchor, cursor);
        } else if (modifiers.Ctrl) {
            start = this.CursorPrevWord(cursor);
            length = cursor - start;
        } else if (cursor > 0) {
            if (cursor >= 2 && this._Buffer._Text && this._Buffer._Text.charAt(cursor - 2) == '\r' && this._Buffer._Text.charAt(cursor - 1) == '\n') {
                start = cursor - 2;
                length = 2;
            } else {
                start = cursor - 1;
                length = 1;
            }
        }
        if (length > 0) {
            action = new Fayde.Text._TextBoxUndoActionDelete(this._SelectionAnchor, this._SelectionCursor, this._Buffer, start, length);
            this._Undo.Push(action);
            this._Redo.Clear();
            this._Buffer.Cut(start, length);
            this._Emit |= _TextBoxEmitChanged.TEXT;
            anchor = start;
            cursor = start;
            handled = true;
        }
        if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
            this.SelectionStart = Math.min(anchor, cursor);
            this.SelectionLength = Math.abs(cursor - anchor);
            this._SelectionAnchor = anchor;
            this._SelectionCursor = cursor;
            this._Emit |= _TextBoxEmitChanged.SELECTION;
            handled = true;
        }
        return handled;
    };
    TextBoxBase.Instance._KeyDownDelete = function (modifiers) {
        if (modifiers.Shift || modifiers.Alt)
            return false;
        var anchor = this._SelectionAnchor;
        var cursor = this._SelectionCursor;
        var start = 0;
        var length = 0;
        var handled = false;
        if (cursor !== anchor) {
            length = Math.abs(cursor - anchor);
            start = Math.min(anchor, cursor);
        } else if (modifiers.Ctrl) {
            length = this.CursorNextWord(cursor) - cursor;
            start = cursor;
        } else if (this._Buffer._Text && cursor < this._Buffer._Text.length) {
            if (this._Buffer._Text.charAt(cursor) === '\r' && this._Buffer._Text.charAt(cursor + 1) === '\n')
                length = 2;
            else
                length = 1;
            start = cursor;
        }
        if (length > 0) {
            action = new Fayde.Text._TextBoxUndoActionDelete(this._SelectionAnchor, this._SelectionCursor, this._Buffer, start, length);
            this._Undo.Push(action);
            this._Redo.Clear();
            this._Buffer.Cut(start, length);
            this._Emit |= _TextBoxEmitChanged.TEXT;
            handled = true;
        }
        if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
            this.SelectionStart = Math.min(anchor, cursor);
            this.SelectionLength = Math.abs(cursor - anchor);
            this._SelectionAnchor = anchor;
            this._SelectionCursor = cursor;
            this._Emit |= _TextBoxEmitChanged.SELECTION;
            handled = true;
        }
        return handled;
    };
    TextBoxBase.Instance._KeyDownPageDown = function (modifiers) {
        if (modifiers.Alt)
            return false;
        var anchor = this._SelectionAnchor;
        var cursor = this._SelectionCursor;
        cursor = this.CursorDown(cursor, true);
        var have = this._HaveOffset;
        if (!modifiers.Shift) {
            anchor = cursor;
        }
        if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
            this.SelectionStart = Math.min(anchor, cursor);
            this.SelectionLength = Math.abs(cursor - anchor);
            this._SelectionAnchor = anchor;
            this._SelectionCursor = cursor;
            this._Emit |= _TextBoxEmitChanged.SELECTION;
            this._HaveOffset = have;
        }
        return true;
    };
    TextBoxBase.Instance._KeyDownPageUp = function (modifiers) {
        if (modifiers.Alt)
            return false;
        var anchor = this._SelectionAnchor;
        var cursor = this._SelectionCursor;
        cursor = this.CursorUp(cursor, true);
        var have = this._HaveOffset;
        if (!modifiers.Shift) {
            anchor = cursor;
        }
        if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
            this.SelectionStart = Math.min(anchor, cursor);
            this.SelectionLength = Math.abs(cursor - anchor);
            this._SelectionAnchor = anchor;
            this._SelectionCursor = cursor;
            this._Emit |= _TextBoxEmitChanged.SELECTION;
            this._HaveOffset = have;
        }
        return true;
    };
    TextBoxBase.Instance._KeyDownHome = function (modifiers) {
        if (modifiers.Alt)
            return false;
        var anchor = this._SelectionAnchor;
        var cursor = this._SelectionCursor;
        var handled = false;
        if (modifiers.Ctrl) {
            cursor = 0;
        } else {
            cursor = this.CursorLineBegin(cursor);
        }
        if (!modifiers.Shift) {
            anchor = cursor;
        }
        if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
            this.SelectionStart = Math.min(anchor, cursor);
            this.SelectionLength = Math.abs(cursor - anchor);
            this._SelectionAnchor = anchor;
            this._SelectionCursor = cursor;
            this._Emit |= _TextBoxEmitChanged.SELECTION;
            this._HaveOffset = false;
            handled = true;
        }
        return handled;
    };
    TextBoxBase.Instance._KeyDownEnd = function (modifiers) {
        if (modifiers.Alt)
            return false;
        var anchor = this._SelectionAnchor;
        var cursor = this._SelectionCursor;
        var handled = false;
        if (modifiers.Ctrl) {
            cursor = this._Buffer.GetLength();
        } else {
            cursor = this.CursorLineEnd(cursor);
        }
        if (!modifiers.Shift) {
            anchor = cursor;
        }
        if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
            this.SelectionStart = Math.min(anchor, cursor);
            this.SelectionLength = Math.abs(cursor - anchor);
            this._SelectionAnchor = anchor;
            this._SelectionCursor = cursor;
            this._Emit |= _TextBoxEmitChanged.SELECTION;
            this._HaveOffset = false;
            handled = true;
        }
        return handled;
    };
    TextBoxBase.Instance._KeyDownLeft = function (modifiers) {
        if (modifiers.Alt)
            return false;
        var anchor = this._SelectionAnchor;
        var cursor = this._SelectionCursor;
        var handled = false;
        if (modifiers.Ctrl) {
            cursor = this.CursorPrevWord(cursor);
        } else if (!modifiers.Shift && anchor !== cursor) {
            cursor = Math.min(anchor, cursor);
        } else {
            if (cursor >= 2 && this._Buffer._Text && this._Buffer._Text.charAt(cursor - 2) === '\r' && this._Buffer._Text.charAt(cursor - 1) === '\n')
                cursor -= 2;
            else if (cursor > 0)
                cursor--;
        }
        if (!modifiers.Shift)
            anchor = cursor;
        if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
            this.SelectionStart = Math.min(anchor, cursor);
            this.SelectionLength = Math.abs(cursor - anchor);
            this._SelectionAnchor = anchor;
            this._SelectionCursor = cursor;
            this._Emit |= _TextBoxEmitChanged.SELECTION;
            handled = true;
        }
        return handled;
    };
    TextBoxBase.Instance._KeyDownRight = function (modifiers) {
        if (modifiers.Alt)
            return false;
        var anchor = this._SelectionAnchor;
        var cursor = this._SelectionCursor;
        var handled = false;
        if (modifiers.Ctrl) {
            cursor = this.CursorNextWord(cursor);
        } else if (!modifiers.Shift && anchor !== cursor) {
            cursor = Math.max(anchor, cursor);
        } else {
            if (this._Buffer._Text && this._Buffer._Text.charAt(cursor) === '\r' && this._Buffer._Text.charAt(cursor + 1) === '\n')
                cursor += 2;
            else if (cursor < this._Buffer.GetLength())
                cursor++;
        }
        if (!modifiers.Shift)
            anchor = cursor;
        if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
            this.SelectionStart = Math.min(anchor, cursor);
            this.SelectionLength = Math.abs(cursor - anchor);
            this._SelectionAnchor = anchor;
            this._SelectionCursor = cursor;
            this._Emit |= _TextBoxEmitChanged.SELECTION;
            handled = true;
        }
        return handled;
    };
    TextBoxBase.Instance._KeyDownDown = function (modifiers) {
        if (modifiers.Alt)
            return false;
        var anchor = this._SelectionAnchor;
        var cursor = this._SelectionCursor;
        var handled = false;
        cursor = this.CursorDown(cursor, false);
        var have = this._HaveOffset;
        if (!modifiers.Shift) {
            anchor = cursor;
        }
        if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
            this.SelectionStart = Math.min(anchor, cursor);
            this.SelectionLength = Math.abs(cursor - anchor);
            this._SelectionAnchor = anchor;
            this._SelectionCursor = cursor;
            this._Emit |= _TextBoxEmitChanged.SELECTION;
            this._HaveOffset = have;
            handled = true;
        }
        return handled;
    };
    TextBoxBase.Instance._KeyDownUp = function (modifiers) {
        if (modifiers.Alt)
            return false;
        var anchor = this._SelectionAnchor;
        var cursor = this._SelectionCursor;
        var handled = false;
        cursor = this.CursorUp(cursor, false);
        var have = this._HaveOffset;
        if (!modifiers.Shift) {
            anchor = cursor;
        }
        if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
            this.SelectionStart = Math.min(anchor, cursor);
            this.SelectionLength = Math.abs(cursor - anchor);
            this._SelectionAnchor = anchor;
            this._SelectionCursor = cursor;
            this._Emit |= _TextBoxEmitChanged.SELECTION;
            this._HaveOffset = have;
            handled = true;
        }
        return handled;
    };
    TextBoxBase.Instance._KeyDownChar = function (c) {
        var anchor = this._SelectionAnchor;
        var cursor = this._SelectionCursor;
        var length = Math.abs(cursor - anchor);
        var start = Math.min(anchor, cursor);
        var action;
        if ((this._MaxLength > 0 && this._Buffer.GetLength() >= this._MaxLength) || (c === '\r') && !this._AcceptsReturn)
            return false;
        if (length > 0) {
            action = new Fayde.Text._TextBoxUndoActionReplace(anchor, cursor, this._Buffer, start, length, c);
            this._Undo.Push(action);
            this._Redo.Clear();
            this._Buffer.Replace(start, length, c);
        } else {
            var ins = null;
            action = this._Undo.Peek();
            if (action instanceof Fayde.Text._TextBoxUndoActionInsert) {
                ins = action;
                if (!ins.Insert(start, c))
                    ins = null;
            }
            if (!ins) {
                ins = new Fayde.Text._TextBoxUndoActionInsert(anchor, cursor, start, c);
                this._Undo.Push(ins);
            }
            this._Redo.Clear();
            this._Buffer.Insert(start, c);
        }
        this._Emit |= _TextBoxEmitChanged.TEXT;
        cursor = start + 1;
        anchor = cursor;
        if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
            this.SelectionStart = Math.min(anchor, cursor);
            this.SelectionLength = Math.abs(cursor - anchor);
            this._SelectionAnchor = anchor;
            this._SelectionCursor = cursor;
            this._Emit |= _TextBoxEmitChanged.SELECTION;
        }
        return true;
    };
    TextBoxBase.Instance.OnLostFocus = function (e) {
        this._IsFocused = false;
        if (this._View)
            this._View.OnLostFocus(e);
        if (!this._IsReadOnly) {
            this._NeedIMReset = true;
        }
    };
    TextBoxBase.Instance.OnGotFocus = function (e) {
        this._IsFocused = true;
        if (this._View)
            this._View.OnGotFocus(e);
        if (!this._IsReadOnly) {
            this._NeedIMReset = true;
        }
    };
    namespace.TextBoxBase = Nullstone.FinishCreate(TextBoxBase);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var _TextBoxModelChanged = Fayde.Text._TextBoxModelChanged;
    var _TextBoxView = Nullstone.Create("_TextBoxView", Fayde.FrameworkElement);
    _TextBoxView.Instance.Init = function () {
        this.Init$FrameworkElement();
        this._Cursor = new Rect();
        this._Layout = new Fayde.Text.TextLayout();
        this._SelectionChanged = false;
        this._HadSelectedText = false;
        this._CursorVisible = false;
        this._EnableCursor = true;
        this._BlinkTimeout = 0;
        this._TextBox = null;
        this._Dirty = false;
        this.Cursor = CursorType.IBeam;
    };
    _TextBoxView.Instance.SetTextBox = function (value) {
        if (this._TextBox == value)
            return;
        if (this._TextBox) {
            this._TextBox.ModelChanged.Unsubscribe(this._OnModelChanged, this);
        }
        this._TextBox = value;
        if (this._TextBox) {
            this._TextBox.ModelChanged.Subscribe(this._OnModelChanged, this);
            this._Layout.SetTextAttributes(new LinkedList());
            var attrs = new Fayde.Text._TextLayoutAttributes(this._TextBox, 0);
            this._Layout.GetTextAttributes().Append(attrs);
            this._Layout.SetTextAlignment(this._TextBox.TextAlignment);
            this._Layout.SetTextWrapping(this._TextBox.TextWrapping);
            this._HadSelectedText = this._TextBox.HasSelectedText();
            this._SelectionChanged = true;
            this._UpdateText();
        } else {
            this._Layout.SetTextAttributes(null);
            this._Layout.SetText(null, -1);
        }
        this._UpdateBounds(true);
        this._InvalidateMeasure();
        this._Invalidate();
        this._Dirty = true;
    };
    _TextBoxView.Instance.SetEnableCursor = function (value) {
        if (this._EnableCursor == value)
            return;
        this._EnableCursor = value;
        if (value)
            this._ResetCursorBlink(false);
        else
            this._EndCursorBlink();
    };
    _TextBoxView.Instance._Blink = function () {
        var multiplier;
        if (this._CursorVisible) {
            multiplier = _TextBoxView.CURSOR_BLINK_OFF_MULTIPLIER;
            this._HideCursor();
        } else {
            multiplier = _TextBoxView.CURSOR_BLINK_ON_MULTIPLIER;
            this._ShowCursor();
        }
        this._ConnectBlinkTimeout(multiplier);
        return false;
    };
    _TextBoxView.Instance._ConnectBlinkTimeout = function (multiplier) {
        if (!this._IsAttached)
            return;
        var view = this;
        var timeout = this._GetCursorBlinkTimeout() * multiplier / _TextBoxView.CURSOR_BLINK_DIVIDER;
        this._BlinkTimeout = setTimeout(function () { view._Blink(); }, timeout);
    };
    _TextBoxView.Instance._DisconnectBlinkTimeout = function () {
        if (this._BlinkTimeout != 0) {
            if (!this._IsAttached)
                return;
            clearTimeout(this._BlinkTimeout);
            this._BlinkTimeout = 0;
        }
    };
    _TextBoxView.Instance._GetCursorBlinkTimeout = function () {
        return _TextBoxView.CURSOR_BLINK_TIMEOUT_DEFAULT;
    };
    _TextBoxView.Instance._ResetCursorBlink = function (delay) {
        if (this._TextBox._IsFocused && !this._TextBox.HasSelectedText()) {
            if (this._EnableCursor) {
                if (this._Delay)
                    this._DelayCursorBlink();
                else
                    this._BeginCursorBlink();
            } else {
                this._UpdateCursor(false);
            }
        } else {
            this._EndCursorBlink();
        }
    };
    _TextBoxView.Instance._DelayCursorBlink = function () {
        this._DisconnectBlinkTimeout();
        this._ConnectBlinkTimeout(_TextBoxView.CURSOR_BLINK_DELAY_MULTIPLIER);
        this._UpdateCursor(true);
        this._ShowCursor();
    };
    _TextBoxView.Instance._BeginCursorBlink = function () {
        if (this._BlinkTimeout == 0) {
            this._ConnectBlinkTimeout(_TextBoxView.CURSOR_BLINK_ON_MULTIPLIER);
            this._UpdateCursor(true);
            this._ShowCursor();
        }
    };
    _TextBoxView.Instance._EndCursorBlink = function () {
        this._DisconnectBlinkTimeout();
        if (this._CursorVisible)
            this._HideCursor();
    };
    _TextBoxView.Instance._InvalidateCursor = function () {
        this._Invalidate(this._Cursor.Transform(this._AbsoluteXform));
    };
    _TextBoxView.Instance._ShowCursor = function () {
        this._CursorVisible = true;
        this._InvalidateCursor();
    };
    _TextBoxView.Instance._HideCursor = function () {
        this._CursorVisible = false;
        this._InvalidateCursor();
    };
    _TextBoxView.Instance._UpdateCursor = function (invalidate) {
        var cur = this._TextBox.GetSelectionCursor();
        var current = this._Cursor;
        var rect;
        if (invalidate && this._CursorVisible)
            this._InvalidateCursor();
        this._Cursor = this._Layout.GetSelectionCursor(new Point(), cur);
        rect = this._Cursor.Transform(this._AbsoluteXform);
        if (!Rect.Equals(this._Cursor, current))
            this._TextBox._EmitCursorPositionChanged(this._Cursor.Height, this._Cursor.X, this._Cursor.Y);
        if (invalidate && this._CursorVisible)
            this._InvalidateCursor();
    };
    _TextBoxView.Instance._UpdateText = function () {
        var text = this._TextBox.GetDisplayText();
        this._Layout.SetText(text ? text : "", -1);
    };
    _TextBoxView.Instance._ComputeActualSize = function () {
        if (this._ReadLocalValue(Fayde.LayoutInformation.LayoutSlotProperty) !== undefined)
            return this._ComputeActualSize$FrameworkElement();
        this.Layout(new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
        return this._Layout.GetActualExtents();
    };
    _TextBoxView.Instance._MeasureOverrideWithError = function (availableSize, error) {
        this.Layout(availableSize);
        var desired = this._Layout.GetActualExtents();
        if (!isFinite(availableSize.Width))
            desired.Width = Math.max(desired.Width, 11);
        return desired.Min(availableSize);
    };
    _TextBoxView.Instance._ArrangeOverrideWithError = function (finalSize, error) {
        this.Layout(finalSize);
        var arranged = this._Layout.GetActualExtents();
        arranged = arranged.Max(finalSize);
        return arranged;
    };
    _TextBoxView.Instance.Layout = function (constraint) {
        this._Layout.SetMaxWidth(constraint.Width);
        this._Layout.Layout();
        this._Dirty = false;
    };
    _TextBoxView.Instance.GetBaselineOffset = function () {
        return this._Layout.GetBaselineOffset();
    };
    _TextBoxView.Instance.GetLineFromY = function (y) {
        return this._Layout.GetLineFromY(new Point(), y);
    };
    _TextBoxView.Instance.GetLineFromIndex = function (index) {
        return this._Layout.GetLineFromIndex(index);
    };
    _TextBoxView.Instance.GetCursorFromXY = function (x, y) {
        return this._Layout.GetCursorFromXY(new Point(), x, y);
    };
    _TextBoxView.Instance._Render = function (ctx, region) {
        var renderSize = this._RenderSize;
        this._TextBox._Providers[_PropertyPrecedence.DynamicValue]._InitializeSelectionBrushes();
        this._UpdateCursor(false);
        if (this._SelectionChanged) {
            this._Layout.Select(this._TextBox.SelectionStart, this._TextBox.SelectionLength);
            this._SelectionChanged = false;
        }
        ctx.Save();
        this._RenderLayoutClip(ctx);
        this._Layout.SetAvailableWidth(renderSize.Width);
        this._RenderImpl(ctx, region);
        ctx.Restore();
    };
    _TextBoxView.Instance._RenderImpl = function (ctx, region) {
        ctx.Save();
        if (this.FlowDirection === Fayde.FlowDirection.RightToLeft) {
        }
        this._Layout._Render(ctx, this._GetOriginPoint(), new Point());
        if (this._CursorVisible) {
            var caretBrush = this._TextBox.CaretBrush;
            if (!caretBrush)
                caretBrush = new Fayde.Media.SolidColorBrush(new Color(0, 0, 0));
            var canvasCtx = ctx.CanvasContext;
            var rect = this._Cursor;
            canvasCtx.beginPath();
            canvasCtx.moveTo(rect.X + 0.5, rect.Y);
            canvasCtx.lineTo(rect.X + 0.5, rect.Y + rect.Height);
            canvasCtx.lineWidth = 1.0;
            caretBrush.SetupBrush(canvasCtx, rect);
            canvasCtx.strokeStyle = caretBrush.ToHtml5Object();
            canvasCtx.stroke();
        }
        ctx.Restore();
    };
    _TextBoxView.Instance.OnLostFocus = function (e) {
        this._EndCursorBlink();
    };
    _TextBoxView.Instance.OnGotFocus = function (e) {
        this._ResetCursorBlink(false);
    };
    _TextBoxView.Instance.OnMouseLeftButtonDown = function (sender, args) {
        this._TextBox.OnMouseLeftButtonDown(sender, args);
    };
    _TextBoxView.Instance.OnMouseLeftButtonUp = function (sender, args) {
        this._TextBox.OnMouseLeftButtonUp(sender, args);
    };
    _TextBoxView.Instance._OnModelChanged = function (sender, args) {
        switch (args.Changed) {
            case _TextBoxModelChanged.TextAlignment:
                if (this._Layout.SetTextAlignment(args.NewValue))
                    this._Dirty = true;
                break;
            case _TextBoxModelChanged.TextWrapping:
                if (this._Layout.SetTextWrapping(args.NewValue))
                    this._Dirty = true;
                break;
            case _TextBoxModelChanged.Selection:
                if (this._HadSelectedText || this._TextBox.HasSelectedText()) {
                    this._HadSelectedText = this._TextBox.HasSelectedText();
                    this._SelectionChanged = true;
                    this._ResetCursorBlink(false);
                } else {
                    this._ResetCursorBlink(true);
                    return;
                }
                break;
            case _TextBoxModelChanged.Brush:
                break;
            case _TextBoxModelChanged.Font:
                this._Layout._ResetState();
                this._Dirty = true;
                break;
            case _TextBoxModelChanged.Text:
                this._UpdateText();
                this._Dirty = true;
                break;
            default:
                return;
        }
        if (this._Dirty) {
            this._InvalidateMeasure();
            this._UpdateBounds(true);
        }
        this._Invalidate();
    };
    _TextBoxView.CURSOR_BLINK_DIVIDER = 3;
    _TextBoxView.CURSOR_BLINK_OFF_MULTIPLIER = 2;
    _TextBoxView.CURSOR_BLINK_DELAY_MULTIPLIER = 3;
    _TextBoxView.CURSOR_BLINK_ON_MULTIPLIER = 4;
    _TextBoxView.CURSOR_BLINK_TIMEOUT_DEFAULT = 900;
    namespace._TextBoxView = Nullstone.FinishCreate(_TextBoxView);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var UserControl = Nullstone.Create("UserControl", namespace.Control);
    UserControl.ContentProperty = DependencyProperty.Register("Content", function () { return Object; }, UserControl);
    Nullstone.AutoProperties(UserControl, [
        UserControl.ContentProperty
    ]);
    UserControl.Instance.IsLayoutContainer = function () { return true; };
    UserControl.Instance._MeasureOverrideWithError = function (availableSize, error) {
        var desired = new Size(0, 0);
        var border = this.Padding.Plus(this.BorderThickness);
        var walker = new Fayde._VisualTreeWalker(this);
        var child;
        while (child = walker.Step()) {
            child._MeasureWithError(availableSize.ShrinkByThickness(border), error);
            desired = child._DesiredSize;
        }
        desired = desired.GrowByThickness(border);
        return desired;
    };
    UserControl.Instance._ArrangeOverrideWithError = function (finalSize, error) {
        var border = this.Padding.Plus(this.BorderThickness);
        var arranged = finalSize;
        var walker = new Fayde._VisualTreeWalker(this);
        var child;
        while (child = walker.Step()) {
            var childRect = new Rect(0, 0, finalSize.Width, finalSize.Height);
            childRect = childRect.ShrinkByThickness(border);
            child._ArrangeWithError(childRect, error);
            arranged = new Size(childRect.Width, childRect.Height).GrowByThickness(border);
        }
        return arranged;
    };
    UserControl.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType != UserControl) {
            this._OnPropertyChanged$FrameworkElement(args, error);
            return;
        }
        if (args.Property._ID === UserControl.ContentProperty._ID) {
            if (args.OldValue && args.OldValue instanceof Fayde.UIElement) {
                if (args.OldValue instanceof Fayde.FrameworkElement) {
                    args.OldValue._SetLogicalParent(null, error);
                    if (error.IsErrored())
                        return;
                }
                this._ElementRemoved(args.OldValue);
            }
            if (args.NewValue && args.NewValue instanceof Fayde.UIElement) {
                if (args.NewValue instanceof Fayde.FrameworkElement) {
                    args.NewValue._SetLogicalParent(this, error);
                    if (error.IsErrored())
                        return;
                }
                this._ElementAdded(args.NewValue);
            }
            this._UpdateBounds();
        }
        this.PropertyChanged.Raise(this, args);
    };
    UserControl.Annotations = {
        ContentProperty: UserControl.ContentProperty
    };
    namespace.UserControl = Nullstone.FinishCreate(UserControl);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var VirtualizingPanel = Nullstone.Create("VirtualizingPanel", namespace.Panel);
    Nullstone.Property(VirtualizingPanel, "ItemContainerGenerator", {
        get: function () {
            if (this._Generator == null) {
                var owner = namespace.ItemsControl.GetItemsOwner(this);
                if (owner == null)
                    throw new InvalidOperationException("VirtualizingPanels must be in the Template of an ItemsControl in order to generate items");
                this._Generator = owner.ItemContainerGenerator;
                this._Generator.ItemsChanged.Subscribe(this.OnItemsChangedInternal, this);
            }
            return this._Generator;
        }
    });
    VirtualizingPanel.Instance.AddInternalChild = function (child) {
        this.Children.Add(child);
    };
    VirtualizingPanel.Instance.InsertInternalChild = function (index, child) {
        this.Children.Insert(index, child);
    };
    VirtualizingPanel.Instance.RemoveInternalChildRange = function (index, range) {
        var children = this.Children;
        for (var i = 0; i < range; i++) {
            children.RemoveAt(index);
        }
    };
    VirtualizingPanel.Instance.BringIndexIntoView = function (index) { };
    VirtualizingPanel.Instance.OnClearChildren = function () { };
    VirtualizingPanel.Instance.OnItemsChangedInternal = function (sender, args) {
        this._InvalidateMeasure();
        if (args.Action === Fayde.Collections.NotifyCollectionChangedAction.Reset) {
            this.Children.Clear();
            this.ItemContainerGenerator.RemoveAll();
            this.OnClearChildren();
        }
        this.OnItemsChanged(sender, args);
    };
    VirtualizingPanel.Instance.OnItemsChanged = function (sender, args) { };
    namespace.VirtualizingPanel = Nullstone.FinishCreate(VirtualizingPanel);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var VirtualizingStackPanel = Nullstone.Create("VirtualizingStackPanel", namespace.VirtualizingPanel, 0, [namespace.Primitives.IScrollInfo]);
    VirtualizingStackPanel.Instance.Init = function () {
        this.Init$VirtualizingPanel();
        this.CleanUpVirtualizedItemEvent = new MulticastEvent();
        this._CanHorizontallyScroll = false;
        this._CanVerticallyScroll = false;
        this._ExtentWidth = 0;
        this._ExtentHeight = 0;
        this._ViewportWidth = 0;
        this._ViewportHeight = 0;
        this._HorizontalOffset = 0;
        this._VerticalOffset = 0;
    };
    VirtualizingStackPanel.LineDelta = 14.7;
    VirtualizingStackPanel.Wheelitude = 3;
    VirtualizingStackPanel.OrientationProperty = DependencyProperty.Register("Orientation", function () { return new Enum(Fayde.Orientation); }, VirtualizingStackPanel, Fayde.Orientation.Vertical, function (d, args) { d._InvalidateMeasure(); });
    Nullstone.AutoProperties(VirtualizingStackPanel, [
        VirtualizingStackPanel.OrientationProperty
    ]);
    VirtualizingStackPanel.IsVirtualizingProperty = DependencyProperty.RegisterAttached("IsVirtualizing", function () { return Boolean; }, VirtualizingStackPanel, false);
    VirtualizingStackPanel.GetIsVirtualizing = function (d) {
        if (d == null)
            throw new ArgumentNullException("d");
        return d.$GetValue(VirtualizingStackPanel.IsVirtualizingProperty);
    };
    VirtualizingStackPanel.SetIsVirtualizing = function (d, value) {
        if (d == null)
            throw new ArgumentNullException("d");
        d.$SetValue(VirtualizingStackPanel.IsVirtualizingProperty, value);
    };
    VirtualizingStackPanel.VirtualizationModeProperty = DependencyProperty.RegisterAttached("VirtualizationMode", function () { return new Enum(namespace.VirtualizationMode); }, VirtualizingStackPanel, namespace.VirtualizationMode.Recycling);
    VirtualizingStackPanel.GetVirtualizationMode = function (d) {
        if (d == null)
            throw new ArgumentNullException("d");
        return d.$GetValue(VirtualizingStackPanel.VirtualizationModeProperty);
    };
    VirtualizingStackPanel.SetVirtualizationMode = function (d, value) {
        if (d == null)
            throw new ArgumentNullException("d");
        d.$SetValue(VirtualizingStackPanel.VirtualizationModeProperty, value);
    };
    Nullstone.AutoProperty(VirtualizingStackPanel, "ScrollOwner");
    Nullstone.Property(VirtualizingStackPanel, "CanHorizontallyScroll", {
        get: function () { return this._CanHorizontallyScroll; },
        set: function (value) {
            this._CanHorizontallyScroll = value;
            this._InvalidateMeasure();
        }
    });
    Nullstone.Property(VirtualizingStackPanel, "CanVerticallyScroll", {
        get: function () { return this._CanVerticallyScroll; },
        set: function (value) {
            this._CanVerticallyScroll = value;
            this._InvalidateMeasure();
        }
    });
    Nullstone.Property(VirtualizingStackPanel, "ExtentWidth", { get: function () { return this._ExtentWidth; } });
    Nullstone.Property(VirtualizingStackPanel, "ExtentHeight", { get: function () { return this._ExtentHeight; } });
    Nullstone.Property(VirtualizingStackPanel, "ViewportWidth", { get: function () { return this._ViewportWidth; } });
    Nullstone.Property(VirtualizingStackPanel, "ViewportHeight", { get: function () { return this._ViewportHeight; } });
    Nullstone.Property(VirtualizingStackPanel, "HorizontalOffset", {
        get: function () { return this._HorizontalOffset; },
        set: function (offset) {
            if (offset < 0 || this._ViewportWidth >= this._ExtentWidth)
                offset = 0;
            else if ((offset + this._ViewportWidth) >= this._ExtentWidth)
                offset = this._ExtentWidth - this._ViewportWidth;
            if (this._HorizontalOffset === offset)
                return;
            this._HorizontalOffset = offset;
            if (this.Orientation === Fayde.Orientation.Horizontal)
                this._InvalidateMeasure();
            else
                this._InvalidateArrange();
            var scrollOwner = this.ScrollOwner;
            if (scrollOwner)
                scrollOwner._InvalidateScrollInfo();
        }
    });
    Nullstone.Property(VirtualizingStackPanel, "VerticalOffset", {
        get: function () { return this._VerticalOffset; },
        set: function (offset) {
            if (offset < 0 || this._ViewportHeight >= this._ExtentHeight)
                offset = 0;
            else if ((offset + this._ViewportHeight) >= this._ExtentHeight)
                offset = this._ExtentHeight - this._ViewportHeight;
            if (this._VerticalOffset == offset)
                return;
            this._VerticalOffset = offset;
            if (this.Orientation === Fayde.Orientation.Vertical)
                this._InvalidateMeasure();
            else
                this._InvalidateArrange();
            var scrollOwner = this.ScrollOwner;
            if (scrollOwner)
                scrollOwner._InvalidateScrollInfo();
        }
    });
    VirtualizingStackPanel.Instance.LineUp = function () {
        if (this.Orientation === Fayde.Orientation.Horizontal)
            this.VerticalOffset = this._VerticalOffset - VirtualizingStackPanel.LineDelta;
        else
            this.VerticalOffset = this._VerticalOffset - 1;
    };
    VirtualizingStackPanel.Instance.LineDown = function () {
        if (this.Orientation === Fayde.Orientation.Horizontal)
            this.VerticalOffset = this._VerticalOffset + VirtualizingStackPanel.LineDelta;
        else
            this.VerticalOffset = this._VerticalOffset + 1;
    };
    VirtualizingStackPanel.Instance.LineLeft = function () {
        if (this.Orientation === Fayde.Orientation.Vertical)
            this.HorizontalOffset = this._HorizontalOffset - VirtualizingStackPanel.LineDelta;
        else
            this.HorizontalOffset = this._HorizontalOffset - 1;
    };
    VirtualizingStackPanel.Instance.LineRight = function () {
        if (this.Orientation === Fayde.Orientation.Vertical)
            this.HorizontalOffset = this._HorizontalOffset + VirtualizingStackPanel.LineDelta;
        else
            this.HorizontalOffset = this._HorizontalOffset + 1;
    };
    VirtualizingStackPanel.Instance.MouseWheelUp = function () {
        if (this.Orientation === Fayde.Orientation.Horizontal)
            this.VerticalOffset = this._VerticalOffset - VirtualizingStackPanel.LineDelta * VirtualizingStackPanel.Wheelitude;
        else
            this.VerticalOffset = this._VerticalOffset - VirtualizingStackPanel.Wheelitude;
    };
    VirtualizingStackPanel.Instance.MouseWheelDown = function () {
        if (this.Orientation === Fayde.Orientation.Horizontal)
            this.VerticalOffset = this._VerticalOffset + VirtualizingStackPanel.LineDelta * VirtualizingStackPanel.Wheelitude;
        else
            this.VerticalOffset = this._VerticalOffset + VirtualizingStackPanel.Wheelitude;
    };
    VirtualizingStackPanel.Instance.MouseWheelLeft = function () {
        if (this.Orientation === Fayde.Orientation.Vertical)
            this.HorizontalOffset = this._HorizontalOffset - VirtualizingStackPanel.LineDelta * VirtualizingStackPanel.Wheelitude;
        else
            this.HorizontalOffset = this._HorizontalOffset - VirtualizingStackPanel.Wheelitude;
    };
    VirtualizingStackPanel.Instance.MouseWheelRight = function () {
        if (this.Orientation === Fayde.Orientation.Vertical)
            this.HorizontalOffset = this._HorizontalOffset + VirtualizingStackPanel.LineDelta * VirtualizingStackPanel.Wheelitude;
        else
            this.HorizontalOffset = this._HorizontalOffset + VirtualizingStackPanel.Wheelitude;
    };
    VirtualizingStackPanel.Instance.PageUp = function () { this.VerticalOffset = this._VerticalOffset - this._ViewportHeight; };
    VirtualizingStackPanel.Instance.PageDown = function () { this.VerticalOffset = this._VerticalOffset + this._ViewportHeight; };
    VirtualizingStackPanel.Instance.PageLeft = function () { this.HorizontalOffset = this._HorizontalOffset - this._ViewportWidth; };
    VirtualizingStackPanel.Instance.PageRight = function () { this.HorizontalOffset = this._HorizontalOffset + this._ViewportWidth; };
    VirtualizingStackPanel.Instance.MakeVisible = function (uie, rectangle) {
        var exposed = new Rect();
        var orientation = this.Orientation;
        var children = this.Children;
        var len = children.GetCount();
        for (var i = 0; i < len; i++) {
            var child = children.GetValueAt(i);
            if (Nullstone.RefEquals(uie, child)) {
                if (orientation === Fayde.Orientation.Vertical) {
                    if (rectangle.X !== this._HorizontalOffset)
                        this.HorizontalOffset = rectangle.X;
                    exposed.Width = Math.min(child.RenderSize.Width, this._ViewportWidth);
                    exposed.Height = child.RenderSize.Height;
                    exposed.X = this._HorizontalOffset;
                } else {
                    if (rectangle.Y !== this._VerticalOffset)
                        this.VerticalOffset = rectangle.Y;
                    exposed.Height = Math.min(child.RenderSize.Height, this._ViewportHeight);
                    exposed.Width = child.RenderSize.Width;
                    exposed.Y = this._VerticalOffset;
                }
                return exposed;
            }
            if (this.Orientation === Fayde.Orientation.Vertical)
                exposed.Y += child.RenderSize.Height;
            else
                exposed.X += child.RenderSize.Width;
        }
        throw new ArgumentException("Visual is not a child of this Panel");
    };
    VirtualizingStackPanel.Instance.MeasureOverride = function (constraint) {
        var owner = namespace.ItemsControl.GetItemsOwner(this);
        var measured = new Size(0, 0);
        var invalidate = false;
        var nvisible = 0;
        var beyond = 0;
        var orientation = this.Orientation;
        if (orientation === Fayde.Orientation.Horizontal)
            index = Math.floor(this.HorizontalOffset);
        else
            index = Math.floor(this.VerticalOffset);
        var itemCount = owner.Items.GetCount();
        var generator = this.ItemContainerGenerator;
        if (itemCount > 0) {
            var children = this.Children;
            var childAvailable = constraint.Copy();
            if (this.CanHorizontallyScroll || orientation === Fayde.Orientation.Horizontal)
                childAvailable.Width = Number.POSITIVE_INFINITY;
            if (this.CanVerticallyScroll || orientation === Fayde.Orientation.Vertical)
                childAvailable.Height = Number.POSITIVE_INFINITY;
            var start = generator.GeneratorPositionFromIndex(index);
            var insertAt = (start.offset === 0) ? start.index : start.index + 1;
            var state = generator.StartAt(start.index, start.offset, 0, true);
            try {
                var isNewlyRealized = { Value: false };
                for (var i = 0; i < itemCount && beyond < 2; i++, insertAt++) {
                    var child = generator.GenerateNext(isNewlyRealized);
                    if (isNewlyRealized.Value || insertAt >= children.GetCount() || !Nullstone.RefEquals(children.GetValueAt(insertAt), child)) {
                        if (insertAt < children.GetCount())
                            this.InsertInternalChild(insertAt, child)
                        else
                            this.AddInternalChild(child);
                        generator.PrepareItemContainer(child);
                    }
                    child.Measure(childAvailable);
                    var size = child._DesiredSize;
                    nvisible++;
                    if (orientation === Fayde.Orientation.Vertical) {
                        measured.Width = Math.max(measured.Width, size.Width);
                        measured.Height += size.Height;
                        if (measured.Height > constraint.Height)
                            beyond++;
                    } else {
                        measured.Height = Math.max(measured.Height, size.Height);
                        measured.Width += size.Width;
                        if (measured.Width > constraint.Width)
                            beyond++;
                    }
                }
            } finally {
                generator.StopGeneration();
            }
        }
        VirtualizingStackPanel.SetIsVirtualizing(owner, true);
        if (nvisible > 0)
            this.RemoveUnusedContainers(index, nvisible);
        nvisible -= beyond;
        if (orientation === Fayde.Orientation.Vertical) {
            if (this.ExtentHeight !== itemCount) {
                this._ExtentHeight = itemCount;
                invalidate = true;
            }
            if (this.ExtentWidth !== measured.Width) {
                this._ExtentWidth = measured.Width;
                invalidate = true;
            }
            if (this.ViewportHeight !== nvisible) {
                this._ViewportHeight = nvisible;
                invalidate = true;
            }
            if (this.ViewportWidth != constraint.Width) {
                this._ViewportWidth = constraint.Width;
                invalidate = true;
            }
        } else {
            if (this.ExtentHeight !== measured.Height) {
                this._ExtentHeight = measured.Height;
                invalidate = true;
            }
            if (this.ExtentWidth !== itemCount) {
                this._ExtentWidth = itemCount;
                invalidate = true;
            }
            if (this.ViewportHeight !== constraint.Height) {
                this._ViewportHeight = constraint.Height;
                invalidate = true;
            }
            if (this.ViewportWidth !== nvisible) {
                this._ViewportWidth = nvisible;
                invalidate = true;
            }
        }
        var scrollOwner = this.ScrollOwner;
        if (invalidate && scrollOwner != null)
            scrollOwner._InvalidateScrollInfo();
        return measured;
    };
    VirtualizingStackPanel.Instance.ArrangeOverride = function (arrangeSize) {
        var arranged = arrangeSize.Copy();
        var orientation = this.Orientation;
        if (orientation === Fayde.Orientation.Vertical)
            arranged.Height = 0;
        else
            arranged.Width = 0;
        var children = this.Children;
        var len = children.GetCount();
        for (var i = 0; i < len; i++) {
            var child = children.GetValueAt(i);
            var size = child._DesiredSize;
            if (orientation === Fayde.Orientation.Vertical) {
                size.Width = arrangeSize.Width;
                var childFinal = new Rect(-this.HorizontalOffset, arranged.Height, size.Width, size.Height);
                if (childFinal.IsEmpty())
                    childFinal = new Rect();
                child.Arrange(childFinal);
                arranged.Width = Math.max(arranged.Width, size.Width);
                arranged.Height += size.Height;
            } else {
                size.Height = arrangeSize.Height;
                var childFinal = new Rect(arranged.Width, -this.VerticalOffset, size.Width, size.Height);
                if (childFinal.IsEmpty())
                    childFinal = new Rect();
                child.Arrange(childFinal);
                arranged.Width += size.Width;
                arranged.Height = Math.max(arranged.Height, size.Height);
            }
        }
        if (orientation === Fayde.Orientation.Vertical)
            arranged.Height = Math.max(arranged.Height, arrangeSize.Height);
        else
            arranged.Width = Math.max(arranged.Width, arrangeSize.Width);
        return arranged;
    };
    VirtualizingStackPanel.Instance.RemoveUnusedContainers = function (first, count) {
        var generator = this.ItemContainerGenerator;
        var owner = namespace.ItemsControl.GetItemsOwner(this);
        var mode = VirtualizingStackPanel.GetVirtualizationMode(this);
        var last = first + count - 1;
        var item;
        var args;
        var children = this.Children;
        var posIndex = children.GetCount() - 1;
        var posOffset = 0;
        while (posIndex >= 0) {
            item = generator.IndexFromGeneratorPosition(posIndex, posOffset);
            if (item < first || item > last) {
                args = new namespace.CleanUpVirtualizedItemEventArgs(children.GetValueAt(posIndex), owner.Items.GetValueAt(item));
                this.OnCleanUpVirtualizedItem(args);
                if (!args.Cancel) {
                    this.RemoveInternalChildRange(posIndex, 1);
                    if (mode === namespace.VirtualizationMode.Recycling)
                        generator.Recycle(posIndex, posOffset, 1);
                    else
                        generator.Remove(posIndex, posOffset, 1);
                }
            }
            posIndex--;
        }
    };
    VirtualizingStackPanel.Instance.OnCleanUpVirtualizedItem = function (args) {
        this.CleanUpVirtualizedItemEvent.Raise(this, args);
    };
    VirtualizingStackPanel.Instance.OnClearChildren = function () {
        this.OnClearChildren$VirtualizingPanel();
        this._HorizontalOffset = 0;
        this._VerticalOffset = 0;
        this._InvalidateMeasure();
        var scrollOwner = this.ScrollOwner;
        if (scrollOwner)
            scrollOwner._InvalidateScrollInfo();
    };
    VirtualizingStackPanel.Instance.OnItemsChanged = function (sender, args) {
        this.OnItemsChanged$VirtualizingPanel(sender, args);
        var generator = this.ItemContainerGenerator;
        var owner = namespace.ItemsControl.GetItemsOwner(this);
        var orientation = this.Orientation;
        var index;
        var offset;
        var viewable
        switch (args.Action) {
            case Fayde.Collections.NotifyCollectionChangedAction.Add:
                var index = generator.IndexFromGeneratorPosition(args.Position.index, args.Position.offset);
                if (orientation === Fayde.Orientation.Horizontal)
                    offset = this.HorizontalOffset;
                else
                    offset = this.VerticalOffset;
                if (index <= offset) {
                    offset += args.ItemCount;
                }
                if (orientation === Fayde.Orientation.Horizontal)
                    this.HorizontalOffset = offset;
                else
                    this.VerticalOffset = offset;
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Remove:
                index = generator.IndexFromGeneratorPosition(args.Position.index, args.Position.offset);
                if (orientation === Fayde.Orientation.Horizontal) {
                    offset = this.HorizontalOffset;
                    viewable = this.ViewportWidth;
                } else {
                    offset = this.VerticalOffset;
                    viewable = this.ViewportHeight;
                }
                if (index < offset) {
                    offset = Math.max(offset - args.ItemCount, 0);
                }
                offset = Math.min(offset, owner.Items.GetCount() - viewable);
                offset = Math.max(offset, 0);
                if (orientation === Fayde.Orientation.Horizontal)
                    this.HorizontalOffset = offset;
                else
                    this.VerticalOffset = offset;
                this.RemoveInternalChildRange(args.Position.index, args.Position.ItemUICount);
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Replace:
                this.RemoveInternalChildRange(args.Position.index, args.ItemUICount);
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Reset:
                break;
        }
        this._InvalidateMeasure();
        var scrollOwner = this.ScrollOwner;
        if (scrollOwner)
            scrollOwner._InvalidateScrollInfo();
    };
    namespace.VirtualizingStackPanel = Nullstone.FinishCreate(VirtualizingStackPanel);
})(Nullstone.Namespace("Fayde.Controls"));
(function (namespace) {
    var CleanUpVirtualizedItemEventArgs = Nullstone.Create("CleanUpVirtualizedItemEventArgs", Fayde.RoutedEventArgs, 2);
    CleanUpVirtualizedItemEventArgs.Instance.Init = function (uie, value) {
        this.UIElement = uie;
        this.Value = value;
        this.Cancel = false;
    };
    Nullstone.AutoProperty(CleanUpVirtualizedItemEventArgs, [
        "UIElement",
        "Value",
        "Cancel"
    ]);
    namespace.CleanUpVirtualizedItemEventArgs = Nullstone.FinishCreate(CleanUpVirtualizedItemEventArgs);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var Popup = Nullstone.Create("Popup", Fayde.FrameworkElement);
    Popup.Instance.Init = function () {
        this.Init$FrameworkElement();
        this.Opened = new MulticastEvent();
        this.Closed = new MulticastEvent();
        this.ClickedOutside = new MulticastEvent();
    };
    Popup.ChildProperty = DependencyProperty.RegisterCore("Child", function () { return Fayde.UIElement; }, Popup);
    Popup.HorizontalOffsetProperty = DependencyProperty.RegisterCore("HorizontalOffset", function () { return Number; }, Popup, 0.0);
    Popup.VerticalOffsetProperty = DependencyProperty.RegisterCore("VerticalOffset", function () { return Number; }, Popup, 0.0);
    Popup.IsOpenProperty = DependencyProperty.RegisterCore("IsOpen", function () { return Boolean; }, Popup, false);
    Nullstone.AutoProperties(Popup, [
        Popup.ChildProperty,
        Popup.HorizontalOffsetProperty,
        Popup.VerticalOffsetProperty,
        Popup.IsOpenProperty
    ]);
    Nullstone.Property(Popup, "RealChild", {
        get: function () {
            if (this._ClickCatcher != null) {
                return this.Child.Children.GetValueAt(1);
            }
            return this.Child;
        }
    });
    Popup.Annotations = {
        ContentProperty: Popup.ChildProperty
    };
    Popup.Instance._ComputeBounds = function () { };
    Popup.Instance._OnIsAttachedChanged = function (value) {
        this._OnIsAttachedChanged$FrameworkElement(value);
        if (!value && this.IsOpen)
            this.IsOpen = false;
    };
    Popup.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== Popup) {
            this._OnPropertyChanged$FrameworkElement(args, error);
            return;
        }
        if (args.Property._ID === Popup.IsOpenProperty._ID) {
            if (args.NewValue) {
                this._Show(this.Child);
                this._OnOpened();
            } else {
                this._Hide(this.Child);
                this._OnClosed();
            }
        } else if (args.Property._ID === Popup.ChildProperty._ID) {
            if (args.OldValue != null) {
                var oldFE = Nullstone.As(args.OldValue, Fayde.FrameworkElement);
                if (this.IsOpen)
                    this._Hide(oldFE);
                this._Providers[_PropertyPrecedence.Inherited].ClearInheritedPropertiesOnRemovingFromTree(oldFE);
                oldFE._SetLogicalParent(undefined, error);
                if (error.IsErrored())
                    return;
            }
            if (args.NewValue != null) {
                var newFE = Nullstone.As(args.NewValue, Fayde.FrameworkElement);
                newFE._SetLogicalParent(this, error);
                if (error.IsErrored())
                    return;
                this._Providers[_PropertyPrecedence.Inherited].PropagateInheritedPropertiesOnAddingToTree(newFE);
                if (this.IsOpen)
                    this._Show(newFE);
            }
        } else if (args.Property._ID === Popup.HorizontalOffsetProperty._ID
            || args.Property._ID === Popup.VerticalOffsetProperty._ID) {
            var child = this.Child;
            if (child != null)
                child._InvalidateMeasure();
        }
        this.PropertyChanged.Raise(this, args);
    };
    Popup.Instance._HitTestPoint = function (ctx, p, uielist) {
        if (this._Visible)
            this._HitTestPoint$FrameworkElement(ctx, p, uielist);
    };
    Popup.Instance._Hide = function (child) {
        if (!this._Visible || !child)
            return;
        this._Visible = false;
        App.Instance.MainSurface._DetachLayer(child);
    };
    Popup.Instance._Show = function (child) {
        if (this._Visible || !child)
            return;
        this._Visible = true;
        App.Instance.MainSurface._AttachLayer(child);
    };
    Popup.Instance._OnOpened = function () {
        this._UpdateCatcher();
        this.Opened.RaiseAsync(this, new EventArgs());
    };
    Popup.Instance._OnClosed = function () {
        this.Closed.RaiseAsync(this, new EventArgs());
    };
    Popup.Instance._CatchClickedOutside = function () {
        var child = this.Child;
        if (child == null)
            return;
        var root = new Fayde.Controls.Canvas();
        this._ClickCatcher = new Fayde.Controls.Canvas();
        this._ClickCatcher.Background = new Fayde.Media.SolidColorBrush(new Color(255, 255, 255, 0));
        this.Child = root;
        root.Children.Add(this._ClickCatcher);
        root.Children.Add(child);
        this._ClickCatcher.LayoutUpdated.Subscribe(this._UpdateCatcher, this);
        this._ClickCatcher.MouseLeftButtonDown.Subscribe(this._RaiseClickedOutside, this);
    };
    Popup.Instance._UpdateCatcher = function () {
        if (this._ClickCatcher == null)
            return;
        try {
            var xform = this.Child.TransformToVisual(null);
            if (xform instanceof Fayde.Media.Transform) {
                this._ClickCatcher.Projection = null;
                this._ClickCatcher.RenderTransform = xform.Inverse;
            } else if (xform instanceof Fayde.Media.InternalTransform) {
                var projection = new Fayde.Media.Matrix3DProjection();
                projection.ProjectionMatrix = xform.Inverse.Matrix;
                this._ClickCatcher.RenderTransform = null;
                this._ClickCatcher.Projection = projection;
            }
        } catch (err) {
            if (!(err instanceof ArgumentException))
                throw err;
        }
        this._ClickCatcher.Width = App.Instance.MainSurface.ActualWidth;
        this._ClickCatcher.Height = App.Instance.MainSurface.ActualHeight;
    };
    Popup.Instance._RaiseClickedOutside = function (sender, e) {
        this.ClickedOutside.Raise(this, new EventArgs());
    };
    namespace.Popup = Nullstone.FinishCreate(Popup);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var RangeBase = Nullstone.Create("RangeBase", Fayde.Controls.Control);
    RangeBase.Instance.Init = function () {
        this.Init$Control();
        this.ValueChanged = new MulticastEvent();
        this._LevelsFromRootCall = 0;
        this.Minimum = 0;
        this.Maximum = 1;
        this.SmallChange = 0.1;
        this.LargeChange = 1;
        this.Value = 0;
    };
    RangeBase._OnMinimumPropertyChanged = function (d, args) {
        if (!RangeBase._IsValidDoubleValue(args.NewValue))
            throw new ArgumentException("Invalid double value for Minimum property.");
        if (d._LevelsFromRootCall === 0) {
            d._InitialMax = d.Maximum;
            d._InitialVal = d.Value;
        }
        d._LevelsFromRootCall++;
        d._CoerceMaximum();
        d._CoerceValue();
        d._LevelsFromRootCall--;
        if (d._LevelsFromRootCall === 0) {
            d.$OnMinimumChanged(args.OldValue, args.OldValue);
            var max = d.Maximum;
            if (!DoubleUtil.AreClose(d._InitialMax, max)) {
                d.$OnMaximumChanged(d._InitialMax, max);
            }
            var val = d.Value;
            if (!DoubleUtil.AreClose(d._InitialVal, val)) {
                d._OnValueChanged(d._InitialVal, val);
            }
        }
    };
    RangeBase.MinimumProperty = DependencyProperty.Register("Minimum", function () { return Number; }, RangeBase, 0, RangeBase._OnMinimumPropertyChanged);
    RangeBase._OnMaximumPropertyChanged = function (d, args) {
        if (!RangeBase._IsValidDoubleValue(args.NewValue))
            throw new ArgumentException("Invalid double value for Maximum property.");
        if (d._LevelsFromRootCall === 0) {
            d._RequestedMax = args.NewValue;
            d._InitialMax = args.OldValue;
            d._InitialVal = d.Value;
        }
        d._LevelsFromRootCall++;
        d._CoerceMaximum();
        d._CoerceValue();
        d._LevelsFromRootCall--;
        if (d._LevelsFromRootCall === 0) {
            var max = d.Maximum;
            if (!DoubleUtil.AreClose(d._InitialMax, max)) {
                d.$OnMaximumChanged(d._InitialMax, max);
            }
            var val = d.Value;
            if (!DoubleUtil.AreClose(d._InitialVal, val)) {
                d._OnValueChanged(d._InitialVal, val);
            }
        }
    };
    RangeBase.MaximumProperty = DependencyProperty.Register("Maximum", function () { return Number; }, RangeBase, 1, RangeBase._OnMaximumPropertyChanged);
    RangeBase._OnLargeChangePropertyChanged = function (d, args) {
        if (!RangeBase._IsValidChange(args.NewValue)) {
            throw new ArgumentException("Invalid Large Change Value.");
        }
    };
    RangeBase.LargeChangeProperty = DependencyProperty.Register("LargeChange", function () { return Number; }, RangeBase, 1, RangeBase._OnLargeChangePropertyChanged);
    RangeBase._OnSmallChangePropertyChanged = function (d, args) {
        if (!RangeBase._IsValidChange(args.NewValue)) {
            throw new ArgumentException("Invalid Small Change Value.");
        }
    };
    RangeBase.SmallChangeProperty = DependencyProperty.Register("SmallChange", function () { return Number; }, RangeBase, 0.1, RangeBase._OnSmallChangePropertyChanged);
    RangeBase._OnValuePropertyChanged = function (d, args) {
        if (!RangeBase._IsValidDoubleValue(args.NewValue))
            throw new ArgumentException("Invalid double value for Value property.");
        if (d._LevelsFromRootCall === 0) {
            d._RequestedVal = args.NewValue;
            d._InitialVal = args.OldValue;
        }
        d._LevelsFromRootCall++;
        d._CoerceValue();
        d._LevelsFromRootCall--;
        if (d._LevelsFromRootCall === 0) {
            var val = d.Value;
            if (!DoubleUtil.AreClose(d._InitialVal, val)) {
                d._OnValueChanged(d._InitialVal, val);
            }
        }
    };
    RangeBase.ValueProperty = DependencyProperty.Register("Value", function () { return Number; }, RangeBase, 0, RangeBase._OnValuePropertyChanged);
    Nullstone.AutoProperties(RangeBase, [
        RangeBase.MinimumProperty,
        RangeBase.MaximumProperty,
        RangeBase.LargeChangeProperty,
        RangeBase.SmallChangeProperty,
        RangeBase.ValueProperty
    ]);
    RangeBase.Instance._CoerceMaximum = function () {
        var min = this.Minimum;
        var max = this.Maximum;
        if (!DoubleUtil.AreClose(this._RequestedMax, max) && this._RequestedMax >= min) {
            this.Maximum = this._RequestedMax;
            return;
        }
        if (max < min)
            this.Maximum = min;
    };
    RangeBase.Instance._CoerceValue = function () {
        var min = this.Minimum;
        var max = this.Maximum;
        var val = this.Value;
        if (!DoubleUtil.AreClose(this._RequestedVal, val) && this._RequestedVal >= min && this._RequestedVal <= max) {
            this.Value = this._RequestedVal;
            return;
        }
        if (val < min)
            this.Value = min;
        if (val > max)
            this.Value = max;
    };
    RangeBase._IsValidChange = function (value) {
        if (!RangeBase._IsValidDoubleValue(value))
            return false;
        return value >= 0;
    };
    RangeBase._IsValidDoubleValue = function (value) {
        if (typeof value !== "number")
            return false;
        if (isNaN(value))
            return false;
        if (!isFinite(value))
            return false;
        return true;
    };
    RangeBase.Instance.$OnMinimumChanged = function (oldMin, newMin) { };
    RangeBase.Instance.$OnMaximumChanged = function (oldMax, newMax) { };
    RangeBase.Instance._OnValueChanged = function (oldValue, newValue) {
        this.ValueChanged.Raise(this, new Fayde.RoutedPropertyChangedEventArgs(oldValue, newValue));
        this.$OnValueChanged(oldValue, newValue);
    };
    RangeBase.Instance.$OnValueChanged = function (oldValue, newValue) { };
    namespace.RangeBase = Nullstone.FinishCreate(RangeBase);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var ScrollBar = Nullstone.Create("ScrollBar", namespace.RangeBase);
    ScrollBar.Instance.Init = function () {
        this.Init$RangeBase();
        this.Scroll = new MulticastEvent();
        this.SizeChanged.Subscribe(this._HandleSizeChanged, this);
        this.DefaultStyleKey = this.constructor;
    };
    ScrollBar._OnOrientationPropertyChanged = function (d, args) {
        d._OnOrientationChanged();
    };
    ScrollBar.OrientationProperty = DependencyProperty.Register("Orientation", function () { return new Enum(Fayde.Orientation); }, ScrollBar, Fayde.Orientation.Horizontal, ScrollBar._OnOrientationPropertyChanged);
    ScrollBar._OnViewportSizePropertyChanged = function (d, args) {
        d._UpdateTrackLayout(d._GetTrackLength());
    };
    ScrollBar.ViewportSizeProperty = DependencyProperty.Register("ViewportSize", function () { return Number; }, ScrollBar, 0, ScrollBar._OnViewportSizePropertyChanged);
    Nullstone.AutoProperties(ScrollBar, [
        ScrollBar.OrientationProperty,
        ScrollBar.ViewportSizeProperty
    ]);
    ScrollBar.Instance.GetIsDragging = function () {
        if (this.$ElementHorizontalThumb)
            return this.$ElementHorizontalThumb.IsDragging;
        if (this.$ElementVerticalThumb)
            return this.$ElementVerticalThumb.IsDragging;
        return false;
    };
    ScrollBar.Instance.OnApplyTemplate = function () {
        this.OnApplyTemplate$RangeBase();
        this.$ElementHorizontalTemplate = Nullstone.As(this.GetTemplateChild("HorizontalRoot"), Fayde.FrameworkElement);
        this.$ElementHorizontalLargeIncrease = Nullstone.As(this.GetTemplateChild("HorizontalLargeIncrease"), namespace.RepeatButton);
        this.$ElementHorizontalLargeDecrease = Nullstone.As(this.GetTemplateChild("HorizontalLargeDecrease"), namespace.RepeatButton);
        this.$ElementHorizontalSmallIncrease = Nullstone.As(this.GetTemplateChild("HorizontalSmallIncrease"), namespace.RepeatButton);
        this.$ElementHorizontalSmallDecrease = Nullstone.As(this.GetTemplateChild("HorizontalSmallDecrease"), namespace.RepeatButton);
        this.$ElementHorizontalThumb = Nullstone.As(this.GetTemplateChild("HorizontalThumb"), namespace.Thumb);
        this.$ElementVerticalTemplate = Nullstone.As(this.GetTemplateChild("VerticalRoot"), Fayde.FrameworkElement);
        this.$ElementVerticalLargeIncrease = Nullstone.As(this.GetTemplateChild("VerticalLargeIncrease"), namespace.RepeatButton);
        this.$ElementVerticalLargeDecrease = Nullstone.As(this.GetTemplateChild("VerticalLargeDecrease"), namespace.RepeatButton);
        this.$ElementVerticalSmallIncrease = Nullstone.As(this.GetTemplateChild("VerticalSmallIncrease"), namespace.RepeatButton);
        this.$ElementVerticalSmallDecrease = Nullstone.As(this.GetTemplateChild("VerticalSmallDecrease"), namespace.RepeatButton);
        this.$ElementVerticalThumb = Nullstone.As(this.GetTemplateChild("VerticalThumb"), namespace.Thumb);
        if (this.$ElementHorizontalThumb) {
            this.$ElementHorizontalThumb.DragStarted.Subscribe(this._OnThumbDragStarted, this);
            this.$ElementHorizontalThumb.DragDelta.Subscribe(this._OnThumbDragDelta, this);
            this.$ElementHorizontalThumb.DragCompleted.Subscribe(this._OnThumbDragCompleted, this);
        }
        if (this.$ElementHorizontalLargeIncrease) {
            this.$ElementHorizontalLargeIncrease.Click.Subscribe(this._LargeIncrement, this);
        }
        if (this.$ElementHorizontalLargeDecrease) {
            this.$ElementHorizontalLargeDecrease.Click.Subscribe(this._LargeDecrement, this);
        }
        if (this.$ElementHorizontalSmallIncrease) {
            this.$ElementHorizontalSmallIncrease.Click.Subscribe(this._SmallIncrement, this);
        }
        if (this.$ElementHorizontalSmallDecrease) {
            this.$ElementHorizontalSmallDecrease.Click.Subscribe(this._SmallDecrement, this);
        }
        if (this.$ElementVerticalThumb) {
            this.$ElementVerticalThumb.DragStarted.Subscribe(this._OnThumbDragStarted, this);
            this.$ElementVerticalThumb.DragDelta.Subscribe(this._OnThumbDragDelta, this);
            this.$ElementVerticalThumb.DragCompleted.Subscribe(this._OnThumbDragCompleted, this);
        }
        if (this.$ElementVerticalLargeIncrease) {
            this.$ElementVerticalLargeIncrease.Click.Subscribe(this._LargeIncrement, this);
        }
        if (this.$ElementVerticalLargeDecrease) {
            this.$ElementVerticalLargeDecrease.Click.Subscribe(this._LargeDecrement, this);
        }
        if (this.$ElementVerticalSmallIncrease) {
            this.$ElementVerticalSmallIncrease.Click.Subscribe(this._SmallIncrement, this);
        }
        if (this.$ElementVerticalSmallDecrease) {
            this.$ElementVerticalSmallDecrease.Click.Subscribe(this._SmallDecrement, this);
        }
        this._OnOrientationChanged();
        this.$UpdateVisualState(false);
    };
    ScrollBar.Instance.OnIsEnabledChanged = function (args) {
        this.OnIsEnabledChanged$RangeBase(args);
        this.$UpdateVisualState();
    };
    ScrollBar.Instance.OnLostMouseCapture = function (sender, args) {
        this.OnLostMouseCapture$RangeBase(sender, args);
        this.$UpdateVisualState();
    };
    ScrollBar.Instance.OnMouseEnter = function (args) {
        this.OnMouseEnter$RangeBase(args);
        var orientation = this.Orientation;
        var shouldUpdate = false;
        if (orientation === Fayde.Orientation.Horizontal && this.$ElementHorizontalThumb && !this.$ElementHorizontalThumb.IsDragging)
            shouldUpdate = true;
        if (orientation === Fayde.Orientation.Vertical && this.$ElementVerticalThumb && !this.$ElementVerticalThumb.IsDragging)
            shouldUpdate = true;
        if (shouldUpdate)
            this.$UpdateVisualState();
    };
    ScrollBar.Instance.OnMouseLeave = function (args) {
        this.OnMouseLeave$RangeBase(args);
        var orientation = this.Orientation;
        var shouldUpdate = false;
        if (orientation === Fayde.Orientation.Horizontal && this.$ElementHorizontalThumb && !this.$ElementHorizontalThumb.IsDragging)
            shouldUpdate = true;
        if (orientation === Fayde.Orientation.Vertical && this.$ElementVerticalThumb && !this.$ElementVerticalThumb.IsDragging)
            shouldUpdate = true;
        if (shouldUpdate)
            this.$UpdateVisualState();
    };
    ScrollBar.Instance.OnMouseLeftButtonDown = function (sender, args) {
        this.OnMouseLeftButtonDown$RangeBase(sender, args);
        if (args.Handled)
            return;
        args.Handled = true;
        this.CaptureMouse();
    };
    ScrollBar.Instance.OnMouseLeftButtonUp = function (sender, args) {
        this.OnMouseLeftButtonUp$RangeBase(sender, args);
        if (args.Handled)
            return;
        args.Handled = true;
        this.ReleaseMouseCapture();
        this.$UpdateVisualState();
    };
    ScrollBar.Instance.$OnMaximumChanged = function (oldMax, newMax) {
        var trackLength = this._GetTrackLength();
        this.$OnMaximumChanged$RangeBase(oldMax, newMax);
        this._UpdateTrackLayout(trackLength);
    };
    ScrollBar.Instance.$OnMinimumChanged = function (oldMin, newMin) {
        var trackLength = this._GetTrackLength();
        this.$OnMinimumChanged$RangeBase(oldMin, newMin);
        this._UpdateTrackLayout(trackLength);
    };
    ScrollBar.Instance.$OnValueChanged = function (oldValue, newValue) {
        var trackLength = this._GetTrackLength();
        this.$OnValueChanged$RangeBase(oldValue, newValue);
        this._UpdateTrackLayout(trackLength);
    };
    ScrollBar.Instance._OnThumbDragStarted = function (sender, args) {
        this._DragValue = this.Value;
    };
    ScrollBar.Instance._OnThumbDragDelta = function (sender, args) {
        var change = 0;
        var zoomFactor = 1; //TODO: FullScreen?
        var num = zoomFactor;
        var max = this.Maximum;
        var min = this.Minimum;
        var diff = max - min;
        var trackLength = this._GetTrackLength();
        var orientation = this.Orientation;
        if (this.$ElementVerticalThumb && orientation === Fayde.Orientation.Vertical) {
            change = num * args.VerticalChange / (trackLength - this.$ElementVerticalThumb.ActualHeight) * diff;
        }
        if (this.$ElementHorizontalThumb && orientation === Fayde.Orientation.Horizontal) {
            change = num * args.HorizontalChange / (trackLength - this.$ElementHorizontalThumb.ActualWidth) * diff;
        }
        if (!isNaN(change) && isFinite(change)) {
            this._DragValue += change;
            var num1 = Math.min(max, Math.max(min, this._DragValue));
            if (num1 !== this.Value) {
                this.Value = num1;
                this._RaiseScroll(namespace.ScrollEventType.ThumbTrack);
            }
        }
    };
    ScrollBar.Instance._OnThumbDragCompleted = function (sender, args) {
        this._RaiseScroll(namespace.ScrollEventType.EndScroll);
    };
    ScrollBar.Instance._SmallDecrement = function (sender, args) {
        var curValue = this.Value;
        var num = Math.max(curValue - this.SmallChange, this.Minimum);
        if (curValue !== num) {
            this.Value = num;
            this._RaiseScroll(namespace.ScrollEventType.SmallDecrement);
        }
    };
    ScrollBar.Instance._SmallIncrement = function (sender, args) {
        var curValue = this.Value;
        var num = Math.min(curValue + this.SmallChange, this.Maximum);
        if (curValue !== num) {
            this.Value = num;
            this._RaiseScroll(namespace.ScrollEventType.SmallIncrement);
        }
    };
    ScrollBar.Instance._LargeDecrement = function (sender, args) {
        var curValue = this.Value;
        var num = Math.max(curValue - this.LargeChange, this.Minimum);
        if (curValue !== num) {
            this.Value = num;
            this._RaiseScroll(namespace.ScrollEventType.LargeDecrement);
        }
    };
    ScrollBar.Instance._LargeIncrement = function (sender, args) {
        var curValue = this.Value;
        var num = Math.min(curValue + this.LargeChange, this.Maximum);
        if (curValue !== num) {
            this.Value = num;
            this._RaiseScroll(namespace.ScrollEventType.LargeIncrement);
        }
    };
    ScrollBar.Instance._HandleSizeChanged = function () {
        this._UpdateTrackLayout(this._GetTrackLength());
    };
    ScrollBar.Instance._OnOrientationChanged = function () {
        var orientation = this.Orientation;
        if (this.$ElementHorizontalTemplate) {
            this.$ElementHorizontalTemplate.Visibility = orientation === Fayde.Orientation.Horizontal ? Fayde.Visibility.Visible : Fayde.Visibility.Collapsed;
        }
        if (this.$ElementVerticalTemplate) {
            this.$ElementVerticalTemplate.Visibility = orientation === Fayde.Orientation.Horizontal ? Fayde.Visibility.Collapsed : Fayde.Visibility.Visible;
        }
        this._UpdateTrackLayout(this._GetTrackLength());
    };
    ScrollBar.Instance._UpdateTrackLayout = function (trackLength) {
        var max = this.Maximum;
        var min = this.Minimum;
        var val = this.Value;
        var multiplier = (val - min) / (max - min);
        var thumbSize = this._UpdateThumbSize(trackLength);
        var orientation = this.Orientation;
        if (orientation === Fayde.Orientation.Horizontal && this.$ElementHorizontalLargeDecrease && this.$ElementHorizontalThumb) {
            this.$ElementHorizontalLargeDecrease.Width = Math.max(0, multiplier * (trackLength - thumbSize));
        } else if (orientation === Fayde.Orientation.Vertical && this.$ElementVerticalLargeDecrease && this.$ElementVerticalThumb) {
            this.$ElementVerticalLargeDecrease.Height = Math.max(0, multiplier * (trackLength - thumbSize));
        }
    };
    ScrollBar.Instance._UpdateThumbSize = function (trackLength) {
        var result = Number.NaN;
        var hideThumb = trackLength <= 0;
        if (trackLength > 0) {
            var orientation = this.Orientation;
            var max = this.Maximum;
            var min = this.Minimum;
            if (orientation === Fayde.Orientation.Horizontal && this.$ElementHorizontalThumb) {
                if (max - min !== 0)
                    result = Math.max(this.$ElementHorizontalThumb.MinWidth, this._ConvertViewportSizeToDisplayUnits(trackLength));
                if (max - min === 0 || result > this.ActualWidth || trackLength <= this.$ElementHorizontalThumb.MinWidth) {
                    hideThumb = true;
                } else {
                    this.$ElementHorizontalThumb.Visibility = Fayde.Visibility.Visible;
                    this.$ElementHorizontalThumb.Width = result;
                }
            } else if (orientation === Fayde.Orientation.Vertical && this.$ElementVerticalThumb) {
                if (max - min !== 0)
                    result = Math.max(this.$ElementVerticalThumb.MinHeight, this._ConvertViewportSizeToDisplayUnits(trackLength));
                if (max - min === 0 || result > this.ActualHeight || trackLength <= this.$ElementVerticalThumb.MinHeight) {
                    hideThumb = true;
                } else {
                    this.$ElementVerticalThumb.Visibility = Fayde.Visibility.Visible;
                    this.$ElementVerticalThumb.Height = result;
                }
            }
        }
        if (hideThumb) {
            if (this.$ElementHorizontalThumb) {
                this.$ElementHorizontalThumb.Visibility = Fayde.Visibility.Collapsed;
            }
            if (this.$ElementVerticalThumb) {
                this.$ElementVerticalThumb.Visibility = Fayde.Visibility.Collapsed;
            }
        }
        return result;
    };
    ScrollBar.Instance._GetTrackLength = function () {
        var actual = NaN;
        if (this.Orientation === Fayde.Orientation.Horizontal) {
            actual = this.ActualWidth;
            if (this.$ElementHorizontalSmallDecrease) {
                var thickness = this.$ElementHorizontalSmallDecrease.Margin;
                actual = actual - (this.$ElementHorizontalSmallDecrease.ActualWidth + thickness.Left + thickness.Right);
            }
            if (this.$ElementHorizontalSmallIncrease) {
                var thickness = this.$ElementHorizontalSmallIncrease.Margin;
                actual = actual - (this.$ElementHorizontalSmallIncrease.ActualWidth + thickness.Left + thickness.Right);
            }
        } else {
            actual = this.ActualHeight;
            if (this.$ElementVerticalSmallDecrease) {
                var thickness = this.$ElementVerticalSmallDecrease.Margin;
                actual = actual - (this.$ElementVerticalSmallDecrease.ActualHeight + thickness.Top + thickness.Bottom);
            }
            if (this.$ElementVerticalSmallIncrease) {
                var thickness = this.$ElementVerticalSmallIncrease.Margin;
                actual = actual - (this.$ElementVerticalSmallIncrease.ActualHeight + thickness.Top + thickness.Bottom);
            }
        }
        return actual;
    };
    ScrollBar.Instance._ConvertViewportSizeToDisplayUnits = function (trackLength) {
        var viewportSize = this.ViewportSize;
        return trackLength * viewportSize / (viewportSize + this.Maximum - this.Minimum);
    };
    ScrollBar.Instance._RaiseScroll = function (scrollEvtType) {
        var args = new namespace.ScrollEventArgs(scrollEvtType, this.Value);
        args.OriginalSource = this;
        this.Scroll.Raise(this, args);
    };
    namespace.ScrollBar = Nullstone.FinishCreate(ScrollBar);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var Selector = Nullstone.Create("Selector", Fayde.Controls.ItemsControl, 0, [Fayde.ISupportInitialize]);
    Selector.Instance.Init = function () {
        this.Init$ItemsControl();
        this.SelectionChanged = new MulticastEvent();
        this._SelectedItems = new Fayde.Collections.ObservableCollection();
        this._Selection = new namespace.SelectorSelection(this);
    };
    Selector.IsSynchronizedWithCurrentItemProperty = DependencyProperty.Register("IsSynchronizedWithCurrentItem", function () { return Boolean; }, Selector, null, function (d, args) { d._OnIsSynchronizedWithCurrentItemChanged(args); });
    Selector.SelectedIndexProperty = DependencyProperty.Register("SelectedIndex", function () { return Number; }, Selector, -1, function (d, args) { d._OnSelectedIndexChanged(args); });
    Selector.SelectedItemProperty = DependencyProperty.Register("SelectedItem", function () { return Object; }, Selector, undefined, function (d, args) { return d._OnSelectedItemChanged(args); });
    Selector.SelectedValueProperty = DependencyProperty.Register("SelectedValue", function () { return Object; }, Selector, undefined, function (d, args) { return d._OnSelectedValueChanged(args); });
    Selector.SelectedValuePathProperty = DependencyProperty.Register("SelectedValuePath", function () { return String; }, Selector, "", function (d, args) { return d._OnSelectedValuePathChanged(args); });
    Selector.IsSelectionActiveProperty = DependencyProperty.RegisterReadOnlyCore("IsSelectionActive", function () { return Boolean; }, Selector);
    Nullstone.AutoProperties(Selector, [
        Selector.IsSynchronizedWithCurrentItemProperty,
        Selector.SelectedIndexProperty,
        Selector.SelectedItemProperty,
        Selector.SelectedValueProperty,
        Selector.SelectedValuePathProperty
    ]);
    Nullstone.Property(Selector, "$HasItems", {
        get: function () { return this._HasItems; }
    });
    Nullstone.AutoPropertiesReadOnly(Selector, [
        Selector.IsSelectionActiveProperty
    ]);
    Nullstone.Property(Selector, "$SynchronizeWithCurrentItem", {
        get: function () {
            if (!Nullstone.Is(this.ItemsSource, Fayde.Data.ICollectionView))
                return false;
            if (this.IsSynchronizedWithCurrentItem === false)
                return false;
            return true;
        }
    });
    Nullstone.Property(Selector, "SelectedItems", {
        get: function () {
            if (this._SelectedItemsIsInvalid)
                this._Selection.RepopulateSelectedItems();
            return this._SelectedItems;
        }
    });
    Selector.Instance._OnIsSynchronizedWithCurrentItemChanged = function (args) {
        if (args.NewValue === true)
            throw new ArgumentException("Setting IsSynchronizedWithCurrentItem to 'true' is not supported");
        if (args.NewValue == null && Nullstone.Is(this.ItemsSource, Fayde.Data.ICollectionView))
            this.SelectedItem = this.ItemsSource.CurrentItem;
        else
            this.SelectedItem = null;
    };
    Selector.Instance._OnSelectedIndexChanged = function (args) {
        if (this._Selection.Updating || this._Initializing)
            return;
        var items = this.Items;
        if (args.NewValue < 0 || args.NewValue >= items.GetCount())
            this._Selection.ClearSelection();
        else
            this._Selection.Select(items.GetValueAt(args.NewValue));
    };
    Selector.Instance._OnSelectedItemChanged = function (args) {
        if (this._Selection.Updating || this._Initializing)
            return;
        if (args.NewValue == null)
            this._Selection.ClearSelection();
        else if (this.Items.IndexOf(args.NewValue) != -1)
            this._Selection.Select(args.NewValue);
        else if (this.Items.IndexOf(args.OldValue) != -1)
            this._Selection.Select(args.OldValue);
        else
            this._Selection.ClearSelection();
    };
    Selector.Instance._OnSelectedValueChanged = function (args) {
        if (this._Selection.Updating || this._Initializing)
            return;
        this._SelectItemFromValue(args.NewValue, false);
    };
    Selector.Instance._OnSelectedValuePathChanged = function (args) {
        this._SelectedValueWalker = !args.NewValue ? null : new Fayde.Data._PropertyPathWalker(args.NewValue);
        if (this._Initializing)
            return;
        this._SelectItemFromValue(this.SelectedValue, true);
    };
    Selector.Instance.OnApplyTemplate = function () {
        this.OnApplyTemplate$ItemsControl();
        this.$TemplateScrollViewer = Nullstone.As(this.GetTemplateChild("ScrollViewer"), Fayde.Controls.ScrollViewer);
        if (this.$TemplateScrollViewer != null) {
            this.$TemplateScrollViewer.TemplatedParentHandlesScrolling = true;
            this.$TemplateScrollViewer.HorizontalScrollBarVisibility = Fayde.Controls.ScrollViewer.GetHorizontalScrollBarVisibility(this);
            this.$TemplateScrollViewer.VerticalScrollBarVisibility = Fayde.Controls.ScrollViewer.GetVerticalScrollBarVisibility(this);
        }
    };
    Selector.Instance.OnItemsChanged = function (e) {
        if (this._Initializing) {
            this.OnItemsChanged$ItemsControl(e);
            return;
        }
        var item;
        switch (e.Action) {
            case Fayde.Collections.NotifyCollectionChangedAction.Add:
                item = Nullstone.As(e.NewItems[0], Fayde.Controls.ListBoxItem);
                if (item != null && item.IsSelected && !this.SelectedItems.Contains(item)) {
                    this._Selection.Select(item);
                } else if (this.SelectedItem != null) {
                    this._Selection.Select(this.SelectedItem);
                }
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Reset:
                var o;
                var itemsSource = this.ItemsSource;
                if (Nullstone.Is(itemsSource, Fayde.Data.ICollectionView) && this.$SynchronizeWithCurrentItem)
                    o = itemsSource.CurrentItem;
                else
                    o = this.SelectedItem;
                if (this.Items.Contains(o))
                    this._Selection.Select(o);
                else
                    this._Selection.ClearSelection();
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Remove:
                item = e.OldItems[0];
                if (this.SelectedItems.Contains(item))
                    this._Selection.Unselect(item);
                else if (e.OldStartingIndex <= this.SelectedIndex)
                    this._Selection.Select(this.SelectedItem);
                break;
            case Fayde.Collections.NotifyCollectionChangedAction.Replace:
                item = e.OldItems[0];
                this._Selection.Unselect(item);
                break;
            default:
                throw new NotSupportedException("Collection changed action '" + e.Action + "' not supported");
        }
        this.OnItemsChanged$ItemsControl(e);
    };
    Selector.Instance.OnItemsSourceChanged = function (args) {
        this.OnItemsSourceChanged$ItemsControl(args);
        var view = Nullstone.As(args.OldValue, Fayde.Data.ICollectionView);
        if (view != null)
            view.CurrentChanged.Unsubscribe(this._OnCurrentItemChanged, this);
        view = Nullstone.As(args.NewValue, Fayde.Data.ICollectionView);
        if (view != null) {
            view.CurrentChanged.Subscribe(this._OnCurrentItemChanged, this);
            if (this.$SynchronizeWithCurrentItem)
                this._Selection.SelectOnly(view.CurrentItem);
            else
                this._Selection.ClearSelection();
        } else {
            this._Selection.ClearSelection();
        }
    };
    Selector.Instance.OnItemContainerStyleChanged = function (oldStyle, newStyle) { };
    Selector.Instance.ClearContainerForItem = function (element, item) {
        this.ClearContainerForItem$ItemsControl(element, item);
        element.ParentSelector = null;
        if (!Nullstone.RefEquals(element, item))
            element.Content = null;
    };
    Selector.Instance.PrepareContainerForItem = function (element, item) {
        this.PrepareContainerForItem$ItemsControl(element, item);
        element.ParentSelector = this;
        if (this.SelectedItems.Contains(item))
            element.IsSelected = true;
        if (element.IsSelected && !this.SelectedItems.Contains(item))
            this._Selection.Select(item);
    };
    Selector.Instance._GetValueFromItem = function (item) {
        if (this._SelectedValueWalker == null)
            return item;
        if (item == null)
            return item;
        return this._SelectedValueWalker.GetValue(item);
    };
    Selector.Instance._SelectItemFromValue = function (selectedValue, ignoreSelectedValue) {
        if (selectedValue == null) {
            this._Selection.ClearSelection(ignoreSelectedValue);
            return;
        }
        var items = this.Items;
        var count = items.GetCount();
        for (var i = 0; i < count; i++) {
            var item = items.GetValueAt(i);
            var val = this._GetValueFromItem(item);
            if (Nullstone.Equals(selectedValue, val)) {
                if (!this.SelectedItems.Contains(item))
                    this._Selection.Select(item, ignoreSelectedValue);
                return;
            }
        }
        this._Selection.ClearSelection(ignoreSelectedValue);
    };
    Selector.Instance._OnCurrentItemChanged = function (sender, e) {
        if (!this._Selection.Updating && this.$SynchronizeWithCurrentItem) {
            var icv = this.ItemsSource;
            if (!Nullstone.Equals(icv.CurrentItem, this.SelectedItem))
                this._Selection.SelectOnly(icv.CurrentItem);
        }
    };
    Selector.Instance._RaiseSelectionChanged = function (oldVals, newVals) {
        if (oldVals == null)
            oldVals = [];
        if (newVals == null)
            newVals = [];
        var oldCount = oldVals.length;
        var oldValue;
        for (var i = 0; i < oldCount; i++) {
            oldValue = oldVals[i];
            if (oldValue == null)
                continue;
            var oldItem = Nullstone.As(oldValue, Fayde.Controls.ListBoxItem);
            if (oldItem == null)
                oldItem = this.ItemContainerGenerator.ContainerFromItem(oldValue);
            if (oldItem != null)
                oldItem.IsSelected = false;
        }
        var newCount = newVals.length;
        var newValue;
        for (var i = 0; i < newCount; i++) {
            newValue = newVals[i];
            if (newValue == null)
                continue;
            var newItem = Nullstone.As(newValue, Fayde.Controls.ListBoxItem);
            if (newItem == null)
                newItem = this.ItemContainerGenerator.ContainerFromItem(newValue);
            if (newItem != null) {
                newItem.IsSelected = true;
                newItem.Focus();
            }
        }
        this.SelectionChanged.Raise(this, new namespace.SelectionChangedEventArgs(oldVals, newVals));
    };
    Selector.Instance.NotifyListItemClicked = function (lbi) {
        this._Selection.Select(this.ItemContainerGenerator.ItemFromContainer(lbi));
    };
    Selector.Instance.NotifyListItemLoaded = function (lbi) {
        if (Nullstone.RefEquals(this.ItemContainerGenerator.ItemFromContainer(lbi), this.SelectedItem)) {
            lbi.IsSelected = true;
            lbi.Focus();
        }
    };
    Selector.Instance.NotifyListItemGotFocus = function (lbi) { };
    Selector.Instance.NotifyListItemLostFocus = function (lbi) { };
    Selector.Instance.BeginInit = function () {
        this._Initializing = true;
        this._InitState = new {
            Index: this.SelectedIndex,
            Item: this.SelectedItem,
            Value: this.SelectedValue,
            ValuePath: this.SelectedValuePath,
        };
    };
    Selector.Instance.EndInit = function () {
        this._Initializing = false;
        if (!Nullstone.RefEquals(this.SelectedValue, this._InitState.Value)) {
            this.SelectItemFromValue(this._SelectedValueWalker == null ? this.SelectedValue : this._SelectedValueWalker.Value, false);
        } else if (this.SelectedIndex !== this._InitState.Index) {
            this._Selection.Select(this.SelectedIndex < Items.GetCount() ? this.Items.GetValueAt(this.SelectedIndex) : null);
        } else if (!Nullstone.RefEquals(this.SelectedItem, this._InitState.Item)) {
            this._Selection.Select(this.SelectedItem);
        } else if (SelectedValuePath != this._InitState.ValuePath) {
            this.SelectItemFromValue(this._SelectedValueWalker == null ? this.SelectedValue : this._SelectedValueWalker.Value, false);
        }
        delete this._InitState;
    };
    namespace.Selector = Nullstone.FinishCreate(Selector);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var Thumb = Nullstone.Create("Thumb", Fayde.Controls.Control);
    Thumb.Instance.Init = function () {
        this.Init$Control();
        this.DragCompleted = new MulticastEvent();
        this.DragDelta = new MulticastEvent();
        this.DragStarted = new MulticastEvent();
        this.DefaultStyleKey = this.constructor;
    };
    Thumb.IsDraggingProperty = DependencyProperty.RegisterReadOnly("IsDragging", function () { return Boolean; }, Thumb, false, function (d, args) { d.OnDraggingChanged(args); });
    Thumb.IsFocusedProperty = DependencyProperty.RegisterReadOnly("IsFocused", function () { return Boolean; }, Thumb);
    Nullstone.AutoPropertiesReadOnly(Thumb, [
        Thumb.IsDraggingProperty
    ]);
    Nullstone.AutoProperty(Thumb, Thumb.IsFocusedProperty, undefined, true);
    Thumb.Instance.OnApplyTemplate = function () {
        this.OnApplyTemplate$Control();
        this.$UpdateVisualState(false);
    };
    Thumb.Instance.CancelDrag = function () {
        if (this.IsDragging) {
            this.$SetValueInternal(Thumb.IsDraggingProperty, false);
            this._RaiseDragCompleted(true);
        }
    };
    Thumb.Instance._FocusChanged = function (hasFocus) {
        this.$SetValueInternal(Thumb.IsFocusedProperty, hasFocus);
        this.$UpdateVisualState();
    };
    Thumb.Instance.OnDraggingChanged = function (args) {
        this.$UpdateVisualState();
    };
    Thumb.Instance.OnIsEnabledChanged = function (args) {
        this.OnIsEnabledChanged$Control(args);
        this.$UpdateVisualState();
    };
    Thumb.Instance.OnGotFocus = function (e) {
        this.OnGotFocus$Control(e);
        this._FocusChanged(this._HasFocus());
    };
    Thumb.Instance.OnLostFocus = function (e) {
        this.OnLostFocus$Control(e);
        this._FocusChanged(this._HasFocus());
    };
    Thumb.Instance.OnLostMouseCapture = function (sender, args) {
        this.OnLostMouseCapture$Control(sender, args);
        this._RaiseDragCompleted(false);
        this.$SetValueInternal(Thumb.IsDraggingProperty, false);
    };
    Thumb.Instance.OnMouseEnter = function (args) {
        this.OnMouseEnter$Control(args);
        if (this.IsEnabled) {
            this.$UpdateVisualState();
        }
    };
    Thumb.Instance.OnMouseLeave = function (args) {
        this.OnMouseLeave$Control(args);
        if (this.IsEnabled) {
            this.$UpdateVisualState();
        }
    };
    Thumb.Instance.OnMouseLeftButtonDown = function (sender, args) {
        this.OnMouseLeftButtonDown$Control(sender, args);
        if (args.Handled)
            return;
        if (!this.IsDragging && this.IsEnabled) {
            args.Handled = true;
            this.CaptureMouse();
            this.$SetValueInternal(Thumb.IsDraggingProperty, true);
            this._Origin = this._PreviousPosition = args.GetPosition(this._GetLogicalParent());
            var success = false;
            try {
                this._RaiseDragStarted();
                success = true;
            } finally {
                if (!success)
                    this.CancelDrag();
            }
        }
    };
    Thumb.Instance.OnMouseMove = function (sender, args) {
        this.OnMouseMove$Control(sender, args);
        if (!this.IsDragging)
            return;
        var p = args.GetPosition(this._GetLogicalParent());
        if (!Point.Equals(p, this._PreviousPosition)) {
            this._RaiseDragDelta(p.X - this._PreviousPosition.X, p.Y - this._PreviousPosition.Y);
            this._PreviousPosition = p;
        }
    };
    Thumb.Instance._RaiseDragStarted = function () {
        this.DragStarted.Raise(this, new namespace.DragStartedEventArgs(this._Origin.X, this._Origin.Y));
    };
    Thumb.Instance._RaiseDragDelta = function (x, y) {
        this.DragDelta.Raise(this, new namespace.DragDeltaEventArgs(x, y));
    };
    Thumb.Instance._RaiseDragCompleted = function (canceled) {
        this.DragCompleted.Raise(this, new namespace.DragCompletedEventArgs(this._PreviousPosition.X - this._Origin.X, this._PreviousPosition.Y - this._Origin.Y, canceled));
    };
    Thumb.Instance.$GetVisualStateCommon = function () {
        if (!this.IsEnabled) {
            return "Disabled";
        } else if (this.IsDragging) {
            return "Pressed";
        } else if (this.IsMouseOver) {
            return "MouseOver";
        } else {
            return "Normal";
        }
    };
    namespace.Thumb = Nullstone.FinishCreate(Thumb);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var SetterBaseCollection = Nullstone.Create("SetterBaseCollection", Fayde.DependencyObjectCollection);
    SetterBaseCollection.IsSealedProperty = DependencyProperty.Register("IsSealed", function () { return Boolean; }, SetterBaseCollection);
    Nullstone.AutoProperties(SetterBaseCollection, [
        SetterBaseCollection.IsSealedProperty
    ]);
    SetterBaseCollection.Instance._Seal = function () {
        this.IsSealed = true;
        var error = new BError();
        var iterator = this.GetIterator();
        var setter;
        while (iterator.Next(error) && (setter = iterator.GetCurrent(error))) {
            setter._Seal();
        }
    };
    SetterBaseCollection.Instance.AddedToCollection = function (value, error) {
        if (!value || !this._ValidateSetter(value, error))
            return false;
        if (value instanceof Fayde.SetterBase) {
            value._Attached = true;
            value._Seal();
        }
        return this.AddedToCollection$DependencyObjectCollection(value, error);
    };
    SetterBaseCollection.Instance.RemovedFromCollection = function (value, isValueSafe) {
        if (isValueSafe) {
            if (value instanceof Fayde.SetterBase)
                value._Attached = false;
        }
        this.RemovedFromCollection$DependencyObjectCollection(value, isValueSafe);
    };
    SetterBaseCollection.Instance.IsElementType = function (value) {
        return value instanceof Fayde.SetterBase;
    };
    SetterBaseCollection.Instance._ValidateSetter = function (value, error) {
        var s = Nullstone.As(value, Fayde.Setter);
        if (s) {
            if (s._GetValue(Fayde.Setter.PropertyProperty) === undefined) {
                error.SetErrored(BError.Exception, "Cannot have a null PropertyProperty value");
                return false;
            }
            if (s._ReadLocalValue(Fayde.Setter.ValueProperty) === undefined) {
                if (!s._HasDeferredValueExpression(Fayde.Setter.ValueProperty)) {
                    error.SetErrored(BError.Exception, "Cannot have a null ValueProperty value");
                    return false;
                }
            }
        }
        var sb = Nullstone.As(value, Fayde.SetterBase);
        if (sb) {
            if (sb._Attached) {
                error.SetErrored(BError.InvalidOperation, "Setter is currently attached to another style");
                return false;
            }
        }
        if (this.IsSealed) {
            error.SetErrored(BError.Exception, "Cannot add a setter to a sealed style");
            return false;
        }
        return true;
    };
    namespace.SetterBaseCollection = Nullstone.FinishCreate(SetterBaseCollection);
})(Nullstone.Namespace("Fayde"));

(function (Fayde) {
    var TriggerBase = Nullstone.Create("TriggerBase", Fayde.DependencyObject);
    Fayde.TriggerBase = Nullstone.FinishCreate(TriggerBase);
    var TriggerAction = Nullstone.Create("TriggerAction", Fayde.DependencyObject);
    TriggerAction.Instance.Fire = function () { };
    Fayde.TriggerAction = Nullstone.FinishCreate(TriggerAction);
    var TriggerActionCollection = Nullstone.Create("TriggerActionCollection", Fayde.DependencyObjectCollection);
    TriggerActionCollection.Instance.IsElementType = function (value) {
        return value instanceof TriggerAction;
    };
    Fayde.TriggerActionCollection = Nullstone.FinishCreate(TriggerActionCollection);
    var EventTrigger = Nullstone.Create("EventTrigger", TriggerBase);
    EventTrigger.ActionsProperty = DependencyProperty.RegisterFull("Actions", function () { return TriggerActionCollection; }, EventTrigger, undefined, undefined, { GetValue: function () { return new TriggerActionCollection(); } });
    EventTrigger.RoutedEventProperty = DependencyProperty.Register("RoutedEvent", function () { return MulticastEvent; }, EventTrigger);
    Nullstone.AutoProperties(EventTrigger, [
        EventTrigger.ActionsProperty,
        EventTrigger.RoutedEventProperty
    ]);
    EventTrigger.Annotations = {
        ContentProperty: EventTrigger.ActionsProperty
    };
    EventTrigger.Instance._SetTarget = function (target) {
        target.Loaded.Subscribe(this._FireActions, this);
    };
    EventTrigger.Instance._RemoveTarget = function (target) {
        target.Loaded.Unsubscribe(this._FireActions, this);
    };
    EventTrigger.Instance._FireActions = function (sender, e) {
        var actions = this.Actions;
        var count = actions.GetCount();
        for (var i = 0; i < count; i++) {
            var action = actions.GetValueAt(i);
            action.Fire();
        }
    };
    Fayde.EventTrigger = Nullstone.FinishCreate(EventTrigger);
    var TriggerCollection = Nullstone.Create("TriggerCollection", Fayde.DependencyObjectCollection);
    TriggerCollection.Instance.IsElementType = function (value) {
        return value instanceof EventTrigger;
    };
    Fayde.TriggerCollection = Nullstone.FinishCreate(TriggerCollection);
})(Nullstone.Namespace("Fayde"));

(function (namespace) {
    var Block = Nullstone.Create("Block", namespace.TextElement);
    Block.InlinesProperty = DependencyProperty.Register("Inlines", function () { return namespace.InlineCollection; }, Block);
    Nullstone.AutoProperties(Block, [
        Block.InlinesProperty
    ]);
    namespace.Block = Nullstone.FinishCreate(Block);
})(Nullstone.Namespace("Fayde.Documents"));
(function (namespace) {
    var BlockCollection = Nullstone.Create("BlockCollection", namespace.TextElementCollection);
    BlockCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.Block;
    };
    namespace.BlockCollection = Nullstone.FinishCreate(BlockCollection);
})(Nullstone.Namespace("Fayde.Documents"));

(function (namespace) {
    var Inline = Nullstone.Create("Inline", namespace.TextElement);
    Inline.Instance.Init = function () {
        this.Init$TextElement();
        this._Autogen = false;
    };
    Inline.Instance.Equals = function (inline) {
        if (this.FontFamily !== inline.FontFamily)
            return false;
        if (this.FontSize() !== inline.FontSize)
            return false;
        if (this.FontStyle() !== inline.FontStyle)
            return false;
        if (this.FontWeight() !== inline.FontWeight)
            return false;
        if (this.FontStretch() !== inline.FontStretch)
            return false;
        if (this.TextDecorations !== inline.TextDecorations)
            return false;
        if (!Nullstone.Equals(this.Foreground, inline.Foreground))
            return false;
        return true;
    };
    Inline.Instance._GetAutogenerated = function () {
        return this._Autogen;
    };
    Inline.Instance._SetAutogenerated = function (value) {
        this._Autogen = value;
    };
    namespace.Inline = Nullstone.FinishCreate(Inline);
})(Nullstone.Namespace("Fayde.Documents"));
(function (namespace) {
    var InlineCollection = Nullstone.Create("InlineCollection", namespace.TextElementCollection);
    InlineCollection.Instance.AddedToCollection = function (value, error) {
        if (this._ForHyperlink) {
            if (false) { //TODO: if (!this._IsValueSupportedInHyperlinkn(value)) {
                error.SetErrored(BError.Argument, "Invalid value in Hyperlink");
                return false;
            }
        }
        return this.AddedToCollection$TextElementCollection(value, error);
    };
    InlineCollection.Instance.Equals = function (inlines) {
        NotImplemented("InlineCollection.Equals");
    };
    InlineCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.Inline;
    };
    InlineCollection.Instance._SetIsForHyperlink = function () { this._ForHyperlink = true; };
    namespace.InlineCollection = Nullstone.FinishCreate(InlineCollection);
})(Nullstone.Namespace("Fayde.Documents"));

(function (namespace) {
    var LineBreak = Nullstone.Create("LineBreak", namespace.Inline);
    if (!Fayde.IsCanvasEnabled) {
        LineBreak.Instance.CreateHtmlObjectImpl = function () {
            return document.createElement("br");
        };
    }
    namespace.LineBreak = Nullstone.FinishCreate(LineBreak);
})(Nullstone.Namespace("Fayde.Documents"));

(function (namespace) {
    var Paragraph = Nullstone.Create("Paragraph", namespace.Block);
    namespace.Paragraph = Nullstone.FinishCreate(Paragraph);
})(Nullstone.Namespace("Fayde.Documents"));

(function (namespace) {
    var Run = Nullstone.Create("Run", namespace.Inline);
    Run.FlowDirectionProperty = DependencyProperty.RegisterInheritable("FlowDirection", function () { return new Enum(Fayde.FlowDirection); }, Run, Fayde.FlowDirection.LeftToRight, undefined, undefined, _Inheritable.FlowDirection);
    Run.TextProperty = DependencyProperty.Register("Text", function () { return String; }, Run);
    Nullstone.AutoProperties(Run, [
        Run.FlowDirectionProperty,
        Run.TextProperty
    ]);
    Run.Instance._SerializeText = function () {
        return this.Text;
    };
    if (!Fayde.IsCanvasEnabled) {
        Run.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Run) {
                this._OnPropertyChanged$Inline(args, error);
                return;
            }
            var ivprop = false;
            if (args.Property._ID === Run.TextProperty._ID) {
                ivprop = true;
            }
            if (ivprop)
                this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            this.PropertyChanged.Raise(this, args);
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        Run.Instance.ApplyHtmlChange = function (change) {
            var propd = change.Property;
            if (propd.OwnerType !== Run) {
                this.ApplyHtmlChange$Inline(change);
                return;
            }
            var propd = change.Property;
            var rootEl = this.GetRootHtmlElement();
            if (propd._ID === Run.TextProperty._ID) {
                rootEl.textContent = change.NewValue;
            }
        };
    }
    namespace.Run = Nullstone.FinishCreate(Run);
})(Nullstone.Namespace("Fayde.Documents"));

(function (namespace) {
    var Section = Nullstone.Create("Section", namespace.TextElement);
    Section.BlocksProperty = DependencyProperty.Register("Blocks", function () { return namespace.BlockCollection; }, Section);
    Nullstone.AutoProperties(Section, [
        Section.BlocksProperty
    ]);
    namespace.Section = Nullstone.FinishCreate(Section);
})(Nullstone.Namespace("Fayde.Documents"));

(function (namespace) {
    var Span = Nullstone.Create("Span", namespace.Inline);
    Span._InlinesAutoCreator = {
        GetValue: function (propd, obj) {
            var inlines = new namespace.InlineCollection();
            if (obj instanceof namespace.Hyperlink)
                inlines._SetIsForHyperlink();
            return inlines;
        }
    };
    Span.InlinesProperty = DependencyProperty.RegisterFull("Inlines", function () { return namespace.InlineCollection; }, Span, undefined, undefined, Span._InlinesAutoCreator);
    Nullstone.AutoProperties(Span, [
        Span.InlinesProperty
    ]);
    Span.Annotations = {
        ContentProperty: Span.InlinesProperty
    };
    Span.Instance._SerializeText = function () {
        var inlines = this.Inlines;
        var count = inlines.GetCount();
        var str = "";
        for (var i = 0; i < count; i++) {
            str += inlines.GetValueAt(i)._SerializeText();
        }
        return str;
    };
    if (!Fayde.IsCanvasEnabled) {
        Span.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Span) {
                this._OnPropertyChanged$Inline(args, error);
                return;
            }
            if (args.Property._ID === Span.InlinesProperty._ID) {
                this.SetChildrenHtml(args.NewValue);
            }
            this.PropertyChanged.Raise(this, args);
        };
        Span.Instance._OnCollectionChanged = function (sender, args) {
            if (this._PropertyHasValueNoAutoCreate(Span.InlinesProperty, sender)) {
                if (args.IsAdd)
                    this._Providers[_PropertyPrecedence.Inherited].PropagateInheritedPropertiesOnAddingToTree(args.NewValue);
                this.UpdateHtmlInlines(args);
            } else {
                this._OnCollectionChanged$Inline(sender, args);
            }
        };
    }
    if (Fayde.IsCanvasEnabled) {
        Span.Instance._OnCollectionChanged = function (sender, args) {
            if (this._PropertyHasValueNoAutoCreate(Span.InlinesProperty, sender)) {
                if (args.IsAdd)
                    this._Providers[_PropertyPrecedence.Inherited].PropagateInheritedPropertiesOnAddingToTree(args.NewValue);
            } else {
                this._OnCollectionChanged$Inline(sender, args);
            }
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        Span.Instance.CreateHtmlObjectImpl = function () {
            return document.createElement("span");
        };
        Span.Instance.GetContentHtmlElement = function () {
            return this._HtmlEl;
        };
        Span.Instance.UpdateHtmlInlines = function (args) {
            if (args.IsCleared) {
                this.ClearChildrenHtml();
            } else if (args.IsAdd) {
                this.AddChildHtml(args.NewValue, args.Index);
            } else if (args.IsRemove) {
                this.RemoveChildHtml(args.NewValue);
            } else if (args.IsReplace) {
                this.ReplaceChildHtml(args.OldValue, args.NewValue);
            }
        };
        Span.Instance.SetChildrenHtml = function (inlines) {
            var contentEl = this.GetContentHtmlElement();
            while (contentEl.hasChildNodes()) {
                contentEl.removeChild(contentEl.lastChild);
            }
            if (!inlines)
                return;
            var len = inlines.GetCount();
            for (var i = 0; i < len; i++) {
                var te = inlines.GetValueAt(i);
                contentEl.appendChild(te.GetRootHtmlElement());
            }
        };
        Span.Instance.AddChildHtml = function (inline, newIndex) {
            var contentEl = this.GetContentHtmlElement();
            var index = 0;
            var curEl = contentEl.firstChild;
            while (curEl && index < newIndex) {
                curEl = curEl.nextSibling;
                index++;
            }
            contentEl.insertBefore(inline.GetRootHtmlElement(), curEl);
        };
        Span.Instance.ReplaceChildHtml = function (oldInline, newInline) {
            var contentEl = this.GetContentHtmlElement();
            contentEl.replaceChild(newInline.GetRootHtmlElement(), oldInline.GetRootHtmlElement());
        };
        Span.Instance.RemoveChildHtml = function (inline) {
            var contentEl = this.GetContentHtmlElement();
            contentEl.removeChild(inline.GetRootHtmlElement());
        };
        Span.Instance.ClearChildrenHtml = function () {
            var contentEl = this.GetContentHtmlElement();
            while (contentEl.hasChildNodes()) {
                contentEl.removeChild(contentEl.lastChild);
            }
        };
    }
    namespace.Span = Nullstone.FinishCreate(Span);
})(Nullstone.Namespace("Fayde.Documents"));

(function (namespace) {
    var Underline = Nullstone.Create("Underline", namespace.Span);
    if (!Fayde.IsCanvasEnabled) {
        Underline.Instance.CreateHtmlObjectImpl = function () {
            var rootEl = this.CreateHtmlObjectImpl$Span();
            rootEl.appendChild(document.createElement("u"));
            return rootEl;
        };
        Underline.Instance.GetContentHtmlElement = function () {
            return this.GetRootHtmlElement().firstChild;
        };
    }
    namespace.Underline = Nullstone.FinishCreate(Underline);
})(Nullstone.Namespace("Fayde.Documents"));

(function (namespace) {
    var GradientBrush = Nullstone.Create("GradientBrush", namespace.Brush);
    GradientBrush.GradientStopsProperty = DependencyProperty.RegisterFull("GradientStops", function () { return namespace.GradientStopCollection; }, GradientBrush, undefined, undefined, { GetValue: function () { return new namespace.GradientStopCollection(); } });
    GradientBrush.MappingModeProperty = DependencyProperty.Register("MappingMode", function () { return new Enum(namespace.BrushMappingMode); }, GradientBrush, namespace.BrushMappingMode.RelativeToBoundingBox);
    GradientBrush.SpreadMethodProperty = DependencyProperty.Register("SpreadMethod", function () { return new Enum(namespace.GradientSpreadMethod); }, GradientBrush, namespace.GradientSpreadMethod.Pad);
    Nullstone.AutoProperties(GradientBrush, [
        GradientBrush.GradientStopsProperty,
        GradientBrush.MappingModeProperty,
        GradientBrush.SpreadMethodProperty
    ]);
    GradientBrush.Annotations = {
        ContentProperty: GradientBrush.GradientStopsProperty
    };
    GradientBrush.Instance.CreateBrush = function (ctx, bounds) {
        var spread = this.SpreadMethod;
        switch (spread) {
            case namespace.GradientSpreadMethod.Pad:
            default:
                return this._CreatePad(ctx, bounds);
            case namespace.GradientSpreadMethod.Repeat:
                return this._CreateRepeat(ctx, bounds);
            case namespace.GradientSpreadMethod.Reflect:
                return this._CreateReflect(ctx, bounds);
        }
    };
    GradientBrush.Instance._CreatePad = function (ctx, data, bounds) { };
    GradientBrush.Instance._CreateRepeat = function (ctx, data, bounds) { };
    GradientBrush.Instance._CreateReflect = function (ctx, data, bounds) { };
    GradientBrush.Instance._GetMappingModeTransform = function (bounds) {
        if (this.MappingMode === namespace.BrushMappingMode.Absolute)
            return mat3.identity();
        if (!bounds)
            return mat3.identity();
        if (!bounds)
            return mat3.identity();
        return mat3.createScale(bounds.Width, bounds.Height);
    };
    namespace.GradientBrush = Nullstone.FinishCreate(GradientBrush);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var LinearGradientBrush = Nullstone.Create("LinearGradientBrush", namespace.GradientBrush);
    LinearGradientBrush.StartPointProperty = DependencyProperty.RegisterCore("StartPoint", function () { return Point; }, LinearGradientBrush, new Point());
    LinearGradientBrush.EndPointProperty = DependencyProperty.RegisterCore("EndPoint", function () { return Point; }, LinearGradientBrush, new Point(1, 1));
    Nullstone.AutoProperties(LinearGradientBrush, [
        LinearGradientBrush.StartPointProperty,
        LinearGradientBrush.EndPointProperty
    ]);
    LinearGradientBrush.Instance._CreatePad = function (ctx, bounds) {
        var data = this._GetPointData(bounds);
        var start = data.start;
        var end = data.end;
        var grd = ctx.createLinearGradient(start.X, start.Y, end.X, end.Y);
        var stops = this.GradientStops;
        var count = stops.GetCount();
        for (var i = 0; i < count; i++) {
            var stop = stops.GetValueAt(i);
            grd.addColorStop(stop.Offset, stop.Color.toString());
        }
        return grd;
    };
    LinearGradientBrush.Instance._CreateRepeat = function (ctx, bounds) {
        var data = this._GetPointData(bounds);
        var start = data.start;
        var end = data.end;
        var dir = { x: end.X - start.X, y: end.Y - start.Y };
        var first = { x: start.X, y: start.Y };
        var last = { x: end.X, y: end.Y };
        namespace.GradientMetrics.Calculate(dir, first, last, bounds);
        var grd = ctx.createLinearGradient(first.x, first.y, last.x, last.y);
        var stops = this.GradientStops;
        var count = stops.GetCount();
        var steps = (last.x - first.x) / dir.x;
        var curOffset = 0.0;
        for (var i = 0; i < steps; i++) {
            for (var j = 0; j < count; j++) {
                var stop = stops.GetValueAt(j);
                grd.addColorStop(curOffset + (stop.Offset / steps), stop.Color.toString());
            }
            curOffset += (1.0 / steps);
        }
        return grd;
    };
    LinearGradientBrush.Instance._CreateReflect = function (ctx, bounds) {
        var data = this._GetPointData(bounds);
        var start = data.start;
        var end = data.end;
    };
    LinearGradientBrush.Instance._GetPointData = function (bounds) {
        var transform = this._GetMappingModeTransform(bounds);
        var sp = this.StartPoint;
        var ep = this.EndPoint;
        var s = mat3.transformVec2(transform, vec2.createFrom(sp.X, sp.Y));
        var e = mat3.transformVec2(transform, vec2.createFrom(ep.X, ep.Y));
        return {
            start: new Point(s[0], s[1]),
            end: new Point(e[0], e[1])
        };
    };
    LinearGradientBrush.Instance.toString = function () {
        var stops = this.GradientStops;
        var count = stops.GetCount();
        var ser = [];
        for (var i = 0; i < count; i++) {
            ser.push(stops.GetValueAt(i).toString());
        }
        return "LinearGradientBrush(" + this.StartPoint.toString() + " --> " + this.EndPoint.toString() + " [" + ser.toString() + "])";
    };
    namespace.LinearGradientBrush = Nullstone.FinishCreate(LinearGradientBrush);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var RadialGradientBrush = Nullstone.Create("RadialGradientBrush", namespace.GradientBrush);
    RadialGradientBrush.CenterProperty = DependencyProperty.RegisterCore("Center", function () { return Point; }, RadialGradientBrush, new Point(0.5, 0.5));
    RadialGradientBrush.GradientOriginProperty = DependencyProperty.RegisterCore("GradientOrigin", function () { return Point; }, RadialGradientBrush, new Point(0.5, 0.5));
    RadialGradientBrush.RadiusXProperty = DependencyProperty.RegisterCore("RadiusX", function () { return Number; }, RadialGradientBrush, 0.5);
    RadialGradientBrush.RadiusYProperty = DependencyProperty.RegisterCore("RadiusY", function () { return Number; }, RadialGradientBrush, 0.5);
    Nullstone.AutoProperties(RadialGradientBrush, [
        RadialGradientBrush.CenterProperty,
        RadialGradientBrush.GradientOriginProperty,
        RadialGradientBrush.RadiusXProperty,
        RadialGradientBrush.RadiusYProperty
    ]);
    RadialGradientBrush.Instance.CreateBrush = function (ctx, bounds) {
        NotImplemented("RadialGradientBrush.CreateBrush");
    };
    namespace.RadialGradientBrush = Nullstone.FinishCreate(RadialGradientBrush);
})(Nullstone.Namespace("Fayde.Media"));

(function (namespace) {
    var BeginStoryboard = Nullstone.Create("BeginStoryboard", Fayde.TriggerAction);
    BeginStoryboard.StoryboardProperty = DependencyProperty.Register("Storyboard", function () { return namespace.Storyboard; }, BeginStoryboard);
    Nullstone.AutoProperties(BeginStoryboard, [
        BeginStoryboard.StoryboardProperty
    ]);
    BeginStoryboard.Annotations = {
        ContentProperty: BeginStoryboard.StoryboardProperty
    };
    BeginStoryboard.Instance.Fire = function () {
        var sb = this.Storyboard;
        if (sb)
            sb.Begin();
    };
    namespace.BeginStoryboard = Nullstone.FinishCreate(BeginStoryboard);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var ColorKeyFrame = Nullstone.Create("ColorKeyFrame", namespace.KeyFrame);
    ColorKeyFrame.KeyTimeProperty = DependencyProperty.Register("KeyTime", function () { return KeyTime; }, ColorKeyFrame);
    ColorKeyFrame.ValueProperty = DependencyProperty.Register("Value", function () { return Color; }, ColorKeyFrame);
    Nullstone.AutoProperties(ColorKeyFrame, [
        ColorKeyFrame.KeyTimeProperty,
        ColorKeyFrame.ValueProperty
    ]);
    namespace.ColorKeyFrame = Nullstone.FinishCreate(ColorKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var ColorKeyFrameCollection = Nullstone.Create("ColorKeyFrameCollection", namespace.KeyFrameCollection);
    ColorKeyFrameCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.ColorKeyFrame;
    };
    namespace.ColorKeyFrameCollection = Nullstone.FinishCreate(ColorKeyFrameCollection);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var DiscreteColorKeyFrame = Nullstone.Create("DiscreteColorKeyFrame", namespace.ColorKeyFrame);
    DiscreteColorKeyFrame.Instance.InterpolateValue = function (baseValue, keyFrameProgress) {
        if (keyFrameProgress >= 1.0)
            return this.Value;
        return baseValue;
    };
    namespace.DiscreteColorKeyFrame = Nullstone.FinishCreate(DiscreteColorKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var EasingColorKeyFrame = Nullstone.Create("EasingColorKeyFrame", namespace.ColorKeyFrame);
    EasingColorKeyFrame.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () { return namespace.IEasingFunction; }, EasingColorKeyFrame);
    Nullstone.AutoProperties(EasingColorKeyFrame, [
        EasingColorKeyFrame.EasingFunctionProperty
    ]);
    EasingColorKeyFrame.Instance.InterpolateValue = function (baseValue, keyFrameProgress) {
        if (keyFrameProgress >= 1.0)
            return this.Value;
        var start = baseValue;
        var end = this.Value;
        var easingFunction = this.EasingFunction;
        if (easingFunction)
            keyFrameProgress = easingFunction.Ease(keyFrameProgress);
        return Color.LERP(start, end, keyFrameProgress);
    };
    namespace.EasingColorKeyFrame = Nullstone.FinishCreate(EasingColorKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var LinearColorKeyFrame = Nullstone.Create("LinearColorKeyFrame", namespace.ColorKeyFrame);
    LinearColorKeyFrame.Instance.InterpolateValue = function (baseValue, keyFrameProgress) {
        return Color.LERP(baseValue, this.Value, keyFrameProgress);
    };
    namespace.LinearColorKeyFrame = Nullstone.FinishCreate(LinearColorKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var SplineColorKeyFrame = Nullstone.Create("SplineColorKeyFrame", namespace.ColorKeyFrame);
    SplineColorKeyFrame.KeySplineProperty = DependencyProperty.Register("KeySpline", function () { return namespace.KeySpline; }, SplineColorKeyFrame);
    Nullstone.AutoProperties(SplineColorKeyFrame, [
        SplineColorKeyFrame.KeySplineProperty
    ]);
    SplineColorKeyFrame.Instance.InterpolateValue = function (baseValue, keyFrameProgress) {
        if (keyFrameProgress >= 1.0)
            return this.Value;
        var start = baseValue;
        var end = this.Value;
        var splineProgress = keyFrameProgress;
        var keySpline = this.KeySpline;
        if (keySpline)
            splineProgress = keySpline.GetSplineProgress(keyFrameProgress);
        if (isNaN(start))
            start = 0;
        if (isNaN(end))
            end = 0;
        return Color.LERP(start, end, splineProgress);
    };
    namespace.SplineColorKeyFrame = Nullstone.FinishCreate(SplineColorKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var DoubleKeyFrame = Nullstone.Create("DoubleKeyFrame", namespace.KeyFrame);
    DoubleKeyFrame.KeyTimeProperty = DependencyProperty.Register("KeyTime", function () { return KeyTime; }, DoubleKeyFrame);
    DoubleKeyFrame.ValueProperty = DependencyProperty.Register("Value", function () { return Number; }, DoubleKeyFrame);
    Nullstone.AutoProperties(DoubleKeyFrame, [
        DoubleKeyFrame.KeyTimeProperty,
        DoubleKeyFrame.ValueProperty
    ]);
    namespace.DoubleKeyFrame = Nullstone.FinishCreate(DoubleKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var DoubleKeyFrameCollection = Nullstone.Create("DoubleKeyFrameCollection", namespace.KeyFrameCollection);
    DoubleKeyFrameCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.DoubleKeyFrame;
    };
    namespace.DoubleKeyFrameCollection = Nullstone.FinishCreate(DoubleKeyFrameCollection);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var DiscreteDoubleKeyFrame = Nullstone.Create("DiscreteDoubleKeyFrame", namespace.DoubleKeyFrame);
    DiscreteDoubleKeyFrame.Instance.InterpolateValue = function (baseValue, keyFrameProgress) {
        if (keyFrameProgress >= 1.0)
            return this.Value;
        return baseValue;
    };
    namespace.DiscreteDoubleKeyFrame = Nullstone.FinishCreate(DiscreteDoubleKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var SplineDoubleKeyFrame = Nullstone.Create("SplineDoubleKeyFrame", namespace.DoubleKeyFrame);
    SplineDoubleKeyFrame.KeySplineProperty = DependencyProperty.Register("KeySpline", function () { return namespace.KeySpline; }, SplineDoubleKeyFrame);
    Nullstone.AutoProperties(SplineDoubleKeyFrame, [
        SplineDoubleKeyFrame.KeySplineProperty
    ]);
    SplineDoubleKeyFrame.Instance.InterpolateValue = function (baseValue, keyFrameProgress) {
        if (keyFrameProgress >= 1.0)
            return this.Value;
        var start = baseValue;
        var end = this.Value;
        var splineProgress = keyFrameProgress;
        var keySpline = this.KeySpline;
        if (keySpline)
            splineProgress = keySpline.GetSplineProgress(keyFrameProgress);
        if (isNaN(start))
            start = 0;
        if (isNaN(end))
            end = 0;
        return start + (end - start) * splineProgress;
    };
    namespace.SplineDoubleKeyFrame = Nullstone.FinishCreate(SplineDoubleKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var LinearDoubleKeyFrame = Nullstone.Create("LinearDoubleKeyFrame", namespace.DoubleKeyFrame);
    LinearDoubleKeyFrame.Instance.InterpolateValue = function (baseValue, keyFrameProgress) {
        var start = baseValue;
        var end = this.Value;
        if (isNaN(start))
            start = 0;
        if (isNaN(end))
            end = 0;
        return start + (end - start) * keyFrameProgress;
    };
    namespace.LinearDoubleKeyFrame = Nullstone.FinishCreate(LinearDoubleKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));
(function (namespace) {
    var EasingDoubleKeyFrame = Nullstone.Create("EasingDoubleKeyFrame", namespace.DoubleKeyFrame);
    EasingDoubleKeyFrame.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () { return namespace.IEasingFunction; }, EasingDoubleKeyFrame);
    Nullstone.AutoProperties(EasingDoubleKeyFrame, [
        EasingDoubleKeyFrame.EasingFunctionProperty
    ]);
    EasingDoubleKeyFrame.Instance.InterpolateValue = function (baseValue, keyFrameProgress) {
        if (keyFrameProgress >= 1.0)
            return this.Value;
        var start = baseValue;
        var end = this.Value;
        var easingFunction = this.EasingFunction;
        if (easingFunction)
            keyFrameProgress = easingFunction.Ease(keyFrameProgress);
        if (isNaN(start))
            start = 0;
        if (isNaN(end))
            end = 0;
        return start + (end - start) * keyFrameProgress;
    };
    namespace.EasingDoubleKeyFrame = Nullstone.FinishCreate(EasingDoubleKeyFrame);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var ObjectAnimationUsingKeyFrames = Nullstone.Create("ObjectAnimationUsingKeyFrames", namespace.AnimationUsingKeyFrames);
    ObjectAnimationUsingKeyFrames.KeyFramesProperty = DependencyProperty.RegisterFull("KeyFrames", function () { return namespace.ObjectKeyFrameCollection; }, ObjectAnimationUsingKeyFrames, undefined, undefined, { GetValue: function () { return new namespace.ObjectKeyFrameCollection(); } });
    Nullstone.AutoProperties(ObjectAnimationUsingKeyFrames, [
        ObjectAnimationUsingKeyFrames.KeyFramesProperty
    ]);
    ObjectAnimationUsingKeyFrames.Annotations = {
        ContentProperty: ObjectAnimationUsingKeyFrames.KeyFramesProperty
    };
    ObjectAnimationUsingKeyFrames.Instance.Resolve = function () {
        var keyFrames = this.KeyFrames;
        var count = keyFrames.GetCount();
        for (var i = 0; i < count; i++) {
            var frame = Nullstone.As(keyFrames.GetValueAt(i), namespace.ObjectKeyFrame);
            var value = frame.Value;
            if (value == null) {
                frame._SetValue(namespace.ObjectKeyFrame.ConvertedValueProperty, undefined);
            } else {
                var converted = value;
                frame._SetValue(namespace.ObjectKeyFrame.ConvertedValueProperty, converted);
            }
        }
        return this.Resolve$AnimationUsingKeyFrames();
    };
    namespace.ObjectAnimationUsingKeyFrames = Nullstone.FinishCreate(ObjectAnimationUsingKeyFrames);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var BitmapImage = Nullstone.Create("BitmapImage", namespace.BitmapSource, 1);
    BitmapImage.Instance.Init = function (uri) {
        this.Init$BitmapSource();
        this.ImageFailed = new MulticastEvent();
        this.ImageOpened = new MulticastEvent();
        if (uri == null)
            return;
        this.UriSource = uri;
    };
    BitmapImage.UriSourceProperty = DependencyProperty.RegisterFull("UriSource", function () { return Uri; }, BitmapImage, new Uri(), undefined, undefined, undefined, true);
    Nullstone.AutoProperties(BitmapImage, [
        BitmapImage.UriSourceProperty
    ]);
    BitmapImage.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== BitmapImage) {
            this._OnPropertyChanged$BitmapSource(args, error);
            return;
        }
        if (args.Property._ID === BitmapImage.UriSourceProperty._ID) {
            var uri = args.NewValue;
            if (Uri.IsNullOrEmpty(uri)) {
                this.ResetImage();
            } else {
                this.UriSourceChanged(args.OldValue, uri);
            }
        }
        this.PropertyChanged.Raise(this, args);
    };
    BitmapImage.Instance._OnErrored = function (e) {
        this._OnErrored$BitmapSource(e);
        this.ImageFailed.Raise(this, new EventArgs());
    };
    BitmapImage.Instance._OnLoad = function (e) {
        this._OnLoad$BitmapSource(e);
        this.ImageOpened.Raise(this, new EventArgs());
    };
    namespace.BitmapImage = Nullstone.FinishCreate(BitmapImage);
})(Nullstone.Namespace("Fayde.Media.Imaging"));

(function (namespace) {
    var Ellipse = Nullstone.Create("Ellipse", namespace.Shape);
    Ellipse.Instance.Init = function () {
        this.Init$Shape();
        this.Stretch = Fayde.Media.Stretch.Fill;
    };
    Ellipse.Instance._DrawPath = function (ctx) {
        if (this._Path == null)
            this._BuildPath();
        this._DrawPath$Shape(ctx);
    };
    Ellipse.Instance._BuildPath = function () {
        var stretch = this.Stretch;
        var t = this._IsStroked() ? this.StrokeThickness : 0.0;
        var rect = new Rect(0, 0, this.ActualWidth, this.ActualHeight);
        switch (stretch) {
            case Fayde.Media.Stretch.None:
                rect.Width = rect.Height = 0;
                break;
            case Fayde.Media.Stretch.Uniform:
                rect.Width = rect.Height = Math.min(rect.Width, rect.Height);
                break;
            case Fayde.Media.Stretch.UniformToFill:
                rect.Width = rect.Height = Math.max(rect.Width, rect.Height);
                break;
            case Fayde.Media.Stretch.Fill:
                break;
        }
        if (t >= rect.Width || t >= rect.Height) {
            rect.Width = Math.max(rect.Width, t + t * 0.001);
            rect.Height = Math.max(rect.Height, t + t * 0.001);
            this._SetShapeFlags(namespace.ShapeFlags.Degenerate);
        } else {
            this._SetShapeFlags(namespace.ShapeFlags.Normal);
        }
        var ht = -t / 2;
        rect = rect.GrowBy(ht, ht, ht, ht);
        var path = new Fayde.Shapes.RawPath();
        path.Ellipse(rect.X, rect.Y, rect.Width, rect.Height);
        this._Path = path;
    };
    Ellipse.Instance._ComputeStretchBounds = function () {
        return this._ComputeShapeBounds(false);
    };
    Ellipse.Instance._ComputeShapeBounds = function (logical) {
        var rect = new Rect(0, 0, this.ActualWidth, this.ActualHeight);
        this._SetShapeFlags(namespace.ShapeFlags.Normal);
        var width = this.Width;
        var height = this.Height;
        if (rect.Width < 0.0 || rect.Height < 0.0 || width <= 0.0 || height <= 0.0) {
            this._SetShapeFlags(namespace.ShapeFlags.Empty);
            return new Rect();
        }
        var visualParent = this.GetVisualParent();
        if (visualParent != null && visualParent instanceof Fayde.Controls.Canvas) {
            if (isNaN(width) !== isNaN(height)) {
                this._SetShapeFlags(namespace.ShapeFlags.Empty);
                return new Rect();
            }
        }
        var t = this._IsStroked() ? this.StrokeThickness : 0.0;
        switch (this.Stretch) {
            case Fayde.Media.Stretch.None:
                rect.Width = rect.Height = 0.0;
                break;
            case Fayde.Media.Stretch.Uniform:
                rect.Width = rect.Height = Math.min(rect.Width, rect.Height);
                break;
            case Fayde.Media.Stretch.UniformToFill:
                rect.Width = rect.Height = Math.max(rect.Width, rect.Height);
                break;
            case Fayde.Media.Stretch.Fill:
                break;
        }
        if (t >= rect.Width || t >= rect.Height) {
            rect.Width = Math.max(rect.Width, t + t * 0.001);
            rect.Height = Math.max(rect.Height, t + t * 0.001);
            this._SetShapeFlags(namespace.ShapeFlags.Degenerate);
        } else {
            this._SetShapeFlags(namespace.ShapeFlags.Normal);
        }
        return rect;
    };
    Ellipse.Instance._ComputeShapeBoundsImpl = function (logical, matrix) {
        return logical ? new Rect(0, 0, 1.0, 1.0) : new Rect();
    };
    if (!Fayde.IsCanvasEnabled) {
        Ellipse.Instance.CreateSvgShape = function () {
            var ellipse = document.createElementNS("http://www.w3.org/2000/svg", "ellipse");
            ellipse.setAttribute("rx", "50%");
            ellipse.setAttribute("ry", "50%");
            ellipse.setAttribute("cx", "50%");
            ellipse.setAttribute("cy", "50%");
            return ellipse;
        };
    }
    namespace.Ellipse = Nullstone.FinishCreate(Ellipse);
})(Nullstone.Namespace("Fayde.Shapes"));

(function (namespace) {
    var Line = Nullstone.Create("Line", namespace.Shape);
    Line.X1Property = DependencyProperty.Register("X1", function () { return Number; }, Line, 0);
    Line.Y1Property = DependencyProperty.Register("Y1", function () { return Number; }, Line, 0);
    Line.X2Property = DependencyProperty.Register("X2", function () { return Number; }, Line, 0);
    Line.Y2Property = DependencyProperty.Register("Y2", function () { return Number; }, Line, 0);
    Nullstone.AutoProperties(Line, [
        Line.X1Property,
        Line.Y1Property,
        Line.X2Property,
        Line.Y2Property
    ]);
    Line.Instance._DrawPath = function (ctx) {
        if (this._Path == null)
            this._BuildPath();
        this._DrawPath$Shape(ctx);
    };
    Line.Instance._BuildPath = function () {
        this._SetShapeFlags(namespace.ShapeFlags.Normal);
        this._Path = new Fayde.Shapes.RawPath();
        var x1 = this.X1;
        var y1 = this.Y1;
        var x2 = this.X2;
        var y2 = this.Y2;
        this._Path.Move(x1, y1);
        this._Path.Line(x2, y2);
    };
    Line.Instance._ComputeShapeBounds = function (logical) {
        var shapeBounds = new Rect();
        var thickness = 0;
        if (!logical)
            thickness = this.StrokeThickness;
        if (thickness <= 0.0 && !logical)
            return shapeBounds;
        var x1 = this.X1;
        var y1 = this.Y1;
        var x2 = this.X2;
        var y2 = this.Y2;
        shapeBounds = new Rect(
            Math.min(x1, x2),
            Math.min(y1, y2),
            Math.abs(x2 - x1),
            Math.abs(y2 - y1)
        );
        return shapeBounds;
    };
    if (!Fayde.IsCanvasEnabled) {
        Line.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Line) {
                this._OnPropertyChanged$Shape(args, error);
                return;
            }
            if (args.Property._ID === Line.X1Property._ID
                || args.Property._ID === Line.X2Property._ID
                || args.Property._ID === Line.Y1Property._ID
                || args.Property._ID === Line.Y2Property._ID) {
                this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            }
            this.PropertyChanged.Raise(this, args);
        };
    }
    if (Fayde.IsCanvasEnabled) {
        Line.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Line) {
                this._OnPropertyChanged$Shape(args, error);
                return;
            }
            if (args.Property._ID === Line.X1Property._ID
                || args.Property._ID === Line.X2Property._ID
                || args.Property._ID === Line.Y1Property._ID
                || args.Property._ID === Line.Y2Property._ID) {
                this._InvalidateNaturalBounds();
            }
            this.PropertyChanged.Raise(this, args);
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        Line.Instance.CreateSvgShape = function () {
            var line = document.createElementNS("http://www.w3.org/2000/svg", "line");
            return line;
        };
        Line.Instance.ApplyHtmlChange = function (change) {
            var propd = change.Property;
            if (propd.OwnerType !== Line) {
                this.ApplyHtmlChange$Shape(change);
                return;
            }
            var shape = this.GetSvgShape();
            if (propd._ID === Line.X1Property._ID) {
                shape.setAttribute("x1", change.NewValue.toString());
            } else if (propd._ID === Line.X2Property._ID) {
                shape.setAttribute("x2", change.NewValue.toString());
            } else if (propd._ID === Line.Y1Property._ID) {
                shape.setAttribute("y1", change.NewValue.toString());
            } else if (propd._ID === Line.Y2Property._ID) {
                shape.setAttribute("y2", change.NewValue.toString());
            }
        };
    }
    namespace.Line = Nullstone.FinishCreate(Line);
})(Nullstone.Namespace("Fayde.Shapes"));

(function (namespace) {
    var Path = Nullstone.Create("Path", namespace.Shape);
    Path.DataProperty = DependencyProperty.RegisterCore("Data", function () { return Fayde.Media.Geometry; }, Path);
    Nullstone.AutoProperty(Path, Path.DataProperty, function (value) {
        if (value instanceof Fayde.Media.Geometry)
            return value;
        if (typeof value === "string")
            return Fayde.TypeConverter.GeometryFromString(value);
        return value;
    });
    Path.Instance._GetFillRule = function () {
        var geom = this.Data;
        if (geom == null)
            return this._GetFillRule$Shape();
        return geom.FillRule;
    };
    Path.Instance._DrawPath = function (ctx) {
        var geom = this.Data;
        if (geom == null)
            return;
        geom.Draw(ctx);
    };
    Path.Instance._ComputeShapeBoundsImpl = function (logical, matrix) {
        var geom = this.Data;
        if (geom == null) {
            this._SetShapeFlags(namespace.ShapeFlags.Empty);
            return new Rect();
        }
        if (logical)
            return geom.GetBounds();
        var thickness = (logical || !this._IsStroked()) ? 0.0 : this.StrokeThickness;
        return geom.GetBounds(thickness);
        return shapeBounds;
    };
    if (!Fayde.IsCanvasEnabled) {
        Path.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Path) {
                this._OnPropertyChanged$Shape(args, error);
                return;
            }
            if (args.Property._ID === Path.DataProperty._ID) {
                this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            }
        };
        Path.Instance._OnSubPropertyChanged = function (propd, sender, args) {
            if (propd != null && propd._ID === Path.DataProperty._ID) {
                this.InvalidateProperty(propd);
                return;
            }
            this._OnSubPropertyChanged$Shape(propd, sender, args);
        };
    }
    if (Fayde.IsCanvasEnabled) {
        Path.Instance._OnSubPropertyChanged = function (propd, sender, args) {
            if (propd != null && propd._ID === Path.DataProperty._ID) {
                this._InvalidateNaturalBounds();
                return;
            }
            this._OnSubPropertyChanged$Shape(propd, sender, args);
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        Path.Instance.CreateSvgShape = function () {
            var path = document.createElementNS("http://www.w3.org/2000/svg", "path");
            var data = this.Data;
            if (data)
                path.setAttribute("d", this.Data.Serialize());
            return path;
        };
        Path.Instance.ApplyHtmlChange = function (change) {
            var propd = change.Property;
            if (propd.OwnerType !== Path) {
                this.ApplyHtmlChange$Shape(change);
                return;
            }
            var shape = this.GetSvgShape();
            if (propd._ID === Path.DataProperty._ID) {
                var data = change.NewValue;
                if (!data)
                    data = this.Data;
                shape.setAttribute("d", data.Serialize());
                var svg = this.GetSvg();
                var bounds = data.GetBounds();
                svg.setAttribute("viewBox", bounds.X.toString() + " " + bounds.Y.toString() + " " + bounds.Width.toString() + " " + bounds.Height.toString());
            }
        };
    }
    namespace.Path = Nullstone.FinishCreate(Path);
})(Nullstone.Namespace("Fayde.Shapes"));

(function (namespace) {
    var Polygon = Nullstone.Create("Polygon", namespace.Shape);
    Polygon.FillRuleProperty = DependencyProperty.RegisterCore("FillRule", function () { return new Enum(namespace.FillRule); }, Polygon, namespace.FillRule.EvenOdd);
    Polygon.PointsProperty = DependencyProperty.RegisterFull("Points", function () { return namespace.PointCollection; }, Polygon, undefined, undefined, { GetValue: function () { return new namespace.PointCollection(); } });
    Nullstone.AutoProperties(Polygon, [
        Polygon.FillRuleProperty
    ]);
    Nullstone.AutoProperty(Polygon, Polygon.PointsProperty, function (value) {
        if (value instanceof namespace.PointCollection)
            return value;
        if (typeof value === "string")
            return Fayde.TypeConverter.PointCollectionFromString(value);
        return value;
    });
    var extendLine = function (p1, p2, thickness) {
        var t5 = thickness * 5.0;
        var dx = p1.X - p2.X;
        var dy = p1.Y - p2.Y;
        if (dy === 0.0) {
            t5 -= thickness / 2.0;
            if (dx > 0.0) {
                p1.X += t5;
                p2.X -= t5;
            } else {
                p1.X -= t5;
                p2.X += t5;
            }
        } else if (dx === 0.0) {
            t5 -= thickness / 2.0;
            if (dy > 0.0) {
                p1.Y += t5;
                p2.Y -= t5;
            } else {
                p1.Y -= t5;
                p2.Y += t5;
            }
        } else {
            var angle = Math.atan2(dy, dx);
            var ax = Math.abs(Math.sin(angle) * t5);
            if (dx > 0.0) {
                p1.X += ax;
                p2.X -= ax;
            } else {
                p1.X -= ax;
                p2.X += ax;
            }
            var ay = Math.abs(Math.sin(Math.PI / 2 - angle)) * t5;
            if (dy > 0.0) {
                p1.Y += ay;
                p2.Y -= ay;
            } else {
                p1.Y -= ay;
                p2.Y += ay;
            }
        }
    };
    Polygon.Instance._BuildPath = function () {
        var points = this.Points;
        var count;
        if (points == null || (count = points.GetCount()) < 2) {
            this._SetShapeFlags(namespace.ShapeFlags.Empty);
            return;
        }
        this._SetShapeFlags(namespace.ShapeFlags.Normal);
        var path = new Fayde.Shapes.RawPath();
        if (count === 2) {
            var thickness = this.StrokeThickness;
            var p1 = points.GetValueAt(0);
            var p2 = points.GetValueAt(1);
            extendLine(p1, p2, thickness);
            path.Move(p1.X, p1.Y);
            path.Line(p2.X, p2.Y);
        } else {
            var p = points.GetValueAt(0);
            path.Move(p.X, p.Y);
            for (var i = 1; i < count; i++) {
                p = points.GetValueAt(i);
                path.Line(p.X, p.Y);
            }
        }
        path.Close();
        this._Path = path;
    };
    if (!Fayde.IsCanvasEnabled) {
        Polygon.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Polygon) {
                this._OnPropertyChanged$Shape(args, error);
                return;
            }
            if (args.Property._ID === Polygon.PointsProperty._ID) {
                var oldPoints = args.OldValue;
                var newPoints = args.NewValue;
                if (newPoints != null && oldPoints != null) {
                    var nc = newPoints.GetCount();
                    var oc = oldPoints.GetCount();
                    if (nc === oc) {
                        var equal = true;
                        var np;
                        var op;
                        for (var i = 0; i < nc; i++) {
                            np = newPoints.GetValueAt(i);
                            op = oldPoints.GetValueAt(i);
                            if (true) {
                                equal = false;
                                break;
                            }
                        }
                        if (equal) {
                            this.PropertyChanged.Raise(this, args);
                            return;
                        }
                    }
                }
            }
            this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            this.PropertyChanged.Raise(this, args);
        };
        Polygon.Instance._OnCollectionChanged = function (col, args) {
            this._OnCollectionChanged$Shape(col, args);
            this.InvalidateProperty(Polygon.PointsProperty);
        };
        Polygon.Instance._OnCollectionItemChanged = function (col, obj, args) {
            this._OnCollectionItemChanged$Shape(col, obj, args);
            this.InvalidateProperty(Polygon.PointsProperty);
        };
    }
    if (Fayde.IsCanvasEnabled) {
        Polygon.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Polygon) {
                this._OnPropertyChanged$Shape(args, error);
                return;
            }
            if (args.Property._ID === Polygon.PointsProperty._ID) {
                var oldPoints = args.OldValue;
                var newPoints = args.NewValue;
                if (newPoints != null && oldPoints != null) {
                    var nc = newPoints.GetCount();
                    var oc = oldPoints.GetCount();
                    if (nc === oc) {
                        var equal = true;
                        var np;
                        var op;
                        for (var i = 0; i < nc; i++) {
                            np = newPoints.GetValueAt(i);
                            op = oldPoints.GetValueAt(i);
                            if (true) {
                                equal = false;
                                break;
                            }
                        }
                        if (equal) {
                            this.PropertyChanged.Raise(this, args);
                            return;
                        }
                    }
                }
                this._InvalidateNaturalBounds();
            }
            this._Invalidate();
            this.PropertyChanged.Raise(this, args);
        };
        Polygon.Instance._OnCollectionChanged = function (col, args) {
            this._OnCollectionChanged$Shape(col, args);
            this._InvalidateNaturalBounds();
        };
        Polygon.Instance._OnCollectionItemChanged = function (col, obj, args) {
            this._OnCollectionItemChanged$Shape(col, obj, args);
            this._InvalidateNaturalBounds();
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        Polygon.Instance.CreateSvgShape = function () {
            var polygon = document.createElementNS("http://www.w3.org/2000/svg", "polygon");
            this.ApplyHtmlFillRule(polygon, this.FillRule);
            return polygon;
        };
        var serializePoints = function (points) {
            var s = "";
            var len = points.GetCount();
            for (var i = 0; i < len; i++) {
                var p = points.GetValueAt(i);
                if (i > 0)
                    s += " ";
                s += p.X.toString() + "," + p.Y.toString();
            }
            return s;
        };
        Polygon.Instance.ApplyHtmlChange = function (change) {
            var propd = change.Property;
            if (propd.OwnerType !== Polygon) {
                this.ApplyHtmlChange$Shape(change);
                return;
            }
            var shape = this.GetSvgShape();
            if (propd._ID === Polygon.FillRuleProperty._ID) {
                this.ApplyHtmlFillRule(shape, change.NewValue);
            } else if (propd._ID === Polygon.PointsProperty._ID) {
                var coll = change.NewValue;
                if (!coll)
                    coll = this.Points;
                shape.setAttribute("points", serializePoints(coll));
            }
        };
        Polygon.Instance.ApplyHtmlFillRule = function (shape, fillRule) {
            switch (fillRule) {
                case namespace.FillRule.EvenOdd:
                    shape.setAttribute("fill-rule", "evenodd");
                    break;
                case namespace.FillRule.NonZero:
                    shape.setAttribute("fill-rule", "nonzero");
                    break;
            }
        };
    }
    namespace.Polygon = Nullstone.FinishCreate(Polygon);
})(Nullstone.Namespace("Fayde.Shapes"));

(function (namespace) {
    var Polyline = Nullstone.Create("Polyline", namespace.Shape);
    Polyline.FillRuleProperty = DependencyProperty.RegisterCore("FillRule", function () { return new Enum(namespace.FillRule); }, Polyline, namespace.FillRule.EvenOdd);
    Polyline.PointsProperty = DependencyProperty.RegisterFull("Points", function () { return namespace.PointCollection; }, Polyline, undefined, undefined, { GetValue: function () { return new namespace.PointCollection(); } });
    Nullstone.AutoProperties(Polyline, [
        Polyline.FillRuleProperty
    ]);
    Nullstone.AutoProperty(Polyline, Polyline.PointsProperty, function (value) {
        if (value instanceof namespace.PointCollection)
            return value;
        if (typeof value === "string")
            return Fayde.TypeConverter.PointCollectionFromString(value);
        return value;
    });
    Polyline.Instance._BuildPath = function () {
        var points = this.Points;
        var count;
        if (points == null || (count = points.GetCount()) < 2) {
            this._SetShapeFlags(namespace.ShapeFlags.Empty);
            return;
        }
        this._SetShapeFlags(namespace.ShapeFlags.Normal);
        this._Path = new Fayde.Shapes.RawPath();
        var p = points.GetValueAt(0);
        this._Path.Move(p.X, p.Y);
        for (var i = 1; i < count; i++) {
            p = points.GetValueAt(i);
            this._Path.Line(p.X, p.Y);
        }
    };
    Polyline.Instance._CanFill = function () { return true; };
    if (!Fayde.IsCanvasEnabled) {
        Polyline.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Polyline) {
                this._OnPropertyChanged$Shape(args, error);
                return;
            }
            this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            this.PropertyChanged.Raise(this, args);
        };
        Polyline.Instance._OnCollectionChanged = function (col, args) {
            if (!this._PropertyHasValueNoAutoCreate(Polyline.PointsProperty, col)) {
                this._OnCollectionChanged$Shape(col, args);
                return;
            }
            this.InvalidateProperty(Polyline.PointsProperty);
        };
        Polyline.Instance._OnCollectionItemChanged = function (col, obj, args) {
            this._OnCollectionItemChanged$Shape(col, obj, args);
            this.InvalidateProperty(Polyline.PointsProperty);
        };
    }
    if (Fayde.IsCanvasEnabled) {
        Polyline.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Polyline) {
                this._OnPropertyChanged$Shape(args, error);
                return;
            }
            if (args.Property._ID === Polyline.PointsProperty._ID) {
                this._InvalidateNaturalBounds();
            }
            this._Invalidate();
            this.PropertyChanged.Raise(this, args);
        };
        Polyline.Instance._OnCollectionChanged = function (col, args) {
            if (!this._PropertyHasValueNoAutoCreate(Polyline.PointsProperty, col)) {
                this._OnCollectionChanged$Shape(col, args);
                return;
            }
            this._InvalidateNaturalBounds();
        };
        Polyline.Instance._OnCollectionItemChanged = function (col, obj, args) {
            this._OnCollectionItemChanged$Shape(col, obj, args);
            this._InvalidateNaturalBounds();
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        Polyline.Instance.CreateSvgShape = function () {
            var polyline = document.createElementNS("http://www.w3.org/2000/svg", "polyline");
            this.ApplyHtmlFillRule(polyline, this.FillRule);
            return polyline;
        };
        var serializePoints = function (points) {
            var s = "";
            var len = points.GetCount();
            for (var i = 0; i < len; i++) {
                var p = points.GetValueAt(i);
                if (i > 0)
                    s += " ";
                s += p.X.toString() + "," + p.Y.toString();
            }
            return s;
        };
        Polyline.Instance.ApplyHtmlChange = function (change) {
            var propd = change.Property;
            if (propd.OwnerType !== Polyline) {
                this.ApplyHtmlChange$Shape(change);
                return;
            }
            var shape = this.GetSvgShape();
            if (propd._ID === Polyline.FillRuleProperty._ID) {
                this.ApplyHtmlFillRule(shape, change.NewValue);
            } else if (propd._ID === Polyline.PointsProperty._ID) {
                var coll = change.NewValue;
                if (!coll)
                    coll = this.Points;
                shape.setAttribute("points", serializePoints(coll));
            }
        };
        Polyline.Instance.ApplyHtmlFillRule = function (shape, fillRule) {
            switch (fillRule) {
                case namespace.FillRule.EvenOdd:
                    shape.setAttribute("fill-rule", "evenodd");
                    break;
                case namespace.FillRule.NonZero:
                    shape.setAttribute("fill-rule", "nonzero");
                    break;
            }
        };
    }
    namespace.Polyline = Nullstone.FinishCreate(Polyline);
})(Nullstone.Namespace("Fayde.Shapes"));

(function (namespace) {
    var Rectangle = Nullstone.Create("Rectangle", namespace.Shape);
    Rectangle.Instance.Init = function () {
        this.Init$Shape();
        this.Stretch = Fayde.Media.Stretch.Fill;
    };
    Rectangle.RadiusXProperty = DependencyProperty.Register("RadiusX", function () { return Number; }, Rectangle, 0.0);
    Rectangle.RadiusYProperty = DependencyProperty.Register("RadiusY", function () { return Number; }, Rectangle, 0.0);
    Nullstone.AutoProperties(Rectangle, [
        Rectangle.RadiusXProperty,
        Rectangle.RadiusYProperty
    ]);
    Rectangle.Instance._DrawPath = function (ctx) {
        if (this._Path == null)
            this._BuildPath();
        this._DrawPath$Shape(ctx);
    };
    Rectangle.Instance._BuildPath = function () {
        var stretch = this.Stretch;
        var t = this._IsStroked() ? this.StrokeThickness : 0.0;
        var rect = new Rect(0, 0, this.ActualWidth, this.ActualHeight);
        var radiusX = this.RadiusX;
        var radiusY = this.RadiusY;
        switch (stretch) {
            case Fayde.Media.Stretch.None:
                rect.Width = rect.Height = 0;
                break;
            case Fayde.Media.Stretch.Uniform:
                rect.Width = rect.Height = Math.min(rect.Width, rect.Height);
                break;
            case Fayde.Media.Stretch.UniformToFill:
                rect.Width = rect.Height = Math.max(rect.Width, rect.Height);
                break;
            case Fayde.Media.Stretch.Fill:
                break;
        }
        if (rect.Width === 0)
            rect.X = t * 0.5;
        if (rect.Height === 0)
            rect.Y = t * 0.5;
        var ta;
        if (t >= rect.Width || t >= rect.Height) {
            ta = t * 0.001;
            rect = rect.GrowBy(ta, ta, ta, ta);
            this._SetShapeFlags(namespace.ShapeFlags.Degenerate);
        } else {
            ta = -t * 0.5;
            rect = rect.GrowBy(ta, ta, ta, ta);
            this._SetShapeFlags(namespace.ShapeFlags.Normal);
        }
        var path = new Fayde.Shapes.RawPath();
        if ((radiusX === 0.0 && radiusY === 0.0) || (radiusX === radiusY))
            path.RoundedRect(rect.X, rect.Y, rect.Width, rect.Height, radiusX, radiusY);
        else
            NotImplemented("Rectangle._BuildPath with RadiusX !== RadiusY");
        this._Path = path;
    };
    Rectangle.Instance._ComputeStretchBounds = function () {
        return this._ComputeShapeBounds(false);
    };
    Rectangle.Instance._ComputeShapeBounds = function (logical) {
        var rect = new Rect(0, 0, this.ActualWidth, this.ActualHeight);
        this._SetShapeFlags(namespace.ShapeFlags.Normal);
        var width = this.Width;
        var height = this.Height;
        if (rect.Width < 0.0 || rect.Height < 0.0 || width <= 0.0 || height <= 0.0) {
            this._SetShapeFlags(namespace.ShapeFlags.Empty);
            return new Rect();
        }
        var visualParent = this.GetVisualParent();
        if (visualParent != null && visualParent instanceof Fayde.Controls.Canvas) {
            if (isNaN(width) !== isNaN(height)) {
                this._SetShapeFlags(namespace.ShapeFlags.Empty);
                return new Rect();
            }
        }
        var t = this._IsStroked() ? this.StrokeThickness : 0.0;
        switch (this.Stretch) {
            case Fayde.Media.Stretch.None:
                rect.Width = rect.Height = 0.0;
                break;
            case Fayde.Media.Stretch.Uniform:
                rect.Width = rect.Height = Math.min(rect.Width, rect.Height);
                break;
            case Fayde.Media.Stretch.UniformToFill:
                rect.Width = rect.Height = Math.max(rect.Width, rect.Height);
                break;
            case Fayde.Media.Stretch.Fill:
                break;
        }
        if (rect.Width === 0)
            rect.X = t * 0.5;
        if (rect.Height === 0)
            rect.Y = t * 0.5;
        if (t >= rect.Width || t >= rect.Height) {
            var g = t * 0.5005;
            rect = rect.GrowBy(g, g, g, g);
            this._SetShapeFlags(namespace.ShapeFlags.Degenerate);
        } else {
            this._SetShapeFlags(namespace.ShapeFlags.Normal);
        }
        return rect;
    };
    Rectangle.Instance._ComputeShapeBoundsImpl = function (logical, matrix) {
        return logical ? new Rect(0, 0, 1.0, 1.0) : new Rect();
    };
    if (!Fayde.IsCanvasEnabled) {
        Rectangle.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Rectangle) {
                this._OnPropertyChanged$Shape(args, error);
                return;
            }
            if (args.Property._ID === Rectangle.RadiusXProperty._ID || args.Property._ID === Rectangle.RadiusYProperty._ID) {
                this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            }
            this.PropertyChanged.Raise(this, args);
        };
    }
    if (Fayde.IsCanvasEnabled) {
        Rectangle.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Rectangle) {
                this._OnPropertyChanged$Shape(args, error);
                return;
            }
            if (args.Property._ID === Rectangle.RadiusXProperty._ID || args.Property._ID === Rectangle.RadiusYProperty._ID) {
                this._InvalidateMeasure();
                this._InvalidatePathCache();
            }
            this._Invalidate();
            this.PropertyChanged.Raise(this, args);
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        Rectangle.Instance.CreateSvgShape = function () {
            var rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
            return rect;
        };
        Rectangle.Instance.ApplyHtmlChange = function (change) {
            var propd = change.Property;
            if (propd.OwnerType !== Rectangle) {
                this.ApplyHtmlChange$Shape(change);
                return;
            }
            var shape = this.GetSvgShape();
            if (propd._ID === Rectangle.RadiusXProperty._ID) {
                shape.setAttribute("rx", change.NewValue);
            } else if (propd._ID === Rectangle.RadiusYProperty._ID) {
                shape.setAttribute("ry", change.NewValue);
            }
        };
    }
    namespace.Rectangle = Nullstone.FinishCreate(Rectangle);
})(Nullstone.Namespace("Fayde.Shapes"));

(function (namespace) {
    var Canvas = Nullstone.Create("Canvas", namespace.Panel);
    Canvas.Instance.Init = function () {
        this.Init$Panel();
        this._Bounds = new Rect();
    };
    Canvas.LeftProperty = DependencyProperty.RegisterAttached("Left", function () { return Number; }, Canvas, 0.0);
    Canvas.GetLeft = function (d) {
        return d.$GetValue(Canvas.LeftProperty);
    };
    Canvas.SetLeft = function (d, value) {
        d.$SetValue(Canvas.LeftProperty, value);
    };
    Canvas.TopProperty = DependencyProperty.RegisterAttached("Top", function () { return Number; }, Canvas, 0.0);
    Canvas.GetTop = function (d) {
        return d.$GetValue(Canvas.TopProperty);
    };
    Canvas.SetTop = function (d, value) {
        d.$SetValue(Canvas.TopProperty, value);
    };
    Canvas.Instance._MeasureOverrideWithError = function (availableSize, error) {
        var childSize = new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
        var walker = new Fayde._VisualTreeWalker(this);
        var child;
        while (child = walker.Step()) {
            child._MeasureWithError(childSize, error);
        }
        var desired = new Size(0, 0);
        return desired;
    };
    Canvas.Instance._ArrangeOverrideWithError = function (finalSize, error) {
        var walker = new Fayde._VisualTreeWalker(this);
        var child;
        while (child = walker.Step()) {
            var desired = child._DesiredSize;
            var childFinal = new Rect(Canvas.GetLeft(child), Canvas.GetTop(child), desired.Width, desired.Height);
            child._ArrangeWithError(childFinal, error);
        }
        return finalSize;
    };
    Canvas.Instance._ComputeBounds = function () {
        var surface = App.Instance.MainSurface;
        if (surface && this._IsAttached && surface._IsTopLevel(this)) {
            var aw = surface.ActualWidth;
            var ah = surface.ActualHeight;
            this._Extents = new Rect(0, 0, aw, ah);
            this._Bounds = new Rect(0, 0, aw, ah);
            this._ExtentsWithChildren = new Rect(0, 0, aw, ah);
            this._BoundsWithChildren = new Rect(0, 0, aw, ah);
            this._ComputeGlobalBounds();
            this._ComputeSurfaceBounds();
        } else {
            this._ComputeBounds$Panel();
        }
    };
    Canvas.Instance.IsLayoutContainer = function () {
        var walker = new Fayde._DeepTreeWalker(this);
        var child;
        while (child = walker.Step()) {
            if (!(child instanceof Canvas) && child.IsLayoutContainer())
                return true;
        }
        return false;
    };
    Canvas.Instance._ShiftPosition = function (point) {
        var surface = App.Instance.MainSurface;
        if (surface && this._IsAttached && surface._IsTopLevel(this)) {
            this._ComputeBounds();
        } else {
            this._ShiftPosition$Panel(point);
        }
    };
    Canvas.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== Canvas) {
            this._OnPropertyChanged$Panel(args, error);
            return;
        }
        if (args.Property._ID === Canvas.TopProperty._ID
            || args.Property._ID === Canvas.LeftProperty._ID) {
            if (this.GetVisualParent() == null) {
                this._UpdateTransform();
                this._InvalidateArrange();
            }
        }
        this.PropertyChanged.Raise(this, args);
    };
    Canvas.Instance._OnCollectionItemChanged = function (col, obj, args) {
        if (this._PropertyHasValueNoAutoCreate(namespace.Panel.ChildrenProperty, col)) {
            if (args.Property._ID === Canvas.TopProperty._ID
                || args.Property._ID === Canvas.LeftProperty._ID) {
                var child = obj;
                var desired = child._DesiredSize;
                var childFinal = new Rect(Canvas.GetLeft(child), Canvas.GetTop(child), desired.Width, desired.Height);
                if (child.UseLayoutRounding) {
                    childFinal.X = Math.round(childFinal.X);
                    childFinal.Y = Math.round(childFinal.Y);
                    childFinal.Width = Math.round(childFinal.Width);
                    childFinal.Height = Math.round(childFinal.Height);
                }
                Fayde.LayoutInformation.SetLayoutSlot(child, childFinal);
                child._InvalidateArrange();
                return;
            }
        }
        this._OnCollectionItemChanged$Panel(col, obj, args);
    };
    namespace.Canvas = Nullstone.FinishCreate(Canvas);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ComboBox = Nullstone.Create("ComboBox", namespace.Primitives.Selector);
    ComboBox.Instance.Init = function () {
        this.Init$Selector();
        this.DefaultStyleKey = this.constructor;
        this.DropDownClosed = new MulticastEvent();
        this.DropDownOpened = new MulticastEvent();
        this.SelectionChanged.Subscribe(this._OnSelectionChanged, this);
    };
    ComboBox.IsDropDownOpenProperty = DependencyProperty.RegisterCore("IsDropDownOpen", function () { return Boolean; }, ComboBox, false, function (d, args) { d._IsDropDownOpenChanged(args); });
    ComboBox.ItemContainerStyleProperty = DependencyProperty.RegisterCore("ItemContainerStyle", function () { return Fayde.Style; }, ComboBox);
    ComboBox.MaxDropDownHeightProperty = DependencyProperty.RegisterCore("MaxDropDownHeight", function () { return Number; }, ComboBox, Number.POSITIVE_INFINITY, function (d, args) { d._MaxDropDownHeightChanged(args); });
    ComboBox.IsSelectionActiveProperty = namespace.Primitives.Selector.IsSelectionActiveProperty;
    Nullstone.AutoProperties(ComboBox, [
        ComboBox.IsDropDownOpenProperty,
        ComboBox.ItemContainerStyleProperty,
        ComboBox.MaxDropDownHeightProperty
    ]);
    ComboBox.Instance._IsDropDownOpenChanged = function (args) {
        var open = args.NewValue;
        if (this.$Popup != null)
            this.$Popup.IsOpen = open;
        if (this.$DropDownToggle != null)
            this.$DropDownToggle.IsChecked = open;
        if (open) {
            this._FocusedIndex = this.Items.GetCount() > 0 ? Math.max(this.SelectedIndex, 0) : -1;
            if (this._FocusedIndex > -1) {
                var cbi = Nullstone.As(this.ItemContainerGenerator.ContainerFromIndex(this._FocusedIndex), namespace.ComboBoxItem);
                if (cbi != null)
                    cbi.Focus();
            }
            this.LayoutUpdated.Subscribe(this._UpdatePopupSizeAndPosition, this);
            this.DropDownOpened.Raise(this, new EventArgs());
        } else {
            this.Focus();
            this.LayoutUpdated.Unsubscribe(this._UpdatePopupSizeAndPosition, this);
            this.DropDownClosed.Raise(this, new EventArgs());
        }
        var selectedItem = this.SelectedItem;
        this._UpdateDisplayedItem(open && selectedItem instanceof Fayde.UIElement ? null : selectedItem);
        this.$UpdateVisualState(true);
    };
    ComboBox.Instance._MaxDropDownHeightChanged = function (args) {
        this._UpdatePopupMaxHeight(args.NewValue);
    };
    ComboBox.Instance.OnApplyTemplate = function () {
        this.OnApplyTemplate$Selector();
        this.$UpdateVisualState(false);
        this.$ContentPresenter = Nullstone.As(this.GetTemplateChild("ContentPresenter"), namespace.ContentPresenter);
        this.$Popup = Nullstone.As(this.GetTemplateChild("Popup"), namespace.Primitives.Popup);
        this.$DropDownToggle = Nullstone.As(this.GetTemplateChild("DropDownToggle"), namespace.Primitives.ToggleButton);
        if (this.$ContentPresenter != null)
            this._NullSelFallback = this.$ContentPresenter.Content;
        if (this.$Popup != null) {
            this._UpdatePopupMaxHeight(this.MaxDropDownHeight);
            this.$Popup._CatchClickedOutside();
            this.$Popup.ClickedOutside.Subscribe(this._PopupClickedOutside, this);
            var child = this.$Popup.Child;
            if (child != null) {
                child.KeyDown.Subscribe(this._OnChildKeyDown, this);
                this.$Popup.RealChild.SizeChanged.Subscribe(this._UpdatePopupSizeAndPosition, this);
            }
        }
        if (this.$DropDownToggle != null) {
            this.$DropDownToggle.Checked.Subscribe(this._OnToggleChecked, this);
            this.$DropDownToggle.Unchecked.Subscribe(this._OnToggleUnchecked, this);
        }
        this.$UpdateVisualState(false);
        this._UpdateDisplayedItem(this.SelectedItem);
    };
    ComboBox.Instance.OnItemContainerStyleChanged = function (oldStyle, newStyle) {
        var items = this.Items;
        var count = items.GetCount();
        var icg = this.ItemContainerGenerator;
        for (var i = 0; i < count; i++) {
            var item = items.GetValueAt(i);
            var container = icg.ContainerFromIndex(i);
            if (container != null && !Nullstone.RefEquals(item, container))
                container.Style = newStyle;
        }
    };
    ComboBox.Instance.IsItemItsOwnContainer = function (item) {
        return item instanceof namespace.ComboBoxItem;
    };
    ComboBox.Instance.GetContainerForItem = function () {
        return new namespace.ComboBoxItem();
    };
    ComboBox.Instance.PrepareContainerForItem = function (element, item) {
        this.PrepareContainerForItem$Selector(element, item);
        if (!Nullstone.RefEquals(element, item)) {
            var ics = this.ItemContainerStyle;
            if (element.Style == null && ics != null)
                element.Style = ics;
        }
    };
    ComboBox.Instance.$GetVisualStateFocus = function () {
        var isEnabled = this.IsEnabled;
        if (this.IsDropDownOpen && isEnabled)
            return "FocusedDropDown";
        else if (this.IsFocused && isEnabled)
            return "Focused";
        else
            return "Unfocused";
    };
    ComboBox.Instance.OnIsEnabledChanged = function (e) {
        this.OnIsEnabledChanged$Selector(e);
        if (!this.IsEnabled)
            this.IsDropDownOpen = false;
    };
    ComboBox.Instance.OnMouseLeftButtonDown = function (sender, e) {
        this.OnMouseLeftButtonDown$Selector(sender, e);
        if (!e.Handled) {
            e.Handled = true;
            this.$SetValueInternal(ComboBox.IsSelectionActiveProperty, true);
            this.IsDropDownOpen = !this.IsDropDownOpen;
        }
    };
    ComboBox.Instance.OnMouseEnter = function (e) {
        this.OnMouseEnter$Selector(e);
        this.$UpdateVisualState(true);
    };
    ComboBox.Instance.OnMouseLeave = function (e) {
        this.OnMouseLeave$Selector(e);
        this.$UpdateVisualState(true);
    };
    ComboBox.Instance.OnKeyDown = function (e) {
        this.OnKeyDown$Selector(e);
        if (e.Handled)
            return;
        e.Handled = true;
        var key = e.Key;
        if (this.FlowDirection === Fayde.FlowDirection.RightToLeft) {
            if (key === Key.Left)
                key = Key.Right;
            else if (key === Key.Right)
                key = Key.Left;
        }
        switch (key) {
            case Key.Escape:
                this.IsDropDownOpen = false;
                break;
            case Key.Enter:
            case Key.Space:
                if (this.IsDropDownOpen && this._FocusedIndex !== this.SelectedIndex) {
                    this.SelectedIndex = this._FocusedIndex;
                    this.IsDropDownOpen = false;
                } else {
                    this.IsDropDownOpen = true;
                }
                break;
            case Key.Right:
            case Key.Down:
                if (this.IsDropDownOpen) {
                    if (this._FocusedIndex < (this.Items.GetCount() - 1)) {
                        this._FocusedIndex++;
                        this.ItemContainerGenerator.ContainerFromIndex(this._FocusedIndex).Focus();
                    }
                } else {
                    this.SelectedIndex = Math.min(this.SelectedIndex + 1, this.Items.GetCount() - 1);
                }
                break;
            case Key.Left:
            case Key.Up:
                if (this.IsDropDownOpen) {
                    if (this._FocusedIndex > 0) {
                        this._FocusedIndex--;
                        this.ItemContainerGenerator.ContainerFromIndex(this._FocusedIndex).Focus();
                    }
                } else {
                    this.SelectedIndex = Math.max(this.SelectedIndex - 1, 0);
                }
                break;
            default:
                e.Handled = false;
                break;
        }
    };
    ComboBox.Instance.OnGotFocus = function (e) {
        this.OnGotFocus$Selector(e);
        this.$UpdateVisualState(true);
    };
    ComboBox.Instance.OnLostFocus = function (e) {
        this.OnLostFocus$Selector(e);
        this.$SetValueInternal(ComboBox.IsSelectionActiveProperty, this.$Popup == null ? false : this.$Popup.IsOpen);
        this.$UpdateVisualState(true);
    };
    ComboBox.Instance._OnChildKeyDown = function (sender, e) {
        this.OnKeyDown(e);
    };
    ComboBox.Instance._OnSelectionChanged = function (sender, args) {
        if (!this.IsDropDownOpen)
            this._UpdateDisplayedItem(this.SelectedItem);
    };
    ComboBox.Instance._OnToggleChecked = function (sender, e) { this.IsDropDownOpen = true; };
    ComboBox.Instance._OnToggleUnchecked = function (sender, e) { this.IsDropDownOpen = false; };
    ComboBox.Instance._PopupClickedOutside = function () {
        this.IsDropDownOpen = false;
    };
    ComboBox.Instance._UpdateDisplayedItem = function (selectedItem) {
        if (this.$ContentPresenter == null)
            return;
        if (this.$DisplayedItem != null) {
            this.$DisplayedItem.Content = this.$ContentPresenter.Content;
            this.$DisplayedItem = null;
        }
        this.$ContentPresenter.Content = null;
        if (selectedItem == null) {
            this.$ContentPresenter.Content = this._NullSelFallback;
            this.$ContentPresenter.ContentTemplate = null;
            this.$SelectionBoxItem = null;
            this.$SelectionBoxItemTemplate = null;
            return;
        }
        var content = selectedItem;
        if (content instanceof namespace.ComboBoxItem)
            content = content.Content;
        var icg = this.ItemContainerGenerator;
        var selectedIndex = this.SelectedIndex;
        this.$DisplayedItem = Nullstone.As(icg.ContainerFromIndex(selectedIndex), namespace.ComboBoxItem);
        this.$SelectionBoxItem = content;
        this.$SelectionBoxItemTemplate = this.ItemTemplate;
        if (this.$DisplayedItem != null) {
            this.$SelectionBoxItemTemplate = this.$DisplayedItem.ContentTemplate;
            if (content instanceof Fayde.UIElement)
                this.$DisplayedItem.Content = null
            else
                this.$DisplayedItem = null;
        } else {
            var container = Nullstone.As(icg.ContainerFromIndex(selectedIndex), namespace.ComboBoxItem);
            if (container == null) {
                var position = icg.GeneratorPositionFromIndex(selectedIndex);
                var state = icg.StartAt(position.index, position.offset, 0, true);
                try {
                    container = Nullstone.As(icg.GenerateNext({}), namespace.ComboBoxItem);
                } finally {
                    icg.StopGeneration();
                }
                icg.PrepareItemContainer(container);
            }
            this.$SelectionBoxItemTemplate = container.ContentTemplate;
        }
        this.$ContentPresenter.Content = this.$SelectionBoxItem;
        this.$ContentPresenter.ContentTemplate = this.$SelectionBoxItemTemplate;
    };
    ComboBox.Instance._UpdatePopupSizeAndPosition = function (sender, e) {
        if (this.$Popup == null)
            return;
        var child = this.$Popup.RealChild;
        if (!(child instanceof Fayde.FrameworkElement))
            return;
        child.MinWidth = this.ActualWidth;
        var root = Fayde.VisualTreeHelper.GetRoot(this);
        if (root == null)
            return;
        try {
            var xform = this.TransformToVisual(null);
        } catch (err) {
            return;
        }
        var offset = new Point(0, this.ActualHeight);
        var bottomRight = new Point(offset.X + child.ActualWidth, offset.Y + child.ActualHeight);
        var topLeft = xform.Transform(offset);
        bottomRight = xform.Transform(bottomRight);
        var isRightToLeft = (this.FlowDirection === Fayde.FlowDirection.RightToLeft);
        if (isRightToLeft) {
            var left = bottomRight.X;
            bottomRight.X = topLeft.X;
            topLeft.X = left;
        }
        var finalOffset = new Point();
        var raw = root.ActualWidth;
        if (bottomRight.X > raw) {
            finalOffset.X = raw - bottomRight.X;
        } else if (topLeft.X < 0) {
            finalOffset.X = offset.X - topLeft.X;
        } else {
            finalOffset.X = offset.X;
        }
        if (isRightToLeft)
            finalOffset.X = -finalOffset.X;
        var rah = root.ActualHeight;
        if (bottomRight.Y > rah) {
            finalOffset.Y = -child.ActualHeight;
        } else {
            finalOffset.Y = this.RenderSize.Height;
        }
        this.$Popup.HorizontalOffset = finalOffset.X;
        this.$Popup.VerticalOffset = finalOffset.Y;
        this._UpdatePopupMaxHeight(this.MaxDropDownHeight);
    };
    ComboBox.Instance._UpdatePopupMaxHeight = function (height) {
        if (this.$Popup != null && this.$Popup.Child instanceof Fayde.FrameworkElement) {
            if (height === Number.POSITIVE_INFINITY)
                height = App.Instance.MainSurface.ActualHeight / 2.0;
            this.$Popup.RealChild.MaxHeight = height;
        }
    };
    namespace.ComboBox = Nullstone.FinishCreate(ComboBox);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var _Segment = (function () {
        function _Segment(offered, min, max, unitType) {
            if (offered == null) offered = 0.0;
            if (min == null) min = 0.0;
            if (max == null) max = Number.POSITIVE_INFINITY;
            if (unitType == null) unitType = namespace.GridUnitType.Pixel;
            this._DesiredSize = 0;
            this._Min = min;
            this._Max = max;
            this._Stars = 0;
            this._Type = unitType;
            this._OfferedSize = this._Clamp(offered);
            this._OriginalSize = this._OfferedSize;
        }
        _Segment.prototype._SetOfferedToDesired = function () {
            this._OfferedSize = this._DesiredSize;
            return this._OfferedSize;
        };
        _Segment.prototype._SetDesiredToOffered = function () {
            this._DesiredSize = this._OfferedSize;
            return this._DesiredSize;
        };
        _Segment.prototype._Clamp = function (value) {
            if (value < this._Min)
                return this._Min;
            if (value > this._Max)
                return this._Max;
            return value;
        }
        _Segment.prototype.toString = function () {
            return this._OfferedSize.toString() + ";" + this._DesiredSize.toString();
        };
        return _Segment;
    })();
    var _GridNode = (function () {
        var _GridNode = Nullstone.Create("_GridNode", LinkedListNode, 4);
        _GridNode.Instance.Init = function (matrix, row, col, size) {
            this._Matrix = matrix;
            this._Row = row;
            this._Col = col;
            this._Size = size;
            this._Cell = this._Matrix == null ? null : this._Matrix[row][col];
        };
        return Nullstone.FinishCreate(_GridNode);
    })();
    var _GridWalker = (function () {
        var _GridWalker = Nullstone.Create("_GridWalker", undefined, 5);
        _GridWalker.Instance.Init = function (grid, rowMatrix, rowCount, colMatrix, colCount) {
            this._HasAutoAuto = false;
            this._HasStarAuto = false;
            this._HasAutoStar = false;
            var walker = Fayde._VisualTreeWalker.Logical(grid);
            var child;
            while (child = walker.Step()) {
                var starCol = false;
                var starRow = false;
                var autoCol = false;
                var autoRow = false;
                var col = Math.min(Grid.GetColumn(child), colCount - 1);
                var row = Math.min(Grid.GetRow(child), rowCount - 1);
                var colspan = Math.min(Grid.GetColumnSpan(child), colCount - col);
                var rowspan = Math.min(Grid.GetRowSpan(child), rowCount - row);
                for (var r = row; r < row + rowspan; r++) {
                    starRow |= rowMatrix[r][r].Type === namespace.GridUnitType.Star;
                    autoRow |= rowMatrix[r][r].Type === namespace.GridUnitType.Auto;
                }
                for (var c = col; c < col + colspan; c++) {
                    starCol |= colMatrix[c][c].Type === namespace.GridUnitType.Star;
                    autoCol |= colMatrix[c][c].Type === namespace.GridUnitType.Auto;
                }
                this._HasAutoAuto |= autoRow && autoCol && !starRow && !starCol;
                this._HasStarAuto |= starRow && autoCol;
                this._HasAutoStar |= autoRow && starCol;
            }
        };
        return Nullstone.FinishCreate(_GridWalker);
    })();
    var Grid = Nullstone.Create("Grid", namespace.Panel);
    Grid.Instance.Init = function () {
        this.Init$Panel();
        this._RowMatrix = null;
        this._ColMatrix = null;
    };
    Grid.ColumnProperty = DependencyProperty.RegisterAttached("Column", function () { return Number; }, Grid, 0);
    Grid.GetColumn = function (d) {
        return d.$GetValue(Grid.ColumnProperty);
    };
    Grid.SetColumn = function (d, value) {
        d.$SetValue(Grid.ColumnProperty, value);
    };
    Grid.ColumnSpanProperty = DependencyProperty.RegisterAttached("ColumnSpan", function () { return Number; }, Grid, 1);
    Grid.GetColumnSpan = function (d) {
        return d.$GetValue(Grid.ColumnSpanProperty);
    };
    Grid.SetColumnSpan = function (d, value) {
        d.$SetValue(Grid.ColumnSpanProperty, value);
    };
    Grid.RowProperty = DependencyProperty.RegisterAttached("Row", function () { return Number; }, Grid, 0);
    Grid.GetRow = function (d) {
        return d.$GetValue(Grid.RowProperty);
    };
    Grid.SetRow = function (d, value) {
        d.$SetValue(Grid.RowProperty, value);
    };
    Grid.RowSpanProperty = DependencyProperty.RegisterAttached("RowSpan", function () { return Number; }, Grid, 1);
    Grid.GetRowSpan = function (d) {
        return d.$GetValue(Grid.RowSpanProperty);
    };
    Grid.SetRowSpan = function (d, value) {
        d.$SetValue(Grid.RowSpanProperty, value);
    };
    Grid.ShowGridLinesProperty = DependencyProperty.Register("ShowGridLines", function () { return Boolean; }, Grid, false);
    Grid.ColumnDefinitionsProperty = DependencyProperty.RegisterFull("ColumnDefinitions", function () { return namespace.ColumnDefinitionCollection; }, Grid, undefined, undefined, { GetValue: function () { return new namespace.ColumnDefinitionCollection(); } });
    Grid.RowDefinitionsProperty = DependencyProperty.RegisterFull("RowDefinitions", function () { return namespace.RowDefinitionCollection; }, Grid, undefined, undefined, { GetValue: function () { return new namespace.RowDefinitionCollection(); } });
    Nullstone.AutoProperties(Grid, [
        Grid.ShowGridLinesProperty,
        Grid.ColumnDefinitionsProperty,
        Grid.RowDefinitionsProperty
    ]);
    Grid.Instance._MeasureOverrideWithError = function (availableSize, error) {
        var totalSize = availableSize.Copy();
        var cols = this._GetColumnDefinitionsNoAutoCreate();
        var rows = this._GetRowDefinitionsNoAutoCreate();
        var colCount = cols ? cols.GetCount() : 0;
        var rowCount = rows ? rows.GetCount() : 0;
        var totalStars = new Size();
        var emptyRows = rowCount === 0;
        var emptyCols = colCount === 0;
        var hasChildren = this.Children.GetCount() > 0;
        if (emptyRows) rowCount = 1;
        if (emptyCols) colCount = 1;
        this._CreateMatrices(rowCount, colCount);
        var i;
        var cell;
        if (emptyRows) {
            cell = new _Segment(0.0, 0, Number.POSITIVE_INFINITY, namespace.GridUnitType.Star);
            cell._Stars = 1.0;
            this._RowMatrix[0][0] = cell;
            totalStars.Height += 1.0;
        } else {
            for (i = 0; i < rowCount; i++) {
                var rowdef = rows.GetValueAt(i);
                var height = rowdef.Height;
                rowdef.$SetValueInternal(namespace.RowDefinition.ActualHeightProperty, Number.POSITIVE_INFINITY);
                cell = new _Segment(0.0, rowdef.MinHeight, rowdef.MaxHeight, height.Type);
                if (height.Type === namespace.GridUnitType.Pixel) {
                    cell._OfferedSize = cell._Clamp(height.Value);
                    rowdef.$SetValueInternal(namespace.RowDefinition.ActualHeightProperty, cell._SetDesiredToOffered());
                } else if (height.Type === namespace.GridUnitType.Star) {
                    cell._Stars = height.Value;
                    totalStars.Height += height.Value;
                } else if (height.Type === namespace.GridUnitType.Auto) {
                    cell._OfferedSize = cell._Clamp(0);
                    cell._SetDesiredToOffered();
                }
                this._RowMatrix[i][i] = cell;
            }
        }
        if (emptyCols) {
            cell = new _Segment(0.0, 0, Number.POSITIVE_INFINITY, namespace.GridUnitType.Star);
            cell._Stars = 1.0;
            this._ColMatrix[0][0] = cell;
            totalStars.Width += 1.0;
        } else {
            for (i = 0; i < colCount; i++) {
                var coldef = cols.GetValueAt(i);
                var width = coldef.Width;
                coldef.$SetValueInternal(namespace.ColumnDefinition.ActualWidthProperty, Number.POSITIVE_INFINITY);
                cell = new _Segment(0.0, coldef.MinWidth, coldef.MaxWidth, width.Type);
                if (width.Type === namespace.GridUnitType.Pixel) {
                    cell._OfferedSize = cell._Clamp(width.Value);
                    coldef.$SetValueInternal(namespace.ColumnDefinition.ActualWidthProperty, cell._SetDesiredToOffered());
                } else if (width.Type === namespace.GridUnitType.Star) {
                    cell._Stars = width.Value;
                    totalStars.Width += width.Value;
                } else if (width.Type === namespace.GridUnitType.Auto) {
                    cell._OfferedSize = cell._Clamp(0);
                    cell._SetDesiredToOffered();
                }
                this._ColMatrix[i][i] = cell;
            }
        }
        var sizes = new LinkedList();
        var separator = new _GridNode(null, 0, 0, 0);
        sizes.Append(separator);
        var c;
        var r;
        var node;
        var gridWalker = new _GridWalker(this, this._RowMatrix, this._RowMatrixDim, this._ColMatrix, this._ColMatrixDim);
        for (i = 0; i < 6; i++) {
            var autoAuto = i === 0;
            var starAuto = i === 1;
            var autoStar = i === 2;
            var starAutoAgain = i === 3;
            var nonStar = i === 4;
            var remainingStar = i === 5;
            if (hasChildren) {
                this._ExpandStarCols(totalSize);
                this._ExpandStarRows(totalSize);
            }
            var walker = new Fayde._VisualTreeWalker(this);
            var child;
            while (child = walker.Step()) {
                var childSize = new Size();
                var starCol = false;
                var starRow = false;
                var autoCol = false;
                var autoRow = false;
                var col = Math.min(Grid.GetColumn(child), colCount - 1);
                var row = Math.min(Grid.GetRow(child), rowCount - 1);
                var colspan = Math.min(Grid.GetColumnSpan(child), colCount - col);
                var rowspan = Math.min(Grid.GetRowSpan(child), rowCount - row);
                for (r = row; r < row + rowspan; r++) {
                    starRow |= this._RowMatrix[r][r]._Type === namespace.GridUnitType.Star;
                    autoRow |= this._RowMatrix[r][r]._Type === namespace.GridUnitType.Auto;
                }
                for (c = col; c < col + colspan; c++) {
                    starCol |= this._ColMatrix[c][c]._Type === namespace.GridUnitType.Star;
                    autoCol |= this._ColMatrix[c][c]._Type === namespace.GridUnitType.Auto;
                }
                if (autoRow && autoCol && !starRow && !starCol) {
                    if (!autoAuto)
                        continue;
                    childSize.Width = Number.POSITIVE_INFINITY;
                    childSize.Height = Number.POSITIVE_INFINITY;
                } else if (starRow && autoCol && !starCol) {
                    if (!(starAuto || starAutoAgain))
                        continue;
                    if (starAuto && gridWalker._HasAutoStar)
                        childSize.Height = Number.POSITIVE_INFINITY;
                    childSize.Width = Number.POSITIVE_INFINITY;
                } else if (autoRow && starCol && !starRow) {
                    if (!autoStar)
                        continue;
                    childSize.Height = Number.POSITIVE_INFINITY;
                } else if ((autoRow || autoCol) && !(starRow || starCol)) {
                    if (!nonStar)
                        continue;
                    if (autoRow)
                        childSize.Height = Number.POSITIVE_INFINITY;
                    if (autoCol)
                        childSize.Width = Number.POSITIVE_INFINITY;
                } else if (!(starRow || starCol)) {
                    if (!nonStar)
                        continue;
                } else {
                    if (!remainingStar)
                        continue;
                }
                for (r = row; r < row + rowspan; r++) {
                    childSize.Height += this._RowMatrix[r][r]._OfferedSize;
                }
                for (c = col; c < col + colspan; c++) {
                    childSize.Width += this._ColMatrix[c][c]._OfferedSize;
                }
                child._MeasureWithError(childSize, error);
                var desired = child._DesiredSize;
                if (!starAuto) {
                    node = new _GridNode(this._RowMatrix, row + rowspan - 1, row, desired.Height);
                    sizes.InsertBefore(node, node._Row === node._Col ? separator.Next : separator);
                }
                node = new _GridNode(this._ColMatrix, col + colspan - 1, col, desired.Width);
                sizes.InsertBefore(node, node._Row === node._Col ? separator.Next : separator);
            }
            sizes.Remove(separator);
            while (node = sizes.Tail) {
                node._Cell._DesiredSize = Math.max(node._Cell._DesiredSize, node._Size);
                this._AllocateDesiredSize(rowCount, colCount);
                sizes.Remove(node);
            }
            sizes.Append(separator);
        }
        this._SaveMeasureResults();
        sizes.Remove(separator);
        var gridSize = new Size();
        for (c = 0; c < colCount; c++) {
            gridSize.Width += this._ColMatrix[c][c]._DesiredSize;
        }
        for (r = 0; r < rowCount; r++) {
            gridSize.Height += this._RowMatrix[r][r]._DesiredSize;
        }
        return gridSize;
    };
    Grid.Instance._ArrangeOverrideWithError = function (finalSize, error) {
        var columns = this._GetColumnDefinitionsNoAutoCreate();
        var rows = this._GetRowDefinitionsNoAutoCreate();
        var colCount = columns ? columns.GetCount() : 0;
        var rowCount = rows ? rows.GetCount() : 0;
        this._RestoreMeasureResults();
        var c;
        var r;
        var totalConsumed = new Size();
        for (c = 0; c < this._ColMatrixDim; c++) {
            totalConsumed.Width += this._ColMatrix[c][c]._SetOfferedToDesired();
        }
        for (r = 0; r < this._RowMatrixDim; r++) {
            totalConsumed.Height += this._RowMatrix[r][r]._SetOfferedToDesired();
        }
        if (totalConsumed.Width !== finalSize.Width)
            this._ExpandStarCols(finalSize);
        if (totalConsumed.Height !== finalSize.Height)
            this._ExpandStarRows(finalSize);
        for (c = 0; c < colCount; c++) {
            columns.GetValueAt(c).$SetValueInternal(namespace.ColumnDefinition.ActualWidthProperty, this._ColMatrix[c][c]._OfferedSize);
        }
        for (r = 0; r < rowCount; r++) {
            rows.GetValueAt(r).$SetValueInternal(namespace.RowDefinition.ActualHeightProperty, this._RowMatrix[r][r]._OfferedSize);
        }
        var walker = new Fayde._VisualTreeWalker(this);
        var child;
        while (child = walker.Step()) {
            var col = Math.min(Grid.GetColumn(child), this._ColMatrixDim - 1);
            var row = Math.min(Grid.GetRow(child), this._RowMatrixDim - 1);
            var colspan = Math.min(Grid.GetColumnSpan(child), this._ColMatrixDim - col);
            var rowspan = Math.min(Grid.GetRowSpan(child), this._RowMatrixDim - row);
            var childFinal = new Rect(0, 0, 0, 0);
            for (c = 0; c < col; c++) {
                childFinal.X += this._ColMatrix[c][c]._OfferedSize;
            }
            for (c = col; c < col + colspan; c++) {
                childFinal.Width += this._ColMatrix[c][c]._OfferedSize;
            }
            for (r = 0; r < row; r++) {
                childFinal.Y += this._RowMatrix[r][r]._OfferedSize;
            }
            for (r = row; r < row + rowspan; r++) {
                childFinal.Height += this._RowMatrix[r][r]._OfferedSize;
            }
            child._ArrangeWithError(childFinal, error);
        }
        return finalSize;
    };
    Grid.Instance._ExpandStarRows = function (availableSize) {
        var availSize = availableSize.Copy();
        var rows = this._GetRowDefinitionsNoAutoCreate();
        var rowsCount = rows ? rows.GetCount() : 0;
        var i;
        var cur;
        for (i = 0; i < this._RowMatrixDim; i++) {
            cur = this._RowMatrix[i][i];
            if (cur._Type === namespace.GridUnitType.Star)
                cur._OfferedSize = 0;
            else
                availSize.Height = Math.max(availSize.Height - cur._OfferedSize, 0);
        }
        availSize.Height = this._AssignSize(this._RowMatrix, 0, this._RowMatrixDim - 1, availSize.Height, namespace.GridUnitType.Star, false);
        if (rowsCount > 0) {
            for (i = 0; i < this._RowMatrixDim; i++) {
                cur = this._RowMatrix[i][i];
                if (cur._Type === namespace.GridUnitType.Star)
                    rows.GetValueAt(i).$SetValueInternal(namespace.RowDefinition.ActualHeightProperty, cur._OfferedSize);
            }
        }
    };
    Grid.Instance._ExpandStarCols = function (availableSize) {
        var availSize = availableSize.Copy();
        var columns = this._GetColumnDefinitionsNoAutoCreate();
        var columnsCount = columns ? columns.GetCount() : 0;
        var i;
        var cur;
        for (i = 0; i < this._ColMatrixDim; i++) {
            cur = this._ColMatrix[i][i];
            if (cur._Type === namespace.GridUnitType.Star)
                cur._OfferedSize = 0;
            else
                availSize.Width = Math.max(availSize.Width - cur._OfferedSize, 0);
        }
        availSize.Width = this._AssignSize(this._ColMatrix, 0, this._ColMatrixDim - 1, availSize.Width, namespace.GridUnitType.Star, false);
        if (columnsCount > 0) {
            for (i = 0; i < this._ColMatrixDim; i++) {
                cur = this._ColMatrix[i][i];
                if (cur._Type === namespace.GridUnitType.Star) {
                    columns.GetValueAt(i).$SetValueInternal(namespace.ColumnDefinition.ActualWidthProperty, cur._OfferedSize);
                }
            }
        }
    };
    Grid.Instance._AllocateDesiredSize = function (rowCount, colCount) {
        for (var i = 0; i < 2; i++) {
            var matrix = i === 0 ? this._RowMatrix : this._ColMatrix;
            var count = i === 0 ? rowCount : colCount;
            for (var row = count - 1; row >= 0; row--) {
                for (var col = row; col >= 0; col--) {
                    var spansStar = false;
                    for (var j = row; j >= col; j--) {
                        spansStar |= matrix[j][j]._Type === namespace.GridUnitType.Star;
                    }
                    var current = matrix[row][col]._DesiredSize;
                    var totalAllocated = 0;
                    for (var a = row; a >= col; a--) {
                        totalAllocated += matrix[a][a]._DesiredSize;
                    }
                    if (totalAllocated < current) {
                        var additional = current - totalAllocated;
                        if (spansStar) {
                            additional = this._AssignSize(matrix, col, row, additional, namespace.GridUnitType.Star, true);
                        } else {
                            additional = this._AssignSize(matrix, col, row, additional, namespace.GridUnitType.Pixel, true);
                            additional = this._AssignSize(matrix, col, row, additional, namespace.GridUnitType.Auto, true);
                        }
                    }
                }
            }
        }
        for (var r = 0; r < this._RowMatrixDim; r++) {
            this._RowMatrix[r][r]._OfferedSize = this._RowMatrix[r][r]._DesiredSize;
        }
        for (var c = 0; c < this._ColMatrixDim; c++) {
            this._ColMatrix[c][c]._OfferedSize = this._ColMatrix[c][c]._DesiredSize;
        }
    };
    Grid.Instance._AssignSize = function (matrix, start, end, size, unitType, desiredSize) {
        var count = 0;
        var assigned;
        var segmentSize;
        var i;
        var cur;
        for (i = start; i <= end; i++) {
            cur = matrix[i][i];
            segmentSize = desiredSize ? cur._DesiredSize : cur._OfferedSize;
            if (segmentSize < cur._Max)
                count += (unitType === namespace.GridUnitType.Star) ? cur._Stars : 1;
        }
        do {
            assigned = false;
            var contribution = size / count;
            for (i = start; i <= end; i++) {
                cur = matrix[i][i];
                segmentSize = desiredSize ? cur._DesiredSize : cur._OfferedSize;
                if (!(cur._Type === unitType && segmentSize < cur._Max))
                    continue;
                var newSize = segmentSize;
                newSize += contribution * (unitType === namespace.GridUnitType.Star ? cur._Stars : 1);
                newSize = Math.min(newSize, cur._Max);
                assigned |= newSize > segmentSize;
                size -= newSize - segmentSize;
                if (desiredSize)
                    cur._DesiredSize = newSize;
                else
                    cur._OfferedSize = newSize;
            }
        } while (assigned);
        return size;
    };
    Grid.Instance._ComputeBounds = function () {
        this._ComputeBounds$Panel();
        if (this.ShowGridLines) {
            this._Extents = new Rect(0, 0, this.ActualWidth, this.ActualHeight);
            this._ExtentsWithChildren = this._ExtentsWithChildren.Union(this._Extents);
            this._Bounds = this._IntersectBoundsWithClipPath(this._Extents.GrowByThickness(this._EffectPadding), false).Transform(this._AbsoluteXform);
            this._BoundsWithChildren = this._BoundsWithChildren.Union(this._Bounds);
            this._ComputeGlobalBounds();
            this._ComputeSurfaceBounds();
        }
    };
    Grid.Instance._CreateMatrices = function (rowCount, colCount) {
        if (this._RowMatrix == null || this._ColMatrix == null || this._RowMatrixDim !== rowCount || this._ColMatrixDim !== colCount) {
            this._DestroyMatrices();
            this._RowMatrixDim = rowCount;
            this._RowMatrix = [];
            for (var i = 0; i < rowCount; i++) {
                this._RowMatrix.push([]);
            }
            this._ColMatrixDim = colCount;
            this._ColMatrix = [];
            for (var j = 0; j < colCount; j++) {
                this._ColMatrix.push([]);
            }
        }
        for (var r = 0; r < rowCount; r++) {
            this._RowMatrix[r] = [];
            for (var rr = 0; rr <= r; rr++) {
                this._RowMatrix[r].push(new _Segment());
            }
        }
        for (var c = 0; c < colCount; c++) {
            this._ColMatrix[c] = [];
            for (var cc = 0; cc <= c; cc++) {
                this._ColMatrix[c].push(new _Segment());
            }
        }
    };
    Grid.Instance._DestroyMatrices = function () {
        this._RowMatrix = null;
        this._ColMatrix = null;
    };
    Grid.Instance._SaveMeasureResults = function () {
        var i;
        var j;
        for (i = 0; i < this._RowMatrixDim; i++) {
            for (j = 0; j <= i; j++) {
                this._RowMatrix[i][j]._OriginalSize = this._RowMatrix[i][j]._OfferedSize;
            }
        }
        for (i = 0; i < this._ColMatrixDim; i++) {
            for (j = 0; j <= i; j++) {
                this._ColMatrix[i][j]._OriginalSize = this._ColMatrix[i][j]._OfferedSize;
            }
        }
    };
    Grid.Instance._RestoreMeasureResults = function () {
        var i;
        var j;
        for (i = 0; i < this._RowMatrixDim; i++) {
            for (j = 0; j <= i; j++) {
                this._RowMatrix[i][j]._OfferedSize = this._RowMatrix[i][j]._OriginalSize;
            }
        }
        for (i = 0; i < this._ColMatrixDim; i++) {
            for (j = 0; j <= i; j++) {
                this._ColMatrix[i][j]._OfferedSize = this._ColMatrix[i][j]._OriginalSize;
            }
        }
    };
    if (Fayde.IsCanvasEnabled) {
        Grid.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Grid) {
                this._OnPropertyChanged$Panel(args, error);
                return;
            }
            if (args.Property._ID === Grid.ShowGridLinesProperty._ID) {
                this._Invalidate();
            }
            this._InvalidateMeasure();
            this.PropertyChanged.Raise(this, args);
        };
        Grid.Instance._OnCollectionChanged = function (col, args) {
            if (this._PropertyHasValueNoAutoCreate(Grid.ColumnDefinitionsProperty, col)
                || this._PropertyHasValueNoAutoCreate(Grid.RowDefinitionsProperty, col)) {
                this._InvalidateMeasure();
            } else {
                this._OnCollectionChanged$Panel(col, args);
            }
        };
        Grid.Instance._OnCollectionItemChanged = function (col, obj, args) {
            if (this._PropertyHasValueNoAutoCreate(namespace.Panel.ChildrenProperty, col)) {
                if (args.Property._ID === Grid.ColumnProperty._ID
                    || args.Property._ID === Grid.RowProperty._ID
                    || args.Property._ID === Grid.ColumnSpanProperty._ID
                    || args.Property._ID === Grid.RowSpanProperty._ID) {
                    this._InvalidateMeasure();
                    obj._InvalidateMeasure();
                    return;
                }
            } else if (Nullstone.RefEquals(col, this._GetColumnDefinitionsNoAutoCreate())
                || Nullstone.RefEquals(col, this._GetRowDefinitionsNoAutoCreate())) {
                if (args.Property._ID !== namespace.ColumnDefinition.ActualWidthProperty._ID
                    && args.Property._ID !== namespace.RowDefinition.ActualHeightProperty._ID) {
                    this._InvalidateMeasure();
                }
                return;
            }
            this._OnCollectionItemChanged$Panel(col, obj, args);
        };
    }
    if (!Fayde.IsCanvasEnabled) {
        Grid.Instance._OnPropertyChanged = function (args, error) {
            if (args.Property.OwnerType !== Grid) {
                this._OnPropertyChanged$Panel(args, error);
                return;
            }
            var ivprop = false;
            if (args.Property._ID === Grid.ShowGridLinesProperty._ID) {
                this._Invalidate();
                ivprop = true;
            }
            this._InvalidateMeasure();
            if (ivprop)
                this.InvalidateProperty(args.Property, args.OldValue, args.NewValue);
            this.PropertyChanged.Raise(this, args);
        };
    }
    Grid.Instance._GetRowDefinitionsNoAutoCreate = function () {
        return this._GetValueNoAutoCreate(Grid.RowDefinitionsProperty);
    }
    Grid.Instance._GetColumnDefinitionsNoAutoCreate = function () {
        return this._GetValueNoAutoCreate(Grid.ColumnDefinitionsProperty);
    }
    if (!Fayde.IsCanvasEnabled) {
        Grid.Instance.GetRowDefinition = function (index) {
            var rd = this.RowDefinitions.GetValueAt(index);
            if (!rd) {
                rd = new namespace.RowDefinition();
                rd.Height.Type = namespace.GridUnitType.Star;
                rd.Height.Value = 1;
            }
            return rd;
        };
        Grid.Instance.GetColumnDefinition = function (index) {
            var cd = this.ColumnDefinitions.GetValueAt(index);
            if (!cd) {
                cd = new namespace.ColumnDefinition();
                cd.Width.Type = namespace.GridUnitType.Star;
                cd.Width.Value = 1;
            }
            return cd;
        };
        Grid.Instance.InsertHtmlChild = function (child, index) {
            var table = this.GetHtmlChildrenContainer();
            var row = Grid.GetRow(child);
            var column = Grid.GetColumn(child);
            var rd = this.GetRowDefinition(row);
            var cd = this.GetColumnDefinition(column);
            var contentEl = table.children[row].children[column].firstChild.firstChild;
            contentEl.appendChild(child.GetRootHtmlElement());
        };
        Grid.Instance.RemoveHtmlChild = function (child, index) {
            var table = this.GetHtmlChildrenContainer();
            var row = Grid.GetRow(child);
            var column = Grid.GetColumn(child);
            var rd = this.GetRowDefinition(row);
            var cd = this.GetColumnDefinition(column);
            var contentEl = table.children[row].children[column].firstChild.firstChild;
            contentEl.removeChild(child.GetRootHtmlElement());
        };
        Grid.Instance.CreateCells = function (table) {
            var rows = this.RowDefinitions.GetCount();
            var columns = this.ColumnDefinitions.GetCount();
            var totalRowStars = 0;
            for (var i = 0; i < rows; i++) {
                var rd = this.RowDefinitions.GetValueAt(i).Height;
                if (rd.Type === namespace.GridUnitType.Star) {
                    totalRowStars += rd.Value;
                }
            }
            var totalColumnStars = 0;
            for (var i = 0; i < columns; i++) {
                var cd = this.ColumnDefinitions.GetValueAt(i).Width;
                if (cd.Type === namespace.GridUnitType.Star) {
                    totalColumnStars += cd.Value;
                }
            }
            if (rows == 0) {
                rows = 1;
                totalRowStars = 1;
            }
            if (columns == 0) {
                columns = 1;
                totalColumnStars = 1;
            }
            for (var i = 0; i < rows; i++) {
                var rd = this.GetRowDefinition(i);
                var rowEl = table.appendChild(document.createElement("tr"));
                for (var j = 0; j < columns; j++) {
                    var cd = this.GetColumnDefinition(j);
                    var columnEl = rowEl.appendChild(document.createElement("td"));
                    columnEl.style.padding = "0px";
                    switch (rd.Height.Type) {
                        case namespace.GridUnitType.Star:
                            columnEl.style.height = (rd.Height.Value / totalRowStars) * 100 + "%";
                            break;
                        case namespace.GridUnitType.Pixel:
                            columnEl.style.height = rd.Height.Value + "px";
                            columnEl.style.minHeight = rd.Height.Value + "px";
                            break;
                        case namespace.GridUnitType.Auto:
                            columnEl.style.height = "auto";
                            columnEl.style.minHeight = rd.MinHeight + "px";
                            columnEl.style.maxHeight = rd.MaxHeight + "px";
                            break;
                    }
                    switch (cd.Width.Type) {
                        case namespace.GridUnitType.Star:
                            columnEl.style.width = (cd.Width.Value / totalColumnStars) * 100 + "%";
                            break;
                        case namespace.GridUnitType.Pixel:
                            columnEl.style.width = cd.Width.Value + "px";
                            columnEl.style.minWidth = cd.Width.Value + "px";
                            break;
                        case namespace.GridUnitType.Auto:
                            columnEl.style.width = "auto";
                            columnEl.style.minWidth = cd.MinWidth + "px";
                            columnEl.style.maxWidth = cd.MaxWidth + "px";
                            break;
                    }
                    columnEl.style.fontSize = "0px";
                    columnEl.style.overflow = "hidden";
                    var sizingEl = columnEl.appendChild(document.createElement("div"));
                    sizingEl.style.position = "relative";
                    sizingEl.style.display = "table";
                    sizingEl.style.borderCollapse = "separate";
                    sizingEl.style.width = "100%";
                    sizingEl.style.height = "100%";
                    var contentEl = sizingEl.appendChild(document.createElement("div"));
                    contentEl.style.position = "absolute";
                    contentEl.style.display = "table-cell";
                    contentEl.style.width = "100%";
                    contentEl.style.height = "100%";
                }
            }
        };
        Grid.Instance.CreateHtmlChildrenContainer = function () {
            var table = document.createElement("table");
            table.style.borderCollapse = "collapse";
            table.style.borderSpacing = "0px";
            table.style.width = "100%";
            table.style.height = "100%";
            this.CreateCells(table);
            return table;
        };
        Grid.Instance.ApplyHtmlChange = function (change) {
            var propd = change.Property;
            if (propd.OwnerType !== Grid) {
                this.ApplyHtmlChange$Panel(change);
                return;
            }
            if (propd._ID === Grid.ShowGridLinesProperty._ID) {
                var table = this.GetHtmlChildrenContainer();
                var style = this.ShowGridLines ? "solid 1px black" : "";
                for (var i = 0; i < table.children.length; i++) {
                    var row = table.children[i];
                    for (var j = 0; j < row.children.length; j++) {
                        var cell = row.children[j];
                        cell.style.border = style;
                    }
                }
            }
        };
        Grid.Instance.UpdateAdjustedWidth = function (child, width) {
            delete Surface._SizingAdjustments[this._ID];
            var column = Grid.GetColumn(child);
            var row = Grid.GetRow(child);
            var cd = this.GetColumnDefinition(column);
            var rd = this.GetRowDefinition(row);
            if (cd.Width.Type === namespace.GridUnitType.Auto) {
                var table = this.GetHtmlChildrenContainer();
                table.children[row].children[column].firstChild.style.width = width + "px";
            }
            if (!this.GetIsFixedWidth()) {
                var myWidth = this.GetHtmlChildrenContainer().offsetWidth;
                this.GetContentHtmlElement().style.width = myWidth + "px";
                myWidth = this.CalculateAdjustedWidth(myWidth);
                var parent = this.GetVisualParent();
                if (parent) parent.UpdateAdjustedWidth(this, myWidth);
            }
        };
        Grid.Instance.UpdateAdjustedHeight = function (child, height) {
            delete Surface._SizingAdjustments[this._ID];
            var column = Grid.GetColumn(child);
            var row = Grid.GetRow(child);
            var cd = this.GetColumnDefinition(column);
            var rd = this.GetRowDefinition(row);
            if (rd.Height.Type === namespace.GridUnitType.Auto) {
                var table = this.GetHtmlChildrenContainer();
                table.children[row].children[column].firstChild.style.height = height + "px";
            }
            if (!this.GetIsFixedHeight()) {
                var myHeight = this.GetHtmlChildrenContainer().offsetHeight;
                this.GetContentHtmlElement().style.height = myHeight + "px";
                myHeight = this.CalculateAdjustedHeight(myHeight);
                var parent = this.GetVisualParent();
                if (parent) parent.UpdateAdjustedHeight(this, myHeight);
            }
        };
        Grid.Instance.GetIsFixedWidth = function (child) {
            if (child) {
                var column = Grid.GetColumn(child);
                var cd = this.GetColumnDefinition(column);
                if (cd.Width.Type === namespace.GridUnitType.Auto) return false;
                else return true;
            }
            else return this.IsFixedWidth;
        };
        Grid.Instance.GetIsFixedHeight = function (child) {
            if (child) {
                var row = Grid.GetRow(child);
                var rd = this.GetRowDefinition(row);
                if (rd.Height.Type === namespace.GridUnitType.Auto) return false;
                else return true;
            }
            else return this.IsFixedHeight;
        };
    }
    Grid.__DebugMatrix = function (matrix) {
        var str = "";
        for (var i = 0; i < matrix.length; i++) {
            for (var j = 0; j < matrix[i].length; j++) {
                str += "[";
                str += matrix[i][j].toString();
                str += "]";
            }
            str += "\n";
        }
        return str;
    };
    Grid.__DebugDiagonalMatrix = function (matrix) {
        var str = "";
        for (var i = 0; i < matrix.length; i++) {
            str += "[";
            str += matrix[i][i].toString();
            str += "]";
            str += "\n";
        }
        return str;
    };
    namespace.Grid = Nullstone.FinishCreate(Grid);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ListBox = Nullstone.Create("ListBox", namespace.Primitives.Selector);
    ListBox.Instance.Init = function () {
        this.Init$Selector();
        this.DefaultStyleKey = this.constructor;
        this._FocusedIndex = -1;
    };
    ListBox.ItemContainerStyleProperty = DependencyProperty.RegisterCore("ItemContainerStyle", function () { return Fayde.Style; }, ListBox, undefined, function (d, args) { d.OnItemContainerStyleChanged(args.OldValue, args.NewValue); });
    ListBox.SelectionModeProperty = DependencyProperty.RegisterCore("SelectionMode", function () { return new Enum(namespace.SelectionMode); }, ListBox, undefined, function (d, args) { d._Selection.Mode = args.NewValue; });
    ListBox.IsSelectionActiveProperty = namespace.Primitives.Selector.IsSelectionActiveProperty;
    Nullstone.AutoProperties(ListBox, [
        ListBox.ItemContainerStyleProperty,
        ListBox.SelectionModeProperty
    ]);
    Nullstone.AutoPropertyReadOnly(ListBox, ListBox.IsSelectionActiveProperty, true);
    Nullstone.Property(ListBox, "$IsVerticalOrientation", {
        get: function () {
            var p = this.$Panel;
            if (p instanceof namespace.StackPanel || p instanceof namespace.VirtualizingStackPanel)
                return p.Orientation === Fayde.Orientation.Vertical;
            return true;
        }
    });
    ListBox.Instance.SelectAll = function () {
        this._Selection.SelectAll(this.Items);
    };
    ListBox.Instance.ScrollIntoView = function (item) {
        var tsv = this.$TemplateScrollViewer;
        if (tsv == null)
            return;
        var items = this.Items;
        if (!items.Contains(item))
            return;
        var ihro;
        var lbiro;
        var virtualizing = namespace.VirtualizingStackPanel.GetIsVirtualizing(this);
        if (this._IsOnCurrentPage(item, ihro, lbiro))
            return;
        var ihr = ihro.Value;
        var lbir = lbiro.Value;
        if (this.$IsVerticalOrientation) {
            if (virtualizing) {
                tsv.ScrollToVerticalOffset(this.SelectedIndex);
                return;
            }
            var verticalOffset = tsv.VerticalOffset;
            var verticalDelta = 0;
            if (ihr.GetBottom() < lbir.GetBottom()) {
                verticalDelta = lbir.GetBottom() - ihr.GetBottom();
                verticalOffset += verticalDelta;
            }
            if ((lbir.Y - verticalDelta) < ihr.Y) {
                verticalOffset -= ihr.Y - (lbir.Y - verticalDelta);
            }
            tsv.ScrollToVerticalOffset(verticalOffset);
        } else {
            if (virtualizing) {
                tsv.ScrollToHorizontalOffset(this.SelectedIndex);
                return;
            }
            var horizontalOffset = tsv.HorizontalOffset;
            var horizontalDelta = 0;
            if (ihr.GetRight() < lbir.GetRight()) {
                horizontalDelta = lbir.GetRight() - ihr.GetRight();
                horizontalOffset += horizontalDelta;
            }
            if ((ihr.X - horizontalDelta) < ihr.X) {
                horizontalOffset -= ihr.X - (lbir.X - horizontalDelta);
            }
            tsv.ScrollToHorizontalOffset(horizontalOffset);
        }
    };
    ListBox.Instance._NavigateByPage = function (forward) {
        var tsv = this.$TemplateScrollViewer;
        var newFocusedIndex = -1;
        var item = (this._FocusedIndex !== -1) ? this.Items.GetValueAt(this._FocusedIndex) : null;
        if (item != null && !this._IsOnCurrentPage(item)) {
            this.ScrollIntoView(item);
            if (tsv != null)
                tsv.UpdateLayout();
        }
        if (item == null) {
            newFocusedIndex = this._GetFirstItemOnCurrentPage(this._FocusedIndex, forward);
        } else {
            var firstItemOnCurrentPage = this._GetFirstItemOnCurrentPage(this._FocusedIndex, forward);
            if (firstItemOnCurrentPage !== this._FocusedIndex) {
                newFocusedIndex = firstItemOnCurrentPage;
            } else {
                if (tsv != null) {
                    if (this.$IsVerticalOrientation) {
                        tsv.ScrollToVerticalOffset(Math.max(0, Math.min(tsv.ScrollableHeight,
                            tsv.VerticalOffset + (tsv.ViewportHeight * (forward ? 1 : -1)))));
                    } else {
                        tsv.ScrollToHorizontalOffset(Math.max(0, Math.min(tsv.ScrollableWidth,
                            tsv.HorizontalOffset + (tsv.ViewportWidth * (forward ? 1 : -1)))));
                    }
                    tsv.UpdateLayout();
                }
                newFocusedIndex = this._GetFirstItemOnCurrentPage(this._FocusedIndex, forward);
            }
        }
        return newFocusedIndex;
    };
    ListBox.Instance._ScrollInDirection = function (key) {
        if (this.$TemplateScrollViewer == null)
            return;
        this.$TemplateScrollViewer._ScrollInDirection(key);
    };
    ListBox.Instance._IsOnCurrentPage = function (item, itemsHostRectOut, listBoxItemsRectOut) {
        if (itemsHostRectOut === undefined) itemsHostRectOut = {};
        if (listBoxItemsRectOut === undefined) listBoxItemsRectOut = {};
        var itemsHost = Fayde.VisualTreeHelper.GetChild(VisualTreeHelper.GetChild(this, 0), 0);
        var tsv = this.$TemplateScrollViewer;
        if (tsv != null) {
            itemsHost = tsv;
            if (tsv.$ElementScrollContentPresenter != null)
                itemsHost = tsv.$ElementScrollContentPresenter;
        }
        itemsHost = Nullstone.As(itemsHost, Fayde.FrameworkElement);
        var ihro = itemsHostRectOut.Value = new Rect();
        var lbiro = listBoxItemsRectOut.Value = new Rect();
        if (itemsHost == null) {
            return false;
        }
        ihro.Width = itemsHost.RenderSize.Width;
        ihro.Height = itemsHost.RenderSize.Height;
        var lbi = this.ItemContainerGenerator.ContainerFromItem(item);
        if (lbi == null)
            return false;
        lbiro.Width = lbi.RenderSize.Width;
        lbiro.Height = lbi.RenderSize.Height;
        if (itemsHost instanceof namespace.Control) {
            var padding = itemsHost.Padding;
            ihro.X = ihro.X + padding.Left;
            ihro.Y = ihro.Y + padding.Top;
            ihro.Width = ihro.Width - padding.Left - padding.Right;
            ihro.Height = ihro.Height - padding.Top - padding.Bottom;
        }
        var genXform = lbi.TransformToVisual(itemsHost);
        if (genXform != null) {
            var ptl = genXform.Transform(new Point());
            var pbr = genXform.Transform(new Point(lbi.RenderSize.Width, lbi.RenderSize.Height));
            lbiro.X = Math.min(ptl.X, pbr.X);
            lbiro.Y = Math.min(ptl.Y, pbr.Y);
            lbiro.Width = Math.abs(ptl.X - pbr.X);
            lbiro.Height = Math.abs(ptl.Y - pbr.Y);
        }
        return this.$IsVerticalOrientation
            ? ihro.X <= lbiro.Y && ihro.GetBottom() >= lbiro.GetBottom()
            : ihro.X <= lbiro.X && ihro.GetRight() >= lbiro.GetRight();
    };
    ListBox.Instance._GetFirstItemOnCurrentPage = function (startingIndex, forward) {
        var delta = forward ? 1 : -1;
        var fiocp = -1;
        var probeIndex = startingIndex;
        var items = this.Items;
        var itemsCount = items.GetCount();
        while (probeIndex >= 0 && probeIndex < itemsCount && !this._IsOnCurrentPage(items.GetValueAt(probeIndex))) {
            fiocp = probeIndex;
            probeIndex += delta;
        }
        while (probeIndex >= 0 && probeIndex < itemsCount && this._IsOnCurrentPage(items.GetValueAt(probeIndex))) {
            fiocp = probeIndex;
            probeIndex += delta;
        }
        return fiocp;
    };
    ListBox.Instance.OnItemContainerStyleChanged = function (oldStyle, newStyle) {
        var count = this.Items.GetCount();
        for (var i = 0; i < count; i++) {
            var lbi = this.ItemContainerGenerator.ContainerFromIndex(i);
            if (lbi != null && Nullstone.RefEquals(lbi.Style, oldStyle))
                lbi.Style = newStyle;
        }
    };
    ListBox.Instance.OnKeyDown = function (args) {
        if (args.Handled)
            return;
        var handled = false;
        var newFocusedIndex = -1;
        switch (args.Key) {
            case Key.Space:
            case Key.Enter:
                if (Key.Enter !== args.Key || Fayde.Input.KeyboardNavigation.GetAcceptsReturn(this)) {
                    if (!Fayde.Input.Keyboard.HasAlt()) {
                        var lbi = Nullstone.As(Fayde.FocusManager.GetFocusedElement(), namespace.ListBoxItem);
                        if (lbi != null) {
                            if (Fayde.Input.Keyboard.HasControl() && lbi.IsSelected) {
                                this.SelectedItem = null;
                            } else {
                                this.SelectedItem = this.ItemContainerGenerator.ItemFromContainer(lbi);
                            }
                            handled = true;
                        }
                    }
                }
                break;
            case Key.Home:
                newFocusedIndex = 0;
                break;
            case Key.End:
                newFocusedIndex = this.Items.GetCount() - 1;
                break;
            case Key.PageUp:
                newFocusedIndex = this._NavigateByPage(false);
                break;
            case Key.PageDown:
                newFocusedIndex = this._NavigateByPage(true);
                break;
            case Key.Left:
                if (this.$IsVerticalOrientation) {
                    this._ScrollInDirection(Key.Left);
                } else {
                    newFocusedIndex = this._FocusedIndex - 1;
                }
                break;
            case Key.Up:
                if (this.$IsVerticalOrientation) {
                    newFocusedIndex = this._FocusedIndex - 1;
                } else {
                    this._ScrollInDirection(Key.Up);
                }
                break;
            case Key.Right:
                if (this.$IsVerticalOrientation) {
                    this._ScrollInDirection(Key.Right);
                } else {
                    newFocusedIndex = this._FocusedIndex + 1;
                }
                break;
            case Key.Down:
                if (this.$IsVerticalOrientation) {
                    newFocusedIndex = this._FocusedIndex + 1;
                } else {
                    this._ScrollInDirection(Key.Down);
                }
                break;
        }
        if (newFocusedIndex !== -1 && this._FocusedIndex !== -1 && newFocusedIndex !== this._FocusedIndex && newFocusedIndex >= 0 && newFocusedIndex < this.Items.GetCount()) {
            var icg = this.ItemContainerGenerator;
            var lbi = icg.ContainerFromIndex(newFocusedIndex);
            var item = icg.ItemFromContainer(lbi);
            this.ScrollIntoView(item);
            if (Fayde.Input.Keyboard.HasControl()) {
                lbi.Focus();
            } else {
                this.SelectedItem = item;
            }
            handled = true;
        }
        if (handled)
            args.Handled = true;
    };
    ListBox.Instance.IsItemItsOwnContainer = function (item) {
        return item instanceof namespace.ListBoxItem;
    };
    ListBox.Instance.GetContainerForItem = function () {
        var item = new namespace.ListBoxItem();
        var ics = this.ItemContainerStyle;
        if (ics != null)
            item.Style = ics;
        return item;
    };
    ListBox.Instance.PrepareContainerForItem = function (element, item) {
        this.PrepareContainerForItem$Selector(element, item);
        var ics = this.ItemContainerStyle;
        if (element.Style == null && ics != null)
            element.Style = ics;
    };
    ListBox.Instance.OnGotFocus = function (e) {
        this.OnGotFocus$Selector(e);
        this.$SetValueInternal(ListBox.IsSelectionActiveProperty, true);
    };
    ListBox.Instance.OnLostFocus = function (e) {
        this.OnLostFocus$Selector(e);
        this.$SetValueInternal(ListBox.IsSelectionActiveProperty, false);
    };
    ListBox.Instance.NotifyListItemGotFocus = function (lbi) {
        this._FocusedIndex = this.ItemContainerGenerator.IndexFromContainer(lbi);
    };
    ListBox.Instance.NotifyListItemLostFocus = function (lbi) {
        this._FocusedIndex = -1;
    };
    namespace.ListBox = Nullstone.FinishCreate(ListBox);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var Page = Nullstone.Create("Page", namespace.UserControl);
    Page.TitleProperty = DependencyProperty.Register("Title", function () { return String; }, Page);
    Nullstone.AutoProperties(Page, [
        Page.TitleProperty
    ]);
    namespace.Page = Nullstone.FinishCreate(Page);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var _TextBoxEmitChanged = Fayde.Text._TextBoxEmitChanged;
    var PasswordBox = Nullstone.Create("PasswordBox", namespace.TextBoxBase);
    PasswordBox.Instance.Init = function () {
        this.Init$TextBoxBase();
        this.AddProvider(new namespace._PasswordBoxDynamicPropertyValueProvider(this, _PropertyPrecedence.DynamicValue));
        this._EventsMask = _TextBoxEmitChanged.TEXT;
    };
    PasswordBox.SelectionBackgroundProperty = DependencyProperty.RegisterCore("SelectionBackground", function () { return Fayde.Media.Brush; }, PasswordBox);
    PasswordBox.SelectionForegroundProperty = DependencyProperty.RegisterCore("SelectionForeground", function () { return Fayde.Media.Brush; }, PasswordBox);
    PasswordBox.BaselineOffsetProperty = DependencyProperty.RegisterCore("BaselineOffset", function () { return Number; }, PasswordBox);
    Nullstone.AutoProperties(PasswordBox, [
        PasswordBox.SelectionBackgroundProperty,
        PasswordBox.SelectionForegroundProperty,
        "SelectionStart",
        "SelectionLength"
    ]);
    namespace.PasswordBox = Nullstone.FinishCreate(PasswordBox);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ProgressBar = Nullstone.Create("ProgressBar", namespace.Primitives.RangeBase);
    ProgressBar.Instance.Init = function () {
        this.Init$RangeBase();
        this.DefaultStyleKey = this.constructor;
    };
    ProgressBar.IsIndeterminatePropertyChanged = function (d, args) {
        if (d instanceof ProgressBar) {
            d._OnIsIndeterminateChanged();
            d._UpdateIndicator();
        }
    };
    ProgressBar.IsIndeterminateProperty = DependencyProperty.RegisterCore("IsIndeterminate", function () { return Boolean; }, ProgressBar, false, ProgressBar.IsIndeterminatePropertyChanged);
    Nullstone.AutoProperties(ProgressBar, [
        ProgressBar.IsIndeterminateProperty
    ]);
    ProgressBar.Instance.OnApplyTemplate = function () {
        this.OnApplyTemplate$RangeBase();
        var track = this.$Track;
        if (track)
            track.SizeChanged.Unsubscribe(this._OnTrackSizeChanged, this);
        track = this.$Track = this.GetTemplateChild("ProgressBarTrack");
        this.$Indicator = this.GetTemplateChild("ProgressBarIndicator");
        if (track)
            track.SizeChanged.Subscribe(this._OnTrackSizeChanged, this);
        this.$UpdateVisualState(false);
    };
    ProgressBar.Instance.$OnValueChanged = function (oldValue, newValue) {
        this.$OnValueChanged$RangeBase(oldValue, newValue);
        this._UpdateIndicator();
    };
    ProgressBar.Instance._OnTrackSizeChanged = function (sender, e) {
        this._UpdateIndicator();
    };
    ProgressBar.Instance._OnIsIndeterminateChanged = function () {
        this.$UpdateVisualState();
    };
    ProgressBar.Instance._UpdateIndicator = function () {
        var min = this.Minimum;
        var max = this.Maximum;
        var val = this.Value;
        if (this.$Track == null)
            return;
        if (this.$Indicator == null)
            return;
        var parent = Fayde.VisualTreeHelper.GetParent(this);
        if (parent == null)
            return;
        var margin = this.$Indicator.Margin.Left + this.$Indicator.Margin.Right;
        if (parent instanceof namespace.Border || parent instanceof namespace.Control) {
            margin += parent.Padding.Left;
            margin += parent.Padding.Right;
        }
        var progress = this.IsIndeterminate || max === min ? 1.0 : (val - min) / (max - min);
        var fullWidth = Math.max(0, parent.ActualWidth - margin);
        this.$Indicator.Width = fullWidth * progress;
    };
    ProgressBar.Instance.$GetVisualStateNamesToActivate = function () {
        return this.IsIndeterminate ? ["Indeterminate"] : ["Determinate"];
    };
    namespace.ProgressBar = Nullstone.FinishCreate(ProgressBar);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var Slider = Nullstone.Create("Slider", namespace.Primitives.RangeBase);
    Slider.Instance.Init = function () {
        this.Init$RangeBase();
        this.DefaultStyleKey = this.constructor;
        this.SizeChanged.Subscribe(function () { this._UpdateTrackLayout(); }, this);
    };
    Slider.IsDirectionReversedPropertyChanged = function (d, args) {
        d._UpdateTrackLayout();
    };
    Slider.IsDirectionReversedProperty = DependencyProperty.RegisterCore("IsDirectionReversed", function () { return Boolean; }, Slider, false, Slider.IsDirectionReversedPropertyChanged);
    Slider.IsFocusedPropertyChanged = function (d, args) {
        d.$UpdateVisualState();
    };
    Slider.IsFocusedProperty = DependencyProperty.RegisterReadOnlyCore("IsFocused", function () { return Boolean; }, Slider, false, Slider.IsFocusedPropertyChanged);
    Slider.OrientationPropertyChanged = function (d, args) {
        d._OnOrientationChanged();
    };
    Slider.OrientationProperty = DependencyProperty.RegisterCore("Orientation", function () { return Fayde.Orientation; }, Slider, Fayde.Orientation.Horizontal, Slider.OrientationPropertyChanged);
    Nullstone.AutoProperties(Slider, [
        Slider.IsDirectionReversedProperty,
        Slider.OrientationProperty
    ]);
    Nullstone.AutoPropertyReadOnly(Slider, Slider.IsFocusedProperty, true);
    Slider.Instance.OnApplyTemplate = function () {
        this.OnApplyTemplate$RangeBase();
        this.$HorizontalTemplate = Nullstone.As(this.GetTemplateChild("HorizontalTemplate"), Fayde.FrameworkElement);
        this.$HorizontalLargeIncrease = Nullstone.As(this.GetTemplateChild("HorizontalTrackLargeChangeIncreaseRepeatButton"), namespace.Primitives.RepeatButton);
        this.$HorizontalLargeDecrease = Nullstone.As(this.GetTemplateChild("HorizontalTrackLargeChangeDecreaseRepeatButton"), namespace.Primitives.RepeatButton);
        this.$HorizontalThumb = Nullstone.As(this.GetTemplateChild("HorizontalThumb"), namespace.Primitives.Thumb);
        if (this.$HorizontalThumb != null) {
            this.$HorizontalThumb.DragStarted.Subscribe(function (sender, e) { this.Focus(); this._OnThumbDragStarted(); }, this);
            this.$HorizontalThumb.DragDelta.Subscribe(function (sender, e) { this._OnThumbDragDelta(e); }, this);
        }
        if (this.$HorizontalLargeDecrease != null) {
            this.$HorizontalLargeDecrease.Click.Subscribe(function (sender, e) { this.Focus(); this.Value -= this.LargeChange; }, this);
        }
        if (this.$HorizontalLargeIncrease != null) {
            this.$HorizontalLargeIncrease.Click.Subscribe(function (sender, e) { this.Focus(); this.Value += this.LargeChange; }, this);
        }
        this.$VerticalTemplate = Nullstone.As(this.GetTemplateChild("VerticalTemplate"), Fayde.FrameworkElement);
        this.$VerticalLargeIncrease = Nullstone.As(this.GetTemplateChild("VerticalTrackLargeChangeIncreaseRepeatButton"), namespace.Primitives.RepeatButton);
        this.$VerticalLargeDecrease = Nullstone.As(this.GetTemplateChild("VerticalTrackLargeChangeDecreaseRepeatButton"), namespace.Primitives.RepeatButton);
        this.$VerticalThumb = Nullstone.As(this.GetTemplateChild("VerticalThumb"), namespace.Primitives.Thumb);
        if (this.$VerticalThumb != null) {
            this.$VerticalThumb.DragStarted.Subscribe(function (sender, e) { this.Focus(); this._OnThumbDragStarted(); }, this);
            this.$VerticalThumb.DragDelta.Subscribe(function (sender, e) { this._OnThumbDragDelta(e); }, this);
        }
        if (this.$VerticalLargeDecrease != null) {
            this.$VerticalLargeDecrease.Click.Subscribe(function (sender, e) { this.Focus(); this.Value -= this.LargeChange; }, this);
        }
        if (this.$VerticalLargeIncrease != null) {
            this.$VerticalLargeIncrease.Click.Subscribe(function (sender, e) { this.Focus(); this.Value += this.LargeChange; }, this);
        }
        this._OnOrientationChanged();
        this.$UpdateVisualState(false);
    };
    Slider.Instance.OnIsEnabledChanged = function (args) {
        this.OnIsEnabledChanged$RangeBase(args);
        this.$UpdateVisualState();
    };
    Slider.Instance.$OnMinimumChanged = function (oldMin, newMin) {
        this.$OnMinimumChanged$RangeBase(oldMin, newMin);
        this._UpdateTrackLayout();
    };
    Slider.Instance.$OnMaximumChanged = function (oldMax, newMax) {
        this.$OnMaximumChanged$RangeBase(oldMax, newMax);
        this._UpdateTrackLayout();
    };
    Slider.Instance.$OnValueChanged = function (oldValue, newValue) {
        this.$OnValueChanged$RangeBase(oldValue, newValue);
        this._UpdateTrackLayout();
    };
    Slider.Instance._OnOrientationChanged = function () {
        var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
        if (this.$HorizontalTemplate != null)
            this.$HorizontalTemplate.Visibility = isHorizontal ? Fayde.Visibility.Visible : Fayde.Visibility.Collapsed;
        if (this.$VerticalTemplate != null)
            this.$VerticalTemplate.Visibility = !isHorizontal ? Fayde.Visibility.Visible : Fayde.Visibility.Collapsed;
        this._UpdateTrackLayout();
    };
    Slider.Instance._UpdateTrackLayout = function () {
        var max = this.Maximum;
        var min = this.Minimum;
        var val = this.Value;
        var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
        var templateGrid = Nullstone.As(isHorizontal ? this.$HorizontalTemplate : this.$VerticalTemplate, namespace.Grid);
        if (templateGrid == null)
            return;
        var isReversed = this.IsDirectionReversed;
        var defs;
        var largeDecrease;
        var largeIncrease;
        var thumb;
        if (isHorizontal) {
            defs = templateGrid.ColumnDefinitions;
            largeDecrease = this.$HorizontalLargeDecrease;
            largeIncrease = this.$HorizontalLargeIncrease;
            thumb = this.$HorizontalThumb;
        } else {
            defs = templateGrid.RowDefinitions;
            largeDecrease = this.$VerticalLargeDecrease;
            largeIncrease = this.$VerticalLargeIncrease;
            thumb = this.$VerticalThumb;
        }
        if (defs != null && defs.GetCount() === 3) {
            if (isHorizontal) {
                defs.GetValueAt(0).Width = new namespace.GridLength(1, isReversed ? namespace.GridUnitType.Star : namespace.GridUnitType.Auto);
                defs.GetValueAt(2).Width = new namespace.GridLength(1, isReversed ? namespace.GridUnitType.Auto : namespace.GridUnitType.Star);
                if (largeDecrease != null)
                    namespace.Grid.SetColumn(largeDecrease, isReversed ? 2 : 0);
                if (largeIncrease != null)
                    namespace.Grid.SetColumn(largeIncrease, isReversed ? 0 : 2);
            } else {
                defs.GetValueAt(0).Height = new namespace.GridLength(1, isReversed ? namespace.GridUnitType.Auto : namespace.GridUnitType.Star);
                defs.GetValueAt(2).Height = new namespace.GridLength(1, isReversed ? namespace.GridUnitType.Star : namespace.GridUnitType.Auto);
                if (largeDecrease != null)
                    namespace.Grid.SetRow(largeDecrease, isReversed ? 0 : 2);
                if (largeIncrease != null)
                    namespace.Grid.SetRow(largeIncrease, isReversed ? 2 : 0);
            }
        }
        if (max === min)
            return;
        var percent = val / (max - min);
        if (largeDecrease != null && thumb != null) {
            if (isHorizontal)
                largeDecrease.Width = Math.max(0, percent * (this.ActualWidth - thumb.ActualWidth));
            else
                largeDecrease.Height = Math.max(0, percent * (this.ActualHeight - thumb.ActualHeight));
        }
    };
    Slider.Instance._OnThumbDragStarted = function () {
        this._DragValue = this.Value;
    };
    Slider.Instance._OnThumbDragDelta = function (e) {
        var offset = 0;
        if (this.Orientation === Fayde.Orientation.Horizontal && this.$HorizontalThumb != null) {
            offset = e.HorizontalChange / (this.ActualWidth - this.$HorizontalThumb.ActualWidth) * (this.Maximum - this.Minimum);
        } else if (this.Orientation === Fayde.Orientation.Vertical && this.$VerticalThumb != null) {
            offset = -e.VerticalChange / (this.ActualHeight - this.$VerticalThumb.ActualHeight) * (this.Maximum - this.Minimum);
        }
        if (!isNaN(offset) && isFinite(offset)) {
            this._DragValue += this.IsDirectionReversed ? -offset : offset;
            var newValue = Math.min(this.Maximum, Math.max(this.Minimum, this._DragValue));
            if (newValue != this.Value)
                this.Value = newValue;
        }
    };
    Slider.Instance.OnMouseEnter = function (e) {
        this.OnMouseEnter$RangeBase(e);
        if ((this.Orientation === Fayde.Orientation.Horizontal && this.$HorizontalThumb != null && this.$HorizontalThumb.IsDragging) ||
            (this.Orientation === Fayde.Orientation.Vertical && this.$VerticalThumb != null && this.$VerticalThumb.IsDragging)) {
            this.$UpdateVisualState();
        }
    };
    Slider.Instance.OnMouseLeave = function (e) {
        this.OnMouseLeave$RangeBase(e);
        if ((this.Orientation === Fayde.Orientation.Horizontal && this.$HorizontalThumb != null && this.$HorizontalThumb.IsDragging) ||
            (this.Orientation === Fayde.Orientation.Vertical && this.$VerticalThumb != null && this.$VerticalThumb.IsDragging)) {
            this.$UpdateVisualState();
        }
    };
    Slider.Instance.OnMouseLeftButtonDown = function (e) {
        this.OnMouseLeftButtonDown$RangeBase(e);
        if (e.Handled)
            return;
        e.Handled = true;
        this.Focus();
        this.CaptureMouse();
    };
    Slider.Instance.OnLostMouseCapture = function (sender, e) {
        this.OnLostMouseCapture$RangeBase(sender, e);
        this.$UpdateVisualState();
    };
    Slider.Instance.OnKeyDown = function (e) {
        this.OnKeyDown$RangeBase(e);
        if (e.Handled)
            return;
        if (!this.IsEnabled)
            return;
        switch (e.Key) {
            case Key.Left:
            case Key.Down:
                this.Value += (this.IsDirectionReversed ? this.SmallChange : -this.SmallChange);
                break;
            case Key.Right:
            case Key.Up:
                this.Value += (this.IsDirectionReversed ? -this.SmallChange : this.SmallChange);
                break;
            case Key.Home:
                this.Value = this.Minimum;
                break;
            case Key.End:
                this.Value = this.Maximum;
                break;
        }
    };
    Slider.Instance.OnGotFocus = function (e) {
        this.OnGotFocus$RangeBase(e);
        this.$SetValueInternal(Slider.IsFocusedProperty, true);
    };
    Slider.Instance.OnLostFocus = function (e) {
        this.OnLostFocus$RangeBase(e);
        this.$SetValueInternal(Slider.IsFocusedProperty, false);
    };
    namespace.Slider = Nullstone.FinishCreate(Slider);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var _TextBoxModelChanged = Fayde.Text._TextBoxModelChanged;
    var _TextBoxEmitChanged = Fayde.Text._TextBoxEmitChanged;
    var TextBox = Nullstone.Create("TextBox", namespace.TextBoxBase);
    TextBox.Instance.Init = function () {
        this.Init$TextBoxBase();
        this.DefaultStyleKey = this.constructor;
        this.AddProvider(new namespace._TextBoxDynamicPropertyValueProvider(this, _PropertyPrecedence.DynamicValue));
        this._EventsMask = _TextBoxEmitChanged.TEXT | _TextBoxEmitChanged.SELECTION;
        this.SelectionChanged = new MulticastEvent();
        this.TextChanged = new MulticastEvent();
    };
    TextBox.AcceptsReturnProperty = DependencyProperty.RegisterCore("AcceptsReturn", function () { return Boolean; }, TextBox, false);
    TextBox.CaretBrushProperty = DependencyProperty.RegisterCore("CaretBrush", function () { return Fayde.Media.Brush; }, TextBox);
    TextBox.PositiveIntValidator = function (instance, propd, value, error) {
        if (typeof value !== 'number')
            return false;
        return value >= 0;
    };
    TextBox.MaxLengthProperty = DependencyProperty.RegisterFull("MaxLength", function () { return Number; }, TextBox, 0, undefined, undefined, undefined, undefined, TextBox.PositiveIntValidator);
    TextBox.IsReadOnlyProperty = DependencyProperty.RegisterCore("IsReadOnly", function () { return Boolean; }, TextBox);
    TextBox.SelectionForegroundProperty = DependencyProperty.RegisterCore("SelectionForeground", function () { return Fayde.Media.Brush; }, TextBox);
    TextBox.SelectionBackgroundProperty = DependencyProperty.RegisterCore("SelectionBackground", function () { return Fayde.Media.Brush; }, TextBox);
    TextBox.BaselineOffsetProperty = DependencyProperty.RegisterCore("BaselineOffset", function () { return Number; }, TextBox);
    TextBox.SelectedTextProperty = DependencyProperty.RegisterFull("SelectedText", function () { return String; }, TextBox, "", undefined, undefined, undefined, true);
    TextBox.SelectionLengthProperty = DependencyProperty.RegisterFull("SelectionLength", function () { return Number; }, TextBox, 0, undefined, undefined, undefined, true, TextBox.PositiveIntValidator);
    TextBox.SelectionStartProperty = DependencyProperty.RegisterFull("SelectionStart", function () { return Number; }, TextBox, 0, undefined, undefined, undefined, true, TextBox.PositiveIntValidator);
    TextBox.TextProperty = DependencyProperty.RegisterCore("Text", function () { return String; }, TextBox);
    TextBox.TextAlignmentProperty = DependencyProperty.RegisterCore("TextAlignment", function () { return new Enum(Fayde.TextAlignment); }, TextBox, Fayde.TextAlignment.Left);
    TextBox.TextWrappingProperty = DependencyProperty.RegisterCore("TextWrapping", function () { return new Enum(namespace.TextWrapping); }, TextBox, namespace.TextWrapping.NoWrap);
    TextBox.HorizontalScrollBarVisibilityProperty = DependencyProperty.RegisterCore("HorizontalScrollBarVisibility", function () { return new Enum(namespace.ScrollBarVisibility); }, TextBox, namespace.ScrollBarVisibility.Hidden);
    TextBox.VerticalScrollBarVisibilityProperty = DependencyProperty.RegisterCore("VerticalScrollBarVisibility", function () { return new Enum(namespace.ScrollBarVisibility); }, TextBox, namespace.ScrollBarVisibility.Hidden);
    Nullstone.AutoProperties(TextBox, [
        TextBox.AcceptsReturnProperty,
        TextBox.CaretBrushProperty,
        TextBox.MaxLengthProperty,
        TextBox.IsReadOnlyProperty,
        TextBox.SelectionForegroundProperty,
        TextBox.SelectionBackgroundProperty,
        TextBox.BaselineOffsetProperty,
        TextBox.SelectedTextProperty,
        TextBox.SelectionLengthProperty,
        TextBox.SelectionStartProperty,
        TextBox.TextProperty,
        TextBox.TextAlignmentProperty,
        TextBox.TextWrappingProperty,
        TextBox.HorizontalScrollBarVisibilityProperty,
        TextBox.VerticalScrollBarVisibilityProperty
    ]);
    TextBox.Instance.OnApplyTemplate = function () {
        this.OnApplyTemplate$TextBoxBase();
        if (!this._ContentElement)
            return;
        var prop = this._ContentElement.GetDependencyProperty("VerticalScrollBarVisibility");
        if (prop)
            this._ContentElement._SetValue(prop, this._GetValue(TextBox.VerticalScrollBarVisibilityProperty));
        prop = this._ContentElement.GetDependencyProperty("HorizontalScrollBarVisibility");
        if (prop) {
            if (this.TextWrapping === namespace.TextWrapping.Wrap)
                this._ContentElement._SetValue(prop, namespace.ScrollBarVisibility.Disabled);
            else
                this._ContentElement._SetValue(prop, this._GetValue(TextBox.HorizontalScrollBarVisibilityProperty));
        }
    };
    TextBox.Instance._SyncSelectedText = function () {
        if (this._SelectionCursor !== this._SelectionAnchor) {
            var start = Math.min(this._SelectionAnchor, this._SelectionCursor);
            var len = Math.abs(this._SelectionCursor - this._SelectionAnchor);
            var text = !this._Buffer._Text ? '' : this._Buffer._Text.substr(start, len);
            this._SettingValue = false;
            this._SetValue(TextBox.SelectedTextProperty, text);
            this._SettingValue = true;
        } else {
            this._SettingValue = false;
            this._SetValue(TextBox.SelectedTextProperty, "");
            this._SettingValue = true;
        }
    };
    TextBox.Instance._EmitSelectionChanged = function () {
        TextDebug("TextBox.SelectionChanged [" + this.SelectionStart + " -- " + this.SelectionLength + "]");
        this.SelectionChanged.RaiseAsync(this, new EventArgs());
    };
    TextBox.Instance.GetDisplayText = function () {
        return this.Text;
    };
    TextBox.Instance._SyncText = function () {
        this._SettingValue = false;
        this._SetValue(TextBox.TextProperty, this._Buffer._Text);
        this._SettingValue = true;
    };
    TextBox.Instance._EmitTextChanged = function () {
        this.TextChanged.RaiseAsync(this, {});
    };
    TextBox.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== TextBox) {
            this._OnPropertyChanged$TextBoxBase(args, error);
            return;
        }
        var changed = _TextBoxModelChanged.Nothing;
        var propd;
        var start;
        var length;
        var action;
        var value;
        var text;
        if (args.Property._ID === TextBox.AcceptsReturnProperty._ID) {
            this._AcceptsReturn = args.NewValue === true;
        } else if (args.Property._ID === TextBox.CaretBrushProperty._ID) {
        } else if (args.Property._ID === TextBox.IsReadOnlyProperty._ID) {
            this._IsReadOnly = args.NewValue === true;
            if (this._IsFocused) {
                if (this._IsReadOnly) {
                    this._ResetIMContext();
                } else {
                }
            }
            if (this._View)
                this._View.SetEnableCursor(!this._IsReadOnly);
        } else if (args.Property._ID === TextBox.MaxLengthProperty._ID) {
            this._MaxLength = args.NewValue === true;
        } else if (args.Property._ID === TextBox.SelectedTextProperty._ID) {
            if (this._SettingValue) {
                value = args.NewValue;
                text = !value ? '' : value;
                length = Math.abs(this._SelectionCursor - this._SelectionAnchor);
                start = Math.min(this._SelectionAnchor, this._SelectionCursor);
                if (text) {
                    if (length > 0) {
                        action = new Fayde.Text._TextBoxUndoActionReplace(this._SelectionAnchor, this._SelectionCursor, this._Buffer, start, length, text);
                        this._Buffer.Replace(start, length, text);
                    } else if (text.length > 0) {
                        action = new Fayde.Text._TextBoxUndoActionInsert(this._SelectionAnchor, this._SelectionCursor, start, text);
                        this._Buffer.Insert(start, text);
                    }
                    if (action) {
                        this._Emit |= _TextBoxEmitChanged.TEXT;
                        this._Undo.Push(action);
                        this._Redo.Clear();
                        this.ClearSelection(start + text.length);
                        this._ResetIMContext();
                        this._SyncAndEmit();
                    }
                }
            }
        } else if (args.Property._ID === TextBox.SelectionStartProperty._ID) {
            length = Math.abs(this._SelectionCursor - this._SelectionAnchor);
            start = args.NewValue;
            if (start > this._Buffer.GetLength()) {
                this.SelectionStart = this._Buffer.GetLength();
                return;
            }
            if (start + length > this._Buffer.GetLength()) {
                this._BatchPush();
                length = this._Buffer.GetLength() - start;
                this.SelectionLength = length;
                this._BatchPop();
            }
            if (this._SelectionAnchor != start) {
                changed = _TextBoxModelChanged.Selection;
                this._HaveOffset = false;
            }
            this._SelectionCursor = start + length;
            this._SelectionAnchor = start;
            this._Emit |= _TextBoxEmitChanged.SELECTION;
            this._SyncAndEmit();
        } else if (args.Property._ID === TextBox.SelectionLengthProperty._ID) {
            start = Math.min(this._SelectionAnchor, this._SelectionCursor);
            length = args.NewValue;
            if (start + length > this._Buffer.GetLength()) {
                length = this._Buffer.GetLength() - start;
                this.SelectionLength = length;
                return;
            }
            if (this._SelectionCursor != (start + length)) {
                changed = _TextBoxModelChanged.Selection;
                this._HaveOffset = false;
            }
            this._SelectionCursor = start + length;
            this._SelectionAnchor = start;
            this._Emit |= _TextBoxEmitChanged.SELECTION;
            this._SyncAndEmit();
        } else if (args.Property._ID === TextBox.SelectionBackgroundProperty._ID) {
            changed = _TextBoxModelChanged.Brush;
        } else if (args.Property._ID === TextBox.SelectionForegroundProperty._ID) {
            changed = _TextBoxModelChanged.Brush;
        } else if (args.Property._ID === TextBox.TextProperty._ID) {
            value = args.NewValue;
            text = !value ? '' : value;
            if (this._SettingValue) {
                if (text) {
                    if (this._Buffer.GetLength() > 0) {
                        action = new Fayde.Text._TextBoxUndoActionReplace(this._SelectionAnchor, this._SelectionCursor, this._Buffer, 0, this._Buffer.GetLength(), text);
                        this._Buffer.Replace(0, this._Buffer.GetLength(), text);
                    } else {
                        action = new Fayde.Text._TextBoxUndoActionInsert(this._SelectionAnchor, this._SelectionCursor, 0, text);
                        this._Buffer.Prepend(text);
                    }
                    this._Undo.Push(action);
                    this._Redo.Clear();
                    this._Emit |= _TextBoxEmitChanged.TEXT;
                    this.ClearSelection(0);
                    this._ResetIMContext();
                    this._SyncAndEmit(false);
                }
            }
            changed = _TextBoxModelChanged.Text;
        } else if (args.Property._ID === TextBox.TextAlignmentProperty._ID) {
            changed = _TextBoxModelChanged.TextAlignment;
        } else if (args.Property._ID === TextBox.TextWrappingProperty._ID) {
            if (this._ContentElement) {
                propd = this._ContentElement.GetDependencyProperty("HorizontalScrollBarVisibility");
                if (propd) {
                    if (args.NewValue === namespace.TextWrapping.Wrap)
                        this._ContentElement._SetValue(propd, namespace.ScrollBarVisibility.Disabled);
                    else
                        this._ContentElement._SetValue(propd, this.$GetValue(TextBox.HorizontalScrollBarVisibilityProperty));
                }
            }
            changed = _TextBoxModelChanged.TextWrapping
        } else if (args.Property._ID === TextBox.HorizontalScrollBarVisibilityProperty._ID) {
            if (this._ContentElement) {
                propd = this._ContentElement.GetDependencyProperty("HorizontalScrollBarVisibility");
                if (propd) {
                    if (this.TextWrapping === namespace.TextWrapping.Wrap)
                        this._ContentElement._SetValue(propd, namespace.ScrollBarVisibility.Disabled);
                    else
                        this._ContentElement._SetValue(propd, args.NewValue);
                }
            }
        } else if (args.Property._ID === TextBox.VerticalScrollBarVisibilityProperty._ID) {
            if (this._ContentElement) {
                propd = this._ContentElement.GetDependencyProperty("VerticalScrollBarVisibility");
                if (propd)
                    this._ContentElement._SetValue(propd, args.NewValue);
            }
        }
        if (changed !== _TextBoxModelChanged.Nothing)
            this.ModelChanged.Raise(this, new namespace._TextBoxModelChangedEventArgs(changed, args));
        this.PropertyChanged.Raise(this, args);
    };
    TextBox.Instance._OnSubPropertyChanged = function (propd, sender, args) {
        if (propd && (propd._ID === TextBox.SelectionBackgroundProperty._ID
            || propd._ID === TextBox.SelectionForegroundProperty._ID)) {
            this.ModelChanged.Raise(this, new namespace._TextBoxModelChangedEventArgs(_TextBoxModelChanged.Brush));
            this._Invalidate();
        }
        if (!propd || propd.OwnerType !== TextBox)
            this._OnSubPropertyChanged$TextBoxBase(propd, sender, args);
    };
    TextBox.Instance.OnMouseEnter = function (args) {
        FocusDebug("TextBox.OnMouseEnter");
        this.OnMouseEnter$TextBoxBase(args);
        this.$UpdateVisualState();
    };
    TextBox.Instance.OnMouseLeave = function (args) {
        FocusDebug("TextBox.OnMouseLeave");
        this.OnMouseLeave$TextBoxBase(args);
        this.$UpdateVisualState();
    };
    TextBox.Instance.OnGotFocus = function (e) {
        this.OnGotFocus$TextBoxBase(e);
        this.$UpdateVisualState();
    };
    TextBox.Instance.OnLostFocus = function (e) {
        this.OnLostFocus$TextBoxBase(e);
        this.$UpdateVisualState();
    };
    TextBox.Instance.$GetVisualStateCommon = function () {
        if (!this.IsEnabled) {
            return "Disabled";
        } else if (this.IsReadOnly) {
            return "ReadOnly";
        } else if (this.IsMouseOver) {
            return "MouseOver";
        } else {
            return "Normal";
        }
    };
    namespace.TextBox = Nullstone.FinishCreate(TextBox);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var Bold = Nullstone.Create("Bold", namespace.Span);
    if (!Fayde.IsCanvasEnabled) {
        Bold.Instance.CreateHtmlObjectImpl = function () {
            var rootEl = this.CreateHtmlObjectImpl$Span();
            rootEl.appendChild(document.createElement("b"));
            return rootEl;
        };
        Bold.Instance.GetContentHtmlElement = function () {
            return this.GetRootHtmlElement().firstChild;
        };
    }
    namespace.Bold = Nullstone.FinishCreate(Bold);
})(Nullstone.Namespace("Fayde.Documents"));

(function (namespace) {
    var Hyperlink = Nullstone.Create("Hyperlink", namespace.Span);
    namespace.Hyperlink = Nullstone.FinishCreate(Hyperlink);
})(Nullstone.Namespace("Fayde.Documents"));

(function (namespace) {
    var Italic = Nullstone.Create("Italic", namespace.Span);
    if (!Fayde.IsCanvasEnabled) {
        Italic.Instance.CreateHtmlObjectImpl = function () {
            var rootEl = this.CreateHtmlObjectImpl$Span();
            rootEl.appendChild(document.createElement("i"));
            return rootEl;
        };
        Italic.Instance.GetContentHtmlElement = function () {
            return this.GetRootHtmlElement().firstChild;
        };
    }
    namespace.Italic = Nullstone.FinishCreate(Italic);
})(Nullstone.Namespace("Fayde.Documents"));

(function (namespace) {
    var ColorAnimationUsingKeyFrames = Nullstone.Create("ColorAnimationUsingKeyFrames", namespace.AnimationUsingKeyFrames);
    ColorAnimationUsingKeyFrames.KeyFramesProperty = DependencyProperty.RegisterFull("KeyFrames", function () { return namespace.ColorKeyFrameCollection; }, ColorAnimationUsingKeyFrames, undefined, undefined, { GetValue: function () { return new namespace.ColorKeyFrameCollection(); } });
    Nullstone.AutoProperties(ColorAnimationUsingKeyFrames, [
        ColorAnimationUsingKeyFrames.KeyFramesProperty
    ]);
    ColorAnimationUsingKeyFrames.Annotations = {
        ContentProperty: ColorAnimationUsingKeyFrames.KeyFramesProperty
    };
    namespace.ColorAnimationUsingKeyFrames = Nullstone.FinishCreate(ColorAnimationUsingKeyFrames);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var DoubleAnimationUsingKeyFrames = Nullstone.Create("DoubleAnimationUsingKeyFrames", namespace.AnimationUsingKeyFrames);
    DoubleAnimationUsingKeyFrames.KeyFramesProperty = DependencyProperty.RegisterFull("KeyFrames", function () { return namespace.DoubleKeyFrameCollection; }, DoubleAnimationUsingKeyFrames, undefined, undefined, { GetValue: function () { return new namespace.DoubleKeyFrameCollection(); } });
    Nullstone.AutoProperties(DoubleAnimationUsingKeyFrames, [
        DoubleAnimationUsingKeyFrames.KeyFramesProperty
    ]);
    DoubleAnimationUsingKeyFrames.Annotations = {
        ContentProperty: DoubleAnimationUsingKeyFrames.KeyFramesProperty
    };
    namespace.DoubleAnimationUsingKeyFrames = Nullstone.FinishCreate(DoubleAnimationUsingKeyFrames);
})(Nullstone.Namespace("Fayde.Media.Animation"));

(function (namespace) {
    var ContentControl = Nullstone.Create("ContentControl", namespace.Control);
    ContentControl.Instance.Init = function () {
        this.Init$Control();
        this._ContentSetsParent = true;
    };
    ContentControl.ContentProperty = DependencyProperty.RegisterCore("Content", function () { return Object; }, ContentControl, undefined, function (d, args) { d.OnContentChanged(args.OldValue, args.NewValue); });
    ContentControl.ContentTemplateProperty = DependencyProperty.RegisterCore("ContentTemplate", function () { return namespace.ControlTemplate; }, ContentControl, undefined, function (d, args) { d.OnContentTemplateChanged(args.OldValue, args.NewValue); });
    Nullstone.AutoProperties(ContentControl, [
        ContentControl.ContentProperty,
        ContentControl.ContentTemplateProperty
    ]);
    ContentControl.Instance._CreateFallbackTemplate = function () {
        return new namespace.ControlTemplate(ContentControl, {
            Type: namespace.Grid,
            Children: [
                {
                    Type: namespace.TextBlock,
                    Props: {
                        Text: new Fayde.BindingMarkup()
                    }
                }
            ]
        });
    };
    ContentControl.Instance._GetFallbackRoot = function () {
        if (this._FallbackRoot == null) {
            if (!ContentControl._FallbackTemplate)
                ContentControl._FallbackTemplate = this._CreateFallbackTemplate();
            this._FallbackRoot = ContentControl._FallbackTemplate.GetVisualTree(this);
        }
        return this._FallbackRoot;
    };
    ContentControl.Instance.OnContentChanged = function (oldContent, newContent) {
    };
    ContentControl.Instance.OnContentTemplateChanged = function (oldContentTemplate, newContentTemplate) {
    };
    ContentControl.Instance._GetDefaultTemplate = function () {
        var content = this.Content;
        if (!content)
            return null;
        var uie = Nullstone.As(content, Fayde.UIElement);
        if (uie)
            return uie;
        return this._GetDefaultTemplate$Control();
    };
    ContentControl.Instance._GetDefaultTemplateCallback = function () {
        return this._GetFallbackRoot();
    };
    ContentControl.Instance._OnPropertyChanged = function (args, error) {
        if (args.Property.OwnerType !== ContentControl) {
            this._OnPropertyChanged$Control(args, error);
            return;
        }
        if (args.Property._ID === ContentControl.ContentProperty._ID) {
            if (args.OldValue && args.OldValue instanceof Fayde.UIElement) {
                if (args.OldValue instanceof Fayde.FrameworkElement) {
                    if (this._ContentSetsParent) {
                        args.OldValue._SetLogicalParent(null, error);
                        if (error.IsErrored())
                            return;
                    }
                }
                this._ElementRemoved(args.OldValue);
                this._SubtreeObject = null;
            }
            if (args.NewValue && args.NewValue instanceof Fayde.FrameworkElement) {
                if (this._ContentSetsParent) {
                    args.NewValue._SetLogicalParent(this, error);
                    if (error.IsErrored())
                        return;
                }
            }
            this._InvalidateMeasure();
        }
        this.PropertyChanged.Raise(this, args);
    };
    ContentControl.Annotations = {
        ContentProperty: ContentControl.ContentProperty
    };
    namespace.ContentControl = Nullstone.FinishCreate(ContentControl);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var Frame = Nullstone.Create("Frame", namespace.ContentControl);
    Frame.Instance.Init = function () {
        this.Init$ContentControl();
        this.Loaded.Subscribe(this._FrameLoaded, this);
        this.Navigated = new MulticastEvent();
        this.Navigating = new MulticastEvent();
        this.NavigationFailed = new MulticastEvent();
        this.NavigationStopped = new MulticastEvent();
        this.FragmentNavigation = new MulticastEvent();
    };
    Frame.IsDeepLinkedProperty = DependencyProperty.Register("IsDeepLinked", function () { return Boolean; }, Frame, true);
    Frame.CurrentSourceProperty = DependencyProperty.RegisterReadOnly("CurrentSource", function () { return Uri; }, Frame);
    Frame.SourceProperty = DependencyProperty.Register("Source", function () { return Uri; }, Frame, undefined, function (d, args) { d.SourcePropertyChanged(args); });
    Frame.UriMapperProperty = DependencyProperty.Register("UriMapper", function () { return Fayde.Navigation.UriMapper; }, Frame);
    Nullstone.AutoPropertiesReadOnly(Frame, [
        Frame.CurrentSourceProperty
    ]);
    Nullstone.AutoProperties(Frame, [
        Frame.IsDeepLinkedProperty,
        Frame.SourceProperty,
        Frame.UriMapperProperty
    ]);
    Frame.Instance.GoForward = function () {
    };
    Frame.Instance.GoBackward = function () {
    };
    Frame.Instance.StopLoading = function () {
        if (this._Request) {
            this._Request.Cancel();
            this._Request = null;
        }
    };
    Frame.Instance.Navigate = function (source) {
        var ns = this;
        this._Request = new AjaxJsonRequest(function (responseJson) { ns._HandleSuccessfulResponse(responseJson); },
            function (error) { ns._HandleErrorResponse(error); });
        this._Request.Get(source.toString());
    };
    Frame.Instance.SourcePropertyChanged = function (args) {
        if (true)//if loaded and not updating source from nav service
            d.Navigate(args.NewValue);
    };
    Frame.Instance._FrameLoaded = function (sender, e) {
        this._NavService = App.Instance.NavService;
        if (this.IsDeepLinked) {
            this._NavService.LocationChanged.Subscribe(this._HandleDeepLink, this);
            this._HandleDeepLink();
        }
    };
    Frame.Instance._HandleDeepLink = function () {
        var source = this._NavService.Href + "#" + this._NavService.Hash;
        this.$SetValueInternal(Frame.CurrentSourceProperty, source);
        this._LoadContent(this._NavService.Href, this._NavService.Hash);
    };
    Frame.Instance._LoadContent = function (href, hash) {
        this.StopLoading();
        var scriptUrl = href + "?js=true&p=" + hash;
        var ns = this;
        Nullstone.ImportJsFile(scriptUrl, function (script) {
            this._Request = new AjaxJsonRequest(function (responseJson) { ns._HandleSuccessfulResponse(responseJson); },
                function (error) { ns._HandleErrorResponse(error); });
            this._Request.Get(href, "p=" + hash);
        });
    };
    Frame.Instance._HandleSuccessfulResponse = function (responseJson) {
        var page = Fayde.JsonParser.Parse(responseJson);
        if (page instanceof namespace.Page) {
            document.title = page.Title;
            this.Content = page;
        }
        this._Request = null;
    };
    Frame.Instance._HandleErrorResponse = function (error) {
        this._Request = null;
    };
    namespace.Frame = Nullstone.FinishCreate(Frame);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ListBoxItem = Nullstone.Create("ListBoxItem", namespace.ContentControl);
    ListBoxItem.Instance.Init = function () {
        this.Init$ContentControl();
        this._ParentSelectorChanged = new MulticastEvent();
        this.DefaultStyleKey = this.constructor;
    };
    ListBoxItem.IsSelectedProperty = DependencyProperty.RegisterCore("IsSelected", function () { return Boolean; }, ListBoxItem, null, function (d, args) { d.OnIsSelectedChanged(args); });
    Nullstone.AutoProperties(ListBoxItem, [
        ListBoxItem.IsSelectedProperty
    ]);
    Nullstone.Property(ListBoxItem, "ParentSelector", {
        get: function () { return this._ParentSelector; },
        set: function (value) {
            if (Nullstone.RefEquals(this._ParentSelector, value))
                return;
            this._ParentSelector = value;
            this._ParentSelectorChanged.Raise(this, new EventArgs());
        }
    });
    ListBoxItem.Instance.OnApplyTemplate = function () {
        this.OnApplyTemplate$ContentControl();
        this.$UpdateVisualState(false);
    };
    ListBoxItem.Instance.OnIsSelectedChanged = function (e) {
        this.$UpdateVisualState();
    };
    ListBoxItem.Instance.InvokeLoaded = function () {
        this.InvokeLoaded$ContentControl();
        if (this._ParentSelector != null) {
            this._ParentSelector.NotifyListItemLoaded(this);
        }
    };
    ListBoxItem.Instance.OnMouseLeftButtonDown = function (sender, args) {
        if (args.Handled)
            return;
        args.Handled = true;
        if (!this.Focus(true))
            return;
        if (this._ParentSelector != null) {
            this._ParentSelector.NotifyListItemClicked(this);
        }
    };
    ListBoxItem.Instance.OnMouseEnter = function (e) {
        this.OnMouseEnter$ContentControl(e);
        this.$UpdateVisualState();
    };
    ListBoxItem.Instance.OnMouseLeave = function (e) {
        this.OnMouseLeave$ContentControl(e);
        this.$UpdateVisualState();
    };
    ListBoxItem.Instance.OnGotFocus = function (e) {
        this.OnGotFocus$ContentControl(e);
        this.$UpdateVisualState();
        if (this._ParentSelector != null) {
            this._ParentSelector.NotifyListItemGotFocus(this);
        }
    };
    ListBoxItem.Instance.OnLostFocus = function (e) {
        this.OnLostFocus$ContentControl(e);
        this.$UpdateVisualState();
        if (this._ParentSelector != null) {
            this._ParentSelector.NotifyListItemLostFocus(this);
        }
    };
    ListBoxItem.Instance.$GetVisualStateNamesToActivate = function () {
        var arr = this.$GetVisualStateNamesToActivate$ContentControl();
        arr.push(this.$GetVisualStateSelection());
        return arr;
    };
    ListBoxItem.Instance.$GetVisualStateCommon = function () {
        if (!this.IsEnabled) {
            return this.Content instanceof Control ? "Normal" : "Disabled";
        } else if (this.IsMouseOver) {
            return "MouseOver";
        } else {
            return "Normal";
        }
    };
    ListBoxItem.Instance.$GetVisualStateSelection = function () {
        if (this.IsSelected) {
            return this.IsFocused ? "Selected" : "SelectedUnfocused";
        } else {
            return "Unselected";
        }
    };
    namespace.ListBoxItem = Nullstone.FinishCreate(ListBoxItem);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ScrollViewer = Nullstone.Create("ScrollViewer", namespace.ContentControl);
    ScrollViewer.Instance.Init = function () {
        this.Init$ContentControl();
        this.RequestBringIntoView.Subscribe(this._OnRequestBringIntoView, this);
        this.DefaultStyleKey = this.constructor;
    };
    ScrollViewer.OnScrollBarVisibilityPropertyChanged = function (d, args) {
        if (!d)
            return;
        var scrollViewer = Nullstone.As(d, ScrollViewer);
        if (scrollViewer != null) {
            d._InvalidateMeasure();
            var scrollInfo = d.GetScrollInfo();
            if (scrollInfo) {
                scrollInfo.CanHorizontallyScroll = d.HorizontalScrollBarVisibility !== namespace.ScrollBarVisibility.Disabled;
                scrollInfo.CanVerticallyScroll = d.VerticalScrollBarVisibility !== namespace.ScrollBarVisibility.Disabled;
            }
            d._UpdateScrollBarVisibility();
            return;
        }
        var listbox = Nullstone.As(d, namespace.ListBox);
        if (listbox != null && listbox.$TemplateScrollViewer != null) {
            listbox.$TemplateScrollViewer.$SetValue(args.Property, args.NewValue);
            return;
        }
    };
    ScrollViewer.HorizontalScrollBarVisibilityProperty = DependencyProperty.RegisterAttachedCore("HorizontalScrollBarVisibility", function () { return new Enum(namespace.ScrollBarVisibility); }, ScrollViewer, namespace.ScrollBarVisibility.Disabled, ScrollViewer.OnScrollBarVisibilityPropertyChanged);
    ScrollViewer.VerticalScrollBarVisibilityProperty = DependencyProperty.RegisterAttachedCore("VerticalScrollBarVisibility", function () { return new Enum(namespace.ScrollBarVisibility); }, ScrollViewer, namespace.ScrollBarVisibility.Disabled, ScrollViewer.OnScrollBarVisibilityPropertyChanged);
    ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty = DependencyProperty.RegisterReadOnlyCore("ComputedHorizontalScrollBarVisibility", function () { return new Enum(Fayde.Visibility); }, ScrollViewer);
    ScrollViewer.ComputedVerticalScrollBarVisibilityProperty = DependencyProperty.RegisterReadOnlyCore("ComputedVerticalScrollBarVisibility", function () { return new Enum(Fayde.Visibility); }, ScrollViewer);
    ScrollViewer.HorizontalOffsetProperty = DependencyProperty.RegisterReadOnlyCore("HorizontalOffset", function () { return Number; }, ScrollViewer);
    ScrollViewer.VerticalOffsetProperty = DependencyProperty.RegisterReadOnlyCore("VerticalOffset", function () { return Number; }, ScrollViewer);
    ScrollViewer.ScrollableWidthProperty = DependencyProperty.RegisterReadOnlyCore("ScrollableWidth", function () { return Number; }, ScrollViewer);
    ScrollViewer.ScrollableHeightProperty = DependencyProperty.RegisterReadOnlyCore("ScrollableHeight", function () { return Number; }, ScrollViewer);
    ScrollViewer.ViewportWidthProperty = DependencyProperty.RegisterReadOnlyCore("ViewportWidth", function () { return Number; }, ScrollViewer);
    ScrollViewer.ViewportHeightProperty = DependencyProperty.RegisterReadOnlyCore("ViewportHeight", function () { return Number; }, ScrollViewer);
    ScrollViewer.ExtentWidthProperty = DependencyProperty.RegisterReadOnlyCore("ExtentWidth", function () { return Number; }, ScrollViewer);
    ScrollViewer.ExtentHeightProperty = DependencyProperty.RegisterReadOnlyCore("ExtentHeight", function () { return Number; }, ScrollViewer);
    Nullstone.AutoPropertiesReadOnly(ScrollViewer, [
        ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty,
        ScrollViewer.ComputedVerticalScrollBarVisibilityProperty,
        ScrollViewer.HorizontalOffsetProperty,
        ScrollViewer.VerticalOffsetProperty,
        ScrollViewer.ScrollableWidthProperty,
        ScrollViewer.ScrollableHeightProperty,
        ScrollViewer.ViewportWidthProperty,
        ScrollViewer.ViewportHeightProperty,
        ScrollViewer.ExtentWidthProperty,
        ScrollViewer.ExtentHeightProperty
    ]);
    Nullstone.Property(ScrollViewer, "HorizontalScrollBarVisibility", {
        get: function () {
            return this.$GetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty);
        },
        set: function (value) {
            return this.$SetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty, value);
        }
    });
    Nullstone.Property(ScrollViewer, "VerticalScrollBarVisibility", {
        get: function () {
            return this.$GetValue(ScrollViewer.VerticalScrollBarVisibilityProperty);
        },
        set: function (value) {
            return this.$SetValue(ScrollViewer.VerticalScrollBarVisibilityProperty, value);
        }
    });
    ScrollViewer.GetHorizontalScrollBarVisibility = function (d) {
        return d.$GetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty);
    };
    ScrollViewer.SetHorizontalScrollBarVisibility = function (d, value) {
        d.$SetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty, value);
    };
    ScrollViewer.GetVerticalScrollBarVisibility = function (d) {
        return d.$GetValue(ScrollViewer.VerticalScrollBarVisibilityProperty);
    };
    ScrollViewer.SetVerticalScrollBarVisibility = function (d, value) {
        d.$SetValue(ScrollViewer.VerticalScrollBarVisibilityProperty, value);
    };
    ScrollViewer.Instance.GetScrollInfo = function () {
        return this.$ScrollInfo;
    };
    ScrollViewer.Instance.SetScrollInfo = function (value) {
        this.$ScrollInfo = value;
        if (value) {
            value.CanHorizontallyScroll = this.HorizontalScrollBarVisibility !== namespace.ScrollBarVisibility.Disabled;
            value.CanVerticallyScroll = this.VerticalScrollBarVisibility !== namespace.ScrollBarVisibility.Disabled;
        }
    };
    ScrollViewer.Instance.LineUp = function () {
        this._HandleVerticalScroll(new namespace.Primitives.ScrollEventArgs(namespace.Primitives.ScrollEventType.SmallDecrement, 0));
    };
    ScrollViewer.Instance.LineDown = function () {
        this._HandleVerticalScroll(new namespace.Primitives.ScrollEventArgs(namespace.Primitives.ScrollEventType.SmallIncrement, 0));
    };
    ScrollViewer.Instance.LineLeft = function () {
        this._HandleHorizontalScroll(new namespace.Primitives.ScrollEventArgs(namespace.Primitives.ScrollEventType.SmallDecrement, 0));
    };
    ScrollViewer.Instance.LineRight = function () {
        this._HandleHorizontalScroll(new namespace.Primitives.ScrollEventArgs(namespace.Primitives.ScrollEventType.SmallIncrement, 0));
    };
    ScrollViewer.Instance.PageHome = function () {
        this._HandleHorizontalScroll(new namespace.Primitives.ScrollEventArgs(namespace.Primitives.ScrollEventType.First, 0));
    };
    ScrollViewer.Instance.PageEnd = function () {
        this._HandleHorizontalScroll(new namespace.Primitives.ScrollEventArgs(namespace.Primitives.ScrollEventType.Last, 0));
    };
    ScrollViewer.Instance.PageUp = function () {
        this._HandleVerticalScroll(new namespace.Primitives.ScrollEventArgs(namespace.Primitives.ScrollEventType.LargeDecrement, 0));
    };
    ScrollViewer.Instance.PageDown = function () {
        this._HandleVerticalScroll(new namespace.Primitives.ScrollEventArgs(namespace.Primitives.ScrollEventType.LargeIncrement, 0));
    };
    ScrollViewer.Instance.PageLeft = function () {
        this._HandleHorizontalScroll(new namespace.Primitives.ScrollEventArgs(namespace.Primitives.ScrollEventType.LargeDecrement, 0));
    };
    ScrollViewer.Instance.PageRight = function () {
        this._HandleHorizontalScroll(new namespace.Primitives.ScrollEventArgs(namespace.Primitives.ScrollEventType.LargeIncrement, 0));
    };
    ScrollViewer.Instance._ScrollInDirection = function (key) {
        switch (key) {
            case Key.PageUp:
                this.PageUp();
                break;
            case Key.PageDown:
                this.PageDown();
                break;
            case Key.End:
                this.PageEnd();
                break;
            case Key.Home:
                this.PageHome();
                break;
            case Key.Left:
                this.LineLeft();
                break;
            case Key.Up:
                this.LineUp();
                break;
            case Key.Right:
                this.LineRight();
                break;
            case Key.Down:
                this.LineDown();
                break;
        }
    };
    ScrollViewer.Instance.ScrollToHorizontalOffset = function (offset) {
        this._HandleHorizontalScroll(new namespace.Primitives.ScrollEventArgs(namespace.Primitives.ScrollEventType.ThumbPosition, offset));
    };
    ScrollViewer.Instance.ScrollToVerticalOffset = function (offset) {
        this._HandleVerticalScroll(new namespace.Primitives.ScrollEventArgs(namespace.Primitives.ScrollEventType.ThumbPosition, offset));
    };
    ScrollViewer.Instance._HandleScroll = function (orientation, e) {
        if (orientation !== Fayde.Orientation.Horizontal)
            this._HandleVerticalScroll(e);
        else
            this._HandleHorizontalScroll(e);
    };
    ScrollViewer.Instance._HandleHorizontalScroll = function (e) {
        var scrollInfo = this.GetScrollInfo();
        if (!scrollInfo)
            return;
        var offset = scrollInfo.HorizontalOffset;
        var newValue = offset;
        switch (e.ScrollEventType) {
            case namespace.Primitives.ScrollEventType.SmallDecrement:
                scrollInfo.LineLeft();
                break;
            case namespace.Primitives.ScrollEventType.SmallIncrement:
                scrollInfo.LineRight();
                break;
            case namespace.Primitives.ScrollEventType.LargeDecrement:
                scrollInfo.PageLeft();
                break;
            case namespace.Primitives.ScrollEventType.LargeIncrement:
                scrollInfo.PageRight();
                break;
            case namespace.Primitives.ScrollEventType.ThumbPosition:
            case namespace.Primitives.ScrollEventType.ThumbTrack:
                newValue = e.Value;
                break;
            case namespace.Primitives.ScrollEventType.First:
                newValue = -1.79769313486232E+308;
                break;
            case namespace.Primitives.ScrollEventType.Last:
                newValue = 1.79769313486232E+308;
                break;
        }
        newValue = Math.max(newValue, 0);
        newValue = Math.min(this.ScrollableWidth, newValue);
        if (!DoubleUtil.AreClose(offset, newValue))
            scrollInfo.HorizontalOffset = newValue;
    };
    ScrollViewer.Instance._HandleVerticalScroll = function (e) {
        var scrollInfo = this.GetScrollInfo();
        if (!scrollInfo)
            return;
        var offset = scrollInfo.VerticalOffset;
        var newValue = offset;
        switch (e.ScrollEventType) {
            case namespace.Primitives.ScrollEventType.SmallDecrement:
                scrollInfo.LineUp();
                break;
            case namespace.Primitives.ScrollEventType.SmallIncrement:
                scrollInfo.LineDown();
                break;
            case namespace.Primitives.ScrollEventType.LargeDecrement:
                scrollInfo.PageUp();
                break;
            case namespace.Primitives.ScrollEventType.LargeIncrement:
                scrollInfo.PageDown();
                break;
            case namespace.Primitives.ScrollEventType.ThumbPosition:
            case namespace.Primitives.ScrollEventType.ThumbTrack:
                newValue = e.Value;
                break;
            case namespace.Primitives.ScrollEventType.First:
                newValue = -1.79769313486232E+308;
                break;
            case namespace.Primitives.ScrollEventType.Last:
                newValue = 1.79769313486232E+308;
                break;
        }
        newValue = Math.max(newValue, 0);
        newValue = Math.min(this.ScrollableHeight, newValue);
        if (!DoubleUtil.AreClose(offset, newValue))
            scrollInfo.VerticalOffset = newValue;
    };
    ScrollViewer.Instance.OnMouseLeftButtonDown = function (sender, args) {
        if (!args.Handled && this.Focus())
            args.Handled = true;
        this.OnMouseLeftButtonDown$ContentControl(sender, args);
    };
    ScrollViewer.Instance.OnMouseWheel = function (sender, args) {
        this.OnMouseWheel$ContentControl(sender, args);
        if (args.Handled)
            return;
        var scrollInfo = this.GetScrollInfo();
        if (!scrollInfo)
            return;
        if ((args.Delta > 0 && scrollInfo.VerticalOffset !== 0) || (args.Delta < 0 && scrollInfo.VerticalOffset < this.ScrollableHeight)) {
            if (args.Delta >= 0)
                scrollInfo.MouseWheelUp();
            else
                scrollInfo.MouseWheelDown();
            args.Handled = true;
        }
    };
    ScrollViewer.Instance.OnKeyDown = function (args) {
        this.OnKeyDown$ContentControl(args);
        this._HandleKeyDown(args);
    };
    ScrollViewer.Instance._HandleKeyDown = function (args) {
        if (args.Handled)
            return;
        if (!this.$TemplatedParentHandlesScrolling)
            return;
        var orientation = Fayde.Orientation.Vertical;
        var scrollEventType = namespace.Primitives.ScrollEventType.ThumbTrack;
        switch (args.Key) {
            case Key.PageUp:
                scrollEventType = namespace.Primitives.ScrollEventType.LargeDecrement;
                break;
            case Key.PageDown:
                scrollEventType = namespace.Primitives.ScrollEventType.LargeIncrement;
                break;
            case Key.End:
                if (!args.Modifiers.Ctrl)
                    orientation = Fayde.Orientation.Horizontal;
                scrollEventType = namespace.Primitives.ScrollEventType.Last;
                break;
            case Key.Home:
                if (!args.Modifiers.Ctrl)
                    orientation = Fayde.Orientation.Horizontal;
                scrollEventType = namespace.Primitives.ScrollEventType.First;
                break;
            case Key.Left:
                orientation = Fayde.Orientation.Horizontal;
                scrollEventType = namespace.Primitives.ScrollEventType.SmallDecrement;
            case Key.Up:
                scrollEventType = namespace.Primitives.ScrollEventType.SmallDecrement;
                break;
            case Key.Right:
                orientation = Fayde.Orientation.Horizontal;
                scrollEventType = namespace.Primitives.ScrollEventType.SmallIncrement;
            case Key.Down:
                scrollEventType = namespace.Primitives.ScrollEventType.SmallIncrement;
                break;
        }
        if (scrollEventType !== namespace.Primitives.ScrollEventType.ThumbTrack) {
            this._HandleScroll(orientation, new namespace.Primitives.ScrollEventArgs(scrollEventType, 0));
            args.Handled = true;
        }
    };
    ScrollViewer.Instance.OnApplyTemplate = function () {
        this.OnApplyTemplate$ContentControl();
        this.$ElementScrollContentPresenter = Nullstone.As(this.GetTemplateChild("ScrollContentPresenter"), namespace.ScrollContentPresenter);
        this.$ElementHorizontalScrollBar = Nullstone.As(this.GetTemplateChild("HorizontalScrollBar"), namespace.Primitives.ScrollBar);
        if (this.$ElementHorizontalScrollBar) {
            this.$ElementHorizontalScrollBar.Scroll.Subscribe(function (sender, e) { this._HandleScroll(Fayde.Orientation.Horizontal, e); }, this);
        }
        this.$ElementVerticalScrollBar = Nullstone.As(this.GetTemplateChild("VerticalScrollBar"), namespace.Primitives.ScrollBar);
        if (this.$ElementVerticalScrollBar) {
            this.$ElementVerticalScrollBar.Scroll.Subscribe(function (sender, e) { this._HandleScroll(Fayde.Orientation.Vertical, e); }, this);
        }
        this._UpdateScrollBarVisibility();
    };
    ScrollViewer.Instance.MakeVisible = function (uie, targetRect) {
        var escp = this.$ElementScrollContentPresenter;
        if (uie && escp && (Nullstone.RefEquals(escp, uie) || escp.IsAncestorOf(uie)) && this.IsAncestorOf(escp) && this._IsAttached) {
            if (targetRect.IsEmpty()) {
                targetRect = new Rect(0, 0, uie._RenderSize.Width, uie._RenderSize.Height);
            }
            var rect2 = escp.MakeVisible(uie, targetRect);
            if (!rect2.IsEmpty()) {
                var p = escp.TransformToVisual(this).Transform(new Point(rect2.X, rect2.Y));
                rect2.X = p.X;
                rect2.Y = p.Y;
            }
            this.BringIntoView(rect2);
        }
    };
    ScrollViewer.Instance._InvalidateScrollInfo = function () {
        var scrollInfo = this.GetScrollInfo();
        if (scrollInfo) {
            this.$SetValueInternal(ScrollViewer.ExtentWidthProperty, scrollInfo.ExtentWidth);
            this.$SetValueInternal(ScrollViewer.ExtentHeightProperty, scrollInfo.ExtentHeight);
            this.$SetValueInternal(ScrollViewer.ViewportWidthProperty, scrollInfo.ViewportWidth);
            this.$SetValueInternal(ScrollViewer.ViewportHeightProperty, scrollInfo.ViewportHeight);
            this._UpdateScrollBar(Fayde.Orientation.Horizontal, scrollInfo.HorizontalOffset);
            this._UpdateScrollBar(Fayde.Orientation.Vertical, scrollInfo.VerticalOffset);
            this._UpdateScrollBarVisibility();
        }
        this._RaiseViewportChanged(this.ViewportWidth, this.ViewportHeight);
        var w = Math.max(0, this.ExtentWidth - this.ViewportWidth);
        if (w !== this.ScrollableWidth) {
            this.$SetValueInternal(ScrollViewer.ScrollableWidthProperty, w);
            this._InvalidateMeasure();
        }
        var h = Math.max(0, this.ExtentHeight - this.ViewportHeight);
        if (h !== this.ScrollableHeight) {
            this.$SetValueInternal(ScrollViewer.ScrollableHeightProperty, h);
            this._InvalidateMeasure();
        }
    };
    ScrollViewer.Instance._UpdateScrollBarVisibility = function () {
        var scrollInfo = this.GetScrollInfo();
        var horizontalVisibility = Fayde.Visibility.Visible;
        var hsbv = this.HorizontalScrollBarVisibility;
        switch (hsbv) {
            case namespace.ScrollBarVisibility.Visible:
                break;
            case namespace.ScrollBarVisibility.Disabled:
            case namespace.ScrollBarVisibility.Hidden:
                horizontalVisibility = Fayde.Visibility.Collapsed;
                break;
            case namespace.ScrollBarVisibility.Auto:
            default:
                horizontalVisibility = (!scrollInfo || scrollInfo.ExtentWidth <= scrollInfo.ViewportWidth) ? Fayde.Visibility.Collapsed : Fayde.Visibility.Visible;
                break;
        }
        if (horizontalVisibility !== this.ComputedHorizontalScrollBarVisibility) {
            this.$SetValueInternal(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty, horizontalVisibility);
            this._RaiseVisibilityChanged(horizontalVisibility, Fayde.Orientation.Horizontal);
            this._InvalidateMeasure();
        }
        var verticalVisibility = Fayde.Visibility.Visible;
        var vsbv = this.VerticalScrollBarVisibility;
        switch (vsbv) {
            case namespace.ScrollBarVisibility.Visible:
                break;
            case namespace.ScrollBarVisibility.Disabled:
            case namespace.ScrollBarVisibility.Hidden:
                verticalVisibility = Fayde.Visibility.Collapsed;
                break;
            case namespace.ScrollBarVisibility.Auto:
            default:
                verticalVisibility = (!scrollInfo || scrollInfo.ExtentHeight <= scrollInfo.ViewportHeight) ? Fayde.Visibility.Collapsed : Fayde.Visibility.Visible;
                break;
        }
        if (verticalVisibility !== this.ComputedVerticalScrollBarVisibility) {
            this.$SetValueInternal(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty, verticalVisibility);
            this._RaiseVisibilityChanged(verticalVisibility, Fayde.Orientation.Vertical);
            this._InvalidateMeasure();
        }
    };
    ScrollViewer.Instance._UpdateScrollBar = function (orientation, value) {
        try {
            var scrollInfo = this.GetScrollInfo();
            if (orientation === Fayde.Orientation.Horizontal) {
                this.$SetValueInternal(ScrollViewer.HorizontalOffsetProperty, value);
                this._RaiseOffsetChanged(scrollInfo.HorizontalOffset, Fayde.Orientation.Horizontal);
                if (this.$ElementHorizontalScrollBar) {
                    this.$ElementHorizontalScrollBar.Value = value;
                }
            } else {
                this.$SetValueInternal(ScrollViewer.VerticalOffsetProperty, value);
                this._RaiseOffsetChanged(scrollInfo.VerticalOffset, Fayde.Orientation.Vertical);
                if (this.$ElementVerticalScrollBar) {
                    this.$ElementVerticalScrollBar.Value = value;
                }
            }
        } finally {
        }
    };
    ScrollViewer.Instance._RaiseOffsetChanged = function (offset, orientation) {
    };
    ScrollViewer.Instance._RaiseVisibilityChanged = function (visibility, orientation) {
    };
    ScrollViewer.Instance._RaiseViewportChanged = function (viewportWidth, viewportHeight) {
    };
    ScrollViewer.Instance._OnRequestBringIntoView = function (sender, args) {
        var sv = Nullstone.As(sender, ScrollViewer);
        var targetObj = args.TargetObject;
        if (targetObj && sv && !Nullstone.RefEquals(sv, targetObj) && sv.IsAncestorOf(targetObj)) {
            sv.MakeVisible(targetObj, args.TargetRect);
            args.Handled = true;
        }
    };
    namespace.ScrollViewer = Nullstone.FinishCreate(ScrollViewer);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ToolTip = Nullstone.Create("ToolTip", namespace.ContentControl);
    ToolTip.HorizontalOffsetProperty = DependencyProperty.Register("HorizontalOffset", function () { return Number; }, ToolTip);
    ToolTip.IsOpenProperty = DependencyProperty.Register("IsOpen", function () { return Boolean; }, ToolTip);
    ToolTip.PlacementProperty = DependencyProperty.Register("Placement", function () { return new Enum(namespace.PlacementMode); }, ToolTip);
    ToolTip.PlacementTargetProperty = DependencyProperty.Register("PlacementTarget", function () { return Fayde.UIElement; }, ToolTip);
    ToolTip.VerticalOffsetProperty = DependencyProperty.Register("VerticalOffset", function () { return Number; }, ToolTip);
    Nullstone.AutoProperties(ToolTip, [
        ToolTip.HorizontalOffsetProperty,
        ToolTip.IsOpenProperty,
        ToolTip.PlacementProperty,
        ToolTip.PlacementTargetProperty,
        ToolTip.VerticalOffsetProperty
    ]);
    namespace.ToolTip = Nullstone.FinishCreate(ToolTip);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ButtonBase = Nullstone.Create("ButtonBase", Fayde.Controls.ContentControl);
    ButtonBase.Instance.Init = function () {
        this.Init$ContentControl();
        this._IsMouseCaptured = false;
        this._IsMouseLeftButtonDown = false;
        this._IsSpaceKeyDown = false;
        this._MousePosition = new Point();
        this.Click = new MulticastEvent();
        this.Loaded.Subscribe(function () { this._IsLoaded = true; this.$UpdateVisualState(); }, this);
        this.IsTabStop = true;
    }
    ButtonBase.ClickModeProperty = DependencyProperty.Register("ClickMode", function () { return new Enum(Fayde.Controls.ClickMode); }, ButtonBase, Fayde.Controls.ClickMode.Release);
    ButtonBase.IsPressedProperty = DependencyProperty.RegisterReadOnly("IsPressed", function () { return Boolean; }, ButtonBase, false, function (d, args) { d.OnIsPressedChanged(args); });
    ButtonBase.IsFocusedProperty = DependencyProperty.RegisterReadOnly("IsFocused", function () { return Boolean; }, ButtonBase, false);
    ButtonBase.CommandProperty = DependencyProperty.RegisterCore("Command", function () { return Fayde.Input.ICommand; }, ButtonBase, undefined, function (d, args) { d.OnCommandPropertyChanged(args); });
    ButtonBase.CommandParameterProperty = DependencyProperty.RegisterCore("CommandParameter", function () { return Object; }, ButtonBase, undefined, function (d, args) { d.OnCommandParameterPropertyChanged(args); });
    ButtonBase.Instance.OnCommandPropertyChanged = function (args) {
        var cmd = Nullstone.As(args.OldValue, Fayde.Input.ICommand);
        if (cmd != null)
            cmd.CanExecuteChanged.Unsubscribe(this.OnCommandCanExecuteChanged, this);
        cmd = Nullstone.As(args.NewValue, Fayde.Input.ICommand);
        if (cmd != null) {
            cmd.CanExecuteChanged.Subscribe(this.OnCommandCanExecuteChanged, this);
            this.IsEnabled = cmd.CanExecute(this.CommandParameter);
        }
    };
    ButtonBase.Instance.OnCommandCanExecuteChanged = function (sender, e) {
        this.IsEnabled = this.Command.CanExecute(this.CommandParameter);
    };
    ButtonBase.Instance.OnCommandParameterPropertyChanged = function (args) {
        var cmd = this.Command;
        if (cmd == null)
            return;
        this.IsEnabled = cmd.CanExecute(args.NewValue);
    };
    Nullstone.AutoProperties(ButtonBase, [
        ButtonBase.ClickModeProperty,
        ButtonBase.CommandProperty,
        ButtonBase.CommandParameterProperty
    ]);
    Nullstone.AutoPropertiesReadOnly(ButtonBase, [
        ButtonBase.IsPressedProperty
    ]);
    Nullstone.AutoProperty(ButtonBase, ButtonBase.IsFocusedProperty, undefined, true);
    ButtonBase.Instance.OnIsEnabledChanged = function (e) {
        var isEnabled = e.NewValue;
        this._SuspendStateChanges = true;
        try {
            if (!isEnabled) {
                this.$SetValueInternal(ButtonBase.IsFocusedProperty, false);
                this.$SetValueInternal(ButtonBase.IsPressedProperty, false);
                this._IsMouseCaptured = false;
                this._IsSpaceKeyDown = false;
                this._IsMouseLeftButtonDown = false;
            }
        } finally {
            this._SuspendStateChanges = false;
            this.$UpdateVisualState();
        }
    };
    ButtonBase.Instance.OnIsPressedChanged = function (e) {
        this.$UpdateVisualState();
    };
    ButtonBase.Instance.$UpdateVisualState = function (useTransitions) {
        if (this._SuspendStateChanges)
            return;
        this.$UpdateVisualState$ContentControl(useTransitions);
    };
    ButtonBase.Instance.$GetVisualStateCommon = function () {
        if (!this.IsEnabled) {
            return "Disabled";
        } else if (this.IsPressed) {
            return "Pressed";
        } else if (this.IsMouseOver) {
            return "MouseOver";
        } else {
            return "Normal";
        }
    };
    ButtonBase.Instance.OnMouseEnter = function (args) {
        this.OnMouseEnter$ContentControl(args);
        this._SuspendStateChanges = true;
        try {
            if (this.ClickMode === Fayde.Controls.ClickMode.Hover && this.IsEnabled) {
                this.$SetValueInternal(ButtonBase.IsPressedProperty, true);
                this.OnClick();
            }
        } finally {
            this._SuspendStateChanges = false;
            this.$UpdateVisualState();
        }
    };
    ButtonBase.Instance.OnMouseLeave = function (args) {
        this.OnMouseLeave$ContentControl(args);
        this._SuspendStateChanges = true;
        try {
            if (this.ClickMode === Fayde.Controls.ClickMode.Hover && this.IsEnabled)
                this.$SetValueInternal(ButtonBase.IsPressedProperty, false);
        } finally {
            this._SuspendStateChanges = false;
            this.$UpdateVisualState();
        }
    };
    ButtonBase.Instance.OnMouseMove = function (sender, args) {
        this.OnMouseMove$ContentControl(sender, args);
        this._MousePosition = args.GetPosition(this);
        if (this._IsMouseLeftButtonDown && this.IsEnabled && this.ClickMode !== Fayde.Controls.ClickMode.Hover && this._IsMouseCaptured && !this._IsSpaceKeyDown) {
            this.$SetValueInternal(ButtonBase.IsPressedProperty, this._IsValidMousePosition());
        }
    };
    ButtonBase.Instance.OnMouseLeftButtonDown = function (sender, args) {
        this.OnMouseLeftButtonDown$ContentControl(sender, args);
        this._IsMouseLeftButtonDown = true;
        if (!this.IsEnabled)
            return;
        var clickMode = this.ClickMode;
        if (clickMode === Fayde.Controls.ClickMode.Hover)
            return;
        args.Handled = true;
        this._SuspendStateChanges = true;
        try {
            this.Focus();
            this._CaptureMouseInternal();
            if (this._IsMouseCaptured)
                this.$SetValueInternal(ButtonBase.IsPressedProperty, true);
        } finally {
            this._SuspendStateChanges = false;
            this.$UpdateVisualState();
        }
        if (clickMode === Fayde.Controls.ClickMode.Press)
            this.OnClick();
    };
    ButtonBase.Instance.OnMouseLeftButtonUp = function (sender, args) {
        this.OnMouseLeftButtonDown$ContentControl(sender, args);
        this._IsMouseLeftButtonDown = false;
        if (!this.IsEnabled)
            return;
        var clickMode = this.ClickMode;
        if (clickMode === Fayde.Controls.ClickMode.Hover)
            return;
        args.Handled = true;
        if (!this._IsSpaceKeyDown && this.IsPressed && clickMode === Fayde.Controls.ClickMode.Release)
            this.OnClick();
        if (!this._IsSpaceKeyDown) {
            this._ReleaseMouseCaptureInternal();
            this.$SetValueInternal(ButtonBase.IsPressedProperty, false);
        }
    };
    ButtonBase.Instance.OnClick = function () {
        var cmd = this.Command;
        var par = this.CommandParameter;
        if (cmd != null && cmd.CanExecute(par))
            cmd.Execute(par);
        this.Click.Raise(this, new EventArgs());
    };
    ButtonBase.Instance._CaptureMouseInternal = function () {
        if (!this._IsMouseCaptured)
            this._IsMouseCaptured = this.CaptureMouse();
    };
    ButtonBase.Instance._ReleaseMouseCaptureInternal = function () {
        this.ReleaseMouseCapture();
        this._IsMouseCaptured = false;
    };
    ButtonBase.Instance._IsValidMousePosition = function () {
        var pos = this._MousePosition;
        return pos.X >= 0.0 && pos.X <= this.ActualWidth
            && pos.Y >= 0.0 && pos.Y <= this.ActualHeight;
    };
    ButtonBase.Instance.OnGotFocus = function (e) {
        this.OnGotFocus$ContentControl(e);
        this.$SetValueInternal(ButtonBase.IsFocusedProperty, true);
        this.$UpdateVisualState();
    };
    ButtonBase.Instance.OnLostFocus = function (e) {
        this.OnLostFocus$ContentControl(e);
        this.$SetValueInternal(ButtonBase.IsFocusedProperty, false);
        this._SuspendStateChanges = true;
        try {
            if (this.ClickMode !== Fayde.Controls.ClickMode.Hover) {
                this.$SetValueInternal(ButtonBase.IsPressedProperty, false);
                this._ReleaseMouseCaptureInternal();
                this._IsSpaceKeyDown = false;
            }
        } finally {
            this._SuspendStateChanges = false;
            this.$UpdateVisualState();
        }
    };
    namespace.ButtonBase = Nullstone.FinishCreate(ButtonBase);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var RepeatButton = Nullstone.Create("RepeatButton", namespace.ButtonBase);
    RepeatButton.Instance.Init = function () {
        this.Init$ButtonBase();
        this.ClickMode = Fayde.Controls.ClickMode.Press;
        this.DefaultStyleKey = this.constructor;
    };
    RepeatButton.DelayProperty = DependencyProperty.Register("Delay", function () { return Number; }, RepeatButton, 500, function (d, args) { d.OnDelayChanged(args); });
    RepeatButton.IntervalProperty = DependencyProperty.Register("Interval", function () { return Number; }, RepeatButton, 33, function (d, args) { d.OnIntervalChanged(args); });
    Nullstone.AutoProperties(RepeatButton, [
        RepeatButton.DelayProperty,
        RepeatButton.IntervalProperty
    ]);
    RepeatButton.Instance.OnDelayChanged = function (args) {
        if (args.NewValue < 0)
            throw new ArgumentException("Delay Property cannot be negative.");
    };
    RepeatButton.Instance.OnIntervalChanged = function (args) {
        if (args.NewValue < 0)
            throw new ArgumentException("Interval Property cannot be negative.");
    };
    RepeatButton.Instance.OnIsEnabledChanged = function (e) {
        this.OnIsEnabledChanged$ButtonBase(e);
        this._KeyboardCausingRepeat = false;
        this._MouseCausingRepeat = false;
        this._UpdateRepeatState();
    };
    RepeatButton.Instance.OnKeyDown = function (args) {
        if (args.Key === Key.Space && this.ClickMode !== Fayde.Controls.ClickMode.Hover) {
            this._KeyboardCausingRepeat = true;
            this._UpdateRepeatState();
        }
        this.OnKeyDown$ButtonBase(args);
    };
    RepeatButton.Instance.OnKeyUp = function (args) {
        this.OnKeyUp$ButtonBase(args);
        if (args.Key === Key.Space && this.ClickMode !== Fayde.Controls.ClickMode.Hover) {
            this._KeyboardCausingRepeat = false;
            this._UpdateRepeatState();
        }
        this.$UpdateVisualState();
    };
    RepeatButton.Instance.OnLostFocus = function (sender, args) {
        this.OnLostFocus$ButtonBase(sender, args);
        if (this.ClickMode !== Fayde.Controls.ClickMode.Hover) {
            this._KeyboardCausingRepeat = false;
            this._MouseCausingRepeat = false;
            this._UpdateRepeatState();
        }
    };
    RepeatButton.Instance.OnMouseEnter = function (args) {
        this.OnMouseEnter$ButtonBase(args);
        if (this.ClickMode === Fayde.Controls.ClickMode.Hover) {
            this._MouseCausingRepeat = true;
            this._UpdateRepeatState();
        }
        this.$UpdateVisualState();
        var parent = this;
        while (true) {
            var fe = Nullstone.As(parent, Fayde.FrameworkElement);
            if (!fe)
                break;
            parent = fe._GetLogicalParent();
        }
        this._MousePosition = args.GetPosition(parent);
    };
    RepeatButton.Instance.OnMouseLeave = function (args) {
        this.OnMouseLeave$ButtonBase(args);
        if (this.ClickMode === Fayde.Controls.ClickMode.Hover) {
            this._MouseCausingRepeat = false;
            this._UpdateRepeatState();
        }
        this.$UpdateVisualState();
    };
    RepeatButton.Instance.OnMouseLeftButtonDown = function (sender, args) {
        if (args.Handled)
            return;
        this.OnMouseLeftButtonDown$ButtonBase(sender, args);
        if (this.ClickMode !== Fayde.Controls.ClickMode.Hover) {
            this._MouseCausingRepeat = true;
            this._UpdateRepeatState();
        }
    };
    RepeatButton.Instance.OnMouseLeftButtonUp = function (sender, args) {
        if (args.Handled)
            return;
        this.OnMouseLeftButtonUp$ButtonBase(sender, args);
        if (this.ClickMode !== Fayde.Controls.ClickMode.Hover) {
            this._MouseCausingRepeat = false;
            this._UpdateRepeatState();
        }
        this.$UpdateVisualState();
    };
    RepeatButton.Instance.OnMouseMove = function (sender, args) {
        var parent = this;
        while (true) {
            var fe = Nullstone.As(parent, Fayde.FrameworkElement);
            if (!fe)
                break;
            parent = fe._GetLogicalParent();
        }
        this._MousePosition = args.GetPosition(parent);
    };
    RepeatButton.Instance._UpdateRepeatState = function () {
        if (this._MouseCausingRepeat || this._KeyboardCausingRepeat)
            this._StartTimer();
        else
            this._StopTimer();
    };
    RepeatButton.Instance._StartTimer = function () {
        if (!this._Timer) {
            this._Timer = new Timer();
            this._Timer.Tick.Subscribe(this._OnTimeout, this);
        } else if (this._Timer.IsEnabled) {
            return;
        }
        this._Timer.SetInterval(new TimeSpan(0, 0, 0, 0, this.Delay));
        this._Timer.Start();
    };
    RepeatButton.Instance._StopTimer = function () {
        if (this._Timer)
            this._Timer.Stop();
    };
    RepeatButton.Instance._OnTimeout = function (sender, e) {
        var interval = this.Interval;
        var timespan = this._Timer.GetInterval();
        if (timespan.Milliseconds !== interval) {
            this._Timer.SetInterval(new TimeSpan(0, 0, 0, 0, interval));
        }
        if (this.IsPressed || this._KeyboardCausingRepeat) {
            this.OnClick();
            return;
        }
        var els = Fayde.VisualTreeHelper.FindElementsInHostCoordinates(this._MousePosition);
        for (var i = 0; i < els.length; i++) {
            if (Nullstone.RefEquals(els[i], this)) {
                this.OnClick();
                break;
            }
        }
    };
    namespace.RepeatButton = Nullstone.FinishCreate(RepeatButton);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var ToggleButton = Nullstone.Create("ToggleButton", namespace.ButtonBase);
    ToggleButton.Instance.Init = function () {
        this.Init$ButtonBase();
        this.DefaultStyleKey = this.constructor;
        this.Checked = new MulticastEvent();
        this.Indeterminate = new MulticastEvent();
        this.Unchecked = new MulticastEvent();
    };
    ToggleButton.IsCheckedProperty = DependencyProperty.RegisterCore("IsChecked", function () { return Boolean; }, ToggleButton, false, function (d, args) { d._OnIsCheckedChanged(args); });
    ToggleButton.IsThreeStateProperty = DependencyProperty.RegisterCore("IsThreeState", function () { return Boolean; }, ToggleButton, false);
    Nullstone.AutoProperties(ToggleButton, [
        ToggleButton.IsCheckedProperty,
        ToggleButton.IsThreeStateProperty
    ]);
    ToggleButton.Instance._OnIsCheckedChanged = function (e) {
        var isChecked = e.NewValue;
        this.$UpdateVisualState();
        if (isChecked === true) {
            this.Checked.Raise(this, new EventArgs());
        } else if (isChecked === false) {
            this.Unchecked.Raise(this, new EventArgs());
        } else {
            this.Indeterminate.Raise(this, new EventArgs());
        }
    };
    ToggleButton.Instance.OnApplyTemplate = function () {
        this.OnApplyTemplate$ButtonBase();
        this.$UpdateVisualState(false);
    };
    ToggleButton.Instance.OnClick = function () {
        this._OnToggle();
        this.OnClick$ButtonBase();
    };
    ToggleButton.Instance._OnToggle = function () {
        var isChecked = this.IsChecked;
        if (isChecked === true) {
            this.IsChecked = this.IsThreeState ? null : false;
        } else {
            this.IsChecked = isChecked != null;
        }
    };
    ToggleButton.Instance.OnContentChanged = function (oldContent, newContent) {
        this.OnContentChanged$ButtonBase(oldContent, newContent);
        this.$UpdateVisualState();
    };
    ToggleButton.Instance.$UpdateVisualState = function (useTransitions) {
        useTransitions = useTransitions !== false;
        this.$UpdateVisualState$ButtonBase(useTransitions);
        var isChecked = this.IsChecked;
        var vsm = Fayde.Media.VisualStateManager.VisualStateManager;
        if (isChecked === true) {
            vsm.GoToState(this, "Checked", useTransitions);
        } else if (isChecked === false) {
            vsm.GoToState(this, "Unchecked", useTransitions);
        } else {
            if (!vsm.GoToState(this, "Indeterminate", useTransitions)) {
                vsm.GoToState(this, "Unchecked", useTransitions)
            }
        }
    };
    namespace.ToggleButton = Nullstone.FinishCreate(ToggleButton);
})(Nullstone.Namespace("Fayde.Controls.Primitives"));

(function (namespace) {
    var Button = Nullstone.Create("Button", namespace.Primitives.ButtonBase);
    Button.Instance.Init = function () {
        this.Init$ButtonBase();
        this.DefaultStyleKey = this.constructor;
    };
    Button.Instance.OnApplyTemplate = function () {
        this.OnApplyTemplate$ButtonBase();
        this.$UpdateVisualState(false);
    };
    Button.Instance.OnIsEnabledChanged = function (e) {
        this.OnIsEnabledChanged$ButtonBase(e);
        this.IsTabStop = e.NewValue;
    };
    namespace.Button = Nullstone.FinishCreate(Button);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var CheckBox = Nullstone.Create("CheckBox", namespace.Primitives.ToggleButton);
    CheckBox.Instance.Init = function () {
        this.Init$ToggleButton();
        this.DefaultStyleKey = this.constructor;
    };
    namespace.CheckBox = Nullstone.FinishCreate(CheckBox);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var ComboBoxItem = Nullstone.Create("ComboBoxItem", namespace.ListBoxItem);
    ComboBoxItem.Instance.Init = function () {
        this.Init$ListBoxItem();
        this.DefaultStyleKey = this.constructor;
    };
    ComboBoxItem.Instance.OnMouseLeftButtonUp = function (sender, e) {
        this.OnMouseLeftButtonUp$ListBoxItem(sender, e);
        if (this._ParentSelector instanceof namespace.ComboBox)
            this._ParentSelector.IsDropDownOpen = false;
    };
    namespace.ComboBoxItem = Nullstone.FinishCreate(ComboBoxItem);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var HyperlinkButton = Nullstone.Create("HyperlinkButton", namespace.Primitives.ButtonBase);
    HyperlinkButton.NavigateUriProperty = DependencyProperty.Register("NavigateUri", function () { return Uri; }, HyperlinkButton);
    HyperlinkButton.TargetNameProperty = DependencyProperty.Register("TargetName", function () { return String; }, HyperlinkButton);
    Nullstone.AutoProperties(HyperlinkButton, [
        HyperlinkButton.NavigateUriProperty,
        HyperlinkButton.TargetNameProperty
    ]);
    HyperlinkButton.Instance.Init = function () {
        this.Init$ButtonBase();
        this.DefaultStyleKey = this.constructor;
    };
    HyperlinkButton.Instance.OnApplyTemplate = function () {
        this.OnApplyTemplate$ButtonBase();
        this.$UpdateVisualState(false);
    };
    HyperlinkButton.Instance.OnClick = function () {
        this.OnClick$ButtonBase();
        if (this.NavigateUri != null) {
            this._Navigate();
        }
    };
    HyperlinkButton.Instance._GetAbsoluteUri = function () {
        var destination = this.NavigateUri;
        if (!destination.IsAbsoluteUri) {
            var original = destination.OriginalString;
            if (original && original.charAt(0) !== '/')
                throw new NotSupportedException();
            destination = new Uri(App.Instance.GetHost().GetSource(), destination);
        }
        return destination;
    };
    HyperlinkButton.Instance._Navigate = function () {
        var targetName = this.TargetName;
        if (targetName == null) {
            window.location.href = this.NavigateUri.toString();
            return;
        }
        var frame = Nullstone.As(this.FindName(targetName), namespace.Frame);
        if (frame != null) {
            window.location.href = this.NavigateUri.toString();
            return;
        }
        window.open(this.NavigateUri.toString(), targetName);
    };
    namespace.HyperlinkButton = Nullstone.FinishCreate(HyperlinkButton);
})(Nullstone.Namespace("Fayde.Controls"));

(function (namespace) {
    var RadioButton = Nullstone.Create("RadioButton", namespace.Primitives.ToggleButton);
    RadioButton.Instance.Init = function () {
        this.Init$ToggleButton();
        RadioButton.Register("", this);
        this.DefaultStyleKey = this.constructor;
    };
    RadioButton.GroupNameProperty = DependencyProperty.RegisterReadOnly("GroupName", function () { return RadioButton; }, RadioButton, false, function (d, args) { d.OnGroupNameChanged(args); });
    Nullstone.AutoProperties(RadioButton, [
        RadioButton.GroupNameProperty
    ]);
    RadioButton.Instance.OnGroupNameChanged = function (e) {
        RadioButton.Unregister(e.OldValue, this);
        RadioButton.Register(e.NewValue, this);
    };
    RadioButton._GroupNameToElements = [];
    RadioButton.Register = function (groupName, radioButton) {
        if (!groupName) groupName = "";
        var list = RadioButton._GroupNameToElements[groupName];
        if (!list) {
            list = [];
            RadioButton._GroupNameToElements[groupName] = list;
        }
        list.push(radioButton);
    };
    RadioButton.Unregister = function (groupName, radioButton) {
        if (!groupName) groupName = "";
        var list = RadioButton._GroupNameToElements[groupName];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                if (Nullstone.RefEquals(radioButton, list[i])) {
                    list.splice(i, 1);
                    break;
                }
            }
        }
    };
    RadioButton.Instance._OnIsCheckedChanged = function (e) {
        if (e.NewValue === true) {
            this.UpdateRadioButtonGroup();
        }
        this._OnIsCheckedChanged$ToggleButton(e);
    };
    RadioButton.Instance._OnToggle = function () {
        this.IsChecked = true;
    };
    RadioButton.Instance.UpdateRadioButtonGroup = function () {
        var groupName = this.GroupName;
        if (!groupName) groupName = "";
        if (groupName) {
            var visualRoot = this.GetVisualRoot();
            var elements = RadioButton._GroupNameToElements[groupName];
            if (elements) {
                for (var i = 0; i < elements.length; i++) {
                    if (!Nullstone.RefEquals(elements[i], this) &&
                    elements[i].IsChecked &&
                    Nullstone.RefEquals(visualRoot, elements[i].GetVisualRoot())) {
                        elements[i].IsChecked = false;
                    }
                }
            }
        } else {
            var elements = RadioButton._GroupNameToElements[groupName];
            var visualParent = this.GetVisualParent();
            if (elements) {
                for (var i = 0; i < elements.length; i++) {
                    if (!Nullstone.RefEquals(elements[i], this) &&
                    elements[i].IsChecked &&
                    Nullstone.RefEquals(visualParent, elements[i].GetVisualParent())) {
                        elements[i].IsChecked = false;
                    }
                }
            }
        }
    };
    namespace.RadioButton = Nullstone.FinishCreate(RadioButton);
})(Nullstone.Namespace("Fayde.Controls"));

