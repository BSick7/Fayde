/// <reference path="../lib/qunit/qunit.d.ts" />
/// <reference path="../lib/Fayde/Fayde.d.ts" />

export function run() {
    QUnit.module("Format Tests");

    function ft(format: string, num: number, expected: string) {
        strictEqual(StringEx.Format(format, num), expected);
    }

    test("Currency", () => {
        ft("{0:c}", 123.456, "$123.46");
        ft("{0:C}", 123.456, "$123.46");

        ft("{0:c3}", 123.456, "$123.456");
        ft("{0:C3}", 123.456, "$123.456");

        ft("{0:c3}", -123.456, "($123.456)");
        ft("{0:C3}", -123.456, "($123.456)");
    });
    test("Decimal", () => {
        ft("{0:d}", 1234, "1234");
        ft("{0:D}", 1234, "1234");

        ft("{0:d}", -1234, "-1234");
        ft("{0:D}", -1234, "-1234");

        ft("{0:d6}", -1234, "-001234");
        ft("{0:D6}", -1234, "-001234");
    });
    test("Exponential", () => {
        ft("{0:e}", 1052.0329112756, "1.052033e+003");
        ft("{0:E}", 1052.0329112756, "1.052033E+003");
        
        ft("{0:e}", -1052.0329112756, "-1.052033e+003");
        ft("{0:E}", -1052.0329112756, "-1.052033E+003");

        ft("{0:e2}", -1052.0329112756, "-1.05e+003");
        ft("{0:E2}", -1052.0329112756, "-1.05E+003");
    });
    test("Fixed-point", () => {
        ft("{0:f}", 1234.567, "1234.57");
        ft("{0:F}", 1234.567, "1234.57");
        
        ft("{0:f1}", 1234, "1234.0");
        ft("{0:F1}", 1234, "1234.0");

        ft("{0:f4}", -1234.56, "-1234.5600");
        ft("{0:F4}", -1234.56, "-1234.5600");
    });
    test("General", () => {
        ft("{0:g}", -123.456, "-123.456");
        ft("{0:G}", -123.456, "-123.456");

        ft("{0:g4}", 123.4546, "123.5");
        ft("{0:G4}", 123.4546, "123.5");
    });
    test("Number", () => {
        ft("{0:n}", 1234.567, "1,234.57");
        ft("{0:N}", 1234.567, "1,234.57");

        ft("{0:n1}", 1234, "1,234.0");
        ft("{0:N1}", 1234, "1,234.0");
        
        ft("{0:n3}", -1234.56, "-1,234.560");
        ft("{0:N3}", -1234.56, "-1,234.560");
    });
    test("Percent", () => {
        ft("{0:p}", 1, "100.00%");
        ft("{0:P}", 1, "100.00%");
        
        ft("{0:p0}", 0.39678, "40%");
        ft("{0:P0}", 0.39678, "40%");
        
        ft("{0:p1}", -0.39678, "-39.7%");
        ft("{0:P1}", -0.39678, "-39.7%");
    });
    test("Round-trip", () => {
        //not implemented
    });
    test("Hexadecimal", () => {
        ft("{0:x}", -1, "ff");
        ft("{0:X}", 255, "FF");

        ft("{0:x4}", 255, "00ff");
        ft("{0:X4}", -1, "00FF");
    });
} 