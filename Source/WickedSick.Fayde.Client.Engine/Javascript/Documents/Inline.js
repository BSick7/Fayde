/// <reference path="../Runtime/Nullstone.js" />
/// <reference path="TextElement.js"/>
/// CODE

(function (namespace) {
    var Inline = Nullstone.Create("Inline", namespace.TextElement);

    Inline.Instance.Init = function () {
        this.Init$TextElement();
        this._Autogen = false;
    };

    Inline.Instance.Equals = function (inline) {
        /// <returns type="Boolean" />
        if (this.FontFamily !== inline.FontFamily)
            return false;
        if (this.FontSize() !== inline.FontSize)
            return false;
        if (this.FontStyle() !== inline.FontStyle)
            return false;
        if (this.FontWeight() !== inline.FontWeight)
            return false;
        if (this.FontStretch() !== inline.FontStretch)
            return false;
        if (this.TextDecorations !== inline.TextDecorations)
            return false;
        if (!Nullstone.Equals(this.Foreground, inline.Foreground))
            return false;
        return true;
    };

    Inline.Instance._GetAutogenerated = function () {
        /// <returns type="Boolean" />
        return this._Autogen;
    };
    Inline.Instance._SetAutogenerated = function (value) {
        /// <param name="value" type="Boolean"></param>
        this._Autogen = value;
    };

    namespace.Inline = Nullstone.FinishCreate(Inline);
})(Nullstone.Namespace("Fayde.Documents"));

(function (namespace) {
    var InlineCollection = Nullstone.Create("InlineCollection", namespace.TextElementCollection);

    InlineCollection.Instance.AddedToCollection = function (value, error) {
        if (this._ForHyperlink) {
            if (false) { //TODO: if (!this._IsValueSupportedInHyperlinkn(value)) {
                error.SetErrored(BError.Argument, "Invalid value in Hyperlink");
                return false;
            }
        }
        return this.AddedToCollection$TextElementCollection(value, error);
    };
    InlineCollection.Instance.Equals = function (inlines) {
        NotImplemented("InlineCollection.Equals");
    };
    InlineCollection.Instance.IsElementType = function (value) {
        return value instanceof namespace.Inline;
    };
    InlineCollection.Instance._SetIsForHyperlink = function () { this._ForHyperlink = true; };

    namespace.InlineCollection = Nullstone.FinishCreate(InlineCollection);
})(Nullstone.Namespace("Fayde.Documents"));